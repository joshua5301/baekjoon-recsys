[{"problemId":"30020","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t승현이가 일하는 햄버거 가게에는 요리 재료로 사용할 햄버거 패티가 A$A$개, 슬라이스 치즈가 B$B$개 있다. 치즈버거를 만들기 위해서는 패티와 치즈를 각각 한 개 이상 고른 후 햄버거 빵 사이에 패티와 치즈를 번갈아 쌓아야 한다. 단, 패티의 개수는 치즈의 개수보다 정확히 한 개 더 많이 골라야 한다.\n\n승현이는 치즈버거를 몇 개 만들어서 가게의 요리 재료를 모두 사용하려고 한다. 패티와 치즈를 모두 사용하려면 치즈버거를 각각 어떻게 만들어야 하는지 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30021","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t준원이는 정수 1,2,⋯,N$1,2,\\cdots ,N$을 가지고 있다. 준원이는 자신이 가지고 있는 정수를 하루에 하나씩 N$N$일에 걸쳐서 현석이에게 선물해 주려고 한다. 그런데, 현석이는 소수를 싫어하기 때문에 현석이가 지금까지 선물 받은 수의 합이 소수가 되는 날이 없도록 해야 한다.\n\n준원이가 현석이를 만족시키면서 정수 1,2,⋯,N$1,2,\\cdots ,N$을 선물하려면 어떤 순서로 선물해야 하는지 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30060","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tJonas mėgsta žaisti su spalvotais kubeliais. Štai ir dabar dėliodamas N$N$ kubelių vieną ant kito jis pastatė bokštą. Deja, Jonui bokštas nepatinka – jis norėtų taip perstatyti bokštą, kad jame neliktų ilgų vienspalvių kubelių sekų.\n\nNorėdamas tą pasiekti, Jonas iš bokšto pašalins visas maksimalias vienspalves besiliečiančių kubelių sekas iš ≥K$≥ K$ kubelių.\n\nPavyzdžiui, turint bokštą:\n\n\n\nir K=3$K = 3$, Jonas pašalintų ilgą žalių kubelių seką. Taip gautų naują bokštą:\n\n\n\nJei bokšte yra kelios šalinamos sekos, jos visos pašalinamos vienu metu.\n\nPerstačius bokštą jame vėl gali susidaryti ilgų tos pačios spalvos kubelių sekų. Tokiu atveju Jonas ir vėl randa visas ilgas vienspalvių kubelių sekas ir perstato bokštą be jų.\n\nŠiame bokšte raudonų kubelių seka yra ilgio K=3$K = 3$, todėl Jonas vėl perstato bokštą:\n\n\n\nAkivaizdu, kad kartais toks perstatymo procesas gali būti kartojamas gan ilgai. Padėkite Jonui surasti, kaip atrodytų bokštas po visų perstatymų.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30080","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tSaulėtoje kalno pusėje savo namus turi N$N$ hobitų. Kiekvienas hobitas gyvena vienas savo atskirame namuke. Hobitai būna arba herbivorai („H“), t. y. valgantys tik vaisius ir daržoves, arba omnivorai („O“), t. y. valgantys viską.\n\nPriešpiečiams hobitai nori užsisakyti savo mėgstamų užkandžių iš maisto pristatymo traukinuko. Traukinuką sudaro 8$8$ maisto vagonėliai, galintys vienu metu atvežti maisto į aštuonis greta vienas kito esančius hobitų namukus (t. y. hobaitą). Norint užtikrinti efektyvų šio traukinuko darbą, reikia laikytis šių reikalavimų:\n\n\n\tUžsakinėjant maistą kiekvienam iš 8$8$ vagonėlių reikia nurodyti, kokią virtuvę – herbivorų ar omnivorų – tas vagonėlis turėtų tiekti.\n\tTraukinukas važiuos palei kalną tol, kol visi vagonėliai atsidurs ties tinkamos rūšies dar neaptarnautų hobitų namukais, ir visus aštuonis namukus aptarnaus vienu metu. Tada traukinukas tęs kelionę toliau, iki kol vėl atsidurs tinkamoje padėtyje, aptarnaus kitą hobaitą, ir taip toliau. Pastaba: nors omnivorai ir yra visavalgiai, tačiau jie nesutinka valgyti herbivorams skirto maisto.\n\tTraukinukas negali apvažiuoti kalno ratu: pravažiavęs paskutinį namuką jis važiuoja ilsėtis į garažą ir toliau maistą pristatinės tik kitą dieną. Per dieną priimamas tik vienas užsakymas.\n\n\nRaskite, kiek daugiausiai hobitų galima pamaitinti vienu užsakymu, ir koks tas užsakymas turėtų būti.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30000","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t2010년에 개설된 Baekjoon Online Judge는 지난 14년간 많은 문제를 추가하였다. 2024년 2월 29일 30000번 문제가 추가되었고 이를 기념하여 와파스는 바이트 페스티벌을 개최하게 된다.\n\n여러분은 단순히 정수 N$N$을 입력받으면 festivalN.out 파일의 내용을 그대로 출력하면 된다. 단, 소스코드 길이는 30,000 바이트를 넘지 않아야 한다.\n\n파일은 이 링크에서 볼 수 있으며 festival0.out부터 festival9.out까지의 10개의 파일이 담겨있다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30061","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAnt lentos užrašytas teigiamas sveikasis skaičius N$N$. Reikia perstatyti jo skaitmenis tokia tvarka, kad gautas skaičius M$M$ būtų dalus iš kuo didesnio dvejeto laipsnio.\n\nNei pradinis, nei naujas skaičius negali prasidėti nuliu.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30081","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t K$K$-kojis voriukas visada dėvi K$K$ vienodos rūšies kojinių. Kojines voriukas skalbia skalbimo mašinoje ir vienu skalbimu jis skalbia tik vienos rūšies kojines. Deja, po kiekvieno skalbimo, jis pameta dalį skalbtų kojinių.\n\nPadėkite voriukui suskaičiuoti, kiek švarių kojinių komplektų (vieną komplektą sudaro K$K$ tos pačios rūšies kojinių) jis turės po kiekvieno skalbimo.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30100","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t경곽 마을은 N$N$개의 호텔과 N−1$N-1$개의 길로 이루어져 있다. 하나의 길은 서로 다른 두 호텔을 연결하며, 임의의 서로 다른 두 호텔을 길만 사용하여 오갈 수 있다. 즉, 경곽 마을은 트리 구조를 이룬다. 서로 다른 두 호텔 사이의 거리는 한 호텔에서 다른 호텔로 가기까지 지나야 할 길의 개수의 최솟값으로 정의된다.\n\n어느 날, K$K$명의 경기과고 학생이 경곽 마을로 수학여행을 왔다. 경기과고 학생들은 서로 사이가 좋지 않기 때문에, 수학여행의 총책임자 성호는 K$K$명의 학생을 서로 다른 호텔에 배정하고자 한다. 또 학생들을 최대한 멀리 떨어뜨려 놓기 위해, 학생들에게 배정된 K$K$개의 호텔 중 서로 다른 두 호텔을 선택하는 모든 방법에 대한 두 호텔 사이의 거리의 총합을 최대화하고자 한다.\n\n구체적으로, d(i,j)$d(i, j)$를 i$i$번 학생과 j$j$번 학생에게 배정된 호텔 사이의 거리라 할 때, ∑i=1K−1∑j=i+1Kd(i,j)$\\sum_{i=1}^{K-1}\\sum_{j=i+1}^{K}d(i, j)$를 최대화해야 한다. 성호를 도와 이 값의 최댓값을 구해 주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30022","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t동하와 지원이는 ANA 행사를 준비하고 있다. 행사를 위해 N$N$종류의 물건이 한 개씩 필요하기 때문에 동하가 A$A$개를, 지원이가 B$B$개를 나눠서 준비하기로 했다.\n\n근처에 있는 상점 1, 2에서 N$N$종류의 물건을 모두 판매하고 있다. 같은 물건이라도 상점에서 판매하는 가격이 다를 수 있기 때문에 동하는 상점 1에서, 지원이는 상점 2에서 물건을 구입하려고 한다. 상점 1에서는 각각의 물건을 p1,p2,⋯,pN$p_1,p_2,\\cdots ,p_N$원에 판매하고, 상점 2에서는 q1,q2,⋯,qN$q_1,q_2,\\cdots ,q_N$원에 판매한다.\n\n동하가 상점 1에서 A$A$개의 물건을, 지원이가 상점 2에서 B$B$개의 물건을 구입해서 N$N$종류의 물건을 모두 구매하는 데 필요한 최소 비용을 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30062","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tKarosas Rosas plaukioja tvenkinių sistemoje, sudarytoje iš N$N$ tvenkinių. Kai kurie iš tvenkinių yra sujungti, taigi galima perplaukti iš vieno į kitą. Tačiau juos skiria tam tikro aukščio pertvara, kurią žymėsime hi,j$h_{i,j}$ (be abejo, hi,j=hj,i$h_{i,j} = h_{j,i}$). Karosai gali perplaukti iš tvenkinio i$i$ į tvenkinį j$j$ tik tuomet, kai vandens lygis tvenkinyje i$i$ yra nemažesnis nei hi,j$h_{i,j}$.\n\nPavyzdžiui, yra trys tvenkiniai (N=3$N = 3$), pirmas ir antras tvenkiniai yra sujungti pertvara, kurios aukštis h1,2=5000$h_{1,2} = 5\\,000$, o antras ir trečias – pertvara, kurios aukštis h2,3=7000$h_{2,3} = 7\\,000$. Karosai galės perplaukti iš pirmo tvenkinio į antrą, jeigu vandens lygis pirmame (taigi ir antrame) tvenkinyje sieks bent 5000$5\\,000$. Tačiau, jie galėtų perplaukti iš pirmo į trečią tvenkinį, tik jei vandens lygis sieks 7000$7\\,000$.\n\n\n\nKarosai gali perplaukti iš pirmojo į antrąjį tvenkinį, bet ne į trečiąjį.\n\nKarosas Rosas yra apsistojęs 1$1$-ame tvenkinyje, o jo draugas – tvenkinyje nr. N$N$. Rosui rūpi, koks turi būti vandens lygis 1$1$-ame tvenkinyje, kad jis galėtų aplankyti savo draugą.\n\nDuota tvenkinių konfigūracija. Raskite, kiek mažiausiai turi būti pakeltas vandens lygis 1$1$-ame tvenkinyje, kad iš jo būtų įmanoma pasiekti N$N$-tąjį tvenkinį.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30040","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t다음 2022년 3월 기준 수도권 지하철 노선도 정보 (PDF)에 의존하여 문제를 해결하라. 이 문제에서는 Seoul Metro의 1호선부터 9호선까지 총 아홉 개의 지하철 호선만 고려한다.\n\n지하철을 타고 한 역을 가는 데에 Tst$T_\\text{st}$, 한 번 환승하는 데 Tc$T_\\text{c}$의 시간이 걸린다고 하자. 이 문제에서 환승이란, “현재 타고 있는 지하철 호선을 바꾸는 것”을 의미하며, 지하철을 타고 내릴 때 걸리는 시간은 무시한다.\n\n예를 들어, Tst=10$T_\\text{st}=10$, Tc=1$T_\\text{c}=1$일 때, 역 Sangwangsimni에서 역 Jongno 5(o)ga로 가는 최소 시간은 4Tst+2Tc=42$4T_\\text{st}+2T_\\text{c}=42$다. (역 Sindang과 역 Dongmyo에서 환승하라.) 만약, Tst=1$T_\\text{st}=1$, Tc=10$T_\\text{c}=10$이라면, 최소 시간은 9Tst+Tc=19$9T_\\text{st}+T_\\text{c}=19$가 된다. (역 City Hall에서 환승하라.)\n\n K$K$ 개의 역 S1,⋯,SK$S_1,\\cdots ,S_K$에서 환승할 수 없을 때, 지하철만을 이용하여 역 A$A$에서 역 B$B$로 이동하는 데에 걸리는 최소 시간을 구하라. 여러분은 이를 Q$Q$ 개의 쿼리에 대해 독립적으로 해결해야 한다.\n\n지하철역의 이름 표기는 이 텍스트 파일을 기준으로 한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30001","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tOleg on osalenud mitmes spordivõistluste sarjas. Igas sarjas on võistlused järjest nummerdatud, näiteks \"36. Kükametsa Tõukekelgumaraton\".\n\nIgal võistlusel antakse igale osalejale medal. Igale medalile on kirjutatud võistluse järjenumber oma sarjas, aga muus osas on medalid identsed.\n\nOleg on osalenud paljudel võistlustel ning tal on suur kotitäis medaleid. Tuvastada vähim võimalik erinevate sarjade arv, millelt ta need medalid saada võis.\n\nOn teada, et kui Oleg mingis sarjas osalema hakkab, käib ta järjest kõigil selle sarja võistlustel, ühtki vahele jätmata. Seega, kui ta käib näiteks 36. ja 38. Kükametsa Tõukekelgumaratonil, osaleb ta kindlasti ka 37. Kükametsa Tõukekelgumaratonil.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30082","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tLinas turi N$N$ draugų, o tarp jų –– M$M$ artimų draugų. Nemažai iš Lino draugų tarpusavyje yra taip pat pažįstami.\n\nLinas, iš anksto besiruošdamas Šv. Velykoms, nori nupiešti po atvirutę kiekvienam iš savo artimų draugų. Tačiau Linas žino, kad jei kuris nors draugas gaus nupieštą atvirutę, tai visi kiti draugai, kurie jį pažįsta, jam pavydės, jei patys negaus atvirutės.\n\n„Geriau jau piešti, negu pavydėti“, galvoja Linas. Tad jis norėtų nupiešti tiek atviručių, kad:\n\n\n\tvisi Lino artimi draugai gautų po atvirutę,\n\tnei vienas draugas nepavydėtų kitam.\n\n\nPavyzdžiui, tarkime, kad Linas turi tris draugus — Domą, Tomą ir Vytautą, bet tik Domas yra jo artimas draugas. Jeigu Tomas ir Domas pažįstami, tai Linas norės nupiešti atvirutę ir Tomui. Jei Tomas ir Vytautas taip pat pažįstami, tuomet Linas ir Vytautui nupieš atvirutę, kad jis nepavydėtų Tomui.\n\nJums žinomi Lino draugai, jo artimi draugai, o taip pat, kurie iš draugų pažįsta vieni kitus. Raskite, kiek iš viso atviručių turės nupiešti Linas, kad visi jo artimi draugai gautų po atvirutę, ir nei vienas draugas nepavydėtų kitam.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30023","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t N$N$개의 전구가 일렬로 세워져 빛나고 있다. 각각의 전구는 빨간색, 초록색, 파란색 중 하나의 색으로 빛나고 있다. 지원이는 N$N$개의 전구 중 연속한 세 전구를 선택한 후에 그 전구들의 상태를 바꿀 수 있다. 전구의 상태를 바꾼다는 것은 빨간색으로 빛나는 전구는 초록색으로, 초록색으로 빛나는 전구는 파란색으로, 파란색으로 빛나는 전구는 빨간색으로 빛나게 바꾼다는 것이다.\n\n연속한 세 전구의 상태를 바꾸는 과정을 통해 모든 전구가 같은 색으로 빛나게 하려면 이 과정을 최소 몇 번 수행해야 하는지 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30101","content":"문제\n\nGSHS국가의 수도는 \nN\n$N$개의 빌딩으로 이루어져 있다. 빌딩은 일렬로 놓여 있으며, 왼쪽에서부터 \n1,2,⋯,N\n$1, 2, \\cdots, N$까지 번호가 붙어 있다. \ni\n$i$번 빌딩의 높이는 \nHi\n$H_i$이다. 당신은 각 빌딩의 높이가 서로 다르다는 것을 알고 있다. 각 빌딩의 옥상에는 금고가 있다. \ni\n$i$번 빌딩의 금고에는 총 \nCi\n$C_i$원의 돈을 포함하고 있다. \nHi\n$H_i$와 \nCi\n$C_i$는 모두 양의 정수이다.\n\n당신은 수도의 금고들을 털어 돈을 버는 금고 털이이다. 금고 털이는 다음과 같은 규칙으로 이루어진다. 당신은 임의의 빌딩의 옥상에서 시작하여, 하나 이상의 빌딩을 오가며 빌딩의 금고를 털 것이다. 또한, 금고 털이를 마친 이후에는 \nE\n$E$번 빌딩의 옥상으로 당신의 조력자가 헬리콥터를 타고 당신이 수도를 빠져나가는 것을 도와줄 것이다. 따라서 당신이 마지막으로 도착해야 하는 빌딩은 \nE\n$E$번 빌딩이다. 또한, 안전상의 이유로 다음과 같은 규칙을 지켜야 한다.\n\n한 빌딩에서 다른 빌딩으로 이동할 때에는 이동하려는 빌딩이 원래 빌딩의 옥상에서 보여야 한다. 빌딩 \ni\n$i$에서 빌딩 \nj\n$j$가 보인다는 것은 빌딩 \ni\n$i$와 \nj\n$j$ 사이(빌딩 \ni\n$i$, \nj\n$j$ 포함)의 모든 빌딩의 높이가 빌딩 \nj\n$j$의 높이보다 같거나 작다는 것이다. 그렇지 않다면 다른 빌딩에 가려져 보이지 않게 된다.\n너무 많은 빌딩의 금고를 털면 발각될 위험이 있으므로, 이동 과정에서 연속하게 방문한 두 빌딩의 금고는 최대 하나만 털 수 있다.\n모든 방문한 빌딩에 대해, 각 빌딩 \ni\n$i$에서 얻은 수익은 금고를 털었을 경우 \nCi\n$C_i$, 그렇지 않은 경우는 0이다. 금고 털이의 총 수익은 방문한 모든 빌딩에 대한 수익의 합이다.\n\n당신은 각 빌딩의 높이 \nHi\n$H_i$, 각 빌딩의 금고의 가치 \nCi\n$C_i$를 모두 조사했다. 빌딩의 높이는 확실하지만, 각 빌딩의 금고의 가치는 불확실할 수도 있어서 값이 바뀔 수 있다. 또한, 조력자가 도착할 빌딩의 번호 또한 바뀔 수 있다. 정보가 \nQ\n$Q$번 새로 갱신될 때마다, 주어진 조건에 맞게 금고를 털어서 벌 수 있는 가능한 수익의 최댓값을 구해 보자."},{"problemId":"30063","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tNorėdami atšvęsti Lietuvos informatikos olimpiadų trisdešimtmetį, Vertinimo komisijos nariai sugalvojo sau pramogą: pabėgimo kambarį. Pabėgimo kambarys – tai seka užuominų, kurių kiekviena yra pažymėta didžiąja lotyniška raide.\n\nUžuominos yra atskleidžiamos po vieną, nuo pirmos iki paskutinės pateikta tvarka. Komisijos nariai iš kambario ištrūkti gali tuomet, kai iš surinktų užuominų pavyksta sudaryti žodį RAKTAS.\n\nĮsivaizduokime pabėgimo kambarį, kurio užuominų seka yra tokia:\n\nRAUDONASNYKSTUKAS\n\nIš šio pabėgimo kambario komisija gali ištrūkti įveikusi 13$13$ užuominų:\n\nRAUDONASNYKSTUKAS\n\nKeturios paskutinės užuominos (pažymėtos pilkai) nėra būtinos, nes žodį RAKTAS pavyks sudaryti iš jau surinktų užuominų (raidės pabrauktos).\n\nParašykite programą, kuri rastų, kiek mažiausiai užuominų reikia atskleisti norint ištrūkti iš pabėgimo kambario.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30083","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tŽiemos laikotarpiu svarbu pasirūpinti, kad organizmas gautų pakankamai vitaminų. Adomas, tą suprasdamas, užėjo į vaistinę „Vitaminų Pasaulis“. Ši vaistinė parduoda įvairiausias multivitaminų tabletes. Kadangi nesaikingai vartojant vitaminus galima pakenkti, vaistinė vienam pirkėjui parduoda ne daugiau kaip vieną tos pačios rūšies tabletę.\n\nAdomą labiausiai domina vitaminas C, kuris stiprina imunitetą, ir vitaminas D, kuris labai svarbus kaulams ir dantims. Tačiau parduotuvė turi tiek daug įvairių tablečių, kad Adomas pasimetė.\n\nŽinoma koks kiekis vitamino C ir vitamino D yra kiekvienoje tabletėje, bei nurodyta kiekvienos tabletės kaina. Raskite, kiek mažiausiai turės sumokėti Adomas, kad įsigytų bent C$C$ miligramų vitamino C ir bent D$D$ miligramų vitamino D.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30002","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tJoonistame alloleval joonisel näidatud murdjoont, liikudes igal sammul ühe ruuduvahe võrra.\n\n\n\nKui alustame sammul 0$0$ ruudul koordinaatidega (1;1)$(1;1)$, siis millisel ruudul oleme sammul N$N$?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30024","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t옥수수밭 주인 민석이는 한 해 동안 열심히 기른 옥수수를 수확하려고 한다. 옥수수밭은 N$N$행 M$M$열의 격자로 생각할 수 있는데, 격자의 각 칸에는 한 그루의 옥수수가 심어져 있다. 민석이는 각 옥수수의 가치를 측정해서 서로 다른 정수 1,2,⋯,N×M$1,2,\\cdots ,N\\times M$을 부여했다.\n\n\n\n민석이는 처음에 옥수수밭 바깥에 위치한다. 민석이는 옥수수밭 바깥을 돌아다니면서 옥수수밭 바깥과 인접한 칸의 옥수수를 수확할 수 있다. 또는 옥수수밭 안에서 옥수수를 수확한 칸으로만 돌아다니면서 현재 위치한 칸에서 상하좌우로 인접한 칸의 옥수수를 수확할 수 있다.\n\n그런데, 민석이는 옥수수의 생산량 조절을 위해서 K$K$그루의 옥수수만 수확하려고 한다. 민석이는 현재 수확할 수 있는 옥수수 중에서 가장 가치가 높은 옥수수를 수확하는 과정을 K$K$번 반복한다. 민석이가 수확하는 옥수수의 위치를 순서대로 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30041","content":"문제\n\n종이에 \nN\n$N$ 개의 정육면체 전개도가 그려져 있다. 각 주사위의 한 변의 길이는 \n5\n$5$이며, \n3×3\n$3 \\times 3$ 크기의 각 면에는 1부터 9까지의 숫자가 적혀있다.\n\n다음은 가능한 정육면체 전개도 중 하나다.\n\n....+---+........\n....|333|........\n....|333|........\n....|333|........\n+---+---+---+---+\n|111|222|656|876|\n|111|222|565|947|\n|111|222|656|798|\n+---+---+---+---+\n........|847|....\n........|596|....\n........|785|....\n........+---+....\n\n\n전개도를 접을 때에는 항상 인쇄된 면이 바깥에 오도록 한다. 즉, 위의 전개도를 접으면, 숫자 \n1\n$1$, \n2\n$2$, \n3\n$3$이 적혀있는 면이 차례대로 반시계 방향을 이루게 된다.\n\n종이에 인쇄된 전개도를 모두 오린 후 접어, 정육면체의 큐브를 만들자.\n\n각 큐브의 가치는 다음과 같이 결정된다:\n\n한 면에 대해, 그 면에 적혀있는 숫자의 제곱의 합을 \nS\n$S$라고 하자. 또한, 그 면에 적혀있는 숫자를 배열하여 얻을 수 있는 (십진법으로) 가장 큰 수를 \nL\n$L$이라고 하자. 그 면의 숫자의 가치는 \nLmod(S+15)\n$L\\mod(S+15)$이다. 큐브 숫자의 가치는 여섯 면의 숫자의 가치 중 가장 큰 수와, 두 번째로 작은 수와, 가장 작은 수의 합이다.\n한 면에 대해, 그 면 위에 놓인 아홉 개의 칸들 중, 적혀있는 숫자 값의 차이가 \n3\n$3$ 이하면서 서로 한 변을 공유하는 칸 쌍의 개수에 \n1\n$1$을 더한 값을 그 면의 이웃의 가치라고 하자. 큐브 이웃의 가치는 여섯 면의 이웃의 가치의 곱이다.\n다섯 개의 숫자의 시너지 가치란, \"각 숫자를 정확하게 한 번씩 사용하여 만들 수 있는 수면서 동시에 수열 \nA\n$A$의 어떤 원소 \nAi\n$A_i$ \n(1≤i≤K)\n$(1\\le i\\le K)$의 약수기도 한 수\"들의 집합을 \nS\n$S$라고 할 때, \nS\n$S$의 크기의 제곱과 \nS\n$S$의 모든 원소의 합을 더한 것이다. 여기서, 수열 \nA\n$A$는 입력에서 주어진다. \n3×3\n$3\\times 3$ 격자판에서 상하좌우 네 방향으로 연결되어 있도록 다섯 개의 칸을 선택하는 방법은 총 \n49\n$49$ 가지가 있다. 한 면에 대해, 그 면에서 연결된 다섯 개의 칸을 고르고, 고른 칸에 적힌 다섯 개의 숫자의 시너지 가치를 모두 계산하면, 총 \n49\n$49$ 개의 수를 얻을 것이다. 한 면의 T1의 가치는 이 \n49\n$49$ 개의 시너지 가치의 최댓값과 최솟값과 중앙값의 합이다. 큐브 T1의 가치는 여섯 면 중 하나의 공통된 꼭짓점을 공유하는 세 면을 잡아, 그 세 면의 T1의 가치의 합 중 최댓값이다.\n한 면에 대해, 그 면의 지뢰찾기의 가치는 \n8\n$8$방향으로 인접한 “숫자 칸의 개수”와 “그 숫자들의 합을 \n9\n$9$로 나눈 나머지”의 차이가 \n4\n$4$ 이하인 그 면 내부의 칸의 개수다. 큐브 지뢰찾기의 가치는 각 \n12\n$12$ 개의 모서리에 대해, 그 모서리를 가지는 두 면의 지뢰찾기의 가치의 곱의 합이다.\n한 면에 대해, 그 면의 체스의 가치는 그 면을 \n3×3\n$3\\times 3$의 빈 체스판으로 생각할 때, 서로 공격하지 않도록 짝수가 적힌 칸에 비숍을 놓을 때 가능한 비숍의 최대 개수다. 큐브 체스의 가치는 여섯 면의 체스의 가치의 합이다.\n큐브의 가치는 큐브 숫자의 가치, 큐브 이웃의 가치, 큐브 T1의 가치, 큐브 지뢰찾기의 가치, 그리고 큐브 체스의 가치의 합을 \n20010610\n$20\\, 010\\, 610$으로 나눈 나머지다.\n\n여러분은 큐브의 가치를 최대화하기 위하여 큐브를 섞을 수 있다. 큐브를 섞는다는 것은, 큐브의 한 바깥층을 잡고, 그 층을 \n90\n$90$도, \n180\n$180$도, \n270\n$270$도 중 한 각도로 회전시킴을 뜻한다. (큐브에는 총 \n6\n$6$ 개의 바깥층이 있고, 회전 각도는 세 가지이므로, 큐브를 섞는 방법은 총 \n6×3=18\n$6\\times 3=18$ 가지가 있다.) 단, 하나의 큐브에 대해 최대 한 번까지만 섞을 수 있다.\n\n또한, 큐브를 너무 많이 섞게 되면 그만큼 손목이 아플 수 있다. 여러분은 총 \nP\n$P$ 번까지만 큐브를 섞을 수 있다.\n\n큐브를 섞어 얻을 수 있는 \nN\n$N$ 개의 큐브의 가치의 합의 최댓값을 구하라. 여러분은 이 값을 각 \nP=0,1,2,⋯,N\n$P=0,1,2,\\cdots ,N$에 대해 독립적으로 계산해야 한다."},{"problemId":"30102","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t정후는 평소에 지하철을 자주 이용합니다. 지하철 노선도에는 지하철역 N$N$ 개가 M$M$ 개의 철로로 연결되어 있습니다. i$i$ 번째 철로는 ui$u_i$ 번째 지하철역과 vi$v_i$ 번째 지하철역을 양방향으로 연결하며, 이 철로를 이용하면 두 지하철역 사이를 이동하는 데 wi$w_i$의 시간이 걸립니다.\n\n어느 날, 정후는 한 지하철역에서 치즈버거를 먹은 뒤 치즈버거를 아주 좋아하게 된 나머지, a1,a2,⋯,aK$a_1, a_2, \\cdots, a_K$  번째 지하철역에 치즈버거 체인점을 냈습니다. 이제 치즈를 수송해 오는 일만 남았습니다.\n\n정후는 치즈를 수송하기 위해 주변 치즈 농장을 찾아보았고, T$T$ 개의 치즈 농장이 b1,b2,⋯,bT$b_1, b_2, \\cdots, b_T$ 번째 지하철역 근처에 있다는 것을 알아내었습니다. bi$b_i$ 번째 지하철역 근처에 있는 치즈 농장의 치즈 가격은 ci$c_i$입니다. 정후는 각 체인점에 KTX특송을 이용해 치즈를 전달할 것입니다. KTX특송을 이용할 때 걸리는 시간은 지하철역 사이를 이동하는 데 걸리는 시간과 같습니다.\n\n각 농장은 배송 시간이 가장 짧은 하나 이상의 체인점에 치즈를 공급할 수 있습니다. 각 체인점에서는 공급될 수 있는 치즈 중 가장 싼 치즈를 구매합니다. 각 체인점이 구매하는 치즈의 가격은 얼마가 되겠습니까?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30064","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMuzikos mylėtojai renkasi į koncertą. Iš viso koncertų salėje yra N$N$ sėdimų vietų ir jos visos išpirktos. Kiekvienas klausytojas turi po bilietą su pažymėta vieta. Laikysime, kad klausytojo numeris yra X$X$, jeigu jis turi bilietą su pažymėta vieta X$X$. Taigi pirmasis klausytojas turėtų sėdėti vietoje 1$1$, antrasis – vietoje 2$2$, ir taip toliau.\n\nTačiau atėję į koncertų salę klausytojai susėdo nežiūrėdami į paskirtas vietas.\n\nPaskutinysis vėluodamas atbėgo pats didžiausias muzikos mylėtojas nr. 1$1$, kuris turėjo sėdėti vietoje 1$1$. Kadangi tai pati geriausia vieta, jeigu ji bus užimta, jis paprašys ten sėdinčio klausytojo ją atlaisvinti. Tokiu atveju, šis klausytojas susigėdęs eis į sau paskirtą vietą (klausytojas X$X$ eis į vietą X$X$), o jeigu ji bus užimta – paprašys ją atlaisvinti. Šitaip persėdimas tęsis tol, kol galų gale visi klausytojai vėl susės.\n\nJums žinoma, kur yra atsisėdęs kiekvienas muzikos mylėtojas bei kuri viena vieta yra laisva prieš pasirodant klausytojui nr. $14, Raskite, kiek iš viso klausytojų turės persėsti.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30084","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tTurime dvi detales, sudarytas iš mažų kubelių. Abi detalės yra 1$1$ kubelio pločio ir 2$2$ kubelių aukščio. Pirmosios detalės viršutinioji eilė ir antrosios detalės apatinioji eilė yra pilnai užpildytos, pavyzdžiui:\n\n\n\nKeliais būdais šias detales galima pastatyti vieną ant kitos taip, kad detalės liestųsi ir bendras aukštis būtų ne daugiau kaip 3$3$?\n\nDetalių negalima vartyti ir sukioti, ir bent vienas antros detalės kubelis turi būti po pirma detale.\n\nPaveiksliuke matome pavyzdį, kur viršutinę detalę galime tiesiai nuleisti ant apatinės, taip gaudami galimą konfigūraciją.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30025","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t준혁이는 0$0$부터 9$9$까지의 숫자 중에서 서로 다른 숫자를 N$N$개 골랐다. 준혁이가 고른 숫자만으로 이루어진 M$M$자리의 양의 정수 중에서 K$K$의 배수는 몇 개인지 구해보자. 단, M$M$자리의 양의 정수는 숫자 0$0$으로 시작할 수 없으며, 조건을 만족하는 양의 정수가 매우 많을 수 있기 때문에 그 개수를 1000000007(=109+7)$1\\, 000\\, 000\\, 007(=10^9+7)$로 나눈 나머지를 구한다. 이 수는 소수이다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30103","content":"문제\n\n \nZ998244353\n$Z_{998244353}$에서 정의되는 \nn×n\n$n \\times n$ 크기의 두 가역행렬 \nA\n$A$, \nB\n$B$의 친화도는 다음 조건에 맞는 \ni\n$i$ (\n1≤i≤n\n$1 \\le i \\le n$)의 개수이다.\n\n \nA\n$A$의 \ni\n$i$번째 열, \nB\n$B$의 \ni\n$i$번째 열을 맞바꾸었을 때, \nA\n$A$와 \nB\n$B$가 모두 가역행렬이다.\n\n즉, 친화도는 \n0\n$0$ 이상 \nn\n$n$ 이하의 정수이다.\n\n행렬 \nAi\n$A_i$를 행렬 \nAi−1\n$A_{i-1}$의 제일 왼쪽 열을 제일 오른쪽으로 옮긴 행렬로 정의하자. 이때 \nA0=A\n$A_0 = A$이다.\n\n \n0\n$0$이상 \nN\n$N$ 미만의 정수 \ni\n$i$에 대하여, \nAi\n$A_i$와 \nB\n$B$의 친화도를 구하자."},{"problemId":"30085","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIlgu koridoriumi eina N$N$ labai mandagių žmonių. Koridoriuje yra įrengtos dviejų tipų durys:\n\n\n\t„A“ tipo durys: atidaromos traukiant. Priėjus tokias duris, pirmasis žmogus mandagiai praleidžia visus kitus iš eilės, ir tampa paskutinis. Visų kitų žmonių tvarka eilėje tarpusavyje nepasikeičia.\n\t„B“ tipo durys: atidaromos stumiant. Priėjus tokias duris, pirmasis žmogus mandagiai praleidžia antrąjį, antrasis – trečiąjį ir taip toliau. Taigi perėjus „B“ tipo duris, visa eilė „apsivečia“: paskutinis ėjęs dabar tampa pirmasis, o pirmas – paskutinis.\n\n\nMandagieji žmonės iš pradžių yra sunumeruoti nuo 1$1$ iki N$N$. Jums duota seka durų, kurias jie turi praeiti. Raskite, kokia tvarka bus išsidėstę žmonės perėję pro visas duris.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30003","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tComputers are playing a game to become a millionaire. Each computer is given 1 euro to begin with and gets 20 questions. If a question contains a palindromic subsequence of 4 or more characters, the amount of money is doubled and then the length of the longest palindromic subsequence is added to it, otherwise the amount of money remains the same.\n\nA palindrome is a string that remains the same when reversed, for example \"anna\". Palindromes can be formed by joining neighboring words, for example \"\\ldots and name \\ldots\" contains the palindromic subsequence \"andna\". Palindromes may also wrap from the end of the question to the beginning, for example \"Jane went walking with Jelena\" contains the palindromic subsequence \"enajane\" and \"Matti is I ttam\" contains the palindromic subsequence \"ittammatti\".\n\nWhen looking for palindromes, comparison of letters should be case-insensitive. Spaces and line breaks should be ignored, but other punctuation does matter.\n\nWrite a program that reads the list of questions and outputs the final amount of money.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30065","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tInformatikas Bitukas turi smalsių draugų, todėl su užjūrio draugu Brituku susirašinėja šifruodamas savo žinutes. Tam jis naudoja Cezario šifrą, kurį nors ir nėra sunku nulaužti, tačiau smalsiems draugams užšifruotos žinutės atrodo kaip atsitiktinė simbolių seka.\n\nCezario šifras veikia taip: susirašinėjimo dalyviai apsikeičia raktu K$K$ (1≤K≤25$1 ≤ K ≤ 25$), tuomet kiekviena raidė yra pakeičiama į jos K$K$-tąją kaimynę pagal lotyniškąją abėcėlę. Likę simboliai paliekami tokie patys. Abėcėlė apsisuka: Z pirmoji kaimynė yra A, o z pirmoji kaimynė — a.\n\nPasižiūrėkime, kaip Bitukas užšifruotų žinutę Kaip_gyveni? su raktu K=7$K = 7$:\n\n\n\nNorėdamas žinutes šifruoti greičiau, Bitukas sukonstravo Bituko Šifravimo Mašiną (BŠM). Bitukas į BŠM įveda pradinę žinutę, tuomet paleidžia mašiną ir ši pradeda šifruoti žinutę po vieną simbolį nuo pradžios iki galo.\n\nVieną vakarą Bitukas šifravo labai ilgą laišką Britukui, mat norėjo papasakoti apie savo studijas. Tačiau, BŠM netikėtai užstrigo ir užšifravo tik dalį žinutės. Bitukas nepasimetė: paleido mašiną iš naujo ir šį kartą mašina žinutę užšifravo sėkmingai! Tik neapsižiūrėjęs jis išsiuntė Britukui abi žinutes...\n\nBritukui tą vakarą irgi nesisekė: jis pamiršo abiejų sutartą raktą.\n\nJūsų užduotis – parašyti programą, kuri perskaičiusi abi Brituko gautas žinutes iššifruotų Bituko siųstą žinutę.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30042","content":"문제\n\n \nN\n$N$ 개의 함수 상자가 있다. 각 함수 상자에는 \n0\n$0$부터 \nN−1\n$N-1$까지 번호가 부여되어 있다. 함수 상자 \ni\n$i$는 \nAi\n$A_i$ 개의 입력 단자와 \nBi\n$B_i$ 개의 출력 단자를 가진다. 각 단자에는 \n0\n$0$부터 차례대로 번호가 부여되어 있다.\n\n기본적으로 함수 상자는 다음과 같이 직사각형 형태로 생겼다. 함수 상자의 둘레는 문자 -, |, +로 표현되고, 내부에는 번호를 의미하는 하나의 수가 적혀있다. 각 함수 상자의 내부에는 수가 정확하게 하나 적혀 있으며, 이 수의 숫자는 모두 하나의 행에 연속해 있다.\n\n...........\n.+-------+.\n.|.......|.\n.|..610..|.\n.|.......|.\n.+-------+.\n...........\n\n\n위의 경우에는 입력 단자와 출력 단자가 없다. 입력 단자와 출력 단자는 문자 >, ^, <, v로 표시한다. 문자의 좁은 쪽 방향이 함수 상자를 가리키면 입력 단자를, 함수 상자를 등지고 있으면 출력 단자를 나타낸다. 함수 상자의 꼭짓점에 단자가 있는 경우는 없다. 즉, 함수 상자의 네 꼭짓점을 나타내는 문자는 항상 +다.\n\n예를 들어, 함수 상자 \n3\n$3$이 \nA3=7\n$A_3=7$ 개의 입력 단자, \nB3=3\n$B_3=3$ 개의 출력 단자를 가진다면, 다음과 같이 나타낼 수 있다.\n\n...........\n.+-vv-^--+.\n.<.....3.<.\n.>.......|.\n.|.......>.\n.+-^---^^+.\n...........\n\n\n단자의 번호는 다음과 같이 알아낼 수 있다. 함수 상자의 왼쪽 위 꼭짓점에서 시작하여 시계 방향으로 둘레를 따라가면서 만나는 입력 단자와 출력 단자 각각에 \n0\n$0$부터 차례대로 수를 부여하자. 이 수가 그 단자의 번호이다. 예를 들어, 위의 경우, 함수 상자 \n3\n$3$의 입력 단자 \n3\n$3$와 출력 단자 \n2\n$2$를 나타내는 문자는 각각 ^, <이다.\n\n입력 단자와 출력 단자는 하나의 선으로 이어줄 수 있다. 선은 다음과 같이 교차하거나 중간에 갈라지고 합쳐지지 않는 닫힌 선의 형태를 가지며, 문자 -, |, +로 표현된다.\n\n........\n..+--+..\n..+-+|..\n.+--+|..\n.|...+-.\n........\n\n\n함수 상자 \na\n$a$의 출력 단자를 함수 상자 \nb\n$b$의 입력 단자에 연결했다면, \na<b\n$a<b$임이 보장된다. 또한, 어떤 두 단자가 연결되어 있다면, 그 둘 중 하나는 입력 단자, 다른 하나는 출력 단자임이 보장된다.\n\n예를 들어, 다음 그림에는 네 개의 함수 상자가 있고, 모든 선의 연결 상태를 표현하면 이러하다.\n\n............\n.+v+........\n.<0>+...+-+.\n.+^+|+-->.<.\n....++.+<1>.\n...+--+|+-+.\n...|..++....\n...|........\n.+-v^-+.....\n.|....|+v+..\n.<.2..>>3|..\n.+-v--+|.>..\n.......+^+..\n............\n\n함수 상자 \n0\n$0$의 출력 단자 \n0\n$0$을 함수 상자 \n1\n$1$의 입력 단자 \n1\n$1$에 연결.\n함수 상자 \n1\n$1$의 출력 단자 \n1\n$1$을 함수 상자 \n2\n$2$의 입력 단자 \n0\n$0$에 연결.\n함수 상자 \n2\n$2$의 출력 단자 \n1\n$1$을 함수 상자 \n3\n$3$의 입력 단자 \n2\n$2$에 연결.\n\n예시에서 마지막 연결의 표현 방법을 유의하라. 선끼리, 혹은 함수 상자끼리는 서로 교차하거나 영역을 공유하지 않는다.\n\n그림에서 문자 +는 모호하게 사용되지 않는다. 엄밀하게 말하자면, 함수 상자의 모서리에 놓이지 않은 각 문자 +에 대해 다음 조건 중 적어도 하나를 만족하는 문자가 정확하게 두 개다.\n\n상하좌우로 인접한 +.\n상하로 인접한 |, v, ^.\n좌우로 인접한 -, >, <.\n\n모든 함수 상자의 입력과 출력은 문자열이다. 함수 상자 \ni\n$i$의 입력 단자 \nj\n$j$에 주어지는 문자열이 \nINi,j\n$\\text{IN}_{i,j}$라고 하자. 입력 단자에 어떠한 단자도 연결되어 있지 않다면, 빈 문자열이 주어진다고 생각한다. 먼저, 다음 과정을 통해 중간 문자열 \nPROCi\n$\\text{PROC}_i$를 만든다. 이 과정은 길이 \nCi\n$C_i$의 수열 \nDi,0,Di,1,⋯,Di,Ci−1\n$D_{i,0},D_{i,1},\\cdots ,D_{i,C_i-1}$에 의존한다.\n\n초기에 문자열 \nPROCi\n$\\text{PROC}_i$는 빈 문자열이다.\n각 \nj=0,1,⋯,Ci−1\n$j=0,1,\\cdots ,C_i-1$에 대해 차례대로 다음을 수행한다:\n만약 문자열 \nINi,Di,j\n$\\text{IN}_{i,D_{i,j}}$가 비어있다면, 과정 2.로 넘어간다.\n문자열 \nINi,Di,j\n$\\text{IN}_{i,D_{i,j}}$의 가장 앞 문자 \nc\n$c$를 뽑는다. 이 문자열의 길이는 \n1\n$1$ 줄어든다.\n문자열 \nPROCi\n$\\text{PROC}_i$의 끝에 문자 \nc\n$c$를 추가한다. 이 문자열의 길이는 \n1\n$1$ 늘어난다.\n과정 2.를 충분히 많이 반복한다. 문자열 \nPROCi\n$\\text{PROC}_i$가 수렴하면 과정을 종료한다.\n\n출력 또한 길이 \nEi\n$E_i$의 수열 \nFi,0,Fi,1,⋯,Fi,Ei−1\n$F_{i,0},F_{i,1},\\cdots ,F_{i,E_i-1}$에 의존한다. 출력 단자 \nj\n$j$에 출력할 문자열 \nOUTi,j\n$\\text{OUT}_{i,j}$는 다음과 같이 결정된다.\n\n초기에 각 문자열 \nOUTi,j\n$\\text{OUT}_{i,j}$는 빈 문자열이다.\n각 \nj=0,1,⋯,Ei−1\n$j=0,1,\\cdots ,E_i-1$에 대해 차례대로 다음을 수행한다:\n만약 문자열 \nPROCi\n$\\text{PROC}_i$가 비어있다면, 과정을 종료한다.\n문자열 \nPROCi\n$\\text{PROC}_i$의 가장 앞 문자 \nc\n$c$를 뽑는다. 이 문자열의 길이는 \n1\n$1$ 줄어든다.\n문자열 \nOUTi,Fi,j\n$\\text{OUT}_{i,F_{i,j}}$의 끝에 문자 \nc\n$c$를 추가한다. 이 문자열의 길이는 \n1\n$1$ 늘어난다.\n과정 2.를 충분히 많이 반복한다. 문자열 \nPROCi\n$\\text{PROC}_i$가 빈 문자열이 되면, 종료한다.\n\n예외적으로, 함수 상자 \n0\n$0$의 출력은 다음과 같이 결정한다. 먼저, 알파벳으로 이루어진 \nK\n$K$ 개의 문자열 \nS0,S1,⋯,SK−1\n$S_0,S_1,\\cdots ,S_{K-1}$을 잡는다. 단, 문자열 \nSi\n$S_i$에서 정수 \n0≤n≤i−1\n$0\\le n\\le i-1$에 대해, “( \nn\n$n$ )”의 표현을 사용할 수 있다. 이는 이 부분을 문자열 \nSn\n$S_n$으로 대치하라는 뜻이다.\n\n예를 들어, \nS0\n$S_0$, \nS1\n$S_1$, \nS2\n$S_2$가 다음과 같이 주어졌다고 하자.\n\n \nS0=\n$S_0=$ “Good”\n \nS1=\n$S_1=$ “(0)Day(0)Night”\n \nS2=\n$S_2=$ “Hello(1)(0)ByeGood”\n\n각 문자열이 실제로 의미하는 값은 아래와 같다.\n\n \nactual(S0)=\n$\\text{actual}\\left( S_0 \\right) =$ “Good”\n \nactual(S1)=\n$\\text{actual}\\left( S_1 \\right) =$ “GoodDayGoodNight”\n \nactual(S2)=\n$\\text{actual}\\left( S_2 \\right) =$ “HelloGoodDayGoodNightGoodByeGood”\n\n함수 상자 \n0\n$0$의 출력 단자 \ni\n$i$에 출력되는 문자열은 \nactual(SGi)\n$\\text{actual}\\left( S_{G_i} \\right)$와 같다.\n\n이제, \nQ\n$Q$ 개의 쿼리가 주어진다. \ni\n$i$ 번째 쿼리에서 여러분은 함수 상자 \nYi\n$Y_i$의 출력 단자 \nOi\n$O_i$에서 출력되는 문자열 \nOUTYi,Oi\n$\\text{OUT}_{Y_i,O_i}$의 \nPi\n$P_i$ 번째 문자를 알아내야 한다."},{"problemId":"30066","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMartynas nusipirko išmaniąsias svarstykles ir nori sukurti programėlę savo svoriui sekti. Tačiau svarstyklėmis naudosis ne jis vienas – kartais pasinaudos svečiai, draugai, arba ant svarstyklių gali netyčia užlipti ir jo katinas.\n\nMartynas sugalvojo algoritmą, kaip sekti, kiek skirtingų klientų naudojasi svarstyklėmis. Iš pradžių, svarstyklėmis nesinaudoja nei vienas klientas. Kai yra naujas matavimas, jis priskiriamas klientui pagal tokias taisykles:\n\n\n\tJei matavimas nuo visų esamų klientų paskutinio svorio matavimo skiriasi daugiau negu D$D$ gramų, tai laikoma, kad sveriasi naujas klientas ir jis yra užregistruojamas.\n\tPriešingu atveju, matavimas priskiriamas tam klientui, kurio paskutinis svorio matavimas yra artimiausias šiam matavimui.\n\tJei yra keli klientai, kuriems tinka sąlyga (2), matavimas priskiriamas tam klientui, kurio paskutinis svorio matavimas yra mažesnis.\n\n\nPavyzdžiui, tarkime, jog svarstyklės užregistravo tokius matavimus iš eilės:\n\n\n\t 75000$75000$ gramų: Martynas pasisvėrė ryte.\n\t 75500$75500$ gramų: Martynas pasisvėrė vakare.\n\t 3000$3000$ gramų: Pasisvėrė katinas.\n\t 78500$78500$ gramų: Martyno draugas išbandė svarstykles.\n\t 2950$2950$ gramų: Ant svarstyklių vėl užlipo katinas.\n\t 77000$77000$ gramų: Vėl pasisvėrė Martynas (pavalgęs).\n\n\nSu parametru D=1500$D = 1500$, Martyno algoritmas sugebėtų teisingai atskirti, jog svartyklėmis iš viso naudojosi trys klientai:\n\n\n\nJums duota N$N$ svorio matavimų, kuriuos užregistravo išmaniosios svarstyklės, ir parametras D$D$. Pagal Martyno sugalvotą algoritmą suskaičiuokite, kiek skirtingų klientų (žmonių, katinų, pelių...) iš viso pasinaudojo svarstyklėmis.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30086","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tValstybei priklauso 2×N$2 \\times N$ salų (sunumeruotų nuo 1$1$ iki 2N$2N$), kurias jungia M$M$ tiltų. Siekiant pritraukti daugiau turistų, buvo nuspręsta išrinkti svarbiausiąjį tiltą ir jį kasnakt apšviesti vis kitomis spalvomis.\n\nBuvo pateiktas pasiūlymas, kad svarbiausiasis miesto tiltas turėtų būti tas, kurį uždarius valstybė taptų padalinta į du regionus, turinčius vienodą skaičių salų (t. y. lygiai po N$N$), ir nebūtų įmanoma sausuma nuvykti iš vieno regiono į kitą.\n\nDuoti N$N$, M$M$ bei salų sujungimo tiltais schema. Raskite svarbiausiąjį tiltą.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30104","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t정후와 함께 MJH 스크립트를 배웁시다.\n\n<MJH 스크립트의 명세>\n\n\n\t프로그램은 a부터 z까지의 로마자 소문자 이름을 가지고 있는 26개의 변수를 이용합니다.\n\t각 변수의 초깃값은 0입니다.\n\t프로그램은 하나 이상의 줄로 이루어집니다.\n\t한 줄은 하나의 명령어로 이루어지며, 줄 바꿈으로 끝납니다.\n\t가장 위의 줄인 첫째 줄부터 실행하여, 마지막 줄의 다음 줄로 이동한 경우 프로그램을 종료합니다.\n\t명령어는 다음 중 하나입니다.\n\t\n\t\t<lvalue> = <rvalue_1> + <rvalue_2> + ... + <rvalue_k>: 변수 <lvalue>에 <rvalue_1>부터 <rvalue_k>까지의 값을 더한 값을 1000000007$1\\,000\\,000\\,007$로 나눈 나머지를 대입한 후 다음 줄로 이동합니다. k$k$는 1 이상의 정수입니다. <lvalue>는 로마자 소문자로, 변수의 이름입니다.\n\t\tGOTO x: x$x$째 줄로 이동합니다. x$x$는 프로그램의 줄의 수보다 작거나 같은 양의 정수입니다. 다만, 전체 GOTO 명령어를 통틀어 GOTO 명령어에 P$P$ 번째로 진입한 경우에는 무한 루프로 판단하여 프로그램을 즉시 종료합니다.\n\t\tPRINT <rvalue_1> + <rvalue_2> + ... + <rvalue_k>: <rvalue_1>부터 <rvalue_k>까지의 값을 더한 값을 1000000007$1\\,000\\,000\\,007$로 나눈 나머지를 출력한 후 다음 줄로 이동합니다. k$k$는 1 이상의 정수입니다.\n\t\n\t\n\t<rvalue_i>는 다음 중 하나입니다.\n\t\n\t\t 1000000007$1\\,000\\,000\\,007$ 미만의 음이 아닌 정수로, 그 값을 나타냅니다.\n\t\t로마자 소문자로, 그 이름을 가진 변수의 값을 나타냅니다.\n\t\t 1000000007$1\\,000\\,000\\,007$ 미만, 2 이상의 정수 하나와 로마자 소문자 하나를 연달아 쓴 것으로, 정수와 그 이름을 가진 변수의 값을 곱한 값을 나타냅니다.\n\t\n\t\n\n\nMJH 스크립트를 이해했다는 것을 증명하기 위해, 주어진 프로그램을 실행해 봅시다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30026","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t차원문은 매우 편리한 교통수단이다. 차원문은 평범한 문처럼 생겼지만, 문을 열고 들어가면 다른 공간으로 이동할 수 있는 특별한 성질이 있다. 단, 반대 방향으로 차원문을 이용할 수는 없다. ANA 나라에는 N$N$개의 도시가 있다. 각각의 도시는 1,2,⋯,N$1,2,\\cdots ,N$번으로 번호가 매겨져 있다. 차원문을 다루는 차원술사 인수는 1,2,⋯,N$1,2,\\cdots ,N$번 도시로 이동할 수 있는 차원문을 만들고 각각의 차원문에 1,2,⋯,N$1,2,\\cdots ,N$번으로 번호를 매겼다. 그리고 이를 N$N$개의 도시에 하나씩 무작위로 설치했는데, i$i$번 도시에 설치한 차원문의 번호는 ai$a_i$번이고 이는 ai$a_i$번 도시로 향하는 차원문이다.\n\n그런데, 인수는 임의의 한 도시에서 차원문만을 이용해서 다른 모든 도시를 방문하는 것이 불가능할 수도 있다는 것을 알게 되었다. 그래서 인수는 임의의 서로 다른 두 도시를 선택한 후에 두 도시의 차원문을 서로 바꾸는 마법을 몇 번 사용해서 이를 해결하려고 한다. 인수가 마법을 사용하기 위해서는 마나가 필요한데, 서로 다른 두 도시의 차원문을 바꾸는 마법을 사용하려면 두 차원문의 번호 차의 제곱만큼 마나가 필요하다. 예를 들어, 1$1$번 도시에 설치된 차원문이 4$4$번 도시로 향하는 4$4$번 차원문이고, 4$4$번 도시의 차원문이 6$6$번 도시로 향하는 6$6$번 차원문이라면 두 도시의 차원문을 바꾸기 위해서는 (4−6)2=4$(4-6)^2=4$만큼의 마나가 필요하다.\n\n임의의 한 도시에서 차원문만을 이용해서 다른 모든 도시를 방문하는 것이 가능하게 만들기 위해 필요한 최소 마나를 구해보자. 그리고 어떻게 마법을 사용해야 하는지도 구해보자. 단, 마법을 사용하는 횟수가 최소일 필요는 없다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30067","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tSimas ir Jurgis žaidžia tokį žaidimą. Simas sugalvoja devynis sveikus skaičius, teigiamus ir neigiamus, pavyzdžiui: 5,4,−5,−3,9,1,2,5,−11$5, 4, -5, -3, 9, 1, 2, 5, -11$. Tuomet jis suskaičiuoja jų sumą 5+4+(−5)+(−3)+9+1+2+5+(−11)=7$5 + 4 + (-5) + (-3) + 9 + 1 + 2 + 5 + (-11) = 7$, ir paslėpia ją kažkur tarp šių skaičių. Taip gaunama iš viso dešimt skaičių:\n\n 5,4,−5,−3,9,1,7,2,5,−11$5, 4, -5, -3, 9, 1, 7, 2, 5, -11$ \n\nTuomet Simas šią seką parodo Jurgiui. Jurgio tikslas yra kuo greičiau surasti, kuris iš dešimties skaičių yra paslėptoji likusių skaičių suma.\n\nParašykite programą, kuri padėtų Jurgiui surasti paslėptąją sumą.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30004","content":"문제\n\nFor any positive integer \nn\n$n$, define \ns(n)\n$s(n)$ as the smallest positive integer \nm\n$m$, whose factorial\\footnote{The factorial of a positive integer \nm\n$m$ (denoted as \nm!\n$m!$) is the product of all integers from 1 to \nm\n$m$:\nm!:=1⋅2⋅3⋅…⋅m.\n$$ m! := 1\\cdot 2 \\cdot 3 \\cdot \\ldots \\cdot m. $$\nis divisible by \nn\n$n$.\n\nFor example,\n\t\n\t\n\t\n\t\n\t\n\t\ns(1)=1,s(2)=2,(because 1! (=1) is not divisible by 2, but 2! (=2) is)s(4)=4,(3! (=6) is not divisible by 4, but 4! (=24) is)s(6)=3,(3! (=6) is divisible by 6)s(9)=6,(6! (=720) is divisible by 9)s(10)=5,etc\n$$\\begin{align*} s(1) &= 1,\\\\ s(2) &= 2,\\quad \\text{(because $1!$ (=1) is not divisible by 2, but $2!$ (=2) is)}\\\\ s(4) &= 4,\\quad \\text{($3!$ (=6) is not divisible by 4, but $4!$ (=24) is)}\\\\ s(6) &= 3,\\quad \\text{($3!$ (=6) is divisible by 6)}\\\\ s(9) &= 6,\\quad \\text{($6!$ (=720) is divisible by 9)}\\\\ s(10) &= 5,\\quad \\text{etc}\\\\ \\end{align*}$$ \n\nThe task is, given two integers \nA\n$A$ and \nB\n$B$, to find the sum:\n\n \ns(A)+s(A+1)+…+s(B).\n$$s(A) + s(A+1) + \\ldots + s(B).$$ "},{"problemId":"30043","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBinding of Isaac은 로그라이크 슈팅 게임으로 무작위로 생성되는 던전 속에서 몬스터를 잡고 성장하며 보스를 잡는 게임이다. 한 번 던전을 생성하고, 생성한 던전을 클리어할 수 있는지 판별하는 프로그램을 작성해 보자.\n\n\n\t시드\n\t\n\t\t시드는 길이가 9$9$인 문자열이다. 5$5$번째 문자는 -이고 나머지 문자는 대문자 알파벳과 숫자로 총 36$36$가지의 문자로 구성되어 있다.\n\t\t 5$5$번째 문자를 제거한 뒤 앞 문자 4$4$개와 뒤 문자 4$4$개를 그대로 이어 붙인다. 이 문자열을 0$0$-9$9$, A$A$-Z$Z$ 순서로 36$36$진법으로 표현했을 때, 10$10$진법으로 변환한 값을 정수 S1$S_1$라 정의한다.\n\t\n\t\n\t난수 함수\n\t\n\t\trand()\n\t\t\n\t\t\t유사 난수 생성기 함수이며, 선형 합동 생성기를 활용한다.\n\t\t\trand() 함수를 i$i$번째로 호출하면 Sn+1=(aSn+c)modm$S_{n + 1} = (aS_n + c) \\bmod m$ 식에 따라 Si$S_i$를 반환한다.\n\t\t\t\n\t\t\t\t S1$S_1$은 위 시드 설명에서 정의했음에 유의하라. 만약 S1$S_1$이 m$m$보다 크면 S1$S_1$ 대신 S1$S_1$을 m$m$으로 나눈 나머지를 S1$S_1$로 재정의한다.\n\t\t\t\n\t\t\t\n\t\t\t이때 a=1103515245$a = 1\\,103\\,515\\,245$, c=12345$c = 12\\,345$, m=231$m = 2^{31}$이다.\n\t\t\n\t\t\n\t\trandInt(l$l$, r$r$)\n\t\t\n\t\t\t l$l$ 이상 r$r$ 이하의 임의의 정수 하나를 반환하는 함수이다.\n\t\t\trandInt(l$l$, r$r$)를 호출하면 l$l$에 rand()mod(r−l+1)$\\bmod (r - l + 1)$을 더한 값을 반환한다.\n\t\t\n\t\t\n\t\tchance(p$p$)\n\t\t\n\t\t\t p$p$% 확률로 True를 반환하는 함수이다.\n\t\t\tchance(p$p$)를 호출하면 randInt(1$1$, 100$100$) ≤p$\\le p$의 논리 연산 결과를 반환한다.\n\t\t\n\t\t\n\t\tchoice(arr$\\text{arr}$)\n\t\t\n\t\t\t배열 arr$\\text{arr}$에 있는 임의의 원소 하나를 반환하는 함수이다.\n\t\t\tchoice(arr$\\text{arr}$)을 호출하면 배열 arr$\\text{arr}$의 randInt(0$0$, arr$\\text{arr}$의 길이 − 1$-\\ 1$)번째 원소를 반환한다.\n\t\t\t\n\t\t\t\t원소가 N$N$개인 배열은 첫 번째 원소가 0$0$번째이고, 마지막 원소가 N−1$N - 1$번째 원소이다.\n\t\t\t\n\t\t\t\n\t\t\n\t\t\n\t\n\t\n\t던전 생성\n\t\n\t\t던전은 아래의 단계 순서대로 생성하며, rand() 호출 순서에 따라 결과가 달라질 수 있음에 유의하라.\n\t\t배열에서 원소를 제거할 때, 제거하지 않은 나머지 원소들의 순서는 유지된다.\n\t\t1단계\n\t\t\n\t\t\t던전에 활용할 방 개수 N$N$을 randInt(10$10$, 20$20$) 값으로 정의한다. 이 과정에서 rand() 함수는 R1$R_1$번 호출된다. (R1=1)$(R_1 = 1)$ \n\t\t\t던전 생성 1단계를 마쳤을 때, rand() 함수는 총 ∑i=11Ri$\\sum_{i=1}^{1}R_i$번 호출되었다.\n\t\t\n\t\t\n\t\t2단계\n\t\t\n\t\t\t크기가 9×9$9 \\times 9$이고 칸이 총 81$81$개인 격자 보드를 생성한다. 좌측 최상단의 좌표가 (0,0)$(0, 0)$이고 우측 최하단의 좌표가 (8,8)$(8, 8)$이다. (x,y)$(x, y)$는 x$x$행 y$y$열을 의미한다.\n\t\t\t2단계에서 생성된 방은 배열 room$\\text{room}$에 순서대로 넣는다.\n\t\t\t (4,4)$(4, 4)$ 위치에 시작방을 생성한다. (배열 room$\\text{room}$에도 시작방이 담긴다.)\n\t\t\t아래 과정을 총 N$N$개(시작방은 제외)의 방을 생성할 때까지 반복한다.\n\t\t\t\n\t\t\t\t큐 Q$Q$에 choice(room$\\text{room}$)의 값(방)을 넣는다.\n\t\t\t\t아래 과정을 큐 Q$Q$가 완전히 빌 때까지 반복한다.\n\t\t\t\t\n\t\t\t\t\t큐 Q$Q$에서 가장 먼저 넣었던 방을 꺼낸다.\n\t\t\t\t\t그 방의 좌표 중심으로 동남서북 순서로 인접한 칸에다 새로운 방 생성을 시도한다.\n\t\t\t\t\t\n\t\t\t\t\t\t N$N$개(시작방은 제외)의 방을 생성했다면 방 생성 시도를 중지한다.\n\t\t\t\t\t\t보고 있는 칸에 이미 방이 생성되어 있다면 방 생성에 실패한다.\n\t\t\t\t\t\t방을 생성할 칸에서 인접하는 칸 중 이미 생성된 방이 2$2$개 이상이라면 방 생성에 실패한다.\n\t\t\t\t\t\t위 2$2$개의 조건에서 실패하지 않았을 때, chance(50$50$)를 호출한 값이 False면 방 생성에 실패한다.\n\t\t\t\t\t\t위 3$3$개의 조건에서 실패하지 않았을 때, 방 생성에 성공하며 큐 Q$Q$에 방금 생성된 방을 넣는다. (배열 room$\\text{room}$에도 방금 생성된 방이 담긴다.)\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t배열 room$\\text{room}$에서 시작방을 제거한다.\n\t\t\t방 생성 과정에서 rand() 함수는 R2$R_2$번 호출된다.\n\t\t\t던전 생성 2단계를 마쳤을 때, rand() 함수는 총 ∑i=12Ri$\\sum_{i=1}^{2}R_i$번 호출되었다.\n\t\t\n\t\t\n\t\t3단계\n\t\t\n\t\t\t배열 special$\\text{special}$은 배열 room$\\text{room}$에서 인접한 방의 개수가 1$1$개인 방들을 생성된 순서대로 넣은 배열이다.\n\t\t\t일반방을 지정한다.\n\t\t\t\n\t\t\t\t배열 require$\\text{require}$은 0$0$이 10$10$개, 1$1$이 9$9$개, 2$2$가 8$8$개, ..., 8$8$이 2$2$개, 9$9$가 1$1$개가 순서대로 담긴 배열이다.\n\t\t\t\t배열 room$\\text{room}$에서 배열 special$\\text{special}$에 속하지 않은 방들을 생성된 순서대로 choice(require$\\text{require}$)의 요구 공격력을 가진 일반방으로 지정한다.\n\t\t\t\t이 과정에서 rand() 함수는 R3$R_3$번 호출된다. (R3=$(R_3 =$ 배열 room$\\text{room}$에서 배열 special$\\text{special}$에 속하지 않은 방 개수)$)$ \n\t\t\t\t일반방 지정을 마쳤을 때, rand() 함수는 총 ∑i=13Ri$\\sum_{i=1}^{3}R_i$번 호출되었다.\n\t\t\t\n\t\t\t\n\t\t\t보스방을 지정한다.\n\t\t\t\n\t\t\t\t배열 boss$\\text{boss}$는 배열 special$\\text{special}$에서 인접한 칸이 시작방이 아닌 방들이 생성된 순서대로 넣은 배열이다.\n\t\t\t\tchoice(boss$\\text{boss}$)을 보스방으로 지정한다.\n\t\t\t\t\n\t\t\t\t\t지정된 보스방을 배열 special$\\text{special}$에서 제거한다.\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이 과정에서 rand() 함수는 R4$R_4$번 호출된다. (R4=1)$(R_4 = 1)$ \n\t\t\t\t보스방 지정을 마쳤을 때, rand() 함수는 총 ∑i=14Ri$\\sum_{i=1}^{4}R_i$번 호출되었다.\n\t\t\t\n\t\t\t\n\t\t\t비밀방을 지정 시도한다.\n\t\t\t\n\t\t\t\t만약 배열 special$\\text{special}$가 비었다면 비밀방 지정 시도를 중지한다.\n\t\t\t\t비밀방은 항상 지정에 성공한다.\n\t\t\t\t지정에 성공했다면 choice(special$\\text{special}$)을 비밀방으로 지정한다.\n\t\t\t\t\n\t\t\t\t\t지정된 비밀방을 배열 special$\\text{special}$에서 제거한다.\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이 과정에서 rand() 함수는 R5$R_5$번 호출된다. ($($비밀방이 지정되었다면 R5=1$R_5 = 1$, 지정되지 않았다면 R5=0)$R_5 = 0)$ \n\t\t\t\t비밀방 지정 시도를 마쳤을 때, rand() 함수는 총 ∑i=15Ri$\\sum_{i=1}^{5}R_i$번 호출되었다.\n\t\t\t\n\t\t\t\n\t\t\t보물방을 지정 시도한다.\n\t\t\t\n\t\t\t\t만약 배열 special$\\text{special}$가 비었다면 보물방 지정 시도를 중지한다.\n\t\t\t\t보물방은 항상 지정에 성공한다.\n\t\t\t\t지정에 성공했다면 choice(special$\\text{special}$)을 보물방으로 지정한다.\n\t\t\t\t\n\t\t\t\t\t지정된 보물방을 배열 special$\\text{special}$에서 제거한다.\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이 과정에서 rand() 함수는 R6$R_6$번 호출된다. ($($보물방이 지정되었다면 R6=1$R_6 = 1$, 지정되지 않았다면 R6=0)$R_6 = 0)$ \n\t\t\t\t보물방 지정 시도를 마쳤을 때, rand() 함수는 총 ∑i=16Ri$\\sum_{i=1}^{6}R_i$번 호출되었다.\n\t\t\t\t N$N$이 15$15$ 이상이면 보물방을 한 번 더 지정 시도한다.\n\t\t\t\t\n\t\t\t\t\t만약 배열 special$\\text{special}$가 비었다면 보물방 추가 지정 시도를 중지한다.\n\t\t\t\t\tchance(25$25$)를 호출한 값이 False면 보물방 추가 지정에 실패하고, 그렇지 않으면 성공한다.\n\t\t\t\t\t지정에 성공했다면 choice(special$\\text{special}$)을 보물방으로 추가 지정한다.\n\t\t\t\t\t\n\t\t\t\t\t\t추가 지정된 보물방을 배열 special$\\text{special}$에서 제거한다.\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t이 과정에서 rand() 함수는 R7$R_7$번 호출된다. ($($보물방이 추가 지정되었다면 R7=2$R_7 = 2$, 추가 지정되지 않았다면 R7=1)$R_7 = 1)$ \n\t\t\t\t\t보물방 추가 지정 시도를 마쳤을 때, rand() 함수는 총 ∑i=17Ri$\\sum_{i=1}^{7}R_i$번 호출되었다.\n\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t상점방을 지정 시도한다.\n\t\t\t\n\t\t\t\t만약 배열 special$\\text{special}$가 비었다면 상점방 지정 시도를 중지한다.\n\t\t\t\t만약 N$N$이 15$15$ 이하라면 상점방 지정에 성공한다. 그렇지 않고 chance(66$66$)를 호출한 값이 True면 상점방 지정에 성공한다. 그렇지 않으면 실패한다.\n\t\t\t\t지정에 성공했다면 choice(special$\\text{special}$)을 상점방으로 지정한다.\n\t\t\t\t\n\t\t\t\t\t지정된 상점방을 배열 special$\\text{special}$에서 제거한다.\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이 과정에서 rand() 함수는 R8$R_8$번 호출된다. ($($N$N$이 15$15$ 이하라면 R8=1$R_8 = 1$, N$N$이 15$15$ 초과이고 상점방이 지정되었다면 R8=2$R_8 = 2$, N$N$이 15$15$ 초과이고 상점방이 지정되지 않았다면 R8=1)$R_8 = 1)$ \n\t\t\t\t상점방 지정 시도를 마쳤을 때, rand() 함수는 총 ∑i=18Ri$\\sum_{i=1}^{8}R_i$번 호출되었다.\n\t\t\t\n\t\t\t\n\t\t\t악마방 혹은 천사방을 생성 시도한다.\n\t\t\t\n\t\t\t\tchance(20$20$)를 호출한 값이 True면 악마방 혹은 천사방 생성 시도에 성공한다. 그렇지 않으면 실패한다.\n\t\t\t\t배열 reward$\\text{reward}$은 보스방에서 동서남북 순서대로 인접한 칸이 담긴 배열이다.\n\t\t\t\t배열 reward$\\text{reward}$에서 다음 조건 중 하나라도 만족하는 칸들을 제거한다.\n\t\t\t\t\n\t\t\t\t\t해당 칸 (xj,yj)$(x_j, y_j)$에 방이 이미 존재한다.\n\t\t\t\t\t생성된 모든 방 (xk,yk)$(x_k, y_k)$ 중 xk$x_k$의 최솟값을 xm$x_m$, xk$x_k$의 최댓값을 xM$x_M$, yk$y_k$의 최솟값을 ym$y_m$, yk$y_k$의 최댓값을 yM$y_M$라 할 때, xm≤xj≤xM$x_m \\le x_j \\le x_M$가 아니거나 ym≤yj≤yM$y_m \\le y_j \\le y_M$가 아니다.\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t생성 시도에 성공했다면 choice(reward$\\text{reward}$)에 방을 생성한다.\n\t\t\t\t\n\t\t\t\t\tchance(50$50$)를 호출한 값이 True면 악마방으로 지정한다. 그렇지 않으면 천사방으로 지정한다.\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이 과정에서 rand() 함수는 R9$R_9$번 호출된다. ($($악마방 혹은 천사방이 생성되었다면 R9=3$R_9 = 3$, 생성되지 않았다면 R9=1)$R_9 = 1)$ \n\t\t\t\t악마방 혹은 천사방 생성 시도를 마쳤을 때, rand() 함수는 총 ∑i=19Ri$\\sum_{i=1}^{9}R_i$번 호출되었다.\n\t\t\t\n\t\t\t\n\t\t\t희생방을 지정 시도한다.\n\t\t\t\n\t\t\t\t만약 배열 special$\\text{special}$가 비었다면 희생방 지정 시도를 중지한다.\n\t\t\t\t만약 생성된 방 중 천사방이 존재하면 희생방 지정에 성공한다. 그렇지 않고 chance(14$14$)를 호출한 값이 True면 희생방 지정에 성공한다. 그렇지 않으면 실패한다.\n\t\t\t\t지정에 성공했다면 choice(special$\\text{special}$)을 희생방으로 지정한다.\n\t\t\t\t\n\t\t\t\t\t지정된 희생방을 배열 special$\\text{special}$에서 제거한다.\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이 과정에서 rand() 함수는 R10$R_{10}$번 호출된다. ($($생성된 방 중 천사방이 존재하면 R10=1$R_{10} = 1$, 생성된 방 중 천사방이 존재하지 않고 희생방이 지정되었다면 R10=2$R_{10} = 2$, 생성된 방 중 천사방이 존재하지 않고 희생방이 지정되지 않았다면 R10=1)$R_{10} = 1)$ \n\t\t\t\t희생방 지정 시도를 마쳤을 때, rand() 함수는 총 ∑i=110Ri$\\sum_{i=1}^{10}R_i$번 호출되었다.\n\t\t\t\n\t\t\t\n\t\t\t저주방을 지정 시도한다.\n\t\t\t\n\t\t\t\t만약 배열 special$\\text{special}$가 비었다면 저주방 지정 시도를 중지한다.\n\t\t\t\t만약 생성된 방 중 악마방이 존재하지 않으면 저주방 지정에 실패한다.\n\t\t\t\t위 조건에서 실패하지 않았을 때, chance(50$50$)를 호출한 값이 True면 저주방 지정에 성공한다. 그렇지 않으면 실패한다.\n\t\t\t\t지정에 성공했다면 choice(special$\\text{special}$)을 저주방으로 지정한다.\n\t\t\t\t\n\t\t\t\t\t지정된 저주방을 배열 special$\\text{special}$에서 제거한다.\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이 과정에서 rand() 함수는 R11$R_{11}$번 호출된다. ($($생성된 방 중 악마방이 존재하지 않으면 R11=0$R_{11} = 0$, 생성된 방 중 악마방이 존재하고 저주방이 지정되었다면 R11=2$R_{11} = 2$, 생성된 방 중 악마방이 존재하고 저주방이 지정되지 않았다면 R11=1)$R_{11} = 1)$ \n\t\t\t\t저주방 지정 시도를 마쳤을 때, rand() 함수는 총 ∑i=111Ri$\\sum_{i=1}^{11}R_i$번 호출되었다.\n\t\t\t\n\t\t\t\n\t\t\t일반방을 추가 지정한다.\n\t\t\t\n\t\t\t\t만약 배열 special$\\text{special}$가 비었다면 일반방 추가 지정 시도를 중지한다.\n\t\t\t\t배열 special$\\text{special}$에 속한 방들을 생성된 순서대로 choice(require$\\text{require}$)의 요구 공격력을 가진 일반방으로 추가 지정한다.\n\t\t\t\t이 과정에서 rand() 함수는 R12$R_{12}$번 호출된다. (R12=$(R_{12} =$ 배열 special$\\text{special}$의 원소 개수)$)$ \n\t\t\t\t일반방 추가 지정을 마쳤을 때, rand() 함수는 총 ∑i=112Ri$\\sum_{i=1}^{12}R_i$번 호출되었다.\n\t\t\t\n\t\t\t\n\t\t\t던전 생성 3단계를 마쳤을 때, rand() 함수는 총 ∑i=112Ri$\\sum_{i=1}^{12}R_i$번 호출되었다.\n\t\t\n\t\t\n\t\n\t\n\t방 설명\n\t\n\t\t플레이어는 이동하려는 방이 비밀방, 천사방, 악마방이 아니면 자신이 있는 방에서 인접한 방으로 자유롭게 이동할 수 있다.\n\t\t시작방\n\t\t\n\t\t\t플레이어는 해당 방에서 게임을 시작하게 된다.\n\t\t\t게임 시작 시 상태는 아래와 같다.\n\t\t\t\n\t\t\t\t체력 : 6$6$ \n\t\t\t\t공격력 : 1$1$ \n\t\t\t\n\t\t\t\n\t\t\t게임 시작 시 아이템 상태는 아래와 같다.\n\t\t\t\n\t\t\t\t코인 : 0$0$개\n\t\t\t\t폭탄 : 3$3$개\n\t\t\t\t코인 개수와 폭탄 개수는 음의 정수가 될 수 없다.\n\t\t\t\n\t\t\t\n\t\t\n\t\t\n\t\t일반방\n\t\t\n\t\t\t일반방은 요구 공격력을 가진다.\n\t\t\t플레이어가 일반방을 처음 입장하면 반드시 몬스터와 전투를 치러야 한다\n\t\t\t전투 과정에서 플레이어의 공격력이 일반방의 요구 공격력보다 낮으면 체력이 1$1$ 감소한다.\n\t\t\t\n\t\t\t\t체력이 1$1$ 감소하는 대신, 폭탄 1$1$개를 소모하여 전투를 치를 수 있다.\n\t\t\t\n\t\t\t\n\t\t\t전투를 치른 뒤에 플레이어가 체력 1$1$ 이상이라면 코인 1$1$개를 획득한다.\n\t\t\t플레이어가 이미 방문했던 일반방을 다시 입장하면 아무 일도 일어나지 않는다.\n\t\t\n\t\t\n\t\t보스방\n\t\t\n\t\t\t플레이어가 보스방을 처음 입장하면 반드시 보스와 전투를 치러야 한다\n\t\t\t공격력이 10$10$ 이상이면 보스와의 전투에서 승리한다. 그렇지 않으면 체력이 0$0$이 된다.\n\t\t\n\t\t\n\t\t비밀방\n\t\t\n\t\t\t비밀방과 인접한 방에서 폭탄 1$1$개를 소모하여 입장할 수 있다.\n\t\t\t\n\t\t\t\t이전에 비밀방을 한 번 방문한 적이 있다면, 더 이상 폭탄을 소모하지 않고 방문할 수 있다.\n\t\t\t\n\t\t\t\n\t\t\t플레이어가 비밀방에 처음 입장하면 체력과 공격력이 2$2$ 상승하고, 코인 2$2$개를 획득한다.\n\t\t\n\t\t\n\t\t보물방\n\t\t\n\t\t\t플레이어가 보물방에 처음 입장하면 공격력이 1$1$ 상승한다.\n\t\t\n\t\t\n\t\t상점방\n\t\t\n\t\t\t코인 2$2$개당 아이템 1$1$개씩 구매할 수 있다.\n\t\t\t아이템은 두 종류가 있으며, 각각 무한정 구매할 수 있다.\n\t\t\t\n\t\t\t\t빨간 물약 : 체력이 1$1$ 상승한다.\n\t\t\t\t파란 물약 : 공격력이 1$1$ 상승한다.\n\t\t\t\n\t\t\t\n\t\t\n\t\t\n\t\t악마방 & 천사방\n\t\t\n\t\t\t이동할 수 없는 가상의 방으로, 게임 플레이에 영향을 주지 않는다.\n\t\t\n\t\t\n\t\t희생방\n\t\t\n\t\t\t플레이어가 희생방에 처음 입장하면 체력이 2$2$ 감소하고 공격력이 3$3$ 상승한다.\n\t\t\n\t\t\n\t\t저주방\n\t\t\n\t\t\t플레이어가 저주방에 처음 입장하면 공격력이 2$2$ 감소하고 코인 3$3$개와 폭탄 1$1$개를 획득한다.\n\t\t\n\t\t\n\t\n\t\n\t게임 진행\n\t\n\t\t플레이어가 체력이 0$0$ 이하가 된다면 그 즉시 게임에 패배하고 종료된다.\n\t\t플레이어가 보스와의 전투에서 승리하면 그 즉시 게임에 승리하고 종료된다.\n\t\n\t\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30027","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t유진이는 어렸을 적부터 자신만의 화원에서 꽃을 가꾸는 것을 꿈꿔왔다. 많은 세월이 지나고, 꿈을 이루기 위해 열심히 노력한 유진이는 마침내 자신만의 화원을 장만하게 되었다.\n\n유진이의 화원은 N$N$행 M$M$열의 격자로 생각할 수 있는데, 아직은 격자의 각 칸에 아무것도 심어져 있지 않다. 유진이는 격자에서 서로 다른 K$K$개의 칸을 골라서 꽃을 한 송이씩 심었다. 유진이가 심은 꽃은 영원히 시들지 않고, 하루가 지날 때마다 상하좌우로 인접한 칸에 추가로 꽃을 피운다.\n\n유진이는 화원이 꽃으로 가득 찰 때를 기다리고 있다. 그때가 되면 화원에 친구를 초대해 차를 마시며 이야기를 나눌 것이다. 유진이가 꽃을 심고 난 이후로 화원의 모든 칸에 꽃이 피어나려면 최소 며칠이 지나야 하는지 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30068","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tŠiuolaikinėse automobilių aikštelėse dažnai įrengiamos sistemos užfiksuoti įvažiuojančių ir išvažiuojančių automobilių numerius. Tokiu būdu galima apmokestinti automobilių savininkus pagal tikslų laiką, kurį automobiliai praleido aikštelėje.\n\nŠiame uždavinyje panagrinėsime vieną iš tokios sistemos komponentų.\n\nJums pateiktas sąrašas įrašų, kuriuos sudaro du sveikieji skaičiai:\n\n\n\t Ti$T_i$ – laiko momentas (matuojamas sekundėmis),\n\t Ni$N_i$ – automobilio numeris.\n\n\nPirmas sutiktas įrašas su numeriu Ni$N_i$ reiškia, kad šis automobilis įvažiavo į stovėjimo aikštelę. Antras – kad šis automobilis išvažiavo. Galite laikyti, kad nei vienas numeris nebus pateiktas sąraše daugiau nei du kartus.\n\nSuskaičiuokite, kiek laiko kiekvienas automobilis praleido stovėjimo aikštelėje.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30087","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t한국정보기술진흥원에서는 다양한 세미나가 열린다.\n\n전문가를 위한 알고리즘, 데이터분석, 인공지능, 사이버보안, 네트워크 세미나뿐만 아니라 예비 창업가를 위한 창업 세미나, 그리고 청소년들을 위한 입시 세미나가 열린다.\n\n오늘은 위 7$7$개 주제의 세미나가 모두 열리는 날이다. 진흥이는 이 중 N$N$ (1≤N≤7$1 \\le N \\le 7$) 개의 세미나를 신청했다. 아래의 표를 보고 어느 교실에서 열리는지 알아보자.\n\n\n\t\n\t\t\n\t\t\t세미나\n\t\t\t교실\n\t\t\n\t\t\n\t\t\tAlgorithm \n\t\t\t204\n\t\t\n\t\t\n\t\t\tDataAnalysis \n\t\t\t207\n\t\t\n\t\t\n\t\t\tArtificialIntelligence \n\t\t\t302\n\t\t\n\t\t\n\t\t\tCyberSecurity \n\t\t\tB101\n\t\t\n\t\t\n\t\t\tNetwork \n\t\t\t303\n\t\t\n\t\t\n\t\t\tStartup \n\t\t\t501\n\t\t\n\t\t\n\t\t\tTestStrategy \n\t\t\t105\n\t\t\n\t\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30105","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t집안의 먹을 것들이 계속해서 사라지는 당신은 이웃집의 곰 아즈버(azber)를 의심하고 있다. 오늘, 당신은 드디어 결정적인 증거를 찾아냈는데, 그것은 바로 쵸코바에 찍힌 이빨 자국이었다!\n\n당신은 아즈버가 커다란 두 송곳니로 쵸코바를 물어 여러 번 자국을 남겼으리라 생각하고 있다.\n\n쵸코바를 수직선이라고 가정하자. 아즈버는 다음과 같은 규칙을 따라 쵸코바에 이빨 자국을 남길 수 있다.\n\n\n\t처음에 쵸코바는 아무 자국 없이 깨끗한 상태이다.\n\t아즈버의 송곳니 사이 간격이 k (k>0)$k\\ (k \\gt 0)$일 때, 아즈버는 0$0$ 이상의 수 x$x$를 골라 쵸코바의 x$x$와 x+k$x + k$ 두 위치에 자국을 남기는 행동을 0$0$회 이상 반복할 수 있다.\n\t같은 위치에 여러 번 자국을 남기더라도 마지막에 남긴 자국만 보인다.\n\n\n당신은 쵸코바에 남겨진 이빨 자국들을 토대로, 송곳니 사이의 간격 k$k$가 될 수 있는 수치들을 모두 기록해 둔 뒤 나중에 아즈버를 만났을 때 확인해 보려고 한다.\n\n이빨 자국들의 위치가 주어졌을 때, 아즈버의 송곳니 사이 간격이 될 수 있는 수를 모두 출력해 보자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30005","content":"문제\n\nMaailmakuulus tööstusfirma Universal Manufacturing otsustas hiljuti oma tegevust laiendada. Firma toodab palju erinevaid tooteid, lampidest traktoriteni, ja korraldab kogu tootmisprotsessi, toorainetest lõpliku tooteni, oma tehastes.\n\nFirma \nN\n$N$ tehast on nummerdatud \n1…N\n$1 \\ldots N$, kusjuures tehas nr. \n1\n$1$ on peatehas. Tehased on oma\\-vahel ühendatud \nN−1\n$N-1$ teega ja on teada, et peatehasest on võimalik mööda neid teid pääseda kõigisse teistesse tehastesse.\n\nIgal tehasel \ni\n$i$ on oma tase \nTi\n$T_i$, mis tähendab et see tehas on võimeline koostama nii selle tasemega komponente teiste tehaste jaoks kui ka sama tasemega valmistooteid. Tehas võib sisendina kasutada suvalise madalama tasemega komponente, aga tulemusena saadud komponendi või toote tase on alati \nTi\n$T_i$.\n\nFirma otsustas avada tehaste juures \nM\n$M$ poodi, kus pood \ni\n$i$ asub tehase \nCi\n$C_i$ juuures ja võib müüa tooteid tasemetega \nLi…Ri\n$L_i \\ldots R_i$. Valmistamisel läbib iga toode mingi tehaste jada \n(j1,j2,…,jc)\n$(j_1, j_2, \\ldots, j_c)$, kus esialgsed komponendid valmistatakse tehases \nj1\n$j_1$, siis viiakse need tehasesse \nj2\n$j_2$, kus neist valmistatakse kõrgema taseme komponendid, mida omakorda töödeldakse edasi kuni tehaseni \njc\n$j_c$, kus valmistatakse lõplik toode, mis transporditakse poodi. Baaskomponendid valmistatakse alati peatehases, seega \nj1=1\n$j_1 = 1$. Kuna iga tehas saab töödelda ainult madalama tasemega komponente, siis iga \n1≤i<c\n$1 \\le i < c$ korral peab kehtima \nTji<Tji+1\n$T_{j_i} < T_{j_{i+1}}$.\n\nKuna transport on kogu tootmisprotsessi kõige kallim osa, otsustati, et ühegi toote valmistamise käigus ei tohi toode ei komponentidena ega valmiskujul ühtki tehast korduvalt läbida (isegi kui toodet seal tehases ei töödelda). Kui mingi toote jaoks ei leidu poodi, kuhu ta nii müügile jõuda saaks, siis seda toodet poes ei müüda.\n\nUniversal Manufacturingi tööpakkumisi uurides panid Sa tähele, et neil on vaba väga hea palgaga tarkvarainseneri töökoht. Lisaks avastasid Sa, et nad kasutavad oma logistika planeerimiseks algoritmi, mis vaatab iga poe juures iga toote jaoks läbi kõik võimalikud tehaste jadad, millega seda toota saaks, ja siis valib neist selle, mis nende logistikavõrku kõige vähem koormab. Nutika programmeerijana taipasid kohe, et firma suure tehastevõrgu juures võib see algoritm joosta universumi lõpuni.\n\nSa soovid firmat veenda nende algoritmi ebaefektiivsuses (ja loodetavasti saada palgatud seda parandama). Selleks tuleb Sul kirjutada programm, mis arvutab iga poe jaoks, kui palju tehaste valikuid firma praegune algoritm läbi vaatab."},{"problemId":"30044","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe rock-paper-scissors game is played as follows: Two players simultaneously pick their moves as ‘rock’, ‘paper’, or ‘scissors’. When both pick the same move, they each get zero points. When they pick different moves, the rock beats the scissors, the scissors beat the paper, and the paper beats the rock. The player who picked the winning move gets +1$+1$ and the loser −1$-1$ points. A match consists of a number of moves whose points are added. Thus, the sum of points of the two players at the end of a match will always be zero.\n\nThere are many rock-paper-scissors competitions where the main goal is to guess the opponent’s strategy and play against it.\n\nThe jury has implemented 10 simple programs that play rock-paper-scissors. Write a program to play against them and score as many points as possible.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30069","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBitlandijos prekybos tinklas „Baxima“ nori modernizuoti savo parduotuves ir įrengti išmanius kasos aparatus. Vienas iš išmaniosios kasos komponentų yra robotas, gebantis automatiškai grąžinti grąžą bitais (Bitlandijos valiuta).\n\nBitų banknotai turi šiuos nominalus: 1,2,4,8,16,32,64,128,256,512,1024$1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024$.\n\nDienos pradžioje kasa yra tuščia. Toliau yra registruojamos visos transakcijos: į kasą įdedamų banknotų nominalai. Trūksta tik programinės įrangos, kuri suskaičiuotų, kaip geriausia parinkti grąžą kiekvienam klientui.\n\nParašykite progamą, kuri rastų, kokiais nominalais robotas turi duoti grąžą, kad kiekvienam klientui būtų atiduodama kuo mažiau banknotų.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30088","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t한국정보기술진흥원의 직원들은 6개월에 한 번 씩 전 직원이 사장님과 일대일 면담을 진행한다.\n\n진흥원에는 N$N$개의 부서가 있는데, 부서에 소속된 모든 직원이 모두 면담을 마쳐야 해당 부서가 퇴근할 수 있다고 한다. 면담은 한 번에 한 명씩만 진행된다.\n\n모든 부서의 퇴근 시간의 합이 최소가 되는 값을 구하시오.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30106","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t현이의 방은 매우 지저분하다! 현이는 선물로 로봇 청소기를 받았고, 귀찮은 청소를 맡기기로 했다.\n\n로봇 청소기는 현이의 방을 1×1$1 \\times 1$ 크기의 정사각형으로 나누어져 있는 N×M$N \\times M$ 크기의 직사각형으로 인식한다.\n\n로봇 청소기는 한 영역을 청소하고 나서 상, 하, 좌, 우로 인접한 영역 중 하나로 이동한다. 현이의 방은 오래되어 마루가 울퉁불퉁하고, 쓰레기도 눌러붙어 각 영역마다 높이가 조금씩 다르다. 로봇 청소기는 높이 차이가 K$K$ 초과인 두 영역 사이를 이동하면 고장이 날 수 있기 때문에, 높이 차이가 K$K$ 이하인 영역 사이에서만 이동한다.\n\n현이는 외출하는 동안 로봇 청소기를 작동시키고 집에 돌아왔지만, 청소가 되지 않은 곳도 있는 것을 보고 실망했다. \n\n결국 현이는 로봇 청소기의 위치를 직접 옮겨주기로 했다. 현이가 로봇 청소기를 직접 옮길 때는 아무 영역으로나 옮길 수 있다. 로봇 청소기를 켠 상태로 옮기면 위험하니 로봇 청소기를 끄고 옮긴 뒤에 다시 작동시킬 수 있다.\n\n현이가 로봇 청소기를 최소 몇 번 작동시켜야 방의 모든 영역을 청소할 수 있을지 구해보자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30028","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t N$N$개의 정점과 N−1$N-1$개의 간선으로 이루어진 트리가 있다. 각각의 정점은 1,2,⋯,N$1,2,\\cdots ,N$번으로 번호가 매겨져 있다. 이 트리에 간선을 최소한으로 추가해서 모든 정점이 적어도 하나의 사이클에 포함되게 만들어 보자. 단, 자기 자신을 잇는 간선은 추가할 수 없고, 완성된 그래프의 임의의 두 정점 사이에는 간선이 최대 한 개 존재해야 한다.\n\n모든 정점이 적어도 하나의 사이클에 포함되게 만들기 위해 추가해야 하는 간선의 최소 개수와, 각각의 간선이 잇는 두 정점의 번호를 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30070","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tLinas gimtadienio proga gavo Lego konstruktorių, sudarytą iš N$N$ įvairiaspalvių kaladėlių. Visas kaladėles Linas sudėliojo į eilę ir užrašė kiekvienos spalvą kaip didžiąją lotynišką raidę:\n\nB D A A R A R B K A A\n\nBežaisdamas su kaladėlėmis, Linas jas perdėliojo taip, kad jokios tos pačios spalvos kaladėlės nebūtų viena šalia kitos:\n\nA B R A K A D A B R A\n\nLinui kilo klausimas: ar kito konstruktoriaus kaladėles taip pat pavyktų perdėlioti taip, kad tos pačios spalvos kaladėlės nebūtų greta?\n\nParašykite progamą, kuri nustatytų, ar įmanoma perdėlioti kaladėles norimu būdu, ir jei įmanoma, išvestų perdėliotų kaladėlių spalvų seką.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30006","content":"문제\n\nVaatleme pseudojuhuslike arvude generaatorit:\n\n  function xorshift()\n    last_value = internal_value\n    for i = 1 to M do\n      if S[i] < 0 then\n        internal_value = internal_value ^ (internal_value >> -S[i])\n      else\n        internal_value = internal_value ^ (internal_value << S[i])\n    return last_value + internal_value\n\n\nkus\n\nlast_value on \nN\n$N$-bitine lokaalne muutuja;\ninternal_value on \nN\n$N$-bitine globaalne muutuja, mille algväärtus ei ole teada;\nS on globaalne \nM\n$M$-elemendiline konstantide massiiv, mille väärtused on teada;\n^ tähistab bitikaupa välistava või tehet (XOR); selle tehte tulemuses on \n0\n$0$ need bitid, kus operandide vastavad bitid on võrdsed, ja \n1\n$1$ need, kus operandide vastavad bitid on erinevad; näiteks $10 \\mathbin{^} 12 = 6\n,sestarvu\n$, sest arvu $10$ kahendkuju on 1010 ja arvu \n12\n$12$ kahendkuju 1100; seega peab tehte tulemus olema 0110, mis on arvu \n6\n$6$ kahendkuju;\n<< ja >> tähistavad bitikaupa vasakule ja paremale nihutamise tehteid; \nN\n$N$-bitise arvu \ns\n$s$ biti võrra vasakule nihutamisel kustutatakse arvu kahendkujust \ns\n$s$ vasakpoolsemat bitti ja lisatakse paremale \ns\n$s$ bitti väärtusega \n0\n$0$; näiteks \n4\n$4$-bitise muutuja korral $6 \\mathbin{<<} 2 = 8\n,sest\n$, sest $6$ kahendkuju on 0110, millest \n2\n$2$ vasaku biti kustutamisel saame 10 ja sellele paremale kahe \n0\n$0$-biti lisamisel 1000, mis on arvu \n8\n$8$ kahendkuju; paremale nihutamisel kustutatakse bitte paremalt ja lisatakse vasakule;\n+ tähistab liitmist, kus tulemusest kasutatakse ainult \nN\n$N$ parempoolsemat bitti;\ninternal_value algväärtus ei ole \n0\n$0$ ja S elementide väärtused on sellised, et funktsiooni xorshift lõpmatult välja kutsudes omandab internal_value kõik väärtused \n1…2N−1\n$1 \\ldots 2^N-1$.\n\nKirjutada program, mis saab \nK\n$K$ järjestikust funktsiooni xorshift tagastatud väärtust ja leiab nende põhjal järgmisena tagastatava väärtuse."},{"problemId":"30045","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t2023년 9월, 여섯 번째로 개최된 ZOAC의 오프닝을 또 맡은 성우는 영과일의 마스코트인 영일이를 이용해 대회를 홍보하기로 했다.\n\n성우는 홍보 글이 주어질 때 각 문장에 01 또는 OI가 포함되어 있다면 문장 끝에 한 개의 영일이 이모티콘을 넣기로 했다. 이때, 홍보 글에 영일이 이모티콘을 총 몇 번 넣어야 하는지 구하여라.\n\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30089","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t T$T$개의 줄마다 영어 대문자로만 이루어진 문자열 S$S$가 주어질 때, 각 줄마다 아래 조건을 모두 만족하는 문자열 X$X$를 출력하여라.\n\n\n\t X$X$는 S$S$로 시작하여야 한다.\n\t X$X$를 뒤에서부터 읽은 문자열 X′$X'$에 대해서도 S$S$로 시작하여야 한다.\n\t위 조건을 만족하는 문자열이 여러 가지라면, 가장 길이가 짧은 문자열이 X$X$가 된다.\n\n\n가능한 모든 S$S$에 대해서 조건을 만족하는 X$X$는 유일함을 증명할 수 있다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30046","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t2123년에는 수를 표현하는 색다른 방식인 \"홍진수\"가 존재한다.\n\n홍진수는 총 3가지의 문자 H, J, S로 이루어진 문자열로, 각 문자 H, J, S에 1$1$부터 9$9$까지의 숫자를 서로 중복되지 않게 하나씩 대입하여 수를 표현할 수 있다. 예를 들어, 홍진수 HJSHJH는 358353$358353$, 914919$914919$는 표현할 수 있지만, 131131$131131$, 555555$555555$는 표현할 수 없다.\n\n길이가 같은 세 개의 홍진수 P$P$, Q$Q$, R$R$이 주어졌을 때, 각 홍진수가 표현하는 수 p$p$, q$q$, r$r$이 p<q<r$p<q<r$을 만족하게 하는 H, J, S가 존재하는지 확인하자. H, J, S에 대입한 수는 P$P$, Q$Q$, R$R$이 모두 공유한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30007","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t”꼬불꼬불 꼬불꼬불 맛좋은 라면 라면이 있기에 세상 살맛나 하루에 열개라도 먹을 수 있어 후루룩 짭짭 후루룩 짭짭 맛좋은 라면”\n\n예찬이는 라면을 매우 좋아한다. 선린 최고의 라면 애호가답게, 예찬이는 한 끼에도 라면 여러 개를 흡입하고는 한다.\n\n평소 라면을 가장 맛있게 끓일 수 있는 물의 양이 궁금했던 예찬이는 오랜 실험 끝에 마침내 아래와 같은 라면 공식을 만드는 데 성공했다.\n\n Wi=Ai(Xi−1)+Bi$$W_i=A_i(X_i - 1)+B_i$$ \n\n단, Wi$W_i$는 필요한 물의 양, Ai$A_i$는 라면 계수, Bi$B_i$는 기본 물의 양, Xi$X_i$는 끓일 라면 수를 나타낸다.\n\n예찬이가 라면을 끓이는 횟수 N$N$과 i$i$ (1≤i≤N)$(1 \\leq i \\leq N)$번째로 라면을 끓일 때의 라면 계수 Ai$A_i$, 기본 물의 양 Bi$B_i$, 끓일 라면 수 Xi$X_i$가 주어질 때, 예찬이를 위해 라면 공식에 따라 필요한 물의 양 Wi$W_i$을 계산해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30071","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBitlandijos badmintono komanda Bitai žaidžia finalines rungtynes prieš Baitlandijos komandą Baitus. Kadangi Baitai žaidžia namuose, jie savąją komandos sudėtį paskelbė iš anksto.\n\nKiekvieną komandą sudaro trys poros žaidėjų:\n\n\n\tKiekvienas žaidėjas turi savo stiprumo indeksą si$s_i$;\n\tJei žaidėjai i$i$ ir j$j$ sudaro porą, tai poros stiprumo indeksas P=si+sj$P = s_i + s_j$;\n\tJei dvi poros žaidžia tarpusavyje, laimi ta, kurios stiprumo indeksas didesnis.\n\n\nBitai, pasinaudodami paskelbta informacija, nori sudaryti komandą taip, kad nugalėtų Baitus. Kiekviena Bitų pora sužaidžia su kiekviena Baitų pora, iš viso vyksta 9$9$ rungtynės. Ar įmanoma Bitams laimėti?\n\nSudarykite 3$3$ komandas iš Bitų žaidėjų taip, kad šie laimėtų kuo daugiau rungtynių. Duomenys pateikti tokie, kad lygiosios neįmanomos.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30107","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t음이 아닌 정수 k$k$에 대해 popcount(k)$\\mathrm{popcount}(k)$는 k$k$의 이진법 표기에서 등장하는 1$1$의 개수를 의미한다.\n\n양의 정수 A$A$, B$B$, x$x$에 대해 f(x)$f(x)$를 다음과 같이 정의하자.\n\n\n\t f(x)=maxa+b=x{A×popcount(a)+B×popcount(b)}$f(x)=\\max\\limits_{a+b=x}\\{A\\times \\text{popcount}(a) + B\\times \\text{popcount}(b)\\}$ (a$a$, b$b$는 음이 아닌 정수)\n\n\n정수 N$N$이 주어질 때, ∑i=1Nf(i)$\\sum_{i=1}^N f(i)$의 값을 구하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30029","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t길이가 N$N$인 수열 a1,a2,⋯,aN$a_1,a_2,\\cdots ,a_N$이 주어질 때, 이 수열의 부분 수열 b1,b2,⋯,bM(1≤M≤N)$b_1,b_2,\\cdots ,b_M(1\\le M\\le N)$이 도미노 수열이 되려면 다음과 같은 조건을 만족해야 한다.\n\n b1,b2,⋯,bM(bi≤∑j=1i−1bj,2≤i≤M)\\[b_1,b_2,\\cdots ,b_M(b_i\\le\\displaystyle\\sum_{j=1}^{i-1}b_j,2\\le i\\le M)\\] \n\n주어진 수열의 부분 수열 중 도미노 수열의 최대 길이를 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30072","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tŽygeivis Vytis planuoja šiandien pasivaikščioti po kalnus. Pasitiesęs reljefo žemėlapį išsirinko maršrutą, kuris pavaizduotas kalnų aukščių seka. Keliaudamas nuo i$i$-ojo taško iki i+1$i + 1$-ojo, Vytis užlipa ar nusileidžia tik aukščių skirtumą, o jei taškai vienodame aukštyje – eina tiesiai. Vytis pradeda ir baigia žygį ties jūros lygiu (aukštis – 0$0$).\n\nVytis yra patyręs žygeivis ir žino, kad nueiti, užkopti ar nusileisti vieną metrą jam užtruks vieną laiko vienetą. Taip pat žino, kaip kinta jo energija:\n\n\n\tPapusryčiavęs jis įgauna energijos E0$E_0$.\n\tKopdamas aukštyn kiekvienam metrui sueikvoja Eu$E_u$ energijos.\n\tLeisdamasis žemyn kiekvienam metrui sueikvoja En$E_n$ energijos.\n\tVyčiui tiesiai eiti nesunku, tai eidamas tiesiai energijos nesueikvoja, tačiau jei visiškai neturi energijos, tiesiai žygiuoti jis negali.\n\tJei Vytis žygio metu išnaudoja visą energiją, jis prisėda pailsėti. Kai ilsisi žygio metu, per vieną laiko vienetą įgauna Eg$E_g$ energijos.\n\n\nPavyzdžiui, Vytis papusryčiavęs įgauna energijos E0=6$E_0 = 6$, užlipdamas sueikvoja Eu=3$E_u = 3$, nulipdamas sueikvoja En=1$E_n = 1$, ilsėdamasis įgauna Eg=1$E_g = 1$ ir susiplanavo eiti tokiu kalnu:\n\n\n\n1 pav. Dešinėje pavaizduotas aukštis, po paveikslėliu – maršruto taškai.\n\n\n\tVytis užlips ant pirmojo taško savo maršrute, tam išnaudos 1$1$ laiko vienetą ir 3$3$ energijos vienetus.\n\tVytis užlips ant antrojo taško savo maršrute, tam išnaudos 1$1$ laiko vienetą ir 3$3$ energijos vienetus.\n\tČia Vytis sustos pailsėti, nes energijos nebeturi. Pailsėjęs vieną laiko momentą įgaus 1$1$ energijos vienetą.\n\tVytis nueis prie trečiojo taško, tam sugaiš 1$1$ laiko momentą, bet neišnaudos energijos.\n\tKadangi Vyčiui neužteks energijos nulipti nuo trečiojo taško, jam teks sustoti pailsėti dar vieną laiko momentą.\n\tVytis nulips nuo trečiojo taško, tai užims 2$2$ laiko momentus ir tam sunaudos 2$2$ energijos vienetus.\n\n\nTad Vytis keliaus 7$7$ laiko momentus, iš kurių 5$5$ lips ar eis, ir 2$2$ ilsėsis.\n\nSuskaičiuokite, kiek laiko truks Vyčio žygis, jei Vytis išvyksta į žygį papusryčiavęs.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30090","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t평소 정보 보안에 관심이 많은 진흥이는 최근 들어 유행하고 있는 컴퓨터 바이러스에 대한 백신을 개발하려고 한다. 바이러스는 N$N$개의 문자열로 이루어져 있다고 한다. 진흥이가 열심히 연구한 결과, 이 바이러스를 처치할 방법은 다음과 같다.\n\n\n\t바이러스를 구성하는 N$N$개의 문자열을 적당한 순서를 정하여 하나로 이어 붙여야 한다.\n\t앞에 붙는 문자열의 마지막 k$k$글자와 뒤에 붙는 문자열의 첫 k$k$글자가 일치하도록 하는 1$1$이상의 정수 k$k$가 존재해야 한다. 조건을 만족하는 가장 큰 k$k$에 대해서, 앞에 붙는 문자열의 마지막 k$k$글자를 삭제하고, 뒤에 붙는 문자열을 그대로 붙인다.\n\t N$N$개의 문자열을 모두 이어 붙였을 때 가장 짧은 문자열이 백신이 된다.\n\n\n진흥이를 도와 백신이 되는 문자열의 길이를 출력하자. 반드시 답이 존재하는 경우만 주어진다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30008","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t준영이는 선린인터넷고등학교에서 1학기를 마치고 성적표를 받았다. 아직 성적처리가 완벽하게 끝나지 않아서 등수만 나오고 등급은 나오지 않은 상태이다. 계산하는 것이 너무나 귀찮은 준영이를 위해 그의 등급을 계산해주자.\n\n선린인터넷고등학교에는 N$N$명의 학생과 K$K$개의 과목이 있으며, 모든 학생은 K$K$개의 과목을 전부 수강한다. 준영이의 등급은 백분율을 기준으로 부여되며, 백분율은 해당 과목에서 준영이가 받은 등수에 100$100$을 곱한 뒤 학생 수로 나눈 몫과 같다. 어떠한 과목에서의 백분율이 P$P$라 할 때, 준영이가 특정 등급을 받기 위한 조건은 다음과 같다.\n\n\n\t\n\t\t\n\t\t\t등급\n\t\t\t조건\n\t\t\n\t\t\n\t\t\t1등급\n\t\t\t 0≤P≤4$0 \\leq P \\leq 4$ \n\t\t\n\t\t\n\t\t\t2등급\n\t\t\t 4<P≤11$4 < P \\leq 11$ \n\t\t\n\t\t\n\t\t\t3등급\n\t\t\t 11<P≤23$11 < P \\leq 23$ \n\t\t\n\t\t\n\t\t\t4등급\n\t\t\t 23<P≤40$23 < P \\leq 40$ \n\t\t\n\t\t\n\t\t\t5등급\n\t\t\t 40<P≤60$40 < P \\leq 60$ \n\t\t\n\t\t\n\t\t\t6등급\n\t\t\t 60<P≤77$60 < P \\leq 77$ \n\t\t\n\t\t\n\t\t\t7등급\n\t\t\t 77<P≤89$77 < P \\leq 89$ \n\t\t\n\t\t\n\t\t\t8등급\n\t\t\t 89<P≤96$89 < P \\leq 96$ \n\t\t\n\t\t\n\t\t\t9등급\n\t\t\t 96<P≤100$96 < P \\leq 100$ \n\t\t\n\t\n\n\n i$i$ (1≤i≤K$1 \\le i \\le K$)번째 과목에서 준영이는 Gi$G_{i}$등이었다. G1$G_1$, G2$G_2$, ⋯$\\cdots$, GK$G_K$가 주어질 때, 준영이를 위해 각 과목에서 받은 등급 D1$D_1$, D2$D_2$, ⋯$\\cdots$, DK$D_K$ (1≤Di≤9$1 \\leq D_i \\leq 9$)를 구해주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30047","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t하나의 정수로 평가(evaluate)될 수 있는 함수 문자열은 다음과 같이 정의된다.\n\n\n\tx는 함수 문자열이다. 위 문자열은 0$0$으로 평가된다.\n\tS가 함수 문자열이면, gS도 함수 문자열이다. 위 문자열은 S가 평가된 값에 1$1$을 더한 값으로 평가된다.\n\tS, T가 함수 문자열이면, fST도 함수 문자열이다. 위 문자열은 S와 T가 평가된 값 중 더 크지 않은 값으로 평가된다.\n\n\n문자열이 주어지면 함수 문자열인지 확인하고, 만약 그렇다면 평가한 값을 구하자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30108","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t N$N$개의 정점을 가진 트리가 주어진다. 각 정점에는 1$1$번부터 N$N$번까지 번호가 중복 없이 주어지며, 1$1$번 정점은 트리의 루트이다.\n\n 2$2$ 이상 N$N$ 이하의 모든 정수 i$i$에 대해서, i$i$번 정점의 부모 정점은 pi$p_i$번 정점이다. \n\n이 트리의 i$i$번 정점에는 정수 Ai$A_i$가 적혀 있다. 또한, Ai≤Api$A_i \\leq A_{p_i}$ 라는 특수한 성질을 만족한다. 우리는 이 트리에서 몇 개의 정점을 선택하여, 선택된 정점들에 적혀있는 정수들의 합을 최대화하고 싶다. 이때 선택된 모든 정점은 1$1$번 정점이거나, 자신의 부모 정점 또한 선택되어 있어야 한다.\n\n선택할 정점들의 수에 따라 문제의 정답을 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30030","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n스위트콘의 가격은 A$A$원이다. A$A$는 100$100$의 배수이다. 그런데, 스위트콘에 부가가치세 10%$10\\%$를 포함하니 가격이 B$B$원이 되었다.\n\n부가가치세를 포함한 가격 B$B$가 주어질 때, 이를 제외한 가격 A$A$를 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30073","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBrigita nusprendė sudaryti kryžiažodį savo jaunesniajam broliui, o kad užduotis nepasirodytų jam per sunki, kryžiažodis bus tik iš trijų žodžių. Tinkamas kryžiažodis tenkina šias taisykles:\n\n\n\tKryžiažodyje žodžiai rašomi eilute (horizontaliai) arba stulpeliu (vertikaliai)\n\tJei du žodžiai kertasi (persidengia), jie kertasi ties lygiai viena raide\n\tKiekvienas žodis kertasi su bent vienu kitu žodžiui, t.y. visi trys kryžiažodžio žodžiai susiję.\n\tJei žodis kertasi su dviem kitais žodžiais, tai jis turi kirstis skirtingose vietose. Pavyzdžiui, žodis KURMIS su žodžiais KAVA ir KELMAS negali kirstis ties raide K.\n\n\nPadėkite Brigitai sudaryti kryžiažodį iš trijų pateiktų žodžių. Jei egzistuoja keli galimi sprendiniai, pateikite bet kurį.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30091","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t진흥이는 나무젓가락을 N$N$쌍 이용하여 직사각형 두 개를 만들려고 한다. 각 나무젓가락 쌍에는 1$1$번부터 N$N$번까지의 서로 다른 번호가 붙어있고, i$i$번 나무젓가락의 길이는 Li$L_i$이다. 진흥이는 1$1$부터 N$N$번 중 원하는 2M$2M$개의 서로 다른 번호를 고르고, 고른 번호의 나무젓가락을 두 쌍씩 짝짓는다. 짝지은 두 쌍의 나무젓가락마다 한 나무젓가락을 가로로, 다른 나무젓가락을 세로로 하는 직사각형을 만든다.\n\n\n\n왼쪽 그림은 길이 5$5$의 나무젓가락을 가로로, 길이 6$6$의 나무젓가락을 세로로 하여 직사각형을 만든 모습이다. 오른쪽 그림은 길이 7$7$의 나무젓가락을 가로로, 길이 4$4$의 나무젓가락을 세로로 하여 직사각형을 만든 모습이다.\n\n진흥이는 M$M$을 원하는 양의 정수로 고를 수 있지만, 짝지은 나무젓가락들로 만든 직사각형의 둘 레는 모두 같아야 한다. 직사각형들의 넓이의 합을 가장 크게 하려면 어떻게 해야 할까?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30031","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t대한민국 지폐는 천 원권, 오천 원권, 만 원권, 오만 원권으로 총 네 종류가 있다. 각 지폐의 세로 길이는 68mm$68\\text{mm}$로 모두 같지만, 가로 길이는 모두 다르다. 천 원권의 가로 길이는 136mm$136\\text{mm}$, 오천 원권의 가로 길이는 142mm$142\\text{mm}$, 만 원권의 가로 길이는 148mm$148\\text{mm}$, 오만 원권의 가로 길이는 154mm$154\\text{mm}$이다. 따라서 가로의 길이를 통해서 지폐의 종류를 구분할 수 있다.\n\n수민이는 대한민국 지폐 N$N$장을 가지고 있다. 수민이는 종이의 크기를 재는 기계를 이용하여 각 지폐의 가로, 세로 길이를 알아냈다. 수민이가 가진 지폐의 총액을 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30009","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t바나나는 무대 소녀이다. 그녀는 무대의 \"포지션 제로\"에 서고 싶어 한다. 이 문제에서 무대는 2차원 좌표평면이며, \"포지션 제로\"는 2차원 좌표평면의 원으로 표현된다.\n\n\"포지션 제로\"의 중심은 (X,Y)$(X, Y)$이고, 반지름은 R$R$이다.\n\n그러나 바나나가 움직일 수 있는 범위는 제한되어 있다. 바나나는 N$N$개의 직선 중 하나를 골라, 그 위에서만 움직일 수 있다.\n\n각 직선은 x=Ti$x = T_{i}$ (1≤i≤N)$(1 \\leq i \\leq N)$로 표현된다.\n\n바나나가 움직일 수 있는 직선의 개수인 N$N$과 \"포지션 제로\"의 중심의 좌표와 반지름 X$X$, Y$Y$, R$R$, 각 직선의 정보 Ti$T_i$가 주어졌을 때, 그녀가 \"포지션 제로\" 내부에 들어갈 수 있는 직선의 개수 A$A$와 \"포지션 제로\"의 경계에만 들어갈 수 있는 직선의 개수 B$B$를 출력하라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30048","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t구체적으로 얼마나 많은지 직접 구해보자. 함수 문자열의 정의는 30047번: 함수 문자열 문제를 참고하자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30074","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tTomas ir Barbora susiruošė perdažyti močiutės kiemo tvorą. Tomas valys senus tvoros dažus, o Barbora – dažys.\n\nTvora sudaryta iš N$N$ stulpelių, kurių kiekvieną Tomas nuvalo per V$V$ minučių, o Barbora nudažo per Z$Z$ minučių. Tvoros stulpelis turi būti visiškai nuvalytas prieš pradedant jį dažyti, t.y., vaikai negali vienu metu dirbti prie to paties stulpelio.\n\nKad Barborai reikėtų mažiau laukti, Tomas atsikėlė ir darbus pradėjo T$T$ minučių anksčiau nei Barbora. Visgi anūkė numatė, kad gali tekti palaukti, todėl pasiėmė komiksų paskaityti.\n\nSuskaičiuokite, kiek minučių Barbora galės skaityti komiksus nuo jos darbo pradžios iki visa tvora bus perdažyta.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30109","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t여러분은 보물 지도를 열심히 분석해서 마침내 보물이 숨겨진 동굴에 도달하는 데 성공했다.\n\n지금 여러분의 눈앞에는 보물이 담겨 있는 N$N$개의 상자가 있다. 이 중 i$i$번째 상자에는 Li,Li+1,…,Ri−1,Ri$L_i, L_i + 1, \\dots, R_i - 1, R_i$번 보물이 담겨 있다. 여러분은 수많은 보물 상자 중, 몇 개의 상자만을 골라 그 안에 있는 보물들을 모두 가져가고자 한다.\n\n 1$1$ 이상 K$K$ 이하의 모든 정수 i$i$에 대해, 보물 상자를 i$i$개 골랐을 때 들고 갈 수 있는 서로 다른 번호를 가진 보물 개수의 최댓값을 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30092","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t 1$1$부터 N$N$까지의 번호가 붙은 N$N$개의 정점과 N−1$N-1$개의 간선으로 이루어진 트리가 주어진다. 이제 당신은 이 트리에 대해 다음 질문을 Q$Q$번 답해야 한다.\n\n\n\t a$a$ b$b$ c$c$ d$d$: 정점 a$a$에서 b$b$로 가는 최단 경로에 속한 모든 간선을 제거하였을 때, c$c$에서 d$d$로 가는 경로가 존재한다면 “YES”를 존재하지 않는다면 “NO”를 출력한다. 따옴표는 출력하지 않는다.\n\n\n질문의 결과는 다른 질문에 영향을 끼치지 않는다. 또한 트리의 루트는 항상 1$1$번 정점이며 모든 간선은 양방향이다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30010","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t학교 프로그래밍 시간에 버블 정렬을 배운 정연이는 버블 정렬을 써먹기 위해 백준에서 정렬 문제를 도전했다. 문제는 아래와 같았다.\n\n” N$N$개의 수를 담은 수열 A0$A_0$, A1$A_1$, ⋯$\\cdots$, AN−1$A_{N-1}$이 주어질 때 이를 오름차순으로 정렬하는 프로그램을 작성하시오.” \n\n정연이는 자신의 코드가 완벽하다고 생각한 후 제출했지만, 아쉽게도 ’틀렸습니다’를 받았다. 정연이가 작성한 버블정렬 코드는 다음과 같다.\n\nfor (int i = N - 1; i > 0; i--) {\n    for (int j = i - 1; j >= 0; j--) {\n        if (A[j] > A[j + 1]) {\n            int tmp = A[j];\n            A[j] = A[j + 1];\n            A[j + 1] = tmp;\n        }\n    }\n}\n\n수의 개수 N$N$이 주어질 때, 정연이가 짠 코드의 반례가 될 입력을 만들어 보자. 구체적으로, 당신은 정연이가 짠 코드의 반례가 될 길이 N$N$의 수열 A$A$를 만들어야 한다. 이때, A$A$의 모든 원소는 0$0$ 이상 10000$10\\,000$ 이하의 정수여야 하고, 정연이가 작성한 코드가 여러분이 출력한 N$N$개의 수를 올바르게 정렬할 수 없어야 한다.\n\n입력 조건을 만족하는 모든 N$N$에 대해 이 조건을 만족하는 수열이 존재함을 증명할 수 있으며, 가능한 수열이 여러 가지라면 그 중 아무거나 출력한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30075","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tPaulius sukonstravo mini kompiuterį, prie kurio prijungtas ekranas bus pakabintas gerai matomoje vietoje ir rodys draugų žinutes iš socialinių tinklų.\n\nDabar vaikinas programuoja išvedimo į ekraną komandą SPAUSDINTI, kuri turi ekrane parodyti pateiktą tekstą ir suprasti vieną specialią instrukciją \\n – tęsti iš naujos eilutės.\n\nKomandos SPAUSDINTI sintaksė. Komanda pradedama didžiosiomis raidėmis užrašytu raktažodžiu SPAUSDINTI. Po vieno tarpo pateikiamas kabutėmis (\") apgaubtas tekstas, kurį reikia išvesti į ekraną. Kabučių išvesti nereikia.\n\nIšvedamame tekste gali būti tokių simbolių:\n\n\n\tlotyniškų didžiųjų ir mažųjų raidžių;\n\tskaičių;\n\t, ./ <>?; : []{}|()− = _ + @! ∗ %$&#\n\n\nTarpų išvedamame tekste nebus. Jei tarp kabučių yra naujos eilutės komanda (du iš eilės einantys simboliai \\n), šie simboliai nėra išvedami, o suprantami kaip instrukcija tolimesnį tekstą išvesti naujoje eilutėje.\n\nKomanda SPAUSDINTI išveda tekstą į tą pačią eilutę, kur baigė prieš tai vykdyta komanda, ir tik \\n instrukcija nurodo, kad reikia tęsti naujoje eilutėje.\n\nPateikta programa sudaryta tik iš komandų SPAUSDINTI. Parašykite programą, kuri interpretuotų pateiktas komandas ir išvestų jų rezultatą.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30049","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tZerOne 주식회사의 사장인 정민이는 느슨해진 직원들에 긴장감을 주기 위해 영업왕을 뽑기로 한다. 각 직원은 총 M$M$개의 매장 중에서 K$K$개의 매장을 담당하고 있으며, 영업왕은 자신이 맡은 모든 매장에서 누적 매출 1위를 달성한 직원으로 한다. 단, 각 매장의 직원별 누적 매출액은 항상 서로 다르며 감소하지 않는다.\n\nZerOne 회사의 직원들이 올린 매출의 정보가 시간 순서대로 주어진다고 했을 때, 그때마다의 누적 매출액을 계산하여 영업왕의 수를 구하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30032","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n알파벳 소문자 d, b, q, p는 상하좌우로 뒤집으면 d, b, q, p 중 하나로 변하는 특별한 성질이 있다. 그 성질을 정리하면 다음과 같다.\n\n\n\td를 상하로 뒤집으면 q로, 좌우로 뒤집으면 b로 변한다.\n\tb를 상하로 뒤집으면 p로, 좌우로 뒤집으면 d로 변한다.\n\tq를 상하로 뒤집으면 d로, 좌우로 뒤집으면 p로 변한다.\n\tp를 상하로 뒤집으면 b로, 좌우로 뒤집으면 q로 변한다.\n\n\n N$N$행 N$N$열의 격자의 각 칸에 d, b, q, p 중 하나가 들어 있다. 이 격자에 들어 있는 각각의 알파벳을 주어진 방향으로 뒤집은 결과를 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30093","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tKITPA 나라에는 1$1$부터 N$N$까지의 번호가 붙은 N$N$개의 마을이 있고, 마을 중 M$M$개는 중심 마을이 다. 각 마을은 K$K$개의 양방향 도로로 연결되어 있고, 진흥이는 마을의 교류를 편하게 하도록 KITPA 나라에 지름길을 새로 건설하려고 한다.\n\n각 도로에는 길이가 주어져 있으며, 각 마을에서 다른 모든 마을로 도로만을 통해 이동할 수 있다. 두 마을 사이에는 많아야 1$1$개의 도로만이 있으며, 두 마을 사이의 거리는 마을 사이를 도로만 통하여 이동하는 가장 짧은 경로에 포함된 도로의 길이 합이다. 단, 마을 A$A$와 A$A$사이의 거리는 0$0$이다. 어떤 마을 A$A$와 중심 마을 B$B$ 사이의 거리가 A$A$와 다른 모든 중심 마을 사이의 거리보다 작다면 A$A$는 B$B$에 속한다고 하자. 어떤 중심 마을에도 속하지 않는 마을이 있을 수 있다.\n\n진흥이는 KITPA 나라의 원하는 두 마을을 골라 아직 두 마을 사이에 도로가 없다면 두 마을 사이에 지름길을 건설하도록 요청할 수 있다. 이때 모든 지름길들을 건설하기 전 지름길이 연결하는 두 마을에 각각 직접 연결된 모든 도로의 길이 중 가장 작은 값보다 지름길의 길이가 짧거나 같아야 KITPA 나라에서 건설을 허가한다. 각 중심 마을끼리는 세력을 견제하고 있어, 지름길을 건설한 이후 다음 조건들을 만족해야 한다.\n\n\n\t지름길을 건설하기 전과 다른 중심 마을에 속하게 되는 마을이 없어야 한다. 어떤 중심 마을에도 속하지 않는 마을이 새로이 생기는 것은 가능하다.\n\t각 마을에서 가장 가까운 중심 마을까지의 거리는 지름길을 건설하기 전과 후가 같아야 한다.\n\n\n진흥이가 조건에 맞게 최대한 많은 지름길을 건설하도록 요청했을 때, KITPA 나라가 건설을 허가하는 지름길의 수를 구하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30110","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tArtūras ir Vytautas žaidžia skaičių spėjimo žaidimą.\n\nPirmiausia, Artūras sugalvoja skaičių A$A$ nuo 1$1$ iki N$N$. Tada Vytautas spėja skaičių. Jei Vytautas spėjo per didelį skaičių, Artūras gauna vienokį kiekį taškų, o jei per mažą – kitokį. Žaidimas baigiasi, kai Vytautas atspėja skaičių.\n\nSakykime, Vytautas spėjo skaičių V$V$, tada taškai dalinami šitaip:\n\n\n\tjei V>A$V > A$, Artūras gauna D$D$ taškų;\n\tjei V<A$V < A$, Artūras gauna M$M$ taškų;\n\tjei V=A$V = A$, Vytautas gauna T$T$ taškų ir žaidimas baigiasi.\n\n\nArtūras laimi, jei surenka daugiau taškų nei Vytautas. Kitu atveju laimi Vytautas.\n\nArtūras labai nori laimėti, todėl kartais sukčiauja. Iš pradžių nesugalvoja skaičiaus, o savo skaičių derina prie Vytauto klausimų. Artūras nenori būti pagautas, todėl neduoda prieštaringos informacijos, t. y. visada bus nors vienas skaičius, atitinkantis visus Artūro kol kas duotus atsakymus.\n\nKadangi Vytautas labai mėgsta varžytis, jis nori laimėti bet kokiu atveju. Todėl jis pasirinko parametrus N$N$, M$M$, D$D$ ir T$T$ taip, kad visada galėtų laimėti, kad ir kokį skaičių Artūras sugalvotų.\n\nParašykite programą, kuri žaisdama už Vytautą laimėtų žaidimą.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30011","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t당신은 N$N$개의 볼록다각형으로 이루어진 그림을 그려야 한다. 이 그림은 다음 세 조건을 만족해야 한다.\n\n\n\t i$i$번째 다각형은 Ai$A_i$개의 꼭짓점을 가져야 한다. (1≤i≤N)$(1 \\le i \\le N)$ \n\t i+1$i+1$번째 다각형의 모든 꼭짓점은 i$i$번째 다각형의 내부 또는 경계에 속해야 한다. (1≤i<N)$(1 \\le i < N)$ \n\t두 개 이상의 다각형이 한 꼭짓점을 공유할 수 없다.\n\n\n이때, i$i$번째 다각형은 i+1$i+1$번째 다각형보다 꼭짓점 수가 많거나 같다. 즉, 1≤i<N$1 \\le i < N$인 정수 i$i$에 대해 Ai≥Ai+1$A_i \\ge A_{i+1}$이다.\n\n아래 그림은 A={4,4,3}$A=\\{ 4, 4, 3 \\}$일 때, 조건에 맞게 그린 도형과 조건에 맞지 않는 도형의 예이다. \n\n\n\t\n\t\t\n\t\t\t\n\t\t\t \n\t\t\t\n\t\t\t\n\t\t\t \n\t\t\t\n\t\t\n\t\t\n\t\t\t조건에 맞는 도형\n\t\t\t조건에 맞지 않는 도형\n\t\t\n\t\n\n\n당신은 그림의 점수가 최대가 되도록 그림을 그리려고 한다. 그림의 점수는 그림에 그려진 선분으로 만들어지는 180∘$180 ^\\circ$ 미만의 각 중 다른 각을 완전히 포함하지 않는 것의 각도의 합으로 정의된다. \n\n\n\n예를 들어, 다음 그림의 ∠DBA$\\angle DBA$와 ∠CBD$\\angle CBD$는 조건에 맞지만, ∠CBA$\\angle CBA$는 ∠DBA$\\angle DBA$와 ∠CBD$\\angle CBD$를 포함하기 때문에 조건에 맞지 않는다.\n\n조건에 맞춰서 도형을 그렸을 때 가능한 그림의 점수의 최댓값을 구해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30050","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t루트의 번호가 1$1$이고 정점의 개수가 무한한 포화 이진 트리가 있다. 이 트리에서 i$i$번 정점의 왼쪽 자식은 2i$2i$, 오른쪽 자식은 2i+1$2i+1$번 정점이며, 서로 양방향으로 연결되어 있다. 이 트리에 Q$Q$개의 쿼리를 수행해 보자.\n\n쿼리의 종류는 다음과 같다.\n\n\n\t1 a b: b$b$번 정점과 그 부모를 잇는 간선을 제거하고, a$a$번 정점과 b$b$번 정점을 잇는 간선을 추가한다. 단, ⌊log2⁡a⌋<⌊log2⁡b⌋$ \\lfloor \\log_{2}{a} \\rfloor < \\lfloor \\log_{2}{b} \\rfloor$를 만족하는 경우만 주어진다.\n\t2 c d: c$c$번 정점에서 d$d$번 정점으로 가는 단순 경로상에 존재하는 모든 정점의 번호의 합을 출력한다.\n\n\n1번 쿼리를 수행한 후에도 항상 트리의 조건을 만족함을 증명할 수 있다. 2번 쿼리는 최소 한 번 이상 주어진다.\n\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30076","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tGreitai Kalėdos. Elniai jau pakinkyti ir Kalėdų senelis beveik pasiruošęs traukti į kelionę, tik dovanos dar nesukrautos.\n\nNors rogėse telpa be galo daug dovanų, bet sunkias roges tempiantis kinkinys greitai pavargsta, todėl dovanų reikia krauti kiek galima mažiau.\n\nTai žinodami nykštukai Kalėdų senelio mašrute ant namų stogų įrengė dovanų slėptuves.\n\nKalėdų senelis gali pasikrauti dovanų savo trobelėje (t.y. pradiniame taške), o taip pat bet kurioje slėptuvėje.\n\nŽinodami, kiek vaikų turi aplankyti Kalėdų senelis, patarkite, kiek dovanų jam reikia įkrauti į roges savo trobelėje bei kiekvienoje slėptuvėje, kad jų kiekis rogėse visada būtų kuo mažesnis.\n\nKeliaudamas Kalėdų senelis:\n\n\n\tlanko vaikus namų numerių didėjimo tvarka, pradėdamas nuo pirmojo;\n\tnegali apgręžti rogių atgal iki neaplanko visų vaikų;\n\tjei ant namo stogo yra įrengta slėptuvė, jis pirma joje pasipildo roges dovanų, o tuomet neša dovaną tame name gyvenančiam vaikui.\n\n\nVisi vaikai gyvena skirtinguose namuose ir kiekvienam jų atneš vieną dovaną.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30033","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t취준생에서 직장인이 된 임스는 Rust 프로그래밍 언어를 공부하고자 책을 구매했다.\n\n임스는 퇴근 후에 책을 정해진 페이지 수 이상으로 공부하기로 계획하였다.\n\n임스가 공부하고자 한 일수와 공부하고자 계획한 페이지 수, 실제 공부한 페이지 수가 주어졌을 때 임스가 계획을 성실히 지킨 횟수를 구해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30094","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t종경이는 사진 영상과 과학 영상 과목에서 사진을 찍는 과제를 받았다.\n\n종경이는 정보과학세미나2를 수강하는 학생 N$N$명을 왼쪽부터 오른쪽으로 일렬로 줄 세워 사진을 찍으려고 한다. 정보과학세미나2를 수강하는 학생은 모두 정보과학을 사랑하는 학생이기에 반드시 Codeforces 레이팅과 Atcoder 레이팅을 가지고 있다. 각 학생은 1$1$부터 N$N$까지의 번호를 가지고 있으며, 학생 i$i$의 Codeforces 레이팅과 Atcoder 레이팅은 각각 두 정수 ci$c_i$와 ai$a_i$로 표현된다.\n\n종경이가 사진 과목에서 공부한 내용에 따르면, N$N$명의 학생이 왼쪽에서 오른쪽으로 일렬로 서서 사진을 찍을 때 학생 i$i$의 인물 점수는 ci×li+ai×ri$c_i \\times l_i + a_i \\times r_i$로 정의된다. 이때 li$l_i$는 i$i$번 학생의 왼쪽에 있는 사람의 수이고, ri$r_i$는 i$i$번 학생의 오른쪽에 있는 사람의 수이다. 사진 점수는 사진에 등장하는 N$N$명의 인물 점수를 모두 합한 값으로 정의된다.\n\n종경이는 사진 점수로 가능한 값 중 최솟값과 최댓값, 또 최솟값과 최댓값을 가지도록 학생들이 줄을 서는 방법이 몇 가지인지 알고 싶어 했다. 하지만 종경이는 가능한 모든 배열을 시도해 보며 N!$N!$장의 사진을 모두 찍다가 지쳐서 사진을 찍는 것을 그만두었고 과학 영상과 사진 영상 과목을 재수강할 위기에 처했다. 여러분이 종경이를 도와주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30012","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t개구리 주호는 x$x$축 위에 사는 N$N$마리의 개구리 중 하나를 선택하여 만나려고 한다. i$i$번째 개구리를 선택해 만나려 했을 때, 개구리 주호는 x=S$x=S$에서, i$i$번째 개구리는 x=Ei$x=E_i$에서 동시에 출발하여 움직인다.\n\n이때, 두 개구리는 각각 다음과 같이 움직인다. 실제로 좌표가 변하지 않더라도 아래 과정을 따라야 함에 유의하라.\n\n\n\t상대 개구리를 바라보는 방향으로 움직이며, 반대 방향으로는 움직이지 않는다.\n\t상대 개구리를 뛰어넘지 않는다.\n\t상대 개구리를 향해 움직일 때 맨 처음에 반드시 점프를 한 번 해야 한다.\n\t점프를 한 번 한 뒤에는 걸어서 움직여야 한다.\n\t점프하거나 걸을 때는 반드시 정수 거리만큼 움직여야 한다.\n\n\n이 개구리들은 신기한 특징이 있는데, 최대 거리 K$K$만큼 점프할 수 있으며, 정확히 거리 K$K$만큼 점프하기 적합하게 진화했다는 점이다. 그래서 거리 d$d$ (0≤d≤K)$(0 \\leq d \\leq K)$만큼 점프하면 체력이 K−d$K-d$만큼 소모된다. 즉, d=0$d = 0$이면 제자리로 점프하면서 K$K$만큼의 체력이 들고, d=K$d = K$이면 K$K$만큼 점프하고 0$0$만큼의 체력이 소모된다.\n\n한 번 점프한 뒤에는 상대방 개구리를 만날 때까지 걷는다. 이때 1$1$씩 걸을 때마다 체력 L$L$이 소모된다.\n\n개구리들에게 체력은 생존을 위해 매우 중요하다. 그들은 서로를 향해 움직일 때 서로의 체력 소모의 합이 최소가 되도록 움직인다. 개구리 주호는 N$N$마리의 개구리 중 자신과 만나기 위해 소모되는 체력의 합이 가장 작은 개구리 하나를 선택하여 만나려고 한다. 주호를 위해 서로의 체력 소모량의 합의 최솟값과 주호가 만날 개구리의 번호를 찾아주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30077","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBitų karalystėje vyksta dviračių treko lenktynės. Visi dviratininkai startuoja vienu metu ir važiuoja N$N$ ratų. Jei kurį lenktynininką ratu aplenkia kitas, aplenktasis toliau varžybų nebetęsia. Jei sportininkas, kirsdamas finišo liniją, aplenkia varžovą ratu, aplenktasis taip pat iškrenta iš varžybų.\n\nŽinodami, per kiek laiko kiekvienas dviratininkas įveikia vieną treko ratą bei kiek ratų trunka lenktynės, raskite, kiek dalyvių nebus aplenkti ratu ir finišuos varžybose.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30034","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t문자열을 좋아한 임스는 문자열 관련 새로운 게임을 만들었다.\n\n문자열을 나누는 기준인 구분자, 구분자에서 제외하는 조건인 병합자와 관련하여 기준을 정하였다.\n\n새로운 게임의 규칙은 다음과 같다.\n\n\n\t이 게임은 문자열을 규칙에 따라 나누는 게임이다.\n\t문자열을 공백과 주어진 구분자들로 나눈다.\n\t각 문자 구분자는 영어 대소문자 중 하나이다.\n\t각 숫자 구분자는 0부터 9까지의 숫자 중 하나이다.\n\t병합자로 주어진 문자들은 구분자로 취급하지 않는다.\n\t각 병합자는 영어 대소문자와 0부터 9까지의 숫자 중 하나이다.\n\t구분자와 병합자는 모두 한 글자로 이루어져 있다.\n\t나눌 문자열인 기준 문자열은 영어 대소문자, 숫자, 공백으로 이루어져 있다.\n\t같은 구분자 및 병합자가 주어질 수 있다.\n\n\n N$N$개의 문자 구분자, M$M$개의 숫자 구분자, K$K$개의 병합자, 문자열의 길이 S$S$와 기준 문자열이 주어질 때 해당 규칙들을 적용한 결과를 출력한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30051","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t일하기는 싫고 한탕만 노리는 준성이는 가상화폐 N$N$개의 종목의 시세를 분석하기 시작했다! 준성이가 분석한 결과는 다음과 같다. Pi$P_i$는 i$i$번 가상화폐의 가격이다.\n\n\n\t Pi$P_i$는 1$1$ 아니면 2$2$다.\n\t P1$P_1$은 하루가 지날 때마다 바뀐다. 즉 P1$P_1$이 1$1$이라면 2$2$가 되고, 2$2$라면 1$1$이 된다.\n\t Pi+1$P_{i+1}$은 하루가 지날 때마다 어제의 P1,P2,…,Pi$P_1, P_2, \\dots , P_i$가 모두 2$2$라면 바뀌고, 그렇지 않다면 바뀌지 않는다.  (1≤i≤N−1)$(1 \\leq i \\leq N-1)$ \n\t위 조건을 제외하고 Pi$P_i$가 바뀌는 경우는 없고, 모든 종목의 가상화폐는 무한히 많다.\n\n\n거대 자본이 투입되어 분석 결과가 무용지물이 되는 경우를 고려하여 준성이는 거래를 진행할 때 하루에 한 종목당 1개의 가상화폐만 사거나 팔려고 한다. \n\n준성이는 부지런해서 항상 가상화폐의 가격이 갱신되자마자 거래를 시작하며, 거래를 진행하는 시간은 무시할 수 있을 만큼 짧다. 준성이가 의도한 거래를 실패하는 경우는 없다. 즉, 준성이가 가상화폐를 사려고 하면 반드시 살 수 있고, 팔려고 하면 즉시 팔 수 있다.\n\n분석 결과가 모두 들어맞고 준성이의 자본이 항상 가상화폐를 살 수 있을 정도로 충분히 많다는 가정하에, T$T$일간 거래를 진행하여 얻을 수 있는 최대 이익을 구하자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30078","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBitlandijos universiteto studentė Bitė šį semestrą pasirinko studijuoti nemažai kursų. Todėl artėjant semestro pabaigai, Bitei teks rašyti daug atsiskaitymų – tiek daug, kad kaip kurie net kertasi.\n\nKiekvienam atsiskaitymui paskirtas konkretus laikas, kada jis rašomas. Bitė atsiskaitymus rašo kompiuteriu ir norėtų žinoti, kiek daugiausiai atsiskaitymų reikės rašyti vienu metu.\n\nSuskaičiuokite, kiek daugiausiai atsiskaitymų Bitei reikės rašyti vienu metu.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30079","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tJonas žaidžia kompiuterinį žaidimą apie legendinį aukso miestą El Dorado. Ką Jonas veikia auksiniame mieste? Žinoma, renka auksą!\n\nMiesto žemėlapis yra N×M$N \\times M$ dydžio stačiakampis, kuriame kiekviename taške yra pastatas, gatvė arba aukso moneta. Jonas gali judėti tik pietų (žemėlapyje žemyn) bei rytų (žemėlapyje dešinėn) kryptimis ir nori susirinkti kiek įmanoma daugiau monetų.\n\nLaukelį kuriame stovi Jonas pažymėkime (i,j)$(i, j)$:\n\n\n\tjei laukelyje (i,j)$(i, j)$ yra auksinė moneta, Jonas ją pasiima;\n\tjis gali pajudėti į laukelį (i+1,j)$(i+ 1, j)$ arba į (i,j+1)$(i, j + 1)$, jei šie laukeliai yra žemėlapyje ir juose nėra pastato;\n\tjei Jonas nebegali pajudėti, žaidimas baigiamas.\n\n\nJonas turi visą miesto žemėlapį. Suskaičiuokite, kiek daugiausiai monetų Jonas gali susirinkti, jeigu jis pradeda žaidimą langelyje (1,1)$(1, 1)$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30095","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t길이가 N$N$인 수열 a1$a_{1}$, a2$a_{2}$, ⋯$\\cdots$, aN$a_{N}$이 주어진다. 다음 쿼리를 수행하는 프로그램을 작성하시오.\n\n\n\t l$l$ r$r$: al$a_{l}$, al+1$a_{l+1}$, ⋯$\\cdots$, ar$a_{r}$에서 모든 연속 부분 수열의 gcd$\\gcd$의 합을 출력한다. 즉, ∑i=lr∑j=irgcd(ai,ai+1,⋯,aj)$\\sum_{i=l}^{r}\\sum_{j=i}^{r}\\gcd(a_{i}, a_{i+1}, \\cdots, a_{j})$을 출력한다.\n\n\n단, 모든 입력 데이터에서 a$a$의 모든 연속 부분 수열의 gcd$\\gcd$의 합은 1018$10^{18}$을 넘지 않음이 보장된다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30013","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t돌베어 법칙은 아래와 같이 귀뚜라미의 울음소리와 주변 온도의 연관성을 정리한 법칙이다.\n\n\n\t T=(Count+37)∘F$T = (Count+37)\\,^{\\circ}\\mathrm{F}$ \n\t T$T$: 기온(화씨), Count$Count$: 1분 동안 귀뚜라미가 우는 횟수\n\n\n예찬이는 돌베어 법칙이 진짜인지 증명하기 위해 귀뚜라미가 우는 횟수를 N$N$초 동안 직접 측정하려고 한다.\n\n하지만 귀뚜라미 여러 마리의 울음소리가 뒤섞여 제대로 측정할 수 없다는 것을 깨달은 예찬이는 증명을 포기할 수밖에 없었다.\n\n대신 예찬이는 귀뚜라미의 울음소리를 1$1$초 간격으로 N$N$초 동안 측정해 울고 있는 귀뚜라미가 최소 몇 마리인지 알아내려고 한다.\n\n모든 귀뚜라미는 다음과 같은 규칙을 따른다.\n\n\n\t각 개체는 임의의 시점에 처음 울기 시작한 뒤 주기가 지날 때마다 한 번씩 운다.\n\t각 개체가 우는 주기는 임의의 양의 정수이며, 개체에 상관없이 모두 동일하다.\n\t각 개체는 임의의 시점에 우는 것을 멈추며, 이후로는 울지 않는다.\n\n\n예찬이를 도와 현재 울고 있는 귀뚜라미의 최소 개체 수 X$X$를 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30052","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t준성이와 효석이는 N×M$N \\times M$ 크기의 격자판 위에서 게임을 하고 있다. 규칙은 다음과 같다.\n\n\n\t준성이와 효석이는 각자 말을 한 개씩 가지고 시작한다.\n\t효석이는 준성이가 말을 둘 수 없는 격자 칸 A$A$개를 정한다.\n\t준성이는 말을 둘 수 있는 격자 칸 중 하나에 말을 두고, 효석이는 준성이가 말을 둔 격자 칸을 제외한 모든 격자 칸 중 하나에 말을 둔다.\n\t두 말 사이의 택시 거리가 D$D$보다 작으면 준성이가, 같거나 크면 효석이가 승리한다.\n\n\n준성이와 효석이가 최선을 다해 게임을 진행했을 때, 효석이가 승리할 수 있는 A$A$의 최솟값을 구하여라.\n\n단, 효석이가 승리할 수 없는 경우는 입력으로 주어지지 않는다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30035","content":"문제\n\n대학에 입학한 성은이는 게임을 하진 않았지만, 주변 친구들이 유행하는 게임 \"Legend Legend\"의 티어를 자랑하는 것에 관심이 생겼다. 티어란 게임 내 유저의 실력을 나타내기 위해 유저 등수를 기반으로 매겨지는 등급 시스템이다. 게임의 총 유저 수가 \nN\n$N$명일 때, 게임 내 유저의 등수는 \n1\n$1$ 이상 \nN\n$N$ 이하의 정수로 서로 다르다.\n\n\"Legend Legend\" 게임의 티어를 정하는 프로세스는 아직 티어가 정해지지 않은 유저 중에서 등수가 높은 유저부터 차례대로 상위 티어를 배정하고, 남은 사람들을 하위 티어에 배정하는 재귀적인 프로세스이다. 이때, 티어가 정해지지 않은 유저 중 상위 몇 명을 고르는 기준에 따라 고정 티어와 상대 티어로 나뉜다. 아직 티어가 정해지지 않고 남은 유저가 \nM\n$M$명이라고 할 때, 고정 티어와 상대 티어가 수용하는 인원수는 아래와 같이 정해진다.\n\n \nK\n$K$명 수용할 수 있는 고정 티어: \nmin(M,K)\n$\\min(M, K)$ \n \nK\n$K$% 수용할 수 있는 상대 티어: \n⌊M×K100⌋\n$\\lfloor \\frac{M \\times K}{100} \\rfloor$ (\n⌊x⌋\n$\\lfloor x \\rfloor $)는 \nx\n$x$ 이하의 가장 큰 정수를 의미한다)\n\n상위 티어부터 하위 티어 순으로, 티어가 수용하는 인원수만큼 해당 티어를 배정하고 다음 티어 차례로 넘어가는 것을 반복한다. 이 과정에서 모든 유저의 티어가 정해지지 않으면 올바르지 않은 등급 시스템이다.\n\n\"Legend Legend\"는 같은 티어 안에서도 유저의 실력을 가르기 위해, 각각의 티어를 \n4\n$4$개로 나눈 뒤 숫자 \n1\n$1$, \n2\n$2$, \n3\n$3$, \n4\n$4$를 붙여서 세분화하고, 이름 뒤에 숫자를 붙여 함께 부른다. 붙은 숫자가 작을수록 더 높은 세분화된 티어이다. 어떤 티어에 속하는 유저의 수가 \nL\n$L$명이라면, \n4\n$4$개로 세분화된 티어에는 각각 최대 \n⌈L4⌉\n$\\lceil \\frac{L}{4} \\rceil$명의 유저를 수용할 수 있다. (\n⌈x⌉\n$\\lceil x \\rceil $는 \nx\n$x$이상의 가장 작은 정수를 의미한다). 유저는 순위가 높은 순서대로 가장 높은 세분화된 티어부터 최대 수용 인원을 채울 때까지 차례대로 배정된다.\n\n유저는 자신의 티어를 자랑할 때, \"Grandmaster3\"이라고 세분화된 티어로 말하는 경우도 있지만, \"Grandmaster\"라고 티어만 말하는 경우도 있다. 문득 성은이는 자신이 들은 친구의 티어(또는 세분화된 티어)로부터, 이 친구의 게임 내 등수의 가능한 범위를 알고 싶어졌다. 성은이를 대신해서 이 문제를 해결하자."},{"problemId":"30096","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t시사 교양 프로그램 '걸어서 트리속으로'의 PD인 종경이는 N$N$개의 나라를 한 번씩 촬영하려고 한다. 각 나라의 번호는 1$1$번부터 N$N$번까지이다. 두 나라를 잇는 N−1$N-1$개의 양방향 직항 항공편이 있으며, 각 나라에서 모든 나라로 비행기를 통해 이동할 수 있다. 한 나라에서 다른 나라로 이동할 때는 비행기만 이용해야 하며, 비행기 탑승 횟수를 최소화하는 방법으로 이동해야 한다.\n\n종경이는 촬영 순서를 잘 정하여 시청률을 높이고자 한다. 이를 위해 N$N$개 나라의 순서 A[0]→A[1]→⋯→A[N−1]$A[0]\\rightarrow A[1]\\rightarrow \\cdots \\rightarrow A[N-1]$는 다음 조건을 추가로 충족해야 한다.\n\n\n\t 0≤i<N$0 \\le i < N$인 모든 i$i$에 대해, dist(A[i],A[i+1])+dist(A[i+1],A[i+2])≠dist(A[i],A[i+2])$\\text{dist} (A[i], A[i+1]) + \\text{dist} (A[i+1], A[i+2]) \\neq \\text{dist} (A[i], A[i+2])$ (단, A[N]=A[0],A[N+1]=A[1]$A[N] = A[0], A[N+1] = A[1]$)\n\n\n단, dist(x,y)$\\text{dist} (x, y)$는 x$x$번 나라에서 y$y$번 나라로 이동할 때, 비행기에 탑승하는 최소 횟수를 나타낸다.\n\n바쁜 종경이를 대신하여, 나라들의 순서를 정하는 방법의 수를 998244353$998\\,244\\,353$으로 나눈 나머지를 구해주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30053","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t야생 동물들의 습격을 자주 당하는 마을 사람들이 마을을 뾰족 나무 울타리로 감싸려고 한다. 사람들은 나무를 도끼로 내려찍어 나무들이 겹치지 않도록 하며 좌우로 쓰러트렸다. 인부들은 한자리에서 서서 내려가면서 나무가 쓰러진 첫 지점을 시작점으로 양쪽이 뾰족하도록 깎은 후, 깎은 나무들로 마을을 둘러싸는 울타리를 지으려 한다. 단, 인부의 위치와 나무가 쓰러진 끝 지점이 같으면 나무를 깎을 수 없다.\n\n작업을 마친 후, 마을 사람들을 대신해 울타리 조각들의 총길이를 구해주자.\n\n\n\n예를 들어, 그림의 첫 번째 나무에서는 (1, 2), (4, 8) 두 개의 울타리 조각을 얻고, 두 번째 나무에서는 (8, 10), (12, 15) 두 개의 울타리 조각을 얻어 총길이는 1 + 4 + 2 + 3 = 10이 된다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30036","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tINK는 하얀 사각형을 조종하여, 다양한 위험 요소를 피해 도착 지점으로 도달하는 플랫포머 퍼즐 게임이다. 플레이어가 조종하는 하얀 사각형은 점프할 때마다 다양한 색의 잉크를 흩뿌린다. 흩뿌려진 잉크는 투명한 장애물에 부딪혀, 투명했던 장애물을 염색시킨다. 그 이후로 플레이어는 염색된 장애물을 볼 수 있게 된다.\n\n스테이지의 레벨은 N×N$N \\times N$ 크기의 그리드로 표현할 수 있다. (y,x)$(y, x)$는 y$y$행 x$x$열에 위치한 칸을 의미하며, 칸은 항상 빈칸이거나 장애물 중 하나이다. 스테이지의 레벨에서 게임을 시작하면 플레이어는 스테이지에서 커맨드를 입력하여 사각형을 조종할 수 있다. 스테이지에서 플레이어는 커맨드를 총 K$K$번 입력한다. 아래는 커맨드에 대한 설명이다.\n\n\n\t이동 커맨드\n\t\n\t\t대문자 알파벳 U$U$, D$D$, L$L$, R$R$로 4가지이고 각각 상, 하, 좌, 우 방향으로 1$1$칸 이동함을 의미한다.\n\t\t이동 커맨드에 따라 움직였을 때 사각형이 스테이지 밖으로 벗어나거나 장애물과 겹치는 경우 해당 커맨드는 무시된다.\n\t\n\t\n\t잉크 충전 커맨드\n\t\n\t\t잉크 충전 커맨드는 소문자 알파벳 j$j$이다.\n\t\t잉크 충전 커맨드를 입력받으면 사각형이 가지고 있는 잉크의 양이 1$1$ 증가한다.\n\t\t게임 시작 시 사각형이 가지고 있는 잉크의 양은 0$0$이다.\n\t\n\t\n\t점프 커맨드\n\t\n\t\t점프 커맨드는 대문자 알파벳 J$J$이다.\n\t\t점프 커맨드를 입력받으면 사각형이 제자리에서 점프하면서 잉크가 흩뿌려지며, 이때 잉크의 양은 사각형이 가지고 있는 잉크의 양과 같다.\n\t\t\n\t\t\t잉크의 색상이 ci$c_i$이고 잉크의 양이 mi$m_i$인 잉크가 (yi,xi)$(y_i, x_i)$ 지점에서 흩뿌려졌을 때 |yi−a|+|xi−b|≤mi$|y_i-a|+|x_i-b| \\le m_i$를 만족하는 (a,b)$(a, b)$ 칸이 장애물 칸이라면 ci$c_i$로 칠해진다.\n\t\t\t만약 장애물 칸이 다른 색상으로 이미 칠해져 있다면, 나중에 닿은 잉크의 색상으로 덮어씌워 칠해진다.\n\t\t\n\t\t\n\t\t점프한 직후 사각형이 가지고 있는 잉크의 양은 0$0$이 된다.\n\t\n\t\n\n\n잉크의 색상은 점프 커맨드 입력 횟수와 잉크 문자열에 의해 결정된다.\n\n\n\t잉크 문자열\n\t\n\t\t잉크 문자열은 알파벳 대문자로 이루어진 길이가 I$I$인 문자열이다.\n\t\t t×I+d$t \\times I + d$번째 점프할 때의 잉크의 색상은 잉크 문자열의 d$d$번째 문자가 된다. (t$(t$는 음이 아닌 정수;$;$ 1≤d≤I)$1 \\le d \\le I)$\n\t\t\n\t\t\t예를 들어 1$1$번째 점프는 1$1$번째 문자, 2$2$번째 점프는 2$2$번째 문자, I$I$번째 점프는 I$I$번째 문자, I+1$I + 1$번째 점프는 1$1$번째 문자, I+2$I + 2$번째 점프는 2$2$번째 문자가 된다.\n\t\t\n\t\t\n\t\n\t\n\n\n잉크 문자열, 초기 스테이지의 레벨 모습, 플레이어가 입력한 커맨드를 입력받아 커맨드를 모두 실행한 후의 스테이지 모습을 출력하는 프로그램을 작성해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30097","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t두 정수 N$N$, K$K$가 주어졌을 때, 다음 조건에 맞는 집합 S$S$의 개수를 998244353$998\\,244\\,353$으로 나눈 나머지를 구하시오.\n\n\n\t S$S$의 모든 원소는 K$K$의 배수가 아닌 N$N$ 이하의 서로 다른 양의 정수이다.\n\t |S|$|S|$는 짝수이다.\n\t S$S$의 모든 원소의 합은 N$N$이다.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30014","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t선린의 대표 스윗남인 준영이는 여자친구 아스나를 위한 선물을 준비 중이다. 그는 N$N$개의 진주로 이루어진 원형의 진주 목걸이를 선물해 줄 생각이다.\n\n i$i$ (1≤i≤N)$(1 \\leq i \\leq N)$번째 진주알은 가치 Pi$P_{i}$를 지닌다. 이 진주알 N$N$개를 적당한 순서로 재배열하여 목걸이의 가치가 최대가 되는 목걸이를 선물하려고 한다. 이때 임의로 재배열한 후 i$i$번째 진주알의 가치를 Ai$A_i$ (1≤i≤N)$(1 \\leq i \\leq N)$라 하자. 목걸이의 가치 X$X$는 서로 인접한 진주알 쌍에 대해 두 진주알의 가치를 곱한 값의 합이다.\n\n수식으로 표현하면 다음과 같다. X=A1×A2+A2×A3+⋯+AN−1×AN+AN×A1$X=A_{1}\\times A_{2}+A_{2}\\times A_{3} + \\cdots +A_{N-1}\\times A_{N}+A_{N}\\times A_{1}$ \n\n목걸이의 가치 X$X$의 최댓값과 그 가치가 나오기 위해 목걸이를 재배열했을 때 i$i$번째 진주알의 가치 Ai$A_i$를 출력하라. 가치가 최대인 목걸이 배치가 여러 가지 존재할 경우, 그 중 하나를 아무거나 출력한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30037","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t아티초크는 교양과목 '한국 문화로 보는 프로그래밍 언어론'을 수강 중이다.\n\n아티초크는 지난주에 과제로 '아희가 한국 문화에 미친 영향'을 주제로 5000$5\\,000$단어 분량의 보고서를 작성했는데, 이번 주에는 이 보고서를 짧게 요약하는 과제가 나왔다.\n\n이번 학기에 전공과목만 7$7$과목을 수강하고 있었던 아티초크는 보고서 요약을 직접 할 여유가 없었다.\n\n따라서 아래의 규칙에 따라 보고서를 요약해주는 프로그램을 만들기로 했다. 규칙은 다음과 같다.\n\n\n\t보고서에 단어 'Korea'가 등장할 경우, 다음에 나오는 단어와 합쳐 'K-단어'로 축약한다. (ex. Korea language → K-Language)\n\t\n\t\t단어 'Korea'는 대문자와 소문자를 구분한다.\n\t\t단어 'Korea' 다음에 나오는 단어의 첫 글자가 소문자일 경우 대문자로 변환한다.\n\t\t이 규칙을 여러 번 연달아 적용할 수 있는 경우 뒤에서부터 적용한다.\n\t\t단어 'Korea' 뒤에 문장 부호가 붙어 있는 경우 이 규칙을 적용할 수 없다.\n\t\n\t\n\t보고서에 단어 'of' 직후에 단어 'Korea'가 등장할 경우, 단어 'of' 직전에 나오는 단어와 합쳐 K-단어로 축약한다. (ex. Language of Korea → K-Language)\n\t\n\t\t단어 'of'와 'Korea'는 대문자와 소문자를 구분한다.\n\t\t단어 'of' 직전에 나오는 단어의 첫 글자가 소문자일 경우 대문자로 변환한다.\n\t\t이 규칙을 여러 번 연달아 적용할 수 있는 경우 앞에서부터 적용한다.\n\t\t단어 'of' 뒤에 문장 부호가 붙어 있는 경우 이 규칙을 적용할 수 없다.\n\t\t단어 'of' 앞에 단어가 없거나, 단어 'of' 직전에 나오는 단어에 문장 부호가 붙어 있는 경우 이 규칙을 적용할 수 없다.\n\t\t단어 'Korea' 뒤에 문장 부호가 붙어있는 경우, 단어 'Korea' 뒤의 문장 부호를 단어 'of' 직전에 나오는 단어 뒤에 붙인다. \n\t\n\t\n\t1번 규칙과 2번 규칙을 한 문장에 동시에 적용할 수 있는 경우, 2번 규칙을 먼저 적용한다.\n\n\n아티초크는 전공 과제가 너무 밀려, 보고서 요약 프로그램을 작성할 여유조차 없었다. 그런 아티초크를 대신하여 구현해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30054","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t테이블이 1개 있는 24시간 맛집이 있다. 이 식당은 예약제로 운영되며 1시간에 오직 1명의 예약을 받는다.\n\n어느 날, 식당 사장님은 예약하고도 제때 오지 않는 손님들이 많아 다음과 같은 규칙을 만들었다.\n\n\n\t식당 입장은 매 정각에 이루어지며, 식당에 입장한 손님은 1시간 뒤에 퇴장한다.\n\t자신의 예약 시간이 아닌 시간에 도착한 손님들은 대기 줄에 선다. 동시에 도착한 손님들은 예약 시간이 빠른 순으로 선다.\n\t자신의 예약 시간에 늦지 않게 도착한 손님은 예약 시간이 되면 먼저 입장한다.\n\t예약이 없거나 예약자가 도착하지 않았다면 대기 줄의 첫 번째 손님이 입장한다.\n\n\n대기 줄에 있는 손님들은 인내심이 뛰어나기 때문에 식당에 입장할 때까지 줄을 이탈하지 않는다.\n\n각 손님이 예약한 시각 t1$t_1$과 도착한 시각 t2$t_2$가 주어졌을 때, 식당에 도착해 입장할 때까지 가장 오래 기다린 손님이 몇 시간을 기다렸는지 구하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30098","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n누구나 시선을 빼앗기는 너는 완벽한 궁극의 아이돌\n\n\n아이돌 애니메이션을 인상 깊게 시청한 종경이는 경기과학고등학교에서도 아이돌 그룹을 만들 계획을 세웠다. 이에 따라 정보과학세미나2를 수강하는 학생들 N$N$명을 불러 모아 몇 개의 아이돌 그룹을 결성하고자 한다.\n\n N$N$명의 학생이 일렬로 서 있고, i$i$번째 학생의 매력은 ai$a_i$로 표현된다. (1≤i≤N)$(1 \\le i \\le N)$ 종경이는 이 학생들을 몇 개의 아이돌 그룹으로 분할하려고 한다. 하나의 아이돌 그룹은 연속한 학생들로 구성되어야 하며, 각 학생은 정확히 하나의 아이돌 그룹에 속해야 한다. 또, 너무 많은 학생이 한 그룹에 속하지 않도록 하나의 아이돌 그룹은 M$M$명 이하의 학생으로 구성되어야 한다. 한 아이돌 그룹의 매력은 그 아이돌 그룹에 속한 학생의 매력 중 최댓값에서 최솟값을 뺀 값과 같다.\n\n종경이는 학생들을 적절히 분할하여 아이돌 그룹을 구성하여 모든 아이돌 그룹의 매력의 합이 최대가 되는, 완벽한 궁극의 아이돌을 만들려 한다. 여러분이 종경이를 도와주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30099","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t전국 최고의 ps 명문 학교인 경기과학고등학교에서는 학생들을 배려하여, 자정 이후에 진행되는 코드포스를 할 수 있도록 환경을 마련해 준다. 날고 기는 경곽의 ps강자들 중에서도 정점에 서 있는 요이사키 종경은 오늘의 코포 이전에 그가 좋아하는 애니메이션 중 하나인 \"중2병이라도 ps가 하고 싶어!\"를 보고자 한다. 그러나, 그를 능가하는 강자인 아사히나 기범은 그의 컴퓨터를 해킹하여 모든 신상을 털고 코드포스에 틀린 제출을 하여 그의 레이팅을 300$300$만큼 내려 버렸다! 극한의 분노에 사로잡힌 종경은 기범의 컴퓨터를 물리적으로 해킹하고자 한다.\n\n기범의 컴퓨터를 해킹하기 위해서는 NP-Hard로 알려져 있는 지뢰 찾기를 완수해야 한다. 그러나, 종경은 자신의 마법 능력을 통해 모든 칸에 대해, 그 칸과 한 점 이상을 공유하는 칸 중 안전한 칸의 개수를 알아내었으며, 추가로 첫 행에 속한 모든 칸에 지뢰가 있는지의 여부를 알아내었다. 그러나 이 작업만으로도 종경은 지쳤기 때문에, 그는 당신에게 도움을 요청했다. 종경을 도와 지뢰 찾기를 해결해 주자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30038","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t스킵이는 신작 게임 Overdose Runner를 플레이하고 있다. 게임의 목표는 플레이어가 특정 지점에 도착하는 것이다. 이 게임은 N×M$N\\times M$ 크기의 2차원 좌표계로 나타낼 수 있다. 좌표 안에는 플레이어, 빈칸, 몬스터, 장애물, 목적지가 존재한다. 플레이어는 공격력, 공격 사거리, 이동속도, 레벨, 경험치, 요구 경험치 6가지의 능력치를 가진다. 플레이어는 행동력을 소모해 특정 행동을 할 수 있는데 그 행동은 아래와 같다.\n\n\n\t순간이동 - 행동력 1을 소모해 상하좌우 중 한 방향을 정해 정확히 p$p$만큼 떨어진 위치로 이동한다. 이때 p$p$는 캐릭터의 이동속도다. 이동할 위치가 좌표 범위 밖이거나 장애물 혹은 몬스터가 있으면 움직일 수 없다.\n\t대기 - 행동력 1을 소모해 아무 행동도 하지 않는다.\n\t공격 - 행동력 3을 소모해 상하좌우 중 한 방향으로 투사체를 발사한다. 투사체는 발사된 방향으로 공격 사거리만큼의 거리를 한 칸씩 움직이며 투사체와 몬스터가 같은 위치에 있게 되면 몬스터의 체력이 (플레이어의 공격력 - 몬스터의 방어력)만큼 감소한다. 단, 플레이어의 공격력이 몬스터의 방어력보다 낮은 경우 몬스터의 체력은 감소하지 않는다. 만약 이 행동으로 인해 몬스터의 체력이 0 이하가 되면 그 자리는 빈칸이 되고 플레이어는 경험치를 획득한다. 투사체가 이동할 다음 좌표에 장애물이 있는 경우 투사체는 사라진다. 투사체가 사라진 후 다음 행동을 처리한다. 투사체는 장애물을 제외한 다른 물체를 만나도 사라지거나 행동을 멈추지 않는다.\n\t약 먹기 - 행동력 2를 소모해 이동속도가 1 증가 혹은 감소하는 약을 먹는다. 이동속도가 0인 경우 음수로 내려가지 않는다. 이때 행동력은 그대로 소모된다. 약을 5번 먹을 때마다 OVERDOSE 상태가 되며 OVERDOSE 상태에서는 순간이동, 대기를 제외한 다른 행동을 할 수 없다. OVERDOSE 상태가 된 후 행동력을 10 이상 소모할 경우 OVERDOSE 상태는 해제된다.\n\t클리어 - 플레이어가 목적지와 같은 좌표에 있으면 행동력 0을 소모해 스테이지를 클리어한다. 게임을 클리어한 후 캐릭터는 다른 행동을 할 수 없다.\n\n\n한 가지 행동이 끝난 후 경험치를 얻어 요구 경험치 이상이 되면, 경험치 < 요구 경험치를 만족할 때까지 레벨이 상승하고 경험치를 요구 경험치만큼 뺀다.\n\n캐릭터는 게임을 처음 시작했을 때 공격력 5, 공격 사거리 1, 이동속도 1, 요구 경험치 10, 경험치 0, 레벨 1로 시작하며 레벨이 l$l$일 때 레벨이 상승하면 레벨이 l+1$l+1$이 되고, 공격력이 l$l$만큼, 공격 사거리가 1만큼, 요구 경험치가 10만큼 증가한다.\n\n스킵이가 게임을 시작한 후 한 행동이 차례대로 주어진다. 만약 스킵이가 한 행동이 불가능한 행동이었을 경우 게임은 그 행동을 무시하고 다음 행동을 실행한다. 이 때 행동력은 소모되지 않는다. 모든 행동을 실행한 뒤 게임 화면을 출력해보자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30039","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t지금까지 세상에 존재하지 않았던 새로운 자료구조 Queueueue를 소개한다. 자료구조 Queueueue는 가로 Queue와 세로 Queue로 구성되어 있으며, 두 Queue가 십자가로 겹친 형태이다. 즉, 원소 1개에 대해서 중간 지점을 공유하고 있다. Queueueue의 정확한 정의는 다음과 같다.\n\n\n\t가로 Queue의 원소 개수를 nh$n_h$, 세로 Queue의 원소 개수를 nv$n_v$로 정의한다.\n\t가로 Queue의 ⌈nh2⌉$\\left\\lceil \\frac{n_h}{2} \\right\\rceil$번째 원소와 세로 Queue의 ⌈nv2⌉$\\left\\lceil \\frac{n_v}{2} \\right\\rceil$번째 원소는 서로 공유하는 같은 원소이다. 이 원소를 공유 원소라고 정의한다.\n\tQueueueue는 명령을 수행하고 나서 매번 공유 원소를 새로 갱신한다.\n\t비어있는 Queueueue에는 공유 원소가 없다. 비어있는 Queueueue에 원소를 넣으면 그 원소가 공유 원소가 되며 nh=1$n_h = 1$, nv=1$n_v = 1$이다.\n\t\n\t\t nh=0$n_h = 0$, nv=0$n_v = 0$인 경우를 제외하고 nh×nv=0$n_h \\times n_v = 0$인 경우는 없다. 따라서 Queueueue가 비어있지 않다면 항상 nh≥1$n_h \\ge 1$, nv≥1$n_v \\ge 1$이다.\n\t\n\t\n\n\n처음에 Queueueue는 비어있으며 Queueueue는 다음 13가지 명령을 할 수 있다.\n\n\n\thpush x : 가로 Queue의 맨 뒤에 정수 x$x$를 넣는다. (1≤x≤100000)$(1 \\le x \\le 100\\,000)$ \n\thpop : 가로 Queue에 정수가 있다면 맨 앞에 있는 정수를 빼고 출력한다. 없다면 -1을 대신 출력한다.\n\thfront : 가로 Queue에 정수가 있다면 맨 앞에 있는 정수를 출력한다. 없다면 -1을 대신 출력한다.\n\thback : 가로 Queue에 정수가 있다면 맨 뒤에 있는 정수를 출력한다. 없다면 -1을 대신 출력한다.\n\thsize : 가로 Queue에 들어있는 정수의 개수를 출력한다.\n\tvpush x : 세로 Queue의 맨 뒤에 정수 x$x$를 넣는다. (1≤x≤100000)$(1 \\le x \\le 100\\,000)$ \n\tvpop : 세로 Queue에 정수가 있다면 맨 앞에 있는 정수를 빼고 출력한다. 없다면 -1을 대신 출력한다.\n\tvfront : 세로 Queue에 정수가 있다면 맨 앞에 있는 정수를 출력한다. 없다면 -1을 대신 출력한다.\n\tvback : 세로 Queue에 정수가 있다면 맨 뒤에 있는 정수를 출력한다. 없다면 -1을 대신 출력한다.\n\tvsize : 세로 Queue에 들어있는 정수의 개수를 출력한다.\n\tsize : Queueueue에 들어있는 정수의 개수를 출력한다.\n\tempty : Queueueue가 비어있으면 1, 아니면 0을 출력한다.\n\tmiddle : Queueueue에 정수가 있다면 Queueueue의 공유 원소에 해당하는 정수를 출력한다. 없다면 -1을 대신 출력한다.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30015","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t선린여학원의 학생회장인 소금이는 학생회를 모집하려 한다. 최고의 학생회를 원하는 소금이는 학생들 중 K$K$명을 뽑아 학생회를 구성하려 한다. 그러나 아이돌 활동으로 바쁜 그녀는 학생회 멤버 선발을 당신한테 맡기고 말았다! 소금이를 위해 학생회 멤버를 뽑아보자.\n\n선린여학원에는 N$N$명의 학생이 있다. 각 학생의 능력은 정수 Ai(1≤i≤N)$A_{i} \\, (1 \\leq i \\leq N)$로 표현된다. \n\n학생회의 능력을 X$X$라 하자. 당신이 뽑은 학생회 멤버들 각각의 능력 값을 B1$B_1$, B2$B_2$, ⋯$\\cdots$, BK$B_K$ 라 하면, X=B1&B2&B3&⋯&BK$X = B_{1} \\, \\& \\, B_{2} \\, \\& \\, B_{3} \\, \\& \\cdots \\, \\& \\, B_{K}$로 정의된다.\n\n &$ \\& $는 AND 비트 연산이다. 예) 5&3=0101(2)&0011(2)=0001(2)=1$ 5 \\, \\& \\, 3 = 0101_{(2)} \\, \\& \\, 0011_{(2)} = 0001_{(2)} = 1$ \n\n이때 학생회 능력 X$X$의 최댓값을 출력하라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30111","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tArchitektas Marijonas bando optimizuoti susisiekimą kalnuotoje vietovėje, kurioje kalnai išsidėstę tiesėje.\n\nJis aprašė vietovę kaip N$N$ dydžio masyvą A$A$, kurio k$k$-toji pozicija nusako k$k$-tojo kalno aukštį.\n\nDabar jis planuoja pastatyti tiltą tarp dviejų kalnų. Marijonas dar nežino, tarp kurių kalnų jis statys tiltą, bet jam įdomu sužinoti statybų kainą, jei tiltas būtų statomas tarp kalnų Li$L_i$ ir Ri$R_i$.\n\nStatybų kaina tarp tiltų apskaičiuojama taip:\n\n\n\ttilto aukščiu Marijonas pasirenka šoninių kalnų aukščių vidurkio sveikąją dalį Mi=⌊A[Li]+A[Ri]2⌋$M_i = \\left\\lfloor \\frac{A[L_i] + A[R_i]}{2}\\right\\rfloor$;\n\ttoliau tiltas tiesiamas virš kiekvieno kalno, kurio indeksas ki$k_i$ yra Li≤ki≤Ri$L_i ≤ k_i ≤ R_i$;\n\tjei kalno aukštis A[ki]≤Mi$A[k_i ] ≤ M_i$, Marijonui reikės pastatyti pastolius. Pastolių statymo kaina yra Mi−A[ki]$M_i − A[k_i ]$;\n\tjei kalno aukštis A[ki]>Mi$A[k_i ] > M_i$, Marijonui reikės iškasti tunelį. Tunelio kaina yra 1$1$.\n\n\nMarijonas gali lengvai apskaičiuoti vieno tilto kainą, tačiau jam įdomu rasti kainą tarp Q$Q$ kalnų porų. Ar galite padėti Marijonui rasti Q$Q$ tiltų statymo kainas?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30055","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t우주비행사 정민이가 여행하고 있는 세계에는 서로 다른 차원이 2개 존재한다. 각 차원은 가로, 세로의 길이가 짝수인 격자 형태로 이루어져 있으며, 각 칸에는 블랙홀이 존재할 수 있다. 블랙홀과 같은 칸에 있는 모든 것들은 빨려 들어가 다시는 빠져나올 수 없게 된다.\n\n어느 날 정민이는 “괜찮아 안 죽어~”를 외치며 우주선 밖을 나갔다가 표류당했다. 정민이는 현재 N1×M1$N_1 \\times M_1$ 크기 차원의 (0,0)$(0,0)$에 있고, 우주선은 또 다른 차원인 N2×M2$N_2 \\times M_2$ 크기의 차원의 (N2−1,M2−1)$(N_2-1, M_2-1)$에 정지해 있다. 정민이는 1초에 한 번씩 상하좌우로 한 칸 이동하거나 차원 이동 게이트를 가동할 수 있으며, 블랙홀은 기류의 흐름에 따라 매초 새로운 블랙홀을 생성한다. 이때, 블랙홀의 생성은 정민이의 행동이 끝난 후에 이루어진다. \n\n기류는 세로축 좌표가 짝수일 때는 가로축 좌표가 증가하는 방향으로 흐르고, 홀수일 때는 감소하는 방향으로 흐른다. 더 이상 가로축으로 이동할 수 없으면 세로축이 증가하는 방향으로 한 칸 이동한다. (N−1,0)$(N-1, 0)$에 도달하면 (0,0)$(0,0)$으로 이동하여 같은 방식으로 순환한다. 예를 들어 N=4$N=4$, M=4$M=4$일 때 다음과 같은 방식으로 순환한다.\n\n\n\n 4×4$4 \\times 4$ 크기의 차원이 있고 블랙홀이 (2,2)$(2,2)$에 하나 존재한다고 하자. 1초 후 기류가 흐르는 방향에 따라 (2,3)$(2,3)$에 새로운 블랙홀이 생성된다. 6초 후에는 (0,0)$(0,0)$에 새로운 블랙홀이 생성되며, 15초 후에는 모든 칸에 블랙홀이 존재하게 된다. 이미 블랙홀이 있는 자리에는 새로운 블랙홀이 생성되지 않는다.\n\n\n\n정민이는 차원 이동 게이트를 통해 두 차원을 넘나들 수 있다. 차원 이동 게이트는 두 차원에 각각 존재하며, A×B$A \\times B$ 만큼의 칸을 차지한다. 두 게이트의 크기는 서로 같지만, 존재하는 위치는 다를 수 있다. 차원 이동 게이트 내부에서 게이트를 가동하면 3초에 걸쳐 차원 이동을 하게 되고, 차원을 넘기 전과 같은 게이트 내부 좌표로 이동하게 된다. 게이트 가동 전에는 게이트 내부를 자유롭게 이동할 수 있지만, 가동 후에는 도착할 때까지 움직일 수 없다. 게이트를 가동한 순간부터 차원 이동이 완료될 때까지는 차원 간 통로에 있기 때문에 블랙홀에 휩쓸리지 않는다. 즉, 블랙홀이 게이트를 덮어도 차원 이동 중에는 영향을 받지 않는다.\n\n\n\n정민이를 위해 블랙홀에 휩쓸리지 않고 우주선에 도착할 수 있는 최단 시간을 구해주자. 정민이가 우주선에 도착한 시간에 블랙홀이 우주선 위치에 도달하면 정민이는 우주선과 함께 블랙홀에 휩쓸린다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30112","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tLegendos byloja, kad Bitlandijos istorinėje sostinėje Vilkamiestyje gatvės susikirsdavo sankryžose su ne daugiau kaip 5$5$ kitomis gatvėmis.\n\nVilkamiesčiui praradus sostinės vardą, miestas buvo perprojektuotas, t. y. sankryžos buvo atnaujintos į tokias, kuriose susikirstų lygiai 3$3$ gatvės. Tyrinėtojams pavyko atkurti, kad gatvių pakeitimas vyko taip:\n\n buvo pakeista į  ,\n\n į  ,\n\n į  ,\n\n į  ,\n\nir, galiausiai,  į  .\n\nPadėkite tyrinėtojams atkurti senąjį gatvių išsidėstymą, surašydami, kiek kokio tipo (t. y. su kokiu susikertančių gatvių skaičiumi) sankryžų buvo senojoje sostinėje.\n\nDuotas gatvių žemėlapis. Suskaičiuokite, kiek sankryžų prieš miesto perprojektavimą buvo su viena gatve, kiek su dviem, kiek su trimis, kiek su keturiomis ir kiek su penkiomis gatvėmis.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30016","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t무대소녀 바나나는 고등학교 3학년이 되었다. 명문 대학을 가고 싶은 그녀이지만, 평소 연기 연습만을 하며 내신 공부를 전혀 하지 않았던 바나나는 정신을 차리고 T$T$시간 뒤에 있는 수능을 위해 공부하기로 마음먹었다. 그러나 공부 경험이 없는 바나나는 공부를 얼마나 해야 하는지를 알 수 없었다. 바나나를 위해 공부 스케줄을 짜주자!\n\n수능에는 N$N$개의 과목이 있다. i$i$ (1≤i≤N)$(1\\leq i\\leq N)$번 과목을 총 j$j$ (0≤j≤T)$(0\\leq j\\leq T)$시간 공부했을 때 받을 수 있는 점수를 Si,j$S_{i,j}$ 라 하자. 바나나가 지켜오던 스케줄에 따라, 각 과목의 공부 시간은 음이 아닌 정수여야 함에 주의하자.\n\n그러나 인간의 체력에 한계가 있기 때문에 하루 종일 공부를 하는 것은 힘들다. 총 X$X$ (0≤X≤T)$(0\\leq X\\leq T)$시간 만큼 공부를 하면 피곤해져서 총 점수가 DX$D_{X}$만큼 감소하게 된다. 이로 인하여 점수가 음수가 될 수도 있음에 주의하자.\n\n당신은 최적의 방법으로 공부를 하였을 때 바나나가 얻을 수 있는 최대 점수와 그때의 공부 방법을 구해야 한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30056","content":"문제\n\n길이가 \nN\n$N$(단, \nN\n$N$은 \n3\n$3$의 배수)인 수열 \nX\n$X$가 있다. 수열 \nX\n$X$의 모든 원소는 \nA\n$A$, \nB\n$B$, \nC\n$C$ 중 하나의 색깔로 칠해졌으며 한 색깔로 칠한 원소의 수는 \nN3\n$\\frac{N}{3}$개로 모두 같다. 수열의 앞에서부터 \nA\n$A$로 색칠한 원소를 순서대로 \nA1,A2,⋯,AN3\n$A_1, A_2, \\cdots, A_{\\frac{N}{3}}$라고 정의한다. \nB\n$B$와 \nC\n$C$에 대해서도 같은 방식으로 \nBi\n$B_i$, \nCi\n$C_i$를 정의한다.\n\n다음과 같은 쿼리를 수행하는 프로그램을 작성하자.\n\n1 i j k: 수열 \nX\n$X$의 \ni\n$i$번째 원소부터 \nj\n$j$번째 원소까지 \nk\n$k$를 더한다.\n2 i j: 수열 \nX\n$X$의 \ni\n$i$번째 원소부터 \nj\n$j$번째 원소까지 \nC\n$C$로 지정되어 있는 원소에 대해 \nCt=At+Bt\n$C_t = A_t + B_t$을 적용한다.\n3 i j: 수열 \nX\n$X$의 \ni\n$i$번째 원소부터 \nj\n$j$번째 원소까지의 합을 출력한다."},{"problemId":"30113","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMažasis Vilius gavo dovanų skriestuvą ir pradėjo mokytis piešti apskritimus. Galiausiai jis pripiešė visą lapą įvairiausio dydžio apskritimų. Kai kurie apskritimai kertasi, taip pat kai kurie iš jų kerta arba liečia sąsiuvinio kraštą, kaip pavaizduota žemiau:\n\n\n\nŽiūrėdamas į šį lapą, pilną apskritimų, Vilius sugalvojo sau žaidimą: besti pieštuku ant bet kurio apskritimo lanko ir ieškoti kelio, einančio tik nubrėžtų apskritimų lankais, iki popieriaus lapo krašto. Pagal Viliaus taisykles, šis kelias gali pereiti nuo vieno apskritimo į kitą tiktai jei tie du apskritimai kertasi arba liečiasi.\n\nJums žinomas lapo dydis bei visų nubrėžtų apskritimų koordinatės ir dydžiai. Raskite, kiek yra tokių apskritimų, iš kurių Vilius gali surasti kelią iki lapo krašto pagal aukščiau nurodytas taisykles.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30057","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIškasta tiesi L$L$ ilgio vaga, kurioje reikia pasodinti M$M$ medelių. Medelius sodins robotai, todėl visi atstumai vagoje matuojami robopėdomis.\n\nDuota pozicijų (t. y. atstumų nuo vagos pradžios) seka P1,P2,…,PM$P_1, P_2, \\dots , P_M$. Kiekvienoje šių pozicijų turi būti pasodintas vienas medelis.\n\nDarbą turi atlikti 2$2$ robotai. Kiekvienas robotas per 1$1$ laiko vienetą nuvažiuoja 1$1$ robopėdą, o per S$S$ laiko vienetų pasodina vieną medelį.\n\nPer kiek mažiausiai laiko galima pasodinti visus medelius, jeigu dirbs abu robotai? Pirmojo roboto pradinė pozicija yra 0$0$, o antrojo – L$L$. Abu robotai darbą pradeda tuo pačiu laiko momentu 0$0$.\n\nDuotas medelių skaičius M$M$, vagos ilgis L$L$, bei laikas, per kurį robotas pasodina vieną medelį S$S$. Taip pat duotas pozicijų, surikiuotų didėjimo tvarka, sąrašas P1,P2,…,PM$P_1, P_2, \\dots , P_M$.\n\nParašykite programą, kuri apskaičiuotų trumpiausią sodinimo laiką T, per kurį robotai gali pasodinti visus medelius.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30114","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIgnas planavo švęsti savo gimtadienį su draugais. Deja, užklupusi pandemija ir karantinas sujaukė Igno planus ir jis nusprendė šventės su draugais neorganizuoti.\n\nLaimei, prieš pat Igno gimtadienį epidemiologinė situacija šalyje ženkliai pagerėjo. Pradedant atverti valstybių sienas, pirmiausia buvo leista atnaujinti skrydžius į Bitkalniją, mat joje užsikrėtusiųjų išvis nebuvo. Taigi Ignas suplanavo gimtadienio proga ten nuvykti ir užlipti į aukščiausią Bitkalnijos viršūnę. Lipimui jis pasisamdė gidą.\n\nKadangi Ignas buvo pirmasis gido klientas po ilgos pertraukos, gidas pasisiūlė prieš nuvesdamas į aukščiausią viršūnę nemokamai nuvesti į kitas pasirinktas viršūnes, jei pasirinkta viršūnė V$V$ tenkins šias sąlygas:\n\n\n\t V$V$ aukštis bus nemažesnis nei jau aplankytų viršūnių;\n\t V$V$ bus ne toliau nuo aukščiausios Bitkalnijos viršūnės nei jau aplankytos viršūnės.\n\n\nIgnas, išgirdęs naujienas, labai apsidžiaugė. Pavartęs žemėlapį jis nusprendė, kaip stipriai kiekviena viršūnė jį domina, ir tai įvertino sveikuoju skaičiumi.\n\nKokią didžiausią kalnų žavesio (dominimo) sumą gali pasiekti gido vedamas Ignas?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30017","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t승현이가 일하는 햄버거 가게에는 요리 재료로 사용할 햄버거 패티가 A$A$개, 슬라이스 치즈가 B$B$개 있다. 치즈버거를 만들기 위해서는 패티와 치즈를 각각 한 개 이상 고른 후 햄버거 빵 사이에 패티와 치즈를 번갈아 쌓아야 한다. 단, 패티의 개수는 치즈의 개수보다 정확히 한 개 더 많이 골라야 한다.\n\n\n\n승현이는 가게에 있는 요리 재료를 가지고 최대한 큰 치즈버거를 하나 만들려고 한다. 치즈버거의 크기는 패티와 치즈의 개수를 더한 것과 같다. 승현이가 만들 수 있는 치즈버거의 최대 크기를 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30058","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tLatvijoje šią žiemą sninga ypač dažnai. Vakar vakare Mārtiņš švariai nuvalė taką, vedantį link jo namų, o šįryt vos pabudęs pažvelgė pro langą ir atsiduso – takas vėl apsnigtas. Apskaičiuokite, kiek energijos Mārtiņš sunaudos šiandien kasdamas sniegą nuo tako.\n\nTakas yra tiesi N$N$ metrų ilgio atkarpa. Jį dengiantis sniego sluoksnis nėra tolygus – pirmąjį tako metrą dengia a1$a_1$ centimetrų gylio sniegas, antrajį – a2$a_2$ centimetrų, ..., paskutinįjį metrą – aN$a_N$ centimetrų.\n\nMārtiņš takelį pradeda valyti nuo pirmojo metro. Jis semtuvu pasemia visą ten esantį sniegą bei švysteli jį aukštyn ir tolyn nuo savęs. Sniegas nusileidžia vėl ant tako ir padengia kelis artimiausius metrus vieno centimetro gylio sluoksniu. Nagrinėkime pavyzdį.\n\n\n\n1 pav. Trijų centrimetrų sniego sluoksnis pasklinda trijų metrų intervale.\n\nNuvalęs pirmąjį metrą, Mārtiņš pereina prie antrojo: meta ten tuo metu esantį sniegą aukštyn, o jis vėl vieno centimetro sluoksniu padengia kelis artimiausius metrus. Tada Mārtiņš valo trečiąjį metrą, ketvirtąjį ir taip toliau, kol galiausiai sniego ant tako nelieka. Taigi, pavyzdys tęsiasi taip:\n\n\n\n2 pav. Tako valymas. Atkreipkite dėmesį, kad už ribų nukritęs sniegas ten ir lieka.\n\nKiekvieną kartą mesdamas aukštyn a$a$ centimetrų sniego Mārtiņš sunaudoja a$a$ energijos vienetų. Pateiktame pavyzdyje jis iš viso sunaudoja 3+2+4+3+3=15$3 + 2 + 4 + 3 + 3 = 15$ energijos vienetų.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30059","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tRimantas mokosi žaisti šachmatais žiūrėdamas „YouTube“ filmukus. Kiekvienas filmukas turi tam tikrą mokamąją vertę, kuri priklauso nuo filmuko rūšies ri$r_i$. Paprastai Rimantas žiūri dviejų rūšių filmukus:\n\n\n\tKitų žaidėjų šachmatų partijų įrašus. Šių filmukų vertė yra vi=1$v_i = 1$.\n\tPamokas, kuriose paaiškinamos įvairios taktikos ir strategijos. Šių filmukų vertė yra dvigubai didesnė, t. y. vi=2$v_i = 2$.\n\n\nŽinomi visi filmukai, kuriuos Rimantas gali peržiūrėti: jų trukmė ir rūšis (aprašyta aukščiau). Raskite, kiek mažiausiai laiko Rimtantas turės žiūrėti „YouTube“, kad surinktų bent V$V$ vertės taškų, jeigu:\n\n\n\tRimantas nežiūri to paties filmuko kelis kartus (papildomos vertės tai neprideda).\n\tPradėjęs filmuką, Rimantas visuomet jį peržiūri iki galo.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30018","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t타슈는 대전시에서 제공하는 공용자전거 서비스이다. 시민들은 각 무인대여소에 배치된 자전거를 대여해 이용할 수 있고, 이용이 끝난 후에는 다시 무인대여소에 반납해야 한다. 자전거를 대여한 대여소에 다시 반납할 필요 없이 아무 대여소에 반납하면 된다.\n\n대전시는 N$N$개의 대여소를 설치한 후, 자전거의 수요를 고려해서 각 대여소에 a1,a2,⋯,aN$a_1,a_2,\\cdots ,a_N$개의 자전거를 배치하고 서비스를 시작했다. 그리고 얼마 뒤에 서비스의 품질 개선을 위해 잠시 타슈 서비스를 중단하고 모든 자전거를 대여소에 반납하게 했다. 다행히도 유실된 자전거는 없었지만, 각 대여소에 위치한 자전거의 개수가 b1,b2,⋯,bN$b_1,b_2,\\cdots ,b_N$이 되었다.\n\n대전시에서 일하는 영우는 타슈 서비스를 재개하기 전에 각 대여소에 위치한 자전거의 개수를 다시 a1,a2,⋯,aN$a_1,a_2,\\cdots ,a_N$으로 만들려고 한다. 영우는 직접 발로 뛰면서 i$i$번째 대여소에 위치한 자전거 한 대를 들어다가 j$j$번째 대여소로 옮길 수 있다. 영우는 자전거를 최소 몇 번 옮겨야 하는지 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30019","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t충남대학교 공대 5호관에는 1$1$번부터 N$N$번까지 번호가 매겨진 N$N$개의 강의실이 있다. 학생들은 강의실 예약 시스템을 통해 원하는 강의실을 예약한 후에 이용할 수 있다. 강의실을 예약하기 위해서는 이용하려는 강의실의 번호 k$k$와 이용 시작 시각과 끝 시각 s,e$s,e$를 예약 시스템에 전송해야 한다.\n\n어느 날, 예약 시스템에 M$M$개의 예약 요청이 주어졌다. 예약 요청은 이용 시작 시각 s$s$가 임박한 순으로 주어지고, 이용 시작 시각이 같은 예약은 없다. 예약 시스템은 예약 요청을 순서대로 확인하는데, 어떤 예약이 기존에 같은 강의실에 대해 수락한 예약과 겹치지 않는다면 그 예약을 수락하고 그렇지 않다면 거부한다. 단, 이용 끝 시각과 이용 시작 시각이 같은 두 예약은 겹친 것이 아니다.\n\n M$M$개의 예약 요청이 주어질 때, 강의실 예약 시스템이 각 예약 요청을 수락하는지 거부하는지 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30140","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBut wait, I haven't finished -- each of the factors that you find must be square-free.  A square-free number, however you factor it, won't have any factor that is a perfect square.  Of course, you can never include 1 as a factor.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30141","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMy kid's favorite subject is math, as you know by now.  He is learning division now, and his teacher has taught him about even numbers being divisible by 2, numbers whose digits add up to a multiple of 3 being exactly divisible by 3 etc.\n\nHe was familiar with division by 11 during selection for soccer teams on his playground, and was wondering whether there was any easy rule to see if a number was divisible by 11.  For example, he wondered, if he arranged a number of digits 0-9 in a row to form a number, which ones would be divisible by 11?\n\nHe decided to start off with d[1] 1's, d[2] 2's ..., d[9] 9's, and seeing what is the minimum multiple of 11 that he could get by using all these digits, together with any number of 0's.  Please help him figure out how many digits there are in this minimum multiple.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30123","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tTired of all the geometry problems in programming contests, you decided to run away from programming contests and get into game development - without realizing that there were more geometry problems waiting for you! You thought up of a nice two player 2-D arcade game which works as follows - the first player throws a triangular metal piece in a particular direction. The second player then throws another triangular metal piece with the aim of hitting the first player's piece. You're very confident that the game will be a worldwide hit - except that you don't know how to decide whether the two pieces will collide.\n\nYou've decided to get rid of your mental block and solve this problem at any cost. At the instant that the second player throws his piece, you store the position and velocity of both the pieces, and you refer to this time as 0. Your game does not allow the pieces to already be in collision at this time. You now want to compute the time at which the two pieces will collide.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30142","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe department store where my family goes shopping is trying to predict how much of each item they stock they will sell each month.  Keeping a large amount of inventory is costly, and running out of items is also not a good idea.  Since the manager asked for my help as a sales consultant, I decided to formulate a model for predicting each month's sales S of an item based on its sales during the previous R months.  After a lot of trial and error, I came up with such a model, where\n\nS(n) = a1*S(n-1) + a2*S(n-2) + ... + aR*S(n-R)\n\nwhere S[n] is the predicted sales for the nth month for n > R, and S(1) to S(R) are seed values.\n\nThe store manager was pleased with my model's ability to help him in controlling his inventory. He asked me to list out every Kth month's sales, and give him the sum of the first N values from this list.  For example he wanted every Christmas month's sales summed up for the next 10 years (N=10 and K=12, month 1 being January), or every end-of-quarter month's sales for the next 2 years (N=8, K=3).\n\nCan you please help me write a program that does all the above?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30124","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tNK, India's lead racing driver, inspected the new race track being prepared for India's first F1 race. In his notebook, he represented the race track as consisting of a series of straight lines joined at vertices. Each straight line represents a straight piece of the track between successive corners and he noted down these distances. Each vertex represents a corner and based on the grip of his team's car, he noted down the maximum speed at which each corner could be taken. At speeds less than or equal to this speed, when the driver turns the steering wheel, the direction of velocity changes instantaneously without any loss in magnitude.\n\nThe track is cyclic and has N corners, numbered 0 to N-1. Ci represents the maximum speed at which corner i can be taken. The circuit also has N straight line segments, numbered 0 to N-1, between these corners. Si represents the distance between corneri and corneri+1. SN-1 represents the distance between cornerN-1 and corner0. Given the maximum acceleration(A) and maximum deceleration under braking(B) of the car, NK wants to know what is the fastest lap time possible if the car starts at rest at corner0. Lap time is measured as the time taken to once again cross corner0. When corner0 is crossed at the end of the lap, the speed of the car should be low enough that it can be brought to a halt safely by travelling along the circuit while braking continuously. (NK's team is not so cash filled that they can crash a car every lap!)\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30143","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe kids in my son's kindergarten made Christmas cookies with their teacher, and piled them up in columns.  They then arranged the columns so that the tops of the columns, going from shortest to tallest, were in a nice straight ramp.  The cookies were all of uniform size.  Given that there were A cookies in the shortest pile, that the difference in height between any two adjacent piles was D cookies, and that there were N piles, can you write a program to figure out how many cookies there were in total?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30125","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tCount the number of distinct squares you can draw using only integer co-ordinates for its 4 corners with the following restrictions.\n\n\n\tThe x and y co-ordinate of each corner should be within the range 0 to 2*n (range includes 0 and 2*n).\n\tNone of the corners should lie in the central 2*k by 2*k square. It means both x and y co-ordinates of the corners should not lie in the range (n-k) to (n+k) (range inclusive of both ends) at the same time.\n\n\nTwo squares are distinct if and only if at least one of its corners is different.\n\nNote that the edges can go through the central forbidden square. The only condition is that the corners itself should not lie in the central forbidden square.\n\n\n\nThe above figure shows the case n = 2 and k = 1. In the figure the central 2 x 2 square is forbidden and the forbidden lattice points are marked with red. When drawing a square you cannot use these points (marked red) for any of the corners. You are allowed to use only the points marked with black. So the only allowed square you can draw is the 4 x 4 square. Hence the answer for this case is 1.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30180","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t재민이의 생일을 맞아 N$N$명의 친구들이 생일 파티에 초대되었습니다. 재민이는 친구들을 위해서 직사각형 모양의 케이크를 하나 준비했습니다.\n\n재민이가 준비한 케이크는 H×W$H\\times W$ 크기의 격자 모양으로 나뉘어, 총 HW$HW$개의 조각들로 이루어져 있습니다. 각 조각은 단맛의 정도에 따라 1$1$ 이상 109$10^{9}$ 이하의 정수 값이 주어집니다. 이 값이 클 수록 더 달콤한 조각임을 의미합니다. i$i$행 j$j$열에 위치한 조각 (i,j)$(i,j)$는 Sij$S_{ij}$ 만큼의 단맛을 가집니다.\n\n재민이는 친구들이 오기 전에, 친구들에게 나누어 줄 조각들을 다음 조건을 만족하도록 골라 놓으려고 합니다.\n\n\n\t정확히 N$N$개의 조각을 선택해야 합니다.\n\t선택된 조각들은 직사각형 영역을 이루어야 합니다.\n\n\n어떤 조각들이 직사각형 영역을 이룬다는 것은, 다음 조건을 만족하는 4$4$개의 정수 s1,e1,s2,e2$s_1,e_1,s_2,e_2$가 존재함을 의미합니다.\n\n\n\t 1≤s1≤e1≤H$1\\le s_1\\le e_1\\le H$ \n\t 1≤s2≤e2≤W$1\\le s_2\\le e_2\\le W$ \n\t선택된 조각들은 s1≤i≤e1$s_1\\le i\\le e_1$와 s2≤j≤e2$s_2\\le j\\le e_2$ 를 만족하는 조각 (i,j)$(i,j)$들의 집합과 정확히 같습니다.\n\n\n재민이는 친구들이 어느 정도의 단맛을 좋아하는 지 모르기 때문에, 선택된 N$N$개의 조각들 중 가장 단맛이 큰 조각과 가장 단맛이 작은 조각의 단맛의 차이를 최대화하려고 합니다. 재민이를 도와 어떤 조각들을 선택해야 하는지 구해봅시다!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30144","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMy kid's kindergarten class is putting up a Christmas play.  (I hope he gets the lead role.)  The kids are all excited, but the teacher has a lot of work.  She has to produce costumes for a scene with K soldiers.  She wants to buy all the costumes in the same size, allowing for some small amount of length alteration to be done by the kids' parents later.  So she has taken all the kids' height measurements.  Can you help her select K kids from her class of N to play the soldier role, such that the height difference between the tallest and shortest in the group is minimized, and alternations will be easiest?  Tell her what this minimum difference is.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30181","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t한 대학교 강의의 조교를 맡고 있는 실버는 눈치게임을 좋아합니다. 학생들이 실습에 즐겁게 참여할 수 있도록, 실버는 학생들의 실습 점수를 기묘하게 매기기로 했습니다.\n\n각 학생은 자유롭게 실습에 들어오고 나갈 수 있지만, 한 번 실습에서 나가면 다시 들어올 수 없습니다. 실습에 들어올 때는, 종이에 1$1$ 이상 1000000$1\\, 000\\, 000$ 이하의 정수를 하나 적어서 들고 들어옵니다. 실습 도중 실버는 기묘한 이벤트를 엽니다. 기묘한 이벤트가 열리면, 현재 실습에 들어와 있는 학생들이 자신이 적은 정수를 바탕으로 다음과 같이 점수를 얻습니다.\n\n\n\t자신이 적은 정수가 현재 실습에 있는 다른 사람과 겹친다면 점수를 얻지 못합니다.\n\t자신이 적은 정수가 현재 실습에 있는 다른 사람과 겹치지 않는다면 1$1$점을 얻습니다.\n\t현재 실습에 있는 다른 사람과 겹치지 않게 정수를 적은 사람들 중 가장 큰 수를 적은 사람은 추가로 s$s$점을 더 얻어 총 1+s$1+s$점을 얻습니다. s$s$는 이벤트마다 다를 수 있으며, 현재 실습에 있는 다른 사람과 겹치지 않게 정수를 적은 사람이 없다면 아무도 점수를 얻지 못합니다.\n\n\n실버는 학생들의 실습 출입 기록과 기묘한 이벤트가 실시된 기록을 총 Q$Q$개의 질의로 정리했습니다. 질의의 형태는 다음 중 하나와 같습니다.\n\n\n\t 1 x$1\\ x$: 정수 x$x$를 들고 있는 학생이 실습에 들어옵니다.\n\t 2 k$2\\ k$: 이전에 나간 사람을 포함, 지금까지 들어온 학생 중 k$k$번째로 들어온 학생이 실습에서 나갑니다. k$k$번째로 들어온 학생은 실습에 존재합니다.\n\t 3 s$3\\ s$: 기묘한 이벤트가 열립니다. 현재 실습에 들어와 있는 학생들 중 자신이 적은 정수가 현재 실습에 있는 다른 학생과 겹치지 않는 학생들이 1$1$점을 얻습니다. 그 중 가장 큰 수를 적은 학생은 추가로 s$s$점을 더 얻습니다.\n\n\n모든 질의를 순서대로 처리한 후, 유형 1$1$의 질의의 개수 N$N$에 대해, 1$1$번째부터 N$N$번째로 들어온 학생이 받은 점수를 순서대로 출력하는 프로그램을 작성해봅시다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30126","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBeing a very quirky person, you've modeled your large neighbourhood as a set of numbered junctions and two-way roads connecting these junctions. Somewhat disturbingly, you've actually measured the length of each road in nanometers! Whenever you take a trip from one junction to another, you always note down the lengths of the longest road and the shortest road in your trip and then compute the difference between the two. One day, before you set out on a trip, you're overwhelmed by a strong desire to find out what the lowest possible difference is among all trips that have the same starting and ending junction as yours. Of course, computing all this on paper will take you ages and your trip is a little urgent (you must leave in the next 5 hours), so you decide to write a program.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30145","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe manager of the multi-storey department store in my town is trying to figure out how to arrange gifts in his shop for Christmas. He runs a peculiar shop such that each customer buys exactly two gifts at the shop (he could buy two of the same gifts too). He knows the probability that a customer might want gift i, is P_i.\n\nHe needs to arrange the gifts across several floors. Each floor should have exactly one gift. It takes A*(|x - y|)^2 + B*(|x - y|) + C seconds to go from floor x to floor y.\n\nSince my wife takes my kid shopping, he begged me to help the manager arrange the gifts across floors such that the expected time spent by a typical shopper such as my wife is minimized. \n\nFor the purpose of this problem assume that the first gift choice and the second gift choice are independent of each other. i.e., Choosing a first gift as i does not change his probability of choosing the second gift as j. It still remains P_j. Do not count the time taken to reach floor x and leave from floor y -- only count the time taken to go from x to y.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30127","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMy brother and I love pizza. My brother ordered a pizza today with a number of toppings. Some of those toppings I love, like mushrooms, while there are some others that I hate, like olives. Even among the toppings I like (or the ones that I don't like), I like some more than the other, depending on the amount.\n\nNow my brother will let me take a wedge of any size from the pizza. This means I am allowed to make two cuts from the center of the pizza to its circumference, and can keep one of the two resulting pieces. If either cut goes through a topping, the entire topping belongs to that piece which contains the centre of the topping. I am not allowed to cut exactly through the centre of a topping. Each topping will thus remain entirely on one of the pieces. I would like to cut and choose the best piece possible for myself.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30146","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThere are N stones, which can be divided into some piles arbitrarily. Let the value of each division be equal to the product of the number of stones in all the piles modulo P. How many possible distinct values are possible for a given N and P?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30182","content":"문제\n\n두 수열 \nX1\n$X_1$, \n⋯\n$\\cdots$, \nXs\n$X_s$와 \nY1\n$Y_1$, \n⋯\n$\\cdots$, \nYt\n$Y_t$에 대해, 비어 있는 수열 \nS\n$S$에서 시작하여 시행을 \ns+t\n$s+t$번 반복할 때, 최종 상태의 \nS\n$S$로 가능한 것 중 사전순으로 가장 빠른 것을 \nX⋆Y\n$X\\star Y$로 정의한다.\n\n시행은 다음 두 행동 중 하나이다.\n\n \nX\n$X$가 비어있지 않을 때, \nX\n$X$에서 제일 앞에 위치하는 원소를 제거하고 \nS\n$S$의 맨 뒤에 추가한다.\n \nY\n$Y$가 비어있지 않을 때, \nY\n$Y$에서 제일 앞에 위치하는 원소를 제거하고 \nS\n$S$의 맨 뒤에 추가한다.\n\n길이가 \nN\n$N$인 정수 수열 \nA1\n$A_1$, \nA2\n$A_2$, \n⋯\n$\\cdots$, \nAN\n$A_N$과 길이가 \nM\n$M$인 정수 수열 \nB1\n$B_1$, \nB2\n$B_2$, \n⋯\n$\\cdots$, \nBM\n$B_M$이 주어진다.\n\n다음 쿼리를 처리하는 프로그램을 작성하시오.\n\na b k: \nA[1..a]⋆B[1..b]\n$A[1..a]\\star B[1..b]$의 \nk\n$k$번째 수를 출력한다."},{"problemId":"30128","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tVito was involved in a lot of businesses in different areas of New York - from simple olive oil to more dangerous products. Competition was literally cut-throat, and Vito was at his most vulnerable while travelling. So he decided that some of the roads that he travelled on had to be \"sanitized\" so that he could travel between any two of his areas using only sanitized roads. Since sanitization was an extremely costly process, his Consigliere decided to sanitize the minimum number of roads needed.\n\nAll was fine until Vito grew old and decided to hand the reins over to his son Michael. However, his Capos weren't too happy about this as they wanted a part of the business too. So it was decided that Michael would get to pick exactly K areas for himself while the Capos would keep the rest. Michael worked out the business value of each area (including some loss-making areas). He now wants to pick his K areas such that the total business value is maximized and he can travel between any two of his areas using only sanitized roads. Of course, during his travel he does not want to go through an area that is not his. You've been Michael's associate for a long time and you see your chance to impress him and become a full member by telling him what the highest possible value is. Just to prove you're no fluke, you also want to tell him exactly how many ways there are of achieving this. (No big numbers for the Boss, so you will only tell him the remainder this number leaves when divided by 1000000007).\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30147","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThere are N bottles each having a different chemical. For each chemical i, you have determined C[i], which means that mixing chemicals i and C[i] causes an explosion. You have K distinct boxes. In how many ways can you divide the N chemicals into those boxes such that no two chemicals in the same box can cause an explosion together?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30129","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tWango is a brilliant maths teacher. He has two sons Kango and Dango. They are born two years apart on the same day! Kango is 9 and Dango is 7. Their birthdays are approaching again. Wango has to buy them a gift each. After long thought, this time Wango wanted to give each of his sons a piece of the Pango board and thus introduce them to higher mathematics.\n\nA size n (n ≥ 0) Pango board is a 2 by n rectangle of unit squares. A pango board has to be tiled with Pango pieces. Any tiling with the Pango pieces is acceptable. A size 0 Pango board exists and is unique and serves as an example of the empty set. \n\nFour types of Pango pieces are available. \n\n1   2   3   4 \n==  ==  ==  == \nXX  X   X   X \nXX  XX  X \n\n\nPicture of the four kinds of pieces:\n\n\n\nWhen Wango presents a board to Kango or Dango, he has to tile the board completely with these pieces (unlimited number of pieces of each type are available) and then give them out. Note that pieces cannot be rotated for tiling. To cut costs (recession mind you), Wango decides to buy a single board of size N, then choose a k (0 ≤ k ≤ N), and give a size k board to Kango and a size (N-k) board to Dango, (tiled of course). Help him find the number of ways he can give the presents. Two ways are distinct if and only if either Dango gets a different board or Kango gets a different board. Two Pango boards are considered the same if and only if they have the same tiling (same set of tiles at the same places) from left to right (rotation of board is not allowed in comparing). \n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30183","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t레프를 이어 수업을 맡게 된 흑왕은 올해도 역시 히스토그램에 포함되는 최대 넓이 직사각형 문제를 내려고 한다. 흑왕이 가진 히스토그램은 기둥 N$N$개로 이루어져 있으며, 높이가 H1,H2,⋯,HN$H_1,H_2,\\cdots ,H_N$인 기둥들을 순서대로 이어붙여 만들었다. 모든 기둥의 너비는 1$1$로 동일하다.\n\n올해에는 다양한 난이도의 문제를 제공하기 위해 K=0,1,⋯,N−1$K=0,1,\\cdots ,N-1$ 각각에 대해 기둥을 K$K$개씩 뺀 히스토그램을 가지고 문제를 낼 것이다. 흑왕은 넓이가 넓은 직사각형을 좋아하기 때문에, 각 K$K$에 대해 기둥을 정확히 K$K$개 뺀 히스토그램 중 가장 넓은 직사각형을 포함할 수 있는 히스토그램을 골라 그것을 가지고 문제를 내려고 한다.\n\n\n\t어떤 히스토그램에 포함되는 최대 직사각형이란, 해당 히스토그램에 완전히 포함되고 각 변이 좌표축에 평행한 직사각형 중 넓이가 가장 넓은 직사각형이다.\n\t히스토그램에서 어떤 기둥(들)을 뺀다는 것은, 빠지지 않고 남은 기둥들을 순서를 유지한 채 빈 틈 없이 이어붙인다는 것이다. 예를 들어, 기둥 높이가 순서대로 3,1,4,1,5,9$3,1,4,1,5,9$인 히스토그램에서 2번째와 5번째 기둥을 뺀다면 남은 히스토그램의 기둥 높이는 3,4,1,9$3,4,1,9$가 된다.\n\n\n흑왕이 가진 히스토그램에서 정확히 K$K$개의 기둥을 빼서 만들 수 있는 모든 히스토그램들에 대해, 포함되는 최대 직사각형의 넓이의 최댓값을 f(K)$f(K)$라고 하자. K=0,1,⋯,N−1$K=0,1,\\cdots ,N-1$에 대해 총 N$N$개의 f(K)$f(K)$ 값을 모두 구하자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30148","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAfter winning numerous programming competitions, Malvika has got bored of participating, and is thinking of holding her own series of contests, named \"Advanced Contests by Malvika: India's Coolest Programming Contests (ACM-ICPC)\". Each contest will have three problems, one each of easy, medium and hard levels.\n\nNow, after some time, Malvika realized that creating hard problems for a contest is not as easy for her as solving them. So she asked her friend Animesh to join the team and help her with it. Animesh himself is no good with creating problems, but he suggested her a clever strategy to reduce the number of hard problems she needs to create. He suggested that ACM-ICPC could have three types of contests, comprising of the following problem levels:\n\n\n\tType 1: 1 easy, 1 medium, 1 hard\n\tType 2: 1 easy, 2 medium\n\tType 3: 2 easy, 1 medium\n\n\nOne day, Malvika and Animesh sat down and prepared e easy problems, m medium, and h hard problems. As we know that it is harder to make higher difficulty problems, the number of hard problems will be no more than medium and similarly, the number of medium level problems, will be no more than easy level.\n\nNow, they want to use the above problems to organizes a series of contests. Also, as they want the series to be interesting, so they don't want to have two consecutive contests in the series to be of the same type.\n\nCan you please help them in finding out the maximum number of contests they can conduct in the series?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30149","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAfter trying his luck in programming contests, Animesh has decided to accept his fate and settle down the good old-fashioned way. He has decided to own a farm and be a shepherd. He knows of n grass varieties, each of which grows in a convex polygon area. Some of these polygons may intersect each other. Each grass is lush green and nutritious, and he cannot make up his mind on where he should settle.\n\nHis friend Malvika, a long time shepherd herself (this is the other Malvika), suggested that he buy a piece of land where he can find all the n grass varieties, so that his sheep will be fat and produce lots of wool. Animesh liked the idea and wants to buy as much of such a pasture as possible. However, being short on money, he decided to be judicious, and only buy land which is covered by all the n grasses. That is, he would not buy even a bit of land which isn't part of all n of the grassy polygons. Can you please help in finding out the maximum area of land he can buy?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30130","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t2M scientists are supposed to present papers in a conference in a day. The day is divided into 2 slots, the morning slot and the evening slot. M scientists present their paper in the morning slot and the remaining in the evening slot. Both slots are separated by a lunch break.\n\nSome scientists depend on a paper from some other scientists to be presented before theirs. So if Scientist A is presenting a paper on \"Graph Theory\" and Scientist B on \"Max flow-Min cut\", then A has to present before B. Lunch break is a time of merry making and partying, so attendees tend to forget the papers in the previous half. Due to this, the dependent scientist (B in this case) has to present the paper in the same slot as the scientist on whom he is dependent (A in this case). Given the dependencies, find the number of possible orderings of presenting the papers.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30150","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAs you know, Malvika has created some n programming contests. Each of the contests has three problems, categorized as easy, medium and hard on difficulty level. For the i th contest, easy problem takes TE[i] hours and gives you PE[i] pleasure. Similarly, medium problem takes TM[i] hours, gives PM[i] pleasure, and a hard one has the values TH[i], PH[i].\n\nToday, Animesh wanted to practice some of them. Animesh has a really bad habit of trying problems for only a few minutes and saying to Malvika \"I am a noob, you are a pro. It's some weird shit I don't know. Please, tell me the solution, bro!\" Having been irritated by this behaviour numerous times in the past, she granted him K special powers he can use before starting the practice session. By using a single power, Animesh can pick any two problems irrespective of their difficulty from two different contests and swap them.\n\nAnimesh has at max time hours before he gets frustrated by his noobness and ends the practice session. He wants to make the maximum use of it by getting as much pleasure out of this activity as possible. Animesh also gets bored with the contest themes fairly quickly, so he does not want to solve more than one problem from any contest. Can you help Animesh in estimating the maximum amount of pleasure he can achieve out of this activity?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30131","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMr. Goldust (1817-1890) was one of the first gold prospectors in the California Gold Rush. He literally struck gold there and became the owner of a few hundred gold pits. Mr. Goldust's great great great grandson Mr. Stardust currently owns the gold pits. Most of the gold has been dug up already, so Mr. Stardust wants to finish digging and get going to Las Vegas. A corporate giant offered to help him by supplying machines.\n\nThe machines are worth their weight in gold, so Mr. Stardust can only buy exactly one such machine. This machine was built using advanced science and thus does not work unless given appropriate working conditions.\n\nEach day, Mr. Stardust will assign the machine to exactly one of the gold pits. If he assigns it to pit 'i', two things can happen:\n\n\n\tThe machine will break down - with probability bi (0 < bi ≤ 1) . The machine cannot be used any more\n\tThe machine will extract gold - with probability (1-bi) the machine will extract a proportion ri (0 ≤ ri ≤ 1) of the gold remaining in pit i\n\n\nTheoretically the machine can last forever or break down very soon. So, Mr. Stardust's plan is to wait suitably long and then take off to Las Vegas. Of course, he will end up broke if the machine breaks down on day 1. He first needs to know how much gold he can expect to get using the machine optimally, that is, the best expected value of gold Mr. Stardust can achieve with an optimal strategy of allocating the machine to the pits.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30184","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이번 학기 물리학실험의 조교장을 맡은 서현이는 학생들의 성적을 입력하는 일을 하고 있다.\n\n서현이가 맡은 분반의 학생 수는 N$N$명이고, 이 중 정확히 절반에 해당하는 학생들은 S, 나머지 절반의 학생들은 U를 받게 된다. N$N$은 항상 짝수이다.\n\n 1$1$번 학생, 2$2$번 학생, ⋯$\\cdots$, N$N$번 학생이 받을 성적이 길이 N$N$인 문자열 T$T$로 주어진다. 서현이가 할 일은 이 문자열을 전산 시스템에 입력하는 것이다.\n\n서현이는 다음 시행만을 반복하여 학생들의 성적을 입력하려고 한다.\n\n\n\t현재 커서의 위치에 SU 를 추가한다.\n\t커서가 맨 왼쪽에 있지 않은 경우, 커서를 왼쪽으로 한 글자 움직인다.\n\t현재 커서의 위치에 US 를 추가한다.\n\n\n처음 상태는 빈 문자열이며, 커서는 매 순간 문자열의 맨 앞이나 맨 끝, 또는 글자와 글자 사이에 위치한다. 1번 시행과 3번 시행이 끝난 뒤, 커서는 추가된 문자열의 바로 뒤로 이동한다.\n\n서현이를 위해, 시행을 최소한으로 사용하여 학생들의 성적을 모두 입력하는 방법을 하나 찾아주자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30151","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMalvika's cats, Chingam and Jimma are also bored of solving problems. Fortunately, Chingam has found n bars of dark chocolate. They all have the same width, but differ in their lengths. In fact, no two chocolate bars have the same length. All the n bars are kept in a row. Let's say that their lengths are given by L[1], L[2], … , L[n] from left to right. That is, length of bar i is L[i].\n\nChingam decided to play a little game with Jimma. In one step, Jimma has to choose some bar which has not been eaten yet. Chingam hates inversions, so he will instantaneously eat that bar, along with every other Bar with which it forms an Inversion Pair. We say that bars i and j form an Inversion Pair, if the bar to the left is longer than the bar to the right.\n\nThat is, if Jimma selects bar i, whose length is L[i], then Chingam will eat this, as well as every bar j such that j > i and L[j] < L[i], as well as every bar k such that k < i and L[k] > L[i]. After this, the step ends, they proceed to the next step, where Jimma selects another bar and the whole process repeats. The game ends when all the n chocolate bars are eaten.\n\nJimma doesn't like this game because she does not get any chocolate. So, she wants to finish it as soon as possible and go back to sleep. Please help her find the minimum number of steps needed for the game to end.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30185","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t카루나는 과수원을 하나 운영하고 있다. 얼마 전 카루나는 과수원에 ”사과 바나나 나무”라는 신기한 나무를 하나 심었다.\n\n사과 바나나 나무는 정점이 N$N$개인 나무(Tree)이며, 두 정점을 잇는 N−1$N-1$개의 가지가 존재하여 전체가 하나의 연결 그래프를 이룬다. 각 정점에는 1$1$부터 N$N$까지의 자연수 번호가 매겨져 있다. 또한, 각 정점에는 사과 또는 바나나가 하나씩 달려 있다.\n\n사과와 바나나는 서로 다른 종류의 관리가 필요하기 때문에, 이것을 편하게 하기 위해 카루나는 각 종류의 과일을 한 덩어리로 모으려고 한다. 구체적으로, 나무에서 사과가 달린 정점만 남겼을 때와 바나나가 달린 정점만 남겼을 때 각각 하나의 연결 그래프가 되도록 하고 싶다. (정점이 하나도 남지 않는 경우도 하나의 연결 그래프인 것으로 간주한다.)\n\n나무를 자유자재로 다룰 수 있는 카루나는 가지로 직접 연결된 두 정점에 달린 과일을 서로 바꾸어 달 수 있다. 이것을 ”이동” 이라고 부르며, 이는 체력을 꽤 소모하는 행동이기 때문에 카루나는 되도록 적은 횟수의 이동으로 목적을 달성하고 싶다.\n\n각 종류의 과일을 한 덩어리로 모으는 것이 가능한지 판별하고, 가능하다면 최소 몇 회의 이동이 필요한지 구하라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30160","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t N$N$개의 정수 a1,a2,…,aN$a_{1}, a_{2}, \\ldots, a_{N}$이 주어진다.\n\n 12⋅a1,22⋅a1+12⋅a2,…,N2⋅a1+(N−1)2⋅a2+…+12⋅aN$1^{2} \\cdot a_{1}, 2^{2} \\cdot a_{1} + 1^{2} \\cdot a_{2}, \\ldots, N^{2} \\cdot a_{1} + (N-1)^{2} \\cdot a_{2} + \\ldots + 1^{2} \\cdot a_{N}$을 각각 출력한다.\n\n바꿔 말하면, k=1,2,…,N$k = 1, 2, \\ldots, N$에 대해서 ∑i=0k−1(k−i)2⋅ai+1$\\sum_{i=0}^{k-1} (k-i)^2 \\cdot a_{i+1}$를 출력한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30132","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMinesweeper is a single-player computer game. The objective of the game is to clear an abstract minefield without detonating a mine. When the game is started, the player is presented with a grid of n x m blank squares. If the player clicks on a square without a mine, a digit is revealed in that square, the digit indicating the number of adjacent squares that contains mines. Two squares are adjacent if they share an edge or a corner, i. e. a square can have at most 8 adjacent squares. By using logic, players can in many instances use this information to deduce that certain other squares are mine-free (or mine-filled), and proceed to click on additional squares to clear them or mark them with flag graphics to indicate the presence of a mine. \n\n\n\nClark Kent is a Minesweeper addict. And with help from his Kryptonian (a planet far far away from earth) powers he solves them at lightning speed and gives them to you. Your job is to tell him whether the solved version is correct or not. A board is correctly solved iff all flagged squares should contain a mine and every square containing a number X has exactly X adjacent squares flagged. \n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30152","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAfter acquiring an extraordinary amount of knowledge through programming contests, Malvika decided to harness her expertise to train the next generation of Indian programmers. So, she decided to hold a programming camp. In the camp, she held a discussion session for n members (n-1 students, and herself). They are sitting in a line from left to right numbered through 1 to n.\n\nMalvika is sitting in the nth spot. She wants to teach m topics of competitive programming to the students. As the people taking part in the camp are all newbies, they know none of the topics being taught, i.e., initially, the first n - 1 people in the line know none of the topics, while the nth knows all of them.\n\nIt takes one hour for a person to learn a topic from his neighbour. Obviously, one person cannot both teach a topic as well as learn one during the same hour. That is, in any particular hour, a person can either teach a topic that he knows to one of his neighbors, or he can learn a topic from one of his neighbors, or he can sit idly. It is also obvious that if person x is learning from person y at a particular hour, then person y must be teaching person x at that hour. Also, note that people can work parallely too, i.e., in the same hour when the 4th person is teaching the 3rd person, the 1st person can also teach the 2nd or learn from 2nd.\n\nFind out the minimum number of hours needed so that each person learns all the m topics.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30133","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn Ragannagar ( a small town in India), people are obsessed with palindromes . There are N road junctions (also called points) labeled 0 to N-1 and roads exist between every pair of points. Roads are onewayed and for the road connecting point i to point j ( i < j) the direction to travel is i to j. Each road is labeled with a letter between 'A' to 'Z' . Rajar ,the traveler, wants to travel from point 0 to point N-1. However he wants to cover the longest palindromic path. \n\n\n\nIn the above arrangement the possible paths to take are:- \n\n\n\tACCA\n\tABA\n\tACB\n\tBCA\n\tAD\n\tBB\n\tAA\n\tC\n\n\nThe largest palindrome amongst these is ACCA, so Rajar will take this path. Given the above configuration, help him decide which path to take. \n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30200","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIki Velykų liko N valandų ir Kiškis nespėja atlikti savo darbų. Kiškis turi R kiaušinių marginimui robotų ir jiems patikės šį darbą.\n\nKiekvienas robotas moka piešti vieną ornamentą, o visų robotų piešiami ornamentai skirtingi. Kiaušinis laikomas išmargintu, jei visi robotai ant jo nupiešė savo ornamentą.\n\nRobotai dirba su pertraukomis: robotas i kiaušinius margina kas ai valandų (pirmasis kiaušinis margintas valandą ai, antrasis – valandą 2ai ir t.t.).\n\nKiekvieną valandą Kiškis ant konvejerio padeda vieną kiaušinį. Kiekvienas tą valandą dirbantis robotas nupiešia savo ornamentą.\n\nTaip robotai ir Kiškis be pertraukos dirbą N valandų (valandos numeruojamos nuo 1 iki N). Kiškis pastebėjo, kad dauguma kiaušinių nėra pilnai išmarginti!\n\nKiškis susirūpino, o kiek kiaušinių robotai pilnai išmargins iki Velykų.\n\nParašykite programą, kuri suskaičiuotų kiek bus pilnai išmargintų kiaušinių po N valandų.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30186","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tSNUPC 폐막 공연의 하이라이트는 괄호 댄스이다. 괄호 댄스를 위해 총 N$N$개의 괄호들이 무대 뒤에 일렬로 줄을 서서 연습을 하고 있다. 각 괄호는 여는 괄호 또는 닫는 괄호 중 하나이다.\n\n\n\n하지만 공연 담당자인 서현이는 공연 30분 전, 무대가 너무 좁아 괄호 N$N$개가 모두 들어갈 수 없다는 사실을 알게 되었다. 이에 공연장의 크기가 K$K$일 때, 괄호들의 순서를 바꾸지 않고 정확히 2K$2K$개의 괄호들을 선택해서 공연장에 내보내려고 한다. 고른 괄호들이 원래 배열에서 연속할 필요는 없다.\n\n각 괄호에는 아름다움을 의미하는 정수 A1,A2,⋯,AN$A_1,A_2,\\cdots ,A_N$이 있다. 이때 Ai$A_i$는 음수일 수도 있다.\n\n서현이는 아름다움에 대한 자신만의 심오한 기준에 따라 다음 조건들을 만족해야 아름다운 공연이라고 생각한다.\n\n\n\t선택한 괄호들을 앞에서부터 읽었을 때 올바른 괄호 문자열이 되어야 한다.\n\t공연의 아름다움은 선택한 괄호들의 아름다움의 합이며, 공연의 아름다움이 가능한 한 최대가 되어야 한다.\n\n\n올바른 괄호 문자열은 다음과 같이 정의된다.\n\n\n\t빈 문자열은 올바른 괄호 문자열이다.\n\t문자열 X가 올바른 괄호 문자열이면 (X)도 올바른 괄호 문자열이다.\n\t문자열 X와 Y가 올바른 괄호 문자열이면 XY도 올바른 괄호 문자열이다.\n\t위 규칙으로 만들 수 없는 문자열은 올바른 괄호 문자열이 아니다.\n\n\n아직 무대의 크기를 정확히 모르는 서현이를 도와 공연장의 크기가 1$1$, 2$2$, ⋯$\\cdots$, ⌊N2⌋$\\lfloor\\frac{N}{2}\\rfloor$인 경우에 각각 아름다운 공연의 아름다움을 구하자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30161","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t어떤 트리 T$T$의 \"반사복제\" 행위를 다음과 같이 정의한다.\n\n\n\t T$T$의 각 리프 노드에 대하여, 그 리프 노드에다가 원래 트리 T$T$를 해당 리프 노드를 기준으로 동일한 위상으로 복제시킨다. 동일한 위상으로 복제시킨다는 것은, 어떤 리프 노드를 L$L$ 이라고 하면 트리를 통째로 복제한 후 두 트리의 L$L$에 해당하는 부분을 겹친다는 것을 의미한다.\n\n\n\n\n이 그림은 주어진 트리(화살표 왼쪽)를 반사복제시켜서 만든 새로운 트리(화살표 오른쪽)이다. 굵은 원이 기존의 트리이며 얇은 원이 각 리프노드별로 동일한 위상으로 복제된 트리이다. 새로 생성된 노드는 기존의 노드와 구분하기 위해 번호에 쌍따옴표를 붙였다.\n\n N$N$개의 노드를 가진 어떤 트리가 주어지고, 이 트리를 k$k$번 반사복제했을 때, 이 트리의 모든 노드 간 노드의 거리를 109+7$10^{9} + 7$ 로 나눈 나머지를 구하시오. 이때, 모든 노드 간 노드의 거리를 수식으로 표현하면 다음과 같다. (V$V$는 전체 노드의 집합, dist$dist$는 두 노드 사이의 거리(= 두 노드를 잇는 경로 상의 간선의 개수)를 의미한다.)\n\n 12∑v1∈V∑v2∈Vdist(v1,v2)$$\\frac{1}{2} \\sum_{v_{1} \\in V} \\sum_{v_{2} \\in V} dist(v_{1}, v_{2})$$ \n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30134","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tSita and Gita are smart kids. Generally after completing their homework they go out for some outdoor games. But it's raining today and they have to stay home. They decide to break their piggy-bank and count their savings. They find out that they have accumulated many coins over the last few months and decide to play a game with these coins. First they divide the coins into 2 piles containing X and Y coins respectively.\n\n\n\nNow they start the game by alternating turns. In each turn a player can do one of the following: \n\n\n\tRemove any number of coins from a single pile.\n\tRemove equal number of coins from both piles.\n\tPass on the turn to the next player. Note that this still counts as a turn. \n\n\nThe game ends when no move is possible and the player who cannot make a move loses. Both players play optimally. Being smart, both players calculate the outcome of the game before the game begins. The player who loses tries to maximize the number of turns in the game and player who wins tries to minimize the turns. No player can pass more than P times. Sita starts the game.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30153","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tKing Animesh has decided to go on a voyage to the Sun. He has decided to take only one of his courtiers with him. Everyone knows that the king has two favorite courtiers, Arjun and Praveen, and so they are competing between themselves to go with the King. Arjun is a great archer, so he has decided to impress the king by demonstrating his perfect abilities. Praveen is smart, he knows exactly what the King likes - Graphs of Perfection. Graphs of Perfection are weighted complete bipartite graphs with 2*N vertices, which have a property that every Perfect Matching in the graph has the same cost. The cost of a Perfect Matching is just the sum of costs of all the N edges in it.\n\nSuch graphs are rare, but Praveen had found one in the Forest of Perfection and he had kept it carefully in a box. The N nodes in the left column are labelled {1,2, … ,N}, and the N nodes in the right column are labelled {N+1, N+2, … , 2*N}. The cost associated with an edge between node u in left column and node v in right column, is denoted by Cuv.\n\nUnfortunately, when it is Praveen's turn to present the graph to the King, he realizes that his rival Arjun has made a hole in the box and as a result, some of the edges have fallen off. He tries to remain calm and presents the graph to the King claiming that he can assign costs to the missing edges in such a way that the graph becomes a Graph of Perfection again. Praveen knows that the remaining edges have a magical property - there is a unique way to assign costs to the missing edges such that the graph becomes a Graph of Perfection. But he doesn't tell that to the King, and so the King gets highly impressed by his claim and tells him to report the sum of the squares of all the N2 edge costs modulo 109+7. Alas! Praveen is not that smart, but we hope you are! You are given the costs of the edges which are still in the box; please help Praveen find the required sum.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30154","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAfter 2 hours of Mathematics and chill, Malvika and Animesh got bored of solving problems and decided to play a game. They have n cards with them, each of which is red on one side and blue on the other. They initially put them in a row, from left to right. They then takes turns, with Malvika going first.\n\nIn a single turn, the player should choose a card which has its red face up. The player also chooses zero or more consecutive blue faced cards, with the sequence starting immediately on the right of the chosen red card. All the chosen cards are then flipped. That is, the red faced card will now be blue. The zero or more blue faced cards will now be red. Then the turn ends, and it's the other player's turn.\n\nYou will be given the initial arrangement of the n cards as a string of R's and B's, which imply red facing-up and blue facing-up, respectively. They will be given in order, from left to right.\n\nThe player who is not able to make any move in his/her turn loses. Find out the winner, assuming that both Malvika and Animesh play optimally.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30201","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tRobotų varžyboms yra sukonstruota trasa-labirintas, padalinta į vienetinius kvadratėlius. Ant kai kurių kvadratėlių priklijuotos kvadratėlio dydžio plytelės (sienos) ir šiais kvadratėliais robotai judėti ar ant jų stovėti negali.\n\nVaržybose dalyvauja kvadrato formos robotai galintys judėti tik keturiomis kryptimis lygiagrečiai trasos kraštinėms. Vieno varžybų etapo metu robotas pastatomas starto juostoje iš kairės, jis turi užvažiuoti ant tam etapui numatytos trasos iš kairiojo krašto, pervažiuoti labirintą (nebūtinai trumpiausiu keliu) ir išvažiavęs pro dešinįjį kraštą pasiekti finišo juostą.\n\nEtapą laimi dalyvis, kurio užduotį įveikęs robotas yra didžiausias (t. y. kurio kvadrato formos roboto kraštinė bus ilgiausia).\n\nVaržybų organizatoriai nori prieš pat varžybas patikrinti sukonstruotą trasą ir sužinoti, kokio dydžio robotai turės būti konstruojami varžyboms. Parašykite programą, kuri žinodama trasos planą, apskaičiuotų koks turėtų būti didžiausias galimas roboto kraštinės ilgis tai trasai.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30187","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t N$N$개의 정점과 M$M$개의 간선으로 이루어진 그래프가 있습니다. i$i$번 정점에는 정수 ai$a_i$가 적혀 있습니다. 이 그래프에 다음과 같은 연산을 원하는 만큼 적용할 수 있습니다.\n\n\n\t정점 u$u$를 선택하고, u$u$와 간선으로 직접 연결된 서로 다른 두 정점 v$v$, w$w$를 선택합니다. 정수 k$k$를 정하여 av$a_v$를 av+k$a_v+k$로, aw$a_w$를 aw+k$a_w+k$로 바꿉니다.\n\n\n만약 그래프에서 위 조건에 따라 정점 u$u$, v$v$, w$w$를 선택할 수 없다면, 그 그래프에는 연산을 적용할 수 없습니다.\n\n주어진 연산을 0$0$번 이상 원하는 만큼 적용해서 모든 정점에 똑같은 수가 적히도록 만들 수 있는지 판정하세요.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30135","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tDice Poker is a version of Poker that is played using Dice. Two or more people can play this game. The detailed rules of the 2 player version of the game are mentioned in the section: Rules of the Game. \n\nTwo players A and B are playing the game of Dice Poker. Being experts in this game, both always play optimally. A always plays to maximize his chance of winning, and B tries to minimize the chance of A winning (draw is fine for B). In the first round, Player A rolls the Dice, followed by player B. You as an onlooker, look closely at the rolls and wonder what will A and B do next, and what is the probability of A winning. Haven't played this game much before, you decide to write a program to predict with what probability will A win this Game after the 2nd (final) round.\n\nRules of the Game:\n\nIn the first round, two players start of by rolling 5 dice each, one after the other. For this problem we shall assume that all Dice are 6 sided and fair containing digits 1 to 6. Then a round of betting happens, which is irrelevant to this problem statement. In the second round the first player picks between 0 to 5 of his currently rolled dice and rolls them again. All the 5 dice are then merged (merge here simply means that all the 5 dice are taken together to form a set, including the ones rolled in the first round and are not re-rolled in the second) to form the final roll (or hand). Then the second player looks at the final hand of the first player and then similarly re-rolls between 0 to 5 dice to get her final hand. The hands are then compared and one with the higher weight wins. \n\nIn the real game, in case of a tie both the players share the pot, but since this problem specifically asks for the probability of A winning, we shall assume that a tie is considered as A not winning (hence B wins). \n\nTo determine which of the hands has higher weight, following arrangements are considered and are in descending order of weight. The first arrangement beats the second and so on. \n\nArrangements:\n\n\n\t5 of a kind: All the 5 dice show the same number. Example: 3, 3, 3, 3, 3\n\t4 of a kind: 4 of the dice show the same number. Example: 2, 2, 2, 2, 5\n\tFull house (3 of a kind + 2 of a kind): 3 of the 5 show the same number and the rest 2 show a different number. Example: 4, 4, 4, 6, 6\n\tStraight: All the 5 dice are in a sequence. Example: 1, 2, 3, 4, 5 (or the other possibility is 2, 3, 4, 5, 6)\n\t3 of a kind: 3 of the dice show the same number. Example: 6, 6, 6, 2, 4\n\t2 Pair: There are 2 pairs. Example: 4, 4, 1, 1, 3\n\tPair: 2 of the dice show the same number. Example: 3, 3, 1, 2, 4\n\tRest: Example: 1, 2, 3, 4, 6\n\n\nThe highest weight arrangement that suits the hand is considered. For example a 5 of a kind is also a 4 of a kind, but the player would naturally call it 5 of a kind. Also in a particular arrangement, the higher weight arrangement is the one with the highest value of the most significant part of the arrangement. If a the tie still remains then it is broken by the next significant part and so on. For Example, In 4 of a kind the most significant part are the 4 dice with the same number. So the arrangement 4, 4, 4, 4, 1 is better than 3, 3, 3, 3, 6. In 3 of a kind the 3 with the same number is the most significant part. However in a 2 pair, there are 2 equally significant parts and the one with the highest number will be considered first for breaking the tie. In the 'Rest' arrangement, first compare the highest numbers of the 2 hands, then the 2nd highest and so on.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30155","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMalvika was getting bored of the usual Fibonacci problems, and decided to add a little twist to it. She defined a new function f() with the following properties:\n\n\n\tShe'll give you two integers, A and B. f(1) is defined to be A and f(2) is B.\n\tAnd for all integers x ≥ 2, f(x) = f(x-1) + f(x+1).\n\n\nShe'll give an integer N, and you have to find out what f(N) is. Output the answers modulo 109+7.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30202","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tRobotų varžyboms sukonstruota T skirtingo dydžio stačiakampių trasų-labirintų, padalintų į vienetinius kvadratėlius. Ant kai kurių kvadratėlių priklijuotos kvadratėlio dydžio plytelės (sienos) ir šiais kvadratėliais robotai judėti ar ant jų stovėti negali.\n\nVaržybose dalyvauja kvadrato formos robotai galintys judėti tik keturiomis kryptimis lygiagrečiai trasos kraštinėms. Vieno varžybų etapo metu robotas pastatomas starto juostoje iš kairės, jis turi užvažiuoti ant tam etapui numatytos trasos iš kairiojo krašto, pervažiuoti labirintą (nebūtinai trumpiausiu keliu) ir išvažiavęs pro dešinįjį kraštą pasiekti finišo juostą.\n\nEtapą laimi dalyvis, kurio užduotį įveikęs robotas yra didžiausias (t. y. kurio kvadrato formos roboto kraštinė bus ilgiausia).\n\nVaržybų organizatoriai nori prieš pat varžybas patikrinti trasas ir sužinoti, kokio dydžio robotai turės būti konstruojami varžyboms. Parašykite programą, kuri žinodama kiekvienos trasos planą, apskaičiuotų koks turėtų būti didžiausias galimas roboto kraštinės ilgis tai trasai.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30162","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou have a given integer n$n$. Find the number of ways to fill all 3×n$3 \\times n$ tiles with the shape described in the picture below. Upon filling, no empty spaces are allowed. Shapes cannot overlap.\n\n\n\nThis picture describes when n=4$n = 4$. The left one is the shape and the right one is 3×n$3 \\times n$ tiles.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30136","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIt's 2015. Terrorists are still largely on the prowl. Governments however have decided to be smarter. Now, they monitor each highway, airway and seaway. Across each road, they built several cameras which can capture images ahead of them.\n\nMore specifically, there are N uniformly spaced cameras per kilometer along a highway of length M kms, making in total M*N cameras (there is no camera at the end of the M kms). The highway is one-way and goes from North to South. The cameras have a special property: \n\n\n\tThey use direct vision to watch the next N (or less if the highway ends) cameras to their South thus covering 1 km.\n\tThey communicate via satellite with all the cameras beyond the next N southern cameras thus knowing their video feed. \n\tThey do not communicate with the next N southern cameras and only depend on their vision.\n\n\nA camera being destroyed by a terrorist will be caught by cameras to its north. Corrupt politicians have sold this secret to the terrorists and they know that they can't destroy a camera unless they are sure that this camera is no longer communicating or being watched by a camera to its North. There is one further complication: Corrupt technicians have not properly installed the direct vision equipment. Thus, some of the cameras are substandard and deficient. These cameras have perfectly good communication with far off cameras (i.e. after the first N cameras), but cannot see some of the next N cameras. However, the saving grace was that there were no more than 10 deficient cameras in any 1 km stretch (among any contiguous N cameras).\n\nAs Anti Corruption Task force, you, a non corrupt patriot have to submit a security report. For that, you need to solve the following problem: If exactly two terrorists decide to destroy all the cameras on the highway without being caught, how long would it take them? Each terrorist can destroy one camera in one FULL minute. They can work simultaneously. Of course, they cannot destroy two cameras A and B at the same time if A can watch B or B can watch A.\n\nThe cameras are numbered 1 to M*N North to South.\n\nNote that Ci cannot watch or get the video feed of Cj if i > j where Ci is the camera numbered i. \n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30203","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tn žaidėjų (kur n yra dvejeto laipsnis) žais atkrentamajame turnyre. Kiekvienas žaidėjas gavo po skirtingą numerį 1 ≤ i ≤ n.\n\nAtkrentamojo turnyro tvarkaraštis sudaromas tokiu būdu. Po vieną traukiami žaidėjų numeriai, i-asis ištrauktas numeris žymimas ai. Pirmame etape a1-asis turės žaisti su a2-uoju, a3-iasis su a4-uoju ir t.t., kol liks n/2 laimėtojų, kurie antrame etape paeiliui ketina žaisti 1-asis laimėtojas su 2-uoju, 3-iasis su 4-uoju ir t.t., kol liks n/4 laimėtojų ir t.t., kol liks vienas turnyro nugalėtojas.\n\nPaaiškėjo, kad kai kuriems žaidėjams netinka kai kurie turnyro laikai, ir jie pasiūlė jiems tinkamas žaidimo sekas, t.y. seką A = (a1, ..., an) pakeisti seka Bj. Bet likę žaidėjai nori, kad turnyro seka liktų identiška pradinei, t. y. kad kiekviena žaidėjų pora turėtų galimybę (jei abu laimės iki tol) sužaisti tame pačiame etape.\n\nParašykite programą, kuri pagal duotą seką A nustatytų, ar turnyrai A ir Bj yra identiški.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30156","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tLittle Malvika is very peculiar about colors. On her birthday, her mom wanted to buy balloons for decorating the house. So she asked her about her color preferences. The sophisticated little person that Malvika is, she likes only two colors — amber and brass. Her mom bought n balloons, each of which was either amber or brass in color. You are provided this information in a string s consisting of characters 'a' and 'b' only, where 'a' denotes that the balloon is amber, where 'b' denotes it being brass colored.\n\nWhen Malvika saw the balloons, she was furious with anger as she wanted all the balloons of the same color. In her anger, she painted some of the balloons with the opposite color (i.e., she painted some amber ones brass and vice versa) to make all balloons appear to be the same color. As she was very angry, it took her a lot of time to do this, but you can probably show her the right way of doing so, thereby teaching her a lesson to remain calm in difficult situations, by finding out the minimum number of balloons needed to be painted in order to make all of them the same color.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30137","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe Prime Minister and his Accumulated Council of Ministers (ACM) are trying hard to find all possible terrorist locations. In his dream, the Prime Minister gets a message from God suggesting that the answer to all terrorist problems are numbers (say one such number is X) such that the number of factors of X(including 1 and X) is prime. These numbers supposedly contain the encrypted locations of terrorists. Since the ACM has no programmer, the Prime Minister needs your help in finding out such numbers.\n\nNote: 1 is not considered a prime number.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30188","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t어느 날 SNUPC 부원들은 최고의 알고리즘을 정하는 토론을 하게 되었다. 논쟁 끝에 최고의 알고리즘은 기하 혹은 정수론 중 하나라는 사실에 모두가 동의할 수 있었지만, 기하를 지지하는 부원과 정수론을 지지하는 부원 간의 의견 차는 도저히 좁혀지지 않았다. 이대로라면 싸움이 끝이 없을 것이기에 이들은 SNUPC 게임을 통해 승부를 가르기로 했다.\n\nSNUPC 게임은 다음과 같이 진행된다.\n\n\n\t첫 번째 칸에 S가, 두 번째 칸에 N, 세 번째 칸에 U, 네 번째 칸에 P, 다섯 번째 칸에 C가 적혀져 있는 5$5$칸짜리 보드를 준비한다.\n\t 0$0$부터 108$10^8$까지 수가 하나씩 적혀 있는 주사위를 5$5$번 던져, 각 주사위의 결과에 해당하는 개수만큼 5$5$개의 칸에 각각 말을 놓는다.\n\t두 부원이 번갈아가며, 각자의 턴에 말을 이동시킨다. 자신의 턴에 말을 이동시키지 못한다면 패배한다.\n\n\n다음 중 하나의 방법으로 말을 이동시킬 수 있다.\n\n\n\tC가 아닌 문자가 적혀 있는 칸의 말 중 하나를 잡아 보드의 다음 칸으로 움직인다. S가 적힌 칸에 말이 있는 경우 N이 적힌 칸으로 움직이며, N에서 U로, U에서 P로, P에서 C로 움직인다.\n\tU가 적힌 칸에 있는 말 하나를 잡아 S로 움직인다.\n\n\n두 부원들은 자존심이 강한 천재들이기 때문에, 항상 최선의 방법으로 말을 이동시키고, 지는 것보다는 게임이 영원히 지속되는 것을 선호한다.\n\n기하를 지지하는 부원이 먼저 행동을 시작할 때, 승리하는 부원을 출력하라. 만약 영원히 승부가 끝나지 않는다면, 게임 이론이 최고의 알고리즘이라고 생각하는 한별이가 승리하게 된다!\n\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30157","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMalvika was sad because Animesh, the miser, did not buy her even a chocolate bar on her birthday. Animesh, feeling sorry about his behavior, repented and asked Malvika how he could make up for this catastrophic mistake. Enraged as she was, Malvika gave him an empty graph H of n vertices and asked him to add edges into it and convert the graph into a graph that she likes.\n\nMalvika always keeps a graph G with n vertices and m edges with her. Malvika likes a graph H if, and only if, she can find a permutation P of 1, 2, … , N such that there's an edge between vertices u and v in H if and only if there's an edge between vertices P[u] and P[v] in G.\n\nAnimesh thought for days and days about how he could add edges into the empty graph H so that he can get a graph that Malvika likes. After putting in a lot of effort, he found such a graph and said that this is the graph you desired.\n\nMalvika was still really angry with him and asked little Animesh to come up as many graphs as possible, such that Malvika likes them. Given his recent track record, you know this is going to take him at least a few years to solve by himself. Can you help Animesh find out how many such graphs he has to come up with? Please output your answer modulo 109 + 7.\n\nTwo ways of adding edges A, B are considered different if there is a an edge (u, v) which is present in A but not in B.\n\nYou are given the adjacency matrix of the graph G as input. The graph has a special property — each row and column of the graph has atleast n - 3 1's.\n\nNote that adjacency matrix of a graph G containing n vertices is a matrix A of size n * n. If there is an edge between vertex i and j, then A(i, j) = 1, otherwise A(i, j) = 0. In our case, as the graph is undirected, the matrix will be a symmetric matrix. Also, the entries on the diagonal will be all zeros.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30138","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMy kid's school cleared a large field on their property recently to convert it into a playing area. The field is polygonal. The school administration decided to separate the field into two areas by building a straight picket fence between the area for the older kids and the area for the younger kids. The fence would go between two non-adjacent vertices of the polygonal field, and given the shape of the field, all such possible fences would lie strictly and entirely within the field.\n\nNaturally, the smaller of the two areas would go to the younger kids. So can you help the school determine what the area of the smaller play-area would be for different fence positions?\n\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30139","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA regular expression is used to describe a set of strings. For this problem the alphabet is limited to 'a' and 'b'. R is a regular expression if:\n\n\n\tR is \"a\" or \"b\"\n\tR is of the form \"(R1R2)\" where R1 and R2 are regular expressions\n\tR is of the form \"(R1|R2)\" where R1 and R2 are regular expressions\n\tR is of the form \"(R1*)\" where R1 is a regular expression.\n\n\nThe set of strings recognised by R are as follows:\n\n\n\tIf R is \"a\", then the set of strings recognised = {a}\n\tIf R is \"b\", then the set of strings recognised = {b}\n\tif R is of the form \"(R1R2)\" then the set of strings recognised = all strings which can be obtained by a concatenation of strings s1 and s2 where s1 is recognised by R1 and s2 by R2.\n\tif R is of the form \"(R1|R2)\" then the set of strings recognised = union of the set of strings recognised by R1 and R2.\n\tIf R is of the form \"(R1*)\" then the the strings recognised are the empty string and the concatenation of an arbitrary number of copies of any string recognised by R1.\n\n\nThe edit distance between two strings s1 and s2 is the minimum number of characters to be inserted/deleted or replaced in s1 to make it equal to s2.\n\nGiven two regular expressions R1 and R2, find the minimum edit distance amongst all pairs of strings s1 and s2 such that s1 is recognised by R1 and s2 is recognised by R2.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30204","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t병영외 급식을 위해 시킨 피자가 곧 도착한다! 그러나 피자 한 판의 양이 꽤 많으므로, X$X$명이 한 판씩 받을 수 있도록 미리 부대의 인원을 X$X$명 단위로 묶을 예정이다.\n\n분배의 편의를 위해 이번 병영외 급식은 하나 이상의 생활관이 합쳐진 그룹 단위로 진행된다. 각 그룹에 속한 병사의 수가 X$X$로 나누어떨어진다면 행복하게 병영외 급식을 즐길 수 있다. 단, 둘 이상의 그룹에 속하거나 어떤 그룹에도 속하지 못한 생활관이 존재해서는 안 된다.\n\n생활관의 수, 각 생활관에 속한 병사의 수, 그리고 분배의 기준 X$X$가 주어졌을 때, 모든 병사가 행복하게 병영외 급식을 즐길 수 있는지 알아보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30163","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou have a given picture with size w×h$w \\times h$. Determine if the given picture has a single \"+\" shape or not. A \"+\" shape is described below:\n\n\n\tA \"+\" shape has one center nonempty cell.\n\tThere should be some (at least one) consecutive non-empty cells in each direction (left, right, up, down) from the center. In other words, there should be a ray in each direction. \n\tAll other cells are empty.\n\n\nFind out if the given picture has single \"+\" shape.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30158","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMalvika is the leader of a large tribal army, with soldiers from multiple tribes. There are a total of n soldiers in the army. You are given an array a of length n, where a[i] denotes the tribe number of the ith soldier.\n\nNow Animesh, the leader of the neighboring tribe and staunch enemy of Malvika, has attacked her army and declared a war which would later be regarded as the greatest tribal war of the contemporary world. For this soon-to-be-lengendry war, Malvika wanted to evaluate the strength of her army. Malvika's army's strength is based on love, i.e., the pairwise strength of two people from the different tribes would be zero, while for those from the same tribe, it will be the distance between their positions in the line. The more the distance, the lonelier they feel. The lonelier they feel, the more they love each other. As their love grows, so does the strength of the army.\n\nFormally, strength of an army denoted by an array a will be the sum of pairwise strengths of each pair of people from the same tribe, i.e. sum of all |i - j| for 1 ≤ i ≤ j ≤ n such that a[i] = a[j].\n\nMalvika wants to rearrange her army to maximize the strength. Let M denote the maximum strength of her army after rearranging the soldiers. You have to help her find out the number of rearrangements of her army having the maximum strength. The more the rearrangements are, there are more chances of her winning the battle. As they say, you can win the battle with a lot of strength, but you need rearrangements of that strength to win the war. Since the battle is expected to be long drawn, the answer could be very large. So, print your answer modulo 109 + 7.\n\nTwo arrangements of the army — A and B — are said to be distinct if there is an index i from 1 to n, such that A[i] ≠ B[i]. That is, if some position in the army is occupied by soldiers from different tribes in the two arrangements.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30159","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tPraveen has climbed a tall tree and now he can't get down! While he is waiting for Arjun to bring a ladder, he has decided to amuse himself by numbering the N nodes of the tree from from 1 to N and associating a value S[i] with every vertex.\n\nFor that, he applies the following procedure.\n\nval = 1\nLet T be our tree.\nwhile T is not empty:\n  Identify the branching nodes of tree T. A node of tree T is said to be a branching node if its degree > 2.\n  Choose all the nodes of T which have a path to any leaf node not passing through any of the branching nodes.\n  Remove all of these chosen nodes from the tree T.\n    Set S value of all these removed nodes to be val.\n  Increase val by 1, i.e. val += 1\n\n\nNote that first step of identification of branching nodes is re-done in each execution of the while loop.\n\nPlease check the example problem statement to understand how this process works. Note that Praveen cannot actually remove the nodes from the tree. He just simulates the procedure in his head's supercomputer.\n\nAfter Arjun comes back with the ladder, Praveen decides to ask him Q queries about the tree. Each query will contain two nodes u, v. Let the path in the tree from node u to v, be u, u1, u2, .., ur, v. Consider the array S[u], S[u1],..,S[ur], S[v]. For each query, Arjun has to find the number of inversion pairs in this array. i and j form an inversion pair, if i > j and S[i] < S[j]. All these hours sitting atop the tree have made Praveen light in the head, and he refuses to come down until Arjun answers all his queries.\n\nUnfortunately, Arjun does not have a supercomputer in his head like Praveen does and he has also left his laptop at home. So please help Arjun answer these queries and get Praveen down.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30189","content":"문제\n\n \n0\n$0$ 이상의 정수 \na,b,c\n$a, b, c$에 대해, \n0≤x≤a\n$0 \\le x \\le a$, \n0≤y≤b\n$0 \\le y \\le b$, \nx+y=c\n$x + y = c$를 모두 만족하는 정수 순서쌍 \n(x,y)\n$(x, y)$의 개수를 \nf(a,b,c)\n$f(a, b, c)$라고 합시다.\n\n예를 들어 \n0≤x≤2\n$0 \\le x \\le 2$, \n0≤y≤3\n$0 \\le y \\le 3$, \nx+y=3\n$x + y = 3$을 만족하는 정수 순서쌍 \n(x,y)\n$(x, y)$는 \n(0,3),(1,2),(2,1)\n$(0, 3), (1, 2), (2, 1)$의 \n3\n$3$개이므로, \nf(2,3,3)=3\n$f(2, 3, 3) = 3$입니다.\n\n양의 정수 \nn,m\n$n, m$이 주어질 때\n\n \n\n\n∑i=0n+mf(n,m,i)=f(n,m,0)+f(n,m,1)+⋯+f(n,m,n+m)\n$$\\sum_{i=0}^{n+m} f(n, m, i) = f(n, m, 0) + f(n, m, 1) + \\cdots + f(n, m, n+m)$$ \n\n을 구하세요.\n\n예를 들어 \nn=2,m=1\n$n = 2, m = 1$인 경우, \nf(2,1,0)=1,f(2,1,1)=2,f(2,1,2)=2,f(2,1,3)=1\n$f(2, 1, 0) = 1, f(2, 1, 1) = 2, f(2, 1, 2) = 2, f(2, 1, 3) = 1$입니다. 따라서 구하려는 답은 \n1+2+2+1=6\n$1 + 2 + 2 + 1 = 6$입니다."},{"problemId":"30205","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t김 병장이 소속된 특수부대는 전역을 하려면 특이하게 대대장으로부터 주어진 임무를 달성해야 한다. 김 병장이 받은 임무는 적군의 1$1$번 기지부터 N$N$번 기지까지 모두 순서대로 격파하는 것이다. 각 기지는 M$M$층으로 이루어져 있고, 기지에 입장하면 1$1$층부터 M$M$층까지 순서대로 한 층씩 올라가야 하며, 중간에 아래층으로 내려가거나 나갈 수 없다. 만약에 무사히 M$M$층까지 도달하여 기지 내의 적군들을 모두 쓰러트렸다면, 해당 기지는 격파되었다고 한다.\n\n적군 기지의 각 층에는 아이템과 적군 중 하나가 배치되어 있다. 김 병장이 아이템이 배치된 층에 진입하면, 즉시 김 병장의 전투력이 두 배로 늘어난다. 김 병장이 적군이 배치된 층에 진입하면, 해당 적군과 전투한다. 만약 적군의 전투력이 김 병장의 전투력 이하라면, 김 병장이 전투에서 승리하고 적군의 전투력만큼 김 병장의 전투력이 증가한다. 그렇지 않으면, 김 병장은 임무에 실패한다.\n\n임무를 수월하게 달성하기 위해서 김 병장은 같은 기지 안에 있는 층들의 순서를 마음대로 바꿀 수 있는 마법을 배워왔다. 김 병장의 현재 전투력이 주어졌을 때, 마법을 사용해 임무를 달성할 수 있는지 알아보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30164","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou have given tree consist of n$n$ vertices. Select a vertex as root vertex that satisfies the condition below.\n\n\n\tFor all vertices v1$v_{1}$ and v2$v_{2}$, if distance$distance$(root$root$, v1$v_{1}$) =distance$= distance$(root$root$, v2)$v_{2})$ then degree$degree$(v1$v_{1}$) =degree$= degree$(v2$v_{2}$), where degree$degree$ means the number of vertices connected to that vertex, and distance$distance$ means the number of edges between two vertices.\n\n\nDetermine and find if there is such root vertex in the tree. If there are multiple answers, find any of them.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30190","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t여우 마을에는 3$3$개의 기둥과 N$N$개의 원판을 가진 하노이 탑의 원판들을 한 곳에 모으면 소원이 이루어진다는 전설이 있다.\n\n하노이 탑의 원판들을 이동시키는 규칙은 다음과 같다.\n\n\n\t i$i$번째 원판의 반지름은 i$i$이다. (1≤i≤N$1\\le i\\le N$)\n\t어떤 시점에라도 한 기둥 안의 원판은 반지름이 작을수록 위로 오도록 정렬되어 있어야 한다.\n\t각 기둥의 제일 위에 있는 원판만 이동할 수 있다.\n\t원판은 기둥의 맨 위로만 이동할 수 있다.\n\t원판은 한 번에 한 개만 이동할 수 있다.\n\n\n여우 마을에 사는 아기 여우는 어느 날 이 소문을 듣고 하노이 탑에 도전하기로 했다. 아기 여우는 모든 원판을 K$K$번째 기둥에 모으는 데 성공했고, 소원을 빌었다.\n\n\"세상에서 가장 귀여운 여우가 되게 해주세요!\"\n\n하지만 아기 여우에게는 아무런 변화도 일어나지 않았다.\n\n실망한 아기 여우는 이번에는 자신이 생각하기에 아름다운 모양으로 원판을 배치해 보기로 했다. 이제는 하노이 탑의 고수가 된 아기 여우는 1$1$초에 한 개의 원판을 옮길 수 있다. 아기 여우가 원판을 아름다운 모양으로 배치하는 데 걸리는 최소 시간을 구해 보자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30206","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t올해 국군의 날의 행사에 시가행진 행사도 계획되었다. 그래서 시가행진에 동원된 차량을 통솔해야 하는 김 중위는 차들이 어디서 대기하다가 시가행진에 진입하게 할지를 계획하게 되었다.\n\n김 중위는 시가행진을 시작하기 전, 시가행진에 동원된 차량을 여러 지점에 적절히 배치할 수 있다. 단, 최소 한 대의 차량이 동원되며, 배치가 가능하다면 더 동원할 수 있다. 차량의 배치가 가능한 지점들은 총 N$N$개로, 1$1$번부터 N$N$번까지 번호들이 매겨져 있으며 각 지점에는 차량을 최대 한 대만 배치할 수 있다. 또한, M$M$개의 양방향 도로들을 통해서 지점 사이를 이동할 수 있다. 하나의 도로를 지나는 데에 1$1$분이 걸린다. 시가행진이 시작되는 장소는 1$1$번 지점을 거쳐서만 들어갈 수 있으며, 1$1$번 지점에도 차량을 배치할 수 있다. \n\n차량의 배치가 끝나면 1$1$번 지점에 있던 차량은 바로 시가행진 행사에 들어가서 사라지고, 모든 차량은 1$1$번 지점으로 이동하기 시작한다. 이때, 모든 차량은 최단 경로를 통해 동일한 속도로 이동하며, 만약 최단 경로가 여러 가지라면 그 중 다음으로 가는 정점의 번호가 작은 경로를 따라 이동한다. 이후에 1$1$번 지점에 무사히 도착한 차량은 직후 시가행진 행사에 들어가서 사라진다. 다만 두 차량이 같은 시간에 1$1$번 지점을 포함한 같은 지점에 도달하면 충돌 사고가 난다.\n\n김 중위를 도와서 지점들을 잇는 도로들이 주어졌을 때, 충돌 사고가 나지 않는 차량 배치 방법의 개수를 1000000007(=109+7)$1\\,000\\,000\\,007(= 10^{9} + 7)$으로 나눈 나머지를 구해보자. 1000000007$1\\,000\\,000\\,007$은 소수이다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30207","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t병영 식당 주변 부대 병사가 병영 식당에 가서 식당 업무를 보조하는 일을 식당지원이라고 한다. 식당지원 담당은 누가 언제 식당지원을 할지 정하는 업무를 맡고 있다.\n\n초기에 식당지원 담당은 매일 무작위로 3$3$명의 병사를 차출해서 식당으로 보내고 있었다. 매일 식당지원을 할 병사를 차출하는 것이 귀찮아진 식당지원 담당은 좀 더 편하고 체계적인 차출을 위해 식당지원 차출 프로그램을 만들었다.\n\n식당지원 차출 프로그램은 매일 아침 차출을 진행하며, 차출일 기준으로 식당지원을 적게 한 병사부터 차출한다. 즉, 식당지원 차출 프로그램 가동 이전에 무작위로 차출된 횟수와 식당지원 차출 프로그램 가동 시작일부터 차출일 직전까지 식당지원 차출 프로그램에 의해 차출된 횟수의 합이 가장 작은 병사 3$3$명을 선택해서 차출한다. 두 병사의 식당지원 횟수가 같은 경우에는 군번이 작은 병사를 우선해서 차출한다.\n\n이제 식당지원 차출이 무작위로 이루어지지 않는다는 사실을 알게 된 부대의 병사들은 차출 결과를 미리 알고 싶은 나머지 식당지원 담당에게 전화를 걸어 식당지원 차출 프로그램 가동 d$d$일차까지 식당지원 차출 프로그램이 자신을 몇 번이나 차출할지 물어보기 시작했다! 식당지원 차출 프로그램의 가동 일수와 병사의 군번이 주어졌을 때 식당지원 차출 프로그램이 해당 병사를 차출한 횟수를 구해주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30191","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이번 학기 물리학실험의 조교장을 맡은 서현이는 학생들의 성적을 입력하는 일을 하고 있다.\n\n서현이가 맡은 분반의 학생 수는 N$N$명이고, 이 중 정확히 절반에 해당하는 학생들은 S, 나머지 절반의 학생들은 U를 받게 된다. N$N$은 항상 짝수이다.\n\n 1$1$번 학생, 2$2$번 학생, ⋯$\\cdots$, N$N$번 학생이 받을 성적이 길이 N$N$인 문자열 T$T$로 주어진다. 서현이가 할 일은 이 문자열을 전산 시스템에 입력하는 것이다.\n\n서현이는 다음 시행만을 반복하여 학생들의 성적을 입력하려고 한다.\n\n\n\t현재 커서의 위치에 SU 를 추가한다.\n\t커서가 맨 왼쪽에 있지 않은 경우, 커서를 왼쪽으로 한 글자 움직인다.\n\t현재 커서의 위치에 US 를 추가한다.\n\n\n처음 상태는 빈 문자열이며, 커서는 매 순간 문자열의 맨 앞이나 맨 끝, 또는 글자와 글자 사이에 위치한다. 1번 시행과 3번 시행이 끝난 뒤, 커서는 추가된 문자열의 바로 뒤로 이동한다.\n\n서현이를 위해, 시행을 최대 2N$2N$ 번 사용하여 학생들의 성적을 모두 입력하는 방법을 하나 찾아주자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30165","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tLet fx=c2x−6⋅fx−1⋅fx−2⋅fx−3$f_{x} = c^{2x-6} \\cdot f_{x-1} \\cdot f_{x-2} \\cdot f_{x-3}$ for x≥4$x \\ge 4$.\n\nYou have given integers n$n$, f1$f_{1}$, f2$f_{2}$, f3$f_{3}$, and c$c$. Find fnmod(109+7)$f_{n} \\bmod (10^{9}+7)$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30208","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t휴가가 얼마 남지 않은 용범이는 휴가를 나가기 전에 밀린 업무들을 처리하려고 한다. 그러나 모든 업무를 처리하기에는 시간이 부족하기 때문에 중요한 업무들만 처리하고 나가려고 한다.\n\n용범이가 밀린 업무는 총 N$N$개가 있고, 1$1$번부터 N$N$번까지 업무마다 번호가 매겨져 있다. 또한, 각 업무는 해당 업무를 처리하기 전에 먼저 처리해야 하는 선행 업무가 최대 1$1$개 있을 수 있으며, 각 업무들의 선행 업무는 모두 다르다. 용범이는 한 번에 한 업무만 처리할 수 있기 때문에, 업무마다 중요도 wi$w_i$와 처리하는 데 걸리는 시간 ti$t_i$를 정리하고 어떻게 업무를 처리하는 것이 효율적인지 알아내려고 한다. 업무들을 처리하는 데 걸리는 시간은 처리한 업무들의 처리 시간의 합이다.\n\n충분한 시간이 주어진다면 용범이는 모든 업무를 처리할 수 있지만, 휴가를 나가기까지 시간이 얼마 남지 않았다. 빨리 휴가를 나가고 싶어하는 용범이를 도와 처리한 업무들의 중요도 합이 S$S$ 이상이 되게 하는데 필요한 최소 시간을 구해주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30192","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t문학을 사랑하는 소년 서현이에게 오늘, 9월 24일은 정말로 중요한 날이다. 서현이가 수년간 공을 들여 작성한 소설이 세상 밖으로 공개되는 날이기 때문이다!\n\n서현이의 소설은 길이 N$N$의 문자열 S$S$로 표현할 수 있다. 편의상 S$S$는 알파벳 소문자만으로 이루어져 있고, 공백이나 개행 문자를 포함해 알파벳 소문자가 아닌 문자는 S$S$에 등장하지 않는다고 하자.\n\n완성본을 검토하던 도중 서현이는 한 가지 치명적인 사실을 알게 되었다. 한 줄에 동일한 글자가 K$K$개 이상 연속하게 되는 경우, 가독성이 심하게 떨어진다는 것이다!\n\n독자들이 소설을 읽는 데 불편함을 겪을 것을 우려하여, 서현이는 책 한 페이지의 폭 L$L$을 1$1$ 이상 N$N$ 이하의 정수로 적당히 선택하여 위의 경우가 나타나지 않도록 하고 싶다. 폭이 너무 좁을수록 책을 읽기 불편하기 때문에, L$L$은 가능한 값 중 가장 큰 것으로 설정하고 싶다.\n\n폭을 L$L$로 설정하는 경우, S$S$의 첫 글자부터 L$L$번째 글자까지가 첫 줄에 표시되며, 이어지는 L$L$개의 글자가 그다음 줄에 표시되고, 같은 규칙으로 한 줄에 L$L$개씩 글자가 표시된다. 마지막 줄에 한해서 L$L$개 미만의 글자가 표시될 수 있음에 유의하라.\n\nSNUPC가 종료됨과 동시에 서현이의 소설이 공개되기 때문에, 서둘러서 책을 수정해야 한다. 서현이에게 가능한 L$L$의 값 중 가장 큰 것이 무엇인지 알려주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30166","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou have given integers a$a$, b$b$, p$p$, and q$q$. Let f(x)=abs(sin(pqπx))$f(x) = \\text{abs}(\\text{sin}(\\frac{p}{q} \\pi x))$.\n\nFind minimum possible integer x$x$ that maximizes f(x)$f(x)$ where a≤x≤b$a \\le x \\le b$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30240","content":"문제\n\n이 버전에서는 시행의 횟수를 최소화할 필요가 없다.\n\n두 순열 \np1,p2,…,pn\n$p_{1}, p_{2}, \\ldots, p_{n}$과 \nq1,q2,…,qm\n$q_{1}, q_{2}, \\ldots, q_{m}$이 있다. 초기에 \npi=ai\n$p_{i}=a_{i}$(\n1≤i≤n\n$1 \\le i \\le n$), \nqj=bj\n$q_{j}=b_{j}$(\n1≤j≤m\n$1 \\le j \\le m$)이다. 당신은 아래 시행을 적절하게 하여 \npi=i\n$p_{i}=i$(\n1≤i≤n\n$1 \\le i \\le n$), \nqj=j\n$q_{j} = j$(\n1≤j≤m\n$1 \\le j \\le m$)가 되도록 해야 한다.\n\n한 번의 시행에서, \np\n$p$와 \nq\n$q$는 다음 세 단계에 따라 변한다:\n\n당신은 \n1≤i≤n\n$1 \\le i \\le n$, \n1≤j≤m\n$1 \\le j \\le m$을 만족하는 두 정수 \ni\n$i$, \nj\n$j$를 선택한다.\n \np\n$p$에서 \ni\n$i$번째 원소를 기준으로 왼쪽 부분과 오른쪽 부분을 서로 교환한다. 즉, \np\n$p$를 \npi+1,pi+2,…,pn,pi,p1,p2,…,pi−1\n$p_{i+1}, p_{i+2}, \\ldots, p_{n}, p_{i}, p_{1}, p_{2}, \\ldots, p_{i-1}$로 바꾼다. 왼쪽 부분과 오른쪽 부분은 비어 있을 수도 있다. 새롭게 만들어진 \np\n$p$에는 인덱스 번호가 다시 부여된다.\n \nq\n$q$에서 \nj\n$j$번째 원소를 기준으로 왼쪽 부분과 오른쪽 부분을 서로 교환한다. 즉, \nq\n$q$를 \nqj+1,qj+2,…,qn,qj,q1,q2,…,qj−1\n$q_{j+1}, q_{j+2}, \\ldots, q_{n}, q_{j}, q_{1}, q_{2}, \\ldots, q_{j-1}$로 바꾼다. 왼쪽 부분과 오른쪽 부분은 비어 있을 수도 있다. 새롭게 만들어진 \nq\n$q$에는 인덱스 번호가 다시 부여된다.\n\n목표를 달성하는 것이 가능한지 판별하고, 가능하다면 \n10000\n$10000$회 이하의 시행으로 목표를 달성하는 방법을 찾아라.\n\n제한 조건 하에서 목표를 달성하는 것이 가능하다면 항상 \n10000\n$10000$회 이하의 시행으로 목표를 달성하는 것이 가능함을 증명할 수 있다."},{"problemId":"30209","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t적군의 참호 N$N$개가 일렬로 늘어서 있다. 국군의 지휘관은 각 참호에 대응하기 위해 적군의 참호를 늘어선 순서대로 1,2,⋯,N$1, 2, \\cdots, N$번의 번호를 붙였고, i$i$번 참호에는 적군이 ai$a_i$명 배치되어 있다는 사실을 알아냈다.\n\n지휘관은 참호전을 위해 각 적군 참호에 대응하는 아군 참호를 맞은편에 1$1$개씩 모두 설치했고, 휘하에 있는 M$M$명의 국군을 각각의 아군 참호에 나누어 배치하려 한다. 각 아군 참호에는 0$0$명 이상의 국군을 배치할 수 있고, 아군 참호별로 맞은편의 적군 참호에게서 승리하기 위해서는 맞은편의 적군 참호에 있는 적군 수보다 많은 국군을 아군 참호에 배치해야 한다.\n\n지휘관은 폭격기로 폭탄을 하나 투하해 특정한 범위 내 연속한 번호의 적군 참호를 모두 폭파할 수 있다. 이때 지휘관은 폭격기의 폭탄 투하 위치와 폭탄의 폭파 범위를 설정할 수 있으며, 적군 참호를 폭파하면 해당 적군 참호에게서 승리한 것으로 간주한다. 하지만 동맹국에서 폭탄에 의한 인명피해를 최소화해달라는 요청이 있었다. 따라서 폭격기로 폭탄을 투하하지 않거나, 투하한다면 폭파한 적군 참호에 배치된 적군 수의 합이 K$K$명 이하여야 한다.\n\n지휘관은 폭격기의 폭탄 투하 위치와 폭탄의 폭파 범위를 설정하고 각 아군 참호에 배치할 국군의 수를 적절히 나누어 최대한 많은 적군 참호에게서 승리하도록 전략을 세우려 한다. 지휘관이 승리할 수 있는 적군 참호의 최대 개수를 구하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30193","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t샤레롱은 실버가 생각한 0$0$ 이상 N$N$ 미만의 정수를 맞추는 마술을 하려고 합니다. 이를 위해 샤레롱은 카드 K$K$장을 준비해, 각 카드에 0$0$ 이상 N$N$ 미만의 서로 다른 정수를 T$T$개 쓸 것입니다.\n\n실버는 0$0$ 이상 N$N$ 미만의 어떤 정수를 생각한 후, 샤레롱이 준비한 K$K$개의 카드를 보고 자신이 생각한 정수가 각 카드에 적혀 있는지를 샤레롱에게 말해 줍니다.\n\n실버가 어떤 정수를 생각했더라도 샤레롱이 실버의 대답을 듣고 항상 그 정수를 맞출 수 있는 가장 작은 K$K$와 이 때의 T$T$, 그리고 샤레롱이 각 카드에 적어야 하는 수를 구하는 프로그램을 작성해봅시다. 샤레롱이 실버의 대답을 듣고 항상 그 정수를 맞출 수 있다는 것은, 실버의 대답에 의해 실버가 생각한 정수가 유일하게 결정된다는 뜻입니다. 또, 샤레롱은 적어도 하나의 방법으로 문제의 조건을 만족하게 카드를 준비할 수 있습니다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30167","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou have two integers l$l$ and r$r$. Find an integer x$x$ which satisfies the conditions below:\n\n\n\t l≤x≤r$l \\le x \\le r$.\n\tAll digits of x$x$ are different.\n\n\nIf there are multiple answers, print any of them.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30210","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBX란 Base exchange의 약자로, 공군 장병들이 간식 등을 구매할 수 있는 매점을 의미한다. 하루에도 많은 병사들이 BX를 이용하며, 그중 일부 병사들은 가위바위보 등의 게임을 통해 맛있는 음식들을 걸고 내기를 하기도 한다.\n\n전역이 얼마 남지 않은 말년 병장인 준형이와 상민이도 BX의 인기 제품 \"슈넬치킨\"을 걸고 내기를 하기로 했다. 그러나, 가위바위보가 지겨워진 두 병장은 새로운 게임을 개발했는데, 게임의 규칙은 다음과 같다.\n\n\n\t준형이와 상민이는 점수를 0점을 가지고 게임을 시작한다.\n\t준형이부터 시작하여 각 플레이어는 번갈아 가며 턴을 진행하며, 본인의 턴이 되면 최대 N$N$자리의 대표 수 하나를 무작위로 생성한다.\n\t이후, 본인의 첫 턴이 아니라면, (이번 턴에 생성된 본인의 대표 수) +$+$ (현재 시점까지 상대가 생성한 대표 수 중 본인이 선택한 하나)가 이번 턴의 점수가 된다. 이렇게 만든 점수는 본인의 점수로 갱신하거나 버리고 기존 점수를 유지할 수 있다. 단, 본인의 두 번째 턴이라면 무조건 갱신해야 한다.\n\t각자 M$M$턴을 진행한 후, 점수가 더 높은 플레이어가 승리한다.\n\n\n그러나 게임을 반복적으로 진행하면서 지루해진 두 병장은, 다음과 같이 규칙을 바꾸었다!\n\n\n\t 3$3$번 규칙의 +$+$에서 받아올림을 진행하지 않는다. 즉, 각 자릿수의 합이 10$10$ 이상인 경우 해당 자릿수는 10$10$으로 나눈 나머지가 된다. 이를테면 3809+8315$3809 + 8315$는 기존 규칙에선 12124$12124$지만, 새로운 규칙에선 1114$1114$가 된다.\n\n\n하지만, 게임 도중에 둘 다 한 번씩 작업을 나갔다 오면서 게임의 결과를 잊어버렸다! 다행히 둘은 생성한 대표 수들을 수첩에 순서대로 전부 적어두어 놓았다. 그러나 누가 이겼는지 계산하기 귀찮았던 준형이와 상민이는 당신에게 수첩을 보여주며 누가 이겼는지 알려달라고 했다. 두 플레이어 모두 최선을 다했다고 가정할 때, 누가 이겼는지 알아보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30241","content":"문제\n\n이 버전에서는 시행의 횟수를 최소화해야 한다.\n\n두 순열 \np1,p2,…,pn\n$p_{1}, p_{2}, \\ldots, p_{n}$과 \nq1,q2,…,qm\n$q_{1}, q_{2}, \\ldots, q_{m}$이 있다. 초기에 \npi=ai\n$p_{i}=a_{i}$(\n1≤i≤n\n$1 \\le i \\le n$), \nqj=bj\n$q_{j}=b_{j}$(\n1≤j≤m\n$1 \\le j \\le m$)이다. 당신은 아래 시행을 적절하게 하여 \npi=i\n$p_{i}=i$(\n1≤i≤n\n$1 \\le i \\le n$), \nqj=j\n$q_{j} = j$(\n1≤j≤m\n$1 \\le j \\le m$)가 되도록 해야 한다.\n\n한 번의 시행에서, \np\n$p$와 \nq\n$q$는 다음 세 단계에 따라 변한다:\n\n당신은 \n1≤i≤n\n$1 \\le i \\le n$, \n1≤j≤m\n$1 \\le j \\le m$을 만족하는 두 정수 \ni\n$i$, \nj\n$j$를 선택한다.\n \np\n$p$에서 \ni\n$i$번째 원소를 기준으로 왼쪽 부분과 오른쪽 부분을 서로 교환한다. 즉, \np\n$p$를 \npi+1,pi+2,…,pn,pi,p1,p2,…,pi−1\n$p_{i+1}, p_{i+2}, \\ldots, p_{n}, p_{i}, p_{1}, p_{2}, \\ldots, p_{i-1}$로 바꾼다. 왼쪽 부분과 오른쪽 부분은 비어 있을 수도 있다. 새롭게 만들어진 \np\n$p$에는 인덱스 번호가 다시 부여된다.\n \nq\n$q$에서 \nj\n$j$번째 원소를 기준으로 왼쪽 부분과 오른쪽 부분을 서로 교환한다. 즉, \nq\n$q$를 \nqj+1,qj+2,…,qn,qj,q1,q2,…,qj−1\n$q_{j+1}, q_{j+2}, \\ldots, q_{n}, q_{j}, q_{1}, q_{2}, \\ldots, q_{j-1}$로 바꾼다. 왼쪽 부분과 오른쪽 부분은 비어 있을 수도 있다. 새롭게 만들어진 \nq\n$q$에는 인덱스 번호가 다시 부여된다.\n\n목표를 달성하는 것이 가능한지 판별하고, 가능하다면 최소 횟수의 시행으로 목표를 달성하는 방법을 찾아라."},{"problemId":"30211","content":"문제\n\n최근 생활관 건물이 무너져 내리고 있다는 보고를 받은 중대장 만식이는, 하루빨리 부대의 새로운 생활관을 건설하고자 한다. 부대 내에 생활관을 건설할 부지를 찾아본 결과, \n1\n$1$번 땅부터 \nN\n$N$번 땅까지 길이 \n1\n$1$의 땅이 왼쪽부터 오른쪽까지 일렬로 나열되어 있는 오래된 부지를 발견하였다.\n\n부지 내에 생활관은 단 한 채만 지을 수 있으며, 높이가 동일한 연속한 번호의 땅에 걸쳐 건설해야 한다. 그러나, 오랫동안 방치된 부지였던 만큼 땅의 높이가 제멋대로였다! 따라서 만식이는 부대 내의 병사들을 차출하여 땅의 높이를 같게 만드는 땅 고르기 작업을 진행하고자 한다. \ni\n$i$번 땅의 높이는 \nhi\n$h_i$이며, 각 땅의 높이를 \nx\n$x$만큼 높이거나 낮추기 위해서는 \nx2\n$x^2$명의 병사가 해당 땅에서 작업을 진행해야 한다. 단, 각 땅의 높이를 높이거나 낮출 때는 반드시 정수만큼만 바꿀 수 있다. 현재 만식이네 부대의 병사 수는 \nM\n$M$명뿐이었기에, 만식이는 최대 \nM\n$M$명의 병사만을 작업에 투입하여 생활관을 건설할 수 있는 땅의 길이를 최대화하고자 한다.\n\n그러나 작업에 들어가기 직전, 본부에서 부지 내에 생활관을 건설할 수 있는 땅의 범위를 제한하는 공문이 내려왔다! 공문의 내용은 부지 내의 \nl\n$l$번 땅부터 \nr\n$r$번 땅까지 구간 \n[l,r]\n$[l, r]$ 내부의 땅에만 생활관을 건설할 수 있다는 것이었는데, 공문의 숫자가 깨져서 내려오는 바람에 \nl\n$l$과 \nr\n$r$을 정확히 읽을 수 없었다. 공문 재발송을 요구하는 시간을 기다릴 수 없었던 만식이는, 미리 \nQ\n$Q$개의 구간 \n[lj,rj]\n$[l_j, r_j]$에 대해 생활관을 건설할 수 있는 땅의 최대 길이를 구하고자 한다. 만식이를 위해, \nQ\n$Q$개의 질문에 답해주자!"},{"problemId":"30168","content":"문제\n\nSuppose there is a \nh×w\n$h \\times w$ grid consisting of empty or full cells. Let's make some definitions:\n\n \nri\n$r_{i}$ is the number of consecutive full cells connected to the left side in the \ni\n$i$-th row (\n1≤i≤h\n$1 \\le i \\le h$). In particular, \nri=0\n$r_i=0$ if the leftmost cell of the \ni\n$i$-th row is empty.\n \ncj\n$c_{j}$ is the number of consecutive full cells connected to the top end in the \nj\n$j$-th column (\n1≤j≤w\n$1 \\le j \\le w$). In particular, \ncj=0\n$c_j=0$ if the topmost cell of the \nj\n$j$-th column is empty.\n\nIn other words, the \ni\n$i$-th row starts exactly with \nri\n$r_i$ full cells. Similarly, the \nj\n$j$-th column starts exactly with \ncj\n$c_j$ full cells.\n\nThese are the \nr\n$r$ and \nc\n$c$ values of some \n3×4\n$3 \\times 4$ grid. Black cells are full and white cells are empty.\n\nYou have values of \nr\n$r$ and \nc\n$c$. Initially, all cells are empty. Find the number of ways to fill grid cells to satisfy values of \nr\n$r$ and \nc\n$c$. Since the answer can be very large, find the answer modulo \n1000000007(109+7)\n$1000000007\\,(10^{9} + 7)$. In other words, find the remainder after division of the answer by \n1000000007(109+7)\n$1000000007\\,(10^{9} + 7)$."},{"problemId":"30194","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t 1$1$번부터 N$N$번까지 번호가 붙은 N$N$개의 돌이 순서대로 일렬로 나열되어 있습니다. 1$1$번 돌에서 출발하여 N$N$번 돌까지 주어진 정수 K$K$에 대해 다음 규칙을 만족하면서 이동하려 합니다.\n\n\n\t i$i$번 돌에서는 1≤x≤K$1\\le x\\le K$인 정수 x$x$에 대해 i+x$i+x$번 돌로 이동하거나, i−1$i-1$번 돌로 이동할 수 있습니다.\n\t돌이 없는 위치로는 이동할 수 없습니다.\n\t출발점과 도착점을 포함하여, 이미 밟은 돌은 다시 밟을 수 없습니다.\n\n\n규칙에 따라 1$1$번 돌에서 N$N$번 돌까지 이동하는 경우의 수를 소수 1000000007(=109+7)$1\\, 000\\, 000\\, 007(=10^9+7)$로 나눈 나머지를 구해봅시다. 밟은 돌의 번호를 순서대로 나열한 수열이 다르면 다른 이동으로 생각합니다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30242","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tN-Queen 문제는 크기가 N×N$N \\times N$인 체스판 위에 퀸 N$N$개를 서로 공격할 수 없게 놓는 문제이다.\n\n N$N$이 주어졌을 때, 퀸을 놓는 방법 한 가지를 출력하는 것은 쉽다.\n\n이 문제에서는 몇 개의 퀸이 이미 놓여있을 때, 퀸을 놓는 방법 한 가지를 출력해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30212","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tEmperor Kostas is planning to commemorate the victory against his rival Max by building an Arc of Triumph. He has already designed the Arc and is now looking for an engineer who would build it as cheap as possible.\n\nAn arc is a narrow structure made out of stone blocks. It is fully described by its twodimensional cross-section. For example, the cross-section of one of the arc of triumphs in Rome is as follows:\n\n########\n########\n########\n###..###\n#.#..#.#\n#.#..#.#\n\nIn this cross-section # denotes a block and . denotes an empty space.\n\nIn order for an arc to stand, all of the blocks have to be stable. A block is stable if:\n\n\n\tit is standing on the ground or on another stable block\n\tit belongs to a horizontal interval of blocks where the outer blocks are stable.\n\n\nFor example, in the following diagram:\n\n########\n########\n##XAYZ##\n###..###\nB.#..#.#\nC.#..#.#\n\nthe bloc B is stable because it is standing on a stable block C (the latter is stable since it is standing on the ground). The block A is stable because it belongs to an interval XAYZ where the outer blocks X and Z are stable.\n\nAn arc is built by putting one block after another. At any moment of construction all of the blocks have to be stable. For this reason, it is impossible to build some of the arcs without additional temporary constructions. For example, it is not possible to build an arc depicted above because it will never be possible to put block A in a stable manner. Therefore, the engineer is going to use a temporary wooden construction. The wooden construction is made out of wooden blocks.\n\nWhile building them it is important to take into account the same requirements: blocks are put one by one and at any moment of building the blocks have to be stable. When determining the stability of the block both wooden and stone blocks are considered identical.\n\nTherefore, the arc depicted above can be built using three wooden blocks. The essential step is illustrated here:\n\n..####..\n###^.###\n#.#^.#.#\n#.#^.#.#\n\n(^ denotes wooden blocks).\n\nThe construction starts with a plain empty field and continues with performing consecutive steps. Possible types of steps are listed below:\n\n\n\ta stone block is put in a selected square,\n\ta wooden block is put in a selected square,\n\ta wooden block is removed from a selected square.\n\n\nAt each moment of time all of the blocks that are put up have to be stable. Wodden blocks are expensive and Kostas is willing to buy as few wooden blocks as possible. The removed wooden blocks may be used again.\n\nYour task is to build an arc using the smallest possible amount of wooden blocks. After the construction has ended, the stone blocks have to be in exactly the same positions as it is stated in the plan. However, there may be some wooden blocks remaining.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30195","content":"문제\n\n서울대학교 워터밤에 오신 여러분, 환영합니다!\n\n이번 축제에서는 \nN\n$N$명의 사람들이 함께 즐길 수 있는 재밌는 게임을 하나 계획하고 있습니다. ”빙글빙글 물대포” 게임은 원 모양의 행사장의 테두리 위에 동일한 간격으로 배치된 \nN\n$N$개의 물대포를 사용해서 진행됩니다. 물대포에는 \n1\n$1$번부터 \nN\n$N$번까지의 번호가 붙어 있으며, 시계 방향으로 \n1\n$1$번 물대포, \n2\n$2$번 물대포, \n⋯\n$\\cdots$, \nN\n$N$번 물대포가 놓여 있습니다. 모든 물대포는 바닥에 고정되어 움직이지 않습니다.\n\n각각의 물대포는 \n2N\n$2N$초에 한 바퀴씩 일정한 속도로 시계 방향으로 멈추지 않고 회전하며, 초기 시점에 각 물대포는 시계 방향으로 다음에 위치한 물대포를 향해 있습니다. 즉, 초기 시점에 \n1\n$1$번 물대포는 \n2\n$2$번 물대포를 향해 있고, \n2\n$2$번 물대포는 \n3\n$3$번 물대포를 향해 있으며, \n⋯\n$\\cdots$, \nN\n$N$번 물대포는 \n1\n$1$번 물대포를 향해 있습니다.\n\n또한, \ni\n$i$번째 물대포는 초기 시점을 포함해, \nTi\n$T_i$초에 한 번씩 물대포가 향한 방향으로 물줄기를 발사합니다. 물줄기는 반직선 경로를 따라 멈추지 않고 한없이 뻗어나갑니다.\n\n \ni(1≤i≤N)\n$i(1\\le i\\le N)$번 참가자는 \ni\n$i$번 물대포 위치에서 게임을 진행합니다. 만약 물대포가 발사하는 물줄기가 지나는 위치에 사람이 서 있었다면, 발사된 즉시 그 물줄기를 맞게 됩니다. 단, 자신이 선택한 물대포에서 발사되는 물줄기는 맞지 않습니다. \ni\n$i$번째 물대포에 위치한 사람에게는 초기 시점에 \nAi\n$A_i$ 만큼의 체력이 주어지고, 물줄기를 한 번 맞을 때마다 체력이 정확히 \n1\n$1$씩 감소하여 체력이 \n0\n$0$이 된 사람은 \n0.5\n$0.5$초 후에 게임에서 탈락하게 됩니다. 게임에서 탈락한 사람의 대포는 그 사람이 탈락한 시점부터 더 이상 물줄기를 발사하지 않게 됩니다.\n\n게임에서 끝까지 남게 되는 사람들에게는 어마어마한 상품이 준비되어 있다고 하니, 끝까지 남기 위해서 어떤 위치를 선점해야 하는 지가 중요하겠죠? 아무리 긴 시간동안 게임이 지속된다고 하더라도, 반드시 끝까지 남게 되는 위치들을 모두 구해주세요!"},{"problemId":"30243","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tN-Queen 문제는 크기가 N×N$N \\times N$인 체스판 위에 퀸 N$N$개를 서로 공격할 수 없게 놓는 문제이다.\n\n N$N$이 주어졌을 때, 퀸을 놓는 방법 한 가지를 출력하는 것은 쉽다.\n\n이 문제에서는 몇 개의 퀸이 이미 놓여있을 때, 퀸을 놓는 방법 한 가지를 출력해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30220","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMany tech companies have realized that they have “over-hired.” Now, looking at their books, they realize they might have to let go of some employees. In order to prioritize their bottom line, a company will always fire the employee who is making the greatest annual salary at the time. If multiple employees are making the same maximal annual salary, then the person whose name comes first alphabetically will be fired.\n\nOf course, to improve morale, employees can still get raises, which makes figuring out who to fire a bit more tricky.\n\nGiven a set of employees and their initial annual salaries, followed by a sequence of actions (either the firing of an employee or giving a raise to a current employee), determine for each firing event, which employee got fired.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30213","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tOn April Fools Day newspapers like to fool their readers by publishing false and usually absurd facts. For example, a fact stating that today Vilnius television tower was brought down by wind.\n\nYou are given a range of facts which were published by each of the N different newspapers. These facts are denoted by natural numbers from 1 to F. For example:\n\n\n\tNewspaper 1: 1, 2, 5\n\tNewspaper 2: 2, 3, 4\n\tNewspaper 3: 1, 6\n\n\nYou also know that this April Fools Day each of the newspapers published exactly one false fact.\n\nFind the smallest and the biggest number of false facts that could have been published today.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30196","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t거리가 3$3$만큼 떨어진 순서 없는 정점 쌍을 정확히 K$K$ 개 찾을 수 있는, 정점의 개수가 N$N$개인 트리를 구성할 수 있는지 판별하라. 만약 구성할 수 있다면, 조건을 만족하는 트리를 아무거나 하나 출력하라.\n\n여기서 두 정점 사이의 거리란, 한 정점과 다른 정점을 잇는 유일한 단순 경로 위의 간선의 개수로 정의된다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30244","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tN-Queen 문제는 크기가 N×N$N \\times N$인 체스판 위에 퀸 N$N$개를 서로 공격할 수 없게 놓는 문제이다.\n\n N$N$이 주어졌을 때, 퀸을 놓는 방법 한 가지를 출력하는 것은 쉽다.\n\n이 문제에서는 몇 개의 퀸이 이미 놓여있을 때, 퀸을 놓는 방법 한 가지를 출력해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30169","content":"문제\n\nLet's introduce some definitions that will be needed later.\n\nLet \nprime(x)\n$prime(x)$ be the set of prime divisors of \nx\n$x$. For example, \nprime(140)={2,5,7}\n$prime(140) = \\{ 2, 5, 7 \\}$, \nprime(169)={13}\n$prime(169) = \\{ 13 \\}$.\n\nLet \ng(x,p)\n$g(x, p)$ be the maximum possible integer \npk\n$p^k$ where \nk\n$k$ is an integer such that \nx\n$x$ is divisible by \npk\n$p^k$. For example:\n\n \ng(45,3)=9\n$g(45, 3) = 9$ (\n45\n$45$ is divisible by \n32=9\n$3^2=9$ but not divisible by \n33=27\n$3^3=27$),\n \ng(63,7)=7\n$g(63, 7) = 7$ (\n63\n$63$ is divisible by \n71=7\n$7^1=7$ but not divisible by \n72=49\n$7^2=49$).\n\nLet \nf(x,y)\n$f(x, y)$ be the product of \ng(y,p)\n$g(y, p)$ for all \np\n$p$ in \nprime(x)\n$prime(x)$. For example:\n\n \nf(30,70)=g(70,2)⋅g(70,3)⋅g(70,5)=21⋅30⋅51=10\n$f(30, 70) = g(70, 2) \\cdot g(70, 3) \\cdot g(70, 5) = 2^1 \\cdot 3^0 \\cdot 5^1 = 10$,\n \nf(525,63)=g(63,3)⋅g(63,5)⋅g(63,7)=32⋅50⋅71=63\n$f(525, 63) = g(63, 3) \\cdot g(63, 5) \\cdot g(63, 7) = 3^2 \\cdot 5^0 \\cdot 7^1 = 63$.\n\nYou have integers \nx\n$x$ and \nn\n$n$. Calculate \nf(x,1)⋅f(x,2)⋅…⋅f(x,n)mod(109+7)\n$f(x, 1) \\cdot f(x, 2) \\cdot \\ldots \\cdot f(x, n) \\bmod{(10^{9} + 7)}$."},{"problemId":"30214","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tTravis was recently saddled with writing the easy problem for a competitive programming contest aimed at high school students. Writing an easy problem is a bit of a challenge for Travis; a problem labeled as “Medium Difficulty Level” by Travis typically ends up being the hardest problem of the set!\n\nBut this time things were different. When the contest was over, Travis was happy that everyone solved his problem. However, some of the other judges informed Travis a problem is easy only if at least half of the contestants solve the problem in the first half of the contest.\n\nTravis has some data on his problem, and now he wants to determine: was his problem truly easy?\n\nIn programming competitions, the term “solves” is used to refer to the number of correct submissions for a problem, i.e., that many contestants solved the problem.\n\nGiven the number of solves for Travis’s problem at the end of the first half and at the end of the contest, determine whether at least half the people solved the problem in the first half. Note that solves at the end of the contest includes solves of the first half as well.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30199","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAleksas gyvena dideliame mieste. Prieš porą mėnesių, paveiktas pandemijos, jis nusprendė pakeisti gyvenimo būdą ir į darbą pradėti važinėti dviračiu. „Taip ir man sveikiau, ir planetai geriau.“ – samprotavo Aleksas.\n\nTačiau viskam yra ribos. Aleksas yra pasiryžęs važiuoti dviračiu tik tada, kai nelyja. Jis taip pat gali nuspręsti palikti savo dviratį darbe ir grįžti namo viešuoju transportu, jei vakare pradeda lyti. Taigi, Aleksas elgiasi taip:\n\n\n\tRyte, jeigu lyja arba Alekso dviratis ne namie, jis važiuoja į darbą viešuoju transportu. Priešingu atveju, jis gali važiuoti į darbą dviračiu (bet gali ir viešuoju transportu).\n\tVakare, jeigu lyja arba Alekso dviratis ne darbe, jis grįžta namo viešuoju transportu. Priešingu atveju, jis gali grįžti namo dviračiu (bet gali ir viešuoju transportu).\n\n\nAleksas stebi orų prognozę ir norėtų susiplanuoti savo keliones taip, kad kuo daugiau dienų jis pasinaudotų dviračiu bent vieną kartą (t. y. ryte, vakare, arba abu kartus).\n\nDuota orų prognozė ateinančioms N dienų. Raskite, kiek daugiausiai dienų Aleksas galės važiuoti dviračiu.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30245","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t N×N$N \\times N$ 체스판이 주어질 때, 체스판에 퀸 N$N$개를 서로 공격할 수 없게 놓는 방법 한 가지를 출력해 보자. 체스판의 r$r$행 c$c$열 좌표는 (r,c)$(r, c)$이며, 가장 왼쪽 위 칸은 (1,1)$(1, 1)$, 가장 오른쪽 아래 칸은 (N,N)$(N, N)$이다. 단, 체스판의 평행한 변끼리 연결되어 있어, 두 퀸의 좌표가 각각 (a,b)$(a, b)$, (c,d)$(c, d)$라 할 때 다음 네 조건 중 적어도 하나를 만족하면 두 퀸은 서로 공격하는 상태이다.\n\n\n\t a=c$a = c$ \n\t b=d$b = d$ \n\t a+b≡c+d(modN)$a+b \\equiv c+d \\pmod N$ \n\t a−b≡c−d(modN)$a-b \\equiv c-d \\pmod N$ \n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30215","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tDr. O has two granddaughters (named Alyssa and Konari) and they keep Dr. O young!\n\nWhen people ask Dr. O how old he is, rather than giving one positive integer (his age), Dr. O provides two positive integers a and k; Dr. O’s age can then be computed using the expression (a × Alyssa’s age) + (k × Konari’s age).\n\nGiven three positive integers (Dr. O’s age, Alyssa’s age, and Konari’s age), determine if the positive integers a and k exist.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30170","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou have a simple undirected graph consisting of n$n$ vertices and m$m$ edges. The graph doesn't contain self-loops, there is at most one edge between a pair of vertices. The given graph can be disconnected.\n\nLet's make a definition.\n\nLet v1$v_1$ and v2$v_2$ be two some nonempty subsets of vertices that do not intersect. Let f(v1,v2)$f(v_{1}, v_{2})$ be true if and only if all the conditions are satisfied:\n\n\n\tThere are no edges with both endpoints in vertex set v1$v_1$.\n\tThere are no edges with both endpoints in vertex set v2$v_2$.\n\tFor every two vertices x$x$ and y$y$ such that x$x$ is in v1$v_1$ and y$y$ is in v2$v_2$, there is an edge between x$x$ and y$y$.\n\n\nCreate three vertex sets (v1$v_{1}$, v2$v_{2}$, v3$v_{3}$) which satisfy the conditions below;\n\n\n\tAll vertex sets should not be empty.\n\tEach vertex should be assigned to only one vertex set.\n\t f(v1,v2)$f(v_{1}, v_{2})$, f(v2,v3)$f(v_{2}, v_{3})$, f(v3,v1)$f(v_{3}, v_{1})$ are all true.\n\n\nIs it possible to create such three vertex sets? If it's possible, print matching vertex set for each vertex.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30221","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMany of the UCF programming team coaches are getting old and are looking for any way possible to regain their youth. There's a new train in town, the Brightline. Rumor has it that if a person takes some of the trains, he or she can actually get younger!\n\nBrightline runs two types of trains: the blue line and the red line. On each blue line, train passengers age (get older) by some amount of time. One each red line, train passengers go back in time (get younger) by some amount of time.\n\nEach train line is directed, connecting two cities, a source to a destination, and is labeled as either red or blue, and has an associated number with it, representing the number of minutes a passenger will age (if a blue line) or move back in time (if a red line) if they take that line. Assume that any time you arrive in a city, you can immediately take any of the trains leaving that city.\n\nThe train system doesn't allow for going back in time indefinitely; there will be no possible way to start at any city and end at that same city younger than you were before. This would create a time paradox too difficult for even the UCF coaches to solve.\n\nAll of the coaches currently reside in Orlando (which will be location 1 for the purposes of this problem).\n\nGiven a list of all Brightline train lines (each line will have a source city, destination city, a red or blue label, and a positive integer representing how much one ages on the line), determine all of the destination cities that someone, starting in city 1 (Orlando) can travel to, such that when they arrive at their destination, they will be younger than when they started.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30216","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tGiven a list of numbers, we define a sublist as one or more consecutive elements in the list. An increasing sublist is when the consecutive elements are in strictly increasing order, i.e., each element is greater than the element to its left in the sublist (except the first element in the sublist which does not have an element to its left).\n\nGiven a list, find the length (number of elements) of the longest increasing sublist, i.e., the length of the sublist with the most number of elements.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30217","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tFrom “yourdictionary.com”: Portmanteau, pronounced “port-man-tow,” refers to a new word made from two words and their meanings. For example, the portmanteau brunch refers to a combined meal of breakfast and lunch, and spork is a mix between a spoon and a fork.\n\nYou are to combine two words using a simplified approach.\n\nRules for combining:\n\n\n\tGet the first letter of the first word regardless of what (vowel or consonant) it is. Then, starting from the second letter of the first word, get letters moving right until you reach a vowel. If no vowels while moving right, all letters will be taken. If there is a vowel moving right, let’s call it v1.\n\tGet the last letter of the second word regardless of what (vowel or consonant) it is. Then, starting from the letter next to the last letter of the second word, get letters moving left until you reach a vowel. If no vowels while moving left, all letters will be taken. If there is a vowel moving left, let’s call it v2.\n\tCombine the two words by listing the letters taken from the first word (Step 1), followed by a vowel (let’s call it the merging vowel), followed by the letters taken from the second word (Step 2). The merging vowel is as follows:\n\t\n\t\tIf the second word has a vowel while moving left (i.e., v2 exists), v2 is the merging vowel.\n\t\tIf the second word does not have a vowel while moving left (i.e., v2 does not exist) but the first word has a vowel while moving right (i.e., v1 exists), v1 is the merging vowel.\n\t\tIf v1 and v2 don’t exist (i.e., neither word has a vowel while moving right/left), use the letter “o” as the merging vowel.\n\t\n\t\n\n\nAssume the vowels are “aeiou”.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30246","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tN-Queen 문제는 N×N$N\\times N$ 보드에 서로 공격할 수 없는 퀸 N$N$개를 배치하는 문제이다. 이 문제에서는 특별히 양자 세계에서의 N-Queen를 새롭게 정의한다. 양자 세계에서의 N-Queen 문제는 다음과 같이 정의된다.\n\n\n\t N×N$N\\times N$ 보드의 각 칸에 퀸을 [0,1]$[0,1]$ 구간의 임의의 실수만큼 배치할 수 있다.\n\t각 행에 있는 퀸의 수의 합은 반드시 1$1$이다.\n\t각 열에 있는 퀸의 수의 합은 반드시 1$1$이다.\n\t각 대각선에 있는 퀸의 수의 합은 1$1$ 이하이다.\n\t보드에서 위 조건들을 만족하는 퀸의 배치를 찾아야 한다.\n\n\n그러나 퀸이 없는 보드에서 이 문제를 해결하는 것은 너무 쉽다. 일부 칸에 배치 퀸의 개수가 이미 고정되어 있을 때, 퀸을 놓는 방법 한 가지를 출력해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30222","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tUCF has started running a pre-school, where it is teaching all the students their ABC’s! Naturally, all of the blocks the kids have to play with have one of the three letters on them. The kids like arranging the blocks, but don't like any arrangements where two of the same letters are in a row (i.e., right next to each other).\n\nFor example, if a kid had 2 A blocks, 3 B blocks and 1 C block, a valid arrangement of the blocks would be BACBAB, but CBABBA would not be valid because the letter B appears twice in a row.\n\nThe preschool teacher is wondering: how many different valid orders can the blocks be arranged? Two arrangements are considered different if there is a different letter in the same corresponding positions in the two arrangements.\n\nGiven the number of blocks showing the letter A, the number of blocks showing the letter B, and the number of blocks showing the letter C, determine the number of arrangements of all of the blocks in a row, with no two consecutive blocks showing the same letter. Since the answer might be quite large, determine the result modulo 109 + 7.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30171","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou have n×n$n \\times n$ square grid and an integer k$k$. Put an integer in each cell while satisfying the conditions below.\n\n\n\tAll numbers in the grid should be between 1$1$ and k$k$ inclusive.\n\tMinimum number of the i$i$-th row is 1$1$ (1≤i≤n$1 \\le i \\le n$).\n\tMinimum number of the j$j$-th column is 1$1$ (1≤j≤n$1 \\le j \\le n$).\n\n\nFind the number of ways to put integers in the grid. Since the answer can be very large, find the answer modulo (109+7)$(10^{9} + 7)$.\n\n\n\nThese are the examples of valid and invalid grid when n=k=2$n=k=2$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30218","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tGiven a sequence of numbers, we define a window within the sequence to be a contiguous subsequence of those numbers. For example, in the sequence [3, 6, 2, 3, 5, 4], there are four windows of size 3: [3, 6, 2], [6, 2, 3], [2, 3, 5] and [3, 5, 4]. We call window i of size k the window which starts with the ith value in the list and includes exactly k consecutive values, ending with the (i+k-1)th value in the list.\n\nFor a window with values a1, a2, …, ak, define its weighted window sum to be:\n\n1a1 + 2a2 + 3a3 + … + kak\n\nFor the four window sums described above, the corresponding weighted window sums are:\n\n[3, 6, 2] → 1 × 3 + 2 × 6 + 3 × 2 = 21 (Rank 2)\n\n[6, 2, 3] → 1 × 6 + 2 × 2 + 3 × 3 = 19 (Rank 1)\n\n[2, 3, 5] → 1 × 2 + 2 × 3 + 3 × 5 = 23 (Rank 3)\n\n[3, 5, 4] → 1 × 3 + 2 × 5 + 3 × 4 = 25 (Rank 4)\n\nFor each window of a given size within a sequence of numbers, we sort those windows in increasing order of weighted window sum, breaking ties by the starting index of the window, from smallest index to largest index.\n\nGiven a sequence of integers and the size of a window, sort each window of the given size in the sequence by weighted window sum in increasing order, breaking ties by the starting index of the window.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30219","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tWhen dealing with children, you want to divide things as evenly as possible. In particular, the child who receives the least will compare themselves to the child who receives the most, so you’d like these two values to be as close to each other as possible.\n\nGiven 3n points, form n triangles (using each point exactly once) such that the difference between the largest triangle (in area) and the smallest triangle (in area) is as small as possible. That is, we want these two triangles to be as close to each other (in area) as possible.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30247","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMartynas is a travel enthusiast and writes reviews on an Internet blog. Today he wants to evaluate trips offered by a travel agency called Rail Baitlandija.\n\nIn Baitlandija there are N cities, numbered from 1 to N. These cities are connected by one-way rails so that it is possible to get from city i to city j by train only when i < j.\n\nHowever, not all possible train routes are offered by Rail Baitlandija agency. This means that there are M pairs of cities (ai, bi) (ai < bi) where it is not possible to buy train tickets from city ai to city bi.\n\nMartynas defines a trip to be such a sequence of cities (a1, a2, ..., ak) (k > 1) that for each city pair (ai, ai+1) (1 ≤ i ≤ k − 1) Rail Baitlandija offers train tickets from ai to ai+1. Today he decided to try each such trip exactly once.\n\nVisiting city i brings him mi amount of pleasure even if he has already visited this city during the previous trip. Therefore, each trip (a1, a2, ..., ak) brings him (ma1 + ma2 + ... + mak) of pleasure and the pleasure experienced on all those trips is summed.\n\nHaving done all of the trips, Martynas became so happy that he forgot how much pleasure he had experienced in total. When writing the review, it is important to include this number, so he needs your help to calculate it.\n\nCalculate the total pleasure experienced by Martynas. Output the answer modulo 109 + 7.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30172","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou have an integer n$n$. Let's define following tree generation as McDic's generation:\n\n\n\tMake a complete and full binary tree of 2n−1$2^{n} - 1$ vertices. Complete and full binary tree means a tree that exactly one vertex is a root, all leaves have the same depth (distance from the root), and all non-leaf nodes have exactly two child nodes.\n\tSelect a non-root vertex v$v$ from that binary tree.\n\tRemove v$v$ from tree and make new edges between v$v$'s parent and v$v$'s direct children. If v$v$ has no children, then no new edges will be made.\n\n\nYou have a tree. Determine if this tree can be made by McDic's generation. If yes, then find the parent vertex of removed vertex in tree.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30223","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tGeometry Refresher:\n\n\n\tA simple polygon is a polygon that does not intersect itself and has no holes. That is, it is a flat shape consisting of straight, non-intersecting line segments or “sides” that are joined pairwise to form a single closed path.\n\tA polygon is convex if every line that does not contain any edge intersects the polygon in at most two points.\n\n\nGiven a cake in the shape of simple convex polygon, we would like to cut the cake into two pieces; the single cut (straight line) must go thru two of the polygon vertices. Find the two vertices that will make the two pieces as close (in area) as possible, i.e., the difference in the area for the two pieces is the minimum.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30260","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tP-22’s father was P-1, the first mountain lion tagged in the Santa Monica Mountains. P-22’s mother is unknown. Unfortunately, we do not know anything about P-1’s parents, so we can only trace back P-22’s ancestry two generations (himself and his father). In some other cases, one can trace back ancestry quite a bit further, and you are supposed to find out just how far.\n\nTo keep things simple (and avoid exponential growth), we will assume that for each individual mountain lion, you are given only one parent (or none, when no information is available). You are to return the total number of generations in the ancestry of a specific mountain lion that can be traced back.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30261","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tTo get to Griffith Park, P-22 had to cross multiple freeways. Crossing freeways is dangerous, in particular with all those 62 lanes freeways in LA seem to have. Cars drive by at different speeds, and if you get hit by just one, that’s it. You are to write a program that will help P-22 evaluate whether a proposed strategy for crossing a freeway will let him survive, or if not, at which step he would be killed (so he can work on improving it).\n\nWe will approximate both P-22 and the cars as 1 × 1 squares, with the edges not included (so mathematically, the square (0, 1) × (0, 1)). When we describe them, we will be using a 2-D map, and any coordinate we give you will be the bottom left corner of a square (car or P-22). P-22 will try to go from (0, 0) to (0, L + 1), where L is the number of lanes the freeway has. Lane i goes from y-coordinate i to y-coordinate i + 1. (So 0 and L + 1 are just outside of traffic.) In each time step, he can move one lane higher or lower (or stay put) — he cannot cross multiple lanes in one step, and he does not want to move left or right. A proposed strategy is encoded as a string consisting of characters ‘+’, ‘-’, ‘0’, meaning that P-22 moves to the next higher or next lower lane or stays put, respectively. Specifically, the character in position t = 0, 1, . . . describes what P-22 does from time t until time t + 1. The proposed strategies will all be legal, so they do not move lower from 0 or higher from L + 1, they will end up in L + 1 (assuming P-22 survives), and they will not reach L + 1 at any time before the final step. (P-22 is smart enough not to run back onto the freeway once he has crossed it.)\n\nEach car will stay in one lane throughout, and drive at a constant speed. For each car, you will be given its initial position (an integer lane and floating point position in that lane) and the (floating point) speed with which it drives. The speed describes how many positions the car moves in one time step. Cars move continuously, and so does P-22. So when he crosses a lane, he will temporarily occupy (part of) both lanes, so he could be hit by cars in either lane. Notice, however, that he will not be hit by a car in a different lane as he waits in one lane (because we excluded the edge of the squares).\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30248","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA new airport has been opened in Bitlandia. It is considered to be the most advanced airport in the whole world. There is a short-distance teleportation system installed which allows the travellers to get in, get out or transfer to another plane in a blink of an eye. Moreover, this even allows the planes to not stop at the airport and the system can provide this service to a multiple planes at the same time.\n\nHowever,the creators of the system have not accounted for the fact that the situation can become quite complicated if passengers have to transfer from one plane to another. Let’s say that passengers need to transfer from plane i to plane j. Since planes do not stop at the airport, the plane j cannot land (and take off again) earlier than plane i does.\n\nIf the plane i is late, then the plane j will have to wait for it before landing. This means that it can delay other flights as well in case travellers from plane j need to transfer.\n\nIn an effort to solve this problem, the government of Bitlandia has issued a law stating that all travellers from the same flight have the right to transfer to at most one other flight. Moreover, the mayor of Bitlandia has ordered to create a flight control system that would allow tracking when each plane will land (and take off again).\n\nCreate this flight control system. You will be provided with regular flight schedule and information about transfers of travellers between flights.\n\nThe system will have to answer two types of queries:\n\n\n\tOutput the currently expected landing time of plane j.\n\tAccept notice that plane j will be additionally late z units of time.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30262","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tOne of the legacies of P-22’s story is that California is building more wildlife crossings over/under freeways. While P-22 survived his long journey (thanks in part to your solution to the previous problem), many other mountain lions do not. The idea is that animals will learn to use these crossings instead of running across the freeway, reducing deaths among them (and risk to humans from traffic accidents). In fact, the first wildlife crossing to be directly inspired by P-22, the Wallis Annenberg Crossing, was begun in April 2022.\n\nHere, your goal is to figure out where to build multiple wildlife crossings to make the life of animals as easy as possible. The budget of Caltrans and CDFW tells you how many wildlife crossings can be built. You should choose their location to minimize the average distance animals will walk to their respective closest crossings. For each animal i, you will be given the (xi, yi) coordinate where it lives. The freeway is modeled as the infinite x-axis, i.e., going from (−∞, 0) to (+∞, 0). You can choose c locations on the freeway for your crossings. When an animal needs to cross the freeway, it will first go in a straight line to the freeway, then walk along the freeway to the closest crossing you have built.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30224","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tFact or Fiction, some people consider 7 to be a lucky digit/number.\n\nGiven a number, determine how lucky the number is by printing one of four values:\n\n\n\tPrint 0 if the number does not contain 7 and is not divisible by 7.\n\tPrint 1 if the number does not contain 7 but is divisible by 7.\n\tPrint 2 if the number does contain 7 but is not divisible by 7.\n\tPrint 3 if the number does contain 7 and is divisible by 7.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30173","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tUjan needs some rest from cleaning, so he started playing with infinite sequences. He has two integers n$n$ and k$k$. He creates an infinite sequence s$s$ by repeating the following steps.\n\n\n\tFind k$k$ smallest distinct positive integers that are not in s$s$. Let's call them u1,u2,…,uk$u_{1}, u_{2}, \\ldots, u_{k}$ from the smallest to the largest.\n\tAppend u1,u2,…,uk$u_{1}, u_{2}, \\ldots, u_{k}$ and ∑i=1kui$\\sum_{i=1}^{k} u_{i}$ to s$s$ in this order.\n\tGo back to the first step.\n\n\nUjan will stop procrastinating when he writes the number n$n$ in the sequence s$s$. Help him find the index of n$n$ in s$s$. In other words, find the integer x$x$ such that sx=n$s_{x} = n$. It's possible to prove that all positive integers are included in s$s$ only once.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30249","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA worldwide logistics company is called Loners since all of the drivers ride alone. It is very important to the managers of the company to be able to answer their clients quickly and accurately about whether or not the drivers are going to deliver their goods safely from city a to city b.\n\nThe driver’s job demands responsibility and alertness. For this reason, they are required to rest at a hotel no less frequently than every p amount of hours. The are hotels located at every city. Using the information you have about cities and roads that connect them, write a program that would answer to the queries of the managers.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30250","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tUgnė and Jūratė enjoy collecting mascots with various numbers on them. Jūratė only collects mascots with numbers composed of the same same digits. Ugnė, however, collects mascots with numbers coposed of ones.\n\nOne day, while studying division, the girls noticed that if they divide some Ugnė’s numbers by Jūratė’s numbers, it is possible to obtain numbers of an interesting shape. For example, 111 111 111/9 = 12 345 679.\n\nGirls wondered: What other sequences of numbers can be produced and what are the sums of their digits? Unfortunately, the numbers may be very big and it is too complicated for the girls to perform the division themselves. Therefore, they are asking you for help.\n\nYou are given the numbers of Ugnė and Jūratė. Divide the Ugnė’s number by the Jūratė’s number, calculate the result of division and find the sum of digits of the division result.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30263","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tP-22 rose to national fame when Steve Winter published a photo of P-22 in front of the Hollywood Sign in National Geographic. To do so, Winter spent 15 months placing motion-activated cameras in the park, trying to understand P-22’s movements. After all, Griffith Park is pretty big, so going to a random spot at a random time was unlikely to result in meeting P-22 — but if you repeat a random attempt often enough, there’s a decent chance you’ll succeed at least once. Here, you will be given a list of where Winter set up his camera at various times, and where P-22 was at various times, and you are to find out what was the most glamorous shot of P-22 that Winter captured.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30225","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe United Credit Finance (UCF) is running a simple scenario to see how many customers are happy with the company. UCF has one person (teller) serving the customers. Customers are numbered 1-n, and they arrive for service in sequential order, i.e., Customer 1 arrives first, then Customer 2, then Customer 3, etc. Also, no two customers arrive at the same time, i.e., Customer 2 will arrive later than Customer 1, Customer 3 will arrive later than Customer 2, etc. Customers are also processed in the order of arrival (i.e., not out of order).\n\nAs you might have noticed while waiting in a line, some customers get impatient and leave. Given the information about the UCF customers, you are to determine which customers are happy, i.e., they don’t leave before being processed.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30251","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tEmperor Kostas is planning to commemorate the victory against his rival Max by building an Arc of Triumph. He has already designed the Arc and is now looking for an engineer who would build it as cheap as possible.\n\nAn arc is a narrow structure made out of stone blocks. It is fully described by its twodimensional cross-section. For example, the cross-section of one of the arc of triumphs in Rome is as follows:\n\n########\n########\n########\n###..###\n#.#..#.#\n#.#..#.#\n\nIn this cross-section # denotes a block and . denotes an empty space.\n\nIn order for an arc to stand, all of the blocks have to be stable. A block is stable if:\n\n\n\tit is standing on the ground or on another stable block\n\tit belongs to a horizontal interval of blocks where the outer blocks are stable.\n\n\nFor example, in the following diagram:\n\n########\n########\n##XAYZ##\n###..###\nB.#..#.#\nC.#..#.#\n\nthe bloc B is stable because it is standing on a stable block C (the latter is stable since it is standing on the ground). The block A is stable because it belongs to an interval XAYZ where the outer blocks X and Z are stable.\n\nAn arc is built by putting one block after another. At any moment of construction all of the blocks have to be stable. For this reason, it is impossible to build some of the arcs without additional temporary constructions. For example, it is not possible to build an arc depicted above because it will never be possible to put block A in a stable manner. Therefore, the engineer is going to use a temporary wooden construction. The wooden construction is made out of wooden blocks.\n\nWhile building them it is important to take into account the same requirements: blocks are put one by one and at any moment of building the blocks have to be stable. When determining the stability of the block both wooden and stone blocks are considered identical.\n\nTherefore, the arc depicted above can be built using three wooden blocks. The essential step is illustrated here:\n\n..####..\n###^.###\n#.#^.#.#\n#.#^.#.#\n\n(^ denotes wooden blocks).\n\nThe construction starts with a plain empty field and continues with performing consecutive steps. Possible types of steps are listed below:\n\n\n\ta stone block is put in a selected square,\n\ta wooden block is put in a selected square,\n\ta wooden block is removed from a selected square.\n\n\nAt each moment of time all of the blocks that are put up have to be stable. Wodden blocks are expensive and Kostas is willing to buy as few wooden blocks as possible. The removed wooden blocks may be used again.\n\nYour task is to build an arc using the smallest possible amount of wooden blocks. After the construction has ended, the stone blocks have to be in exactly the same positions as it is stated in the plan. However, there may be some wooden blocks remaining.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30174","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou have integer n$n$. Calculate how many ways are there to fully cover belt-like area of 4n−2$4n-2$ triangles with diamond shapes. \n\nDiamond shape consists of two triangles. You can move, rotate or flip the shape, but you cannot scale it. \n\n 2$2$ coverings are different if some 2$2$ triangles are covered by the same diamond shape in one of them and by different diamond shapes in the other one.\n\nPlease look at pictures below for better understanding.\n\n\n\nOn the left you can see the diamond shape you will use, and on the right you can see the area you want to fill.\n\n\n\nThese are the figures of the area you want to fill for n=1,2,3,4$n = 1, 2, 3, 4$.\n\nYou have to answer t$t$ independent test cases.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30300","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tWe define the beauty of an array as the value of its minimum excluded value (MEX †$^{\\dagger}$). A larger MEX corresponds to a more beautiful array.\n\nYou are given an array A$A$ of length N$N$. You want to enhance it in terms of its beauty. To achieve this, you can choose a non-negative integer x$x$ and replace each element Ai$A_i$ with Ai∧x$A_i\\wedge x$ where ∧$\\wedge$ denotes the bitwise AND operator.\n\nFind the optimal value of x$x$ that maximizes the beauty of the array.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30252","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tEmperor Kostas is planning to commemorate the victory against his rival Max by building an Arc of Triumph. He has already designed the Arc and is now looking for an engineer who would build it as cheap as possible.\n\nAn arc is a narrow structure made out of stone blocks. It is fully described by its twodimensional cross-section. For example, the cross-section of one of the arc of triumphs in Rome is as follows:\n\n########\n########\n########\n###..###\n#.#..#.#\n#.#..#.#\n\nIn this cross-section # denotes a block and . denotes an empty space.\n\nIn order for an arc to stand, all of the blocks have to be stable. A block is stable if:\n\n\n\tit is standing on the ground or on another stable block\n\tit belongs to a horizontal interval of blocks where the outer blocks are stable.\n\n\nFor example, in the following diagram:\n\n########\n########\n##XAYZ##\n###..###\nB.#..#.#\nC.#..#.#\n\nthe bloc B is stable because it is standing on a stable block C (the latter is stable since it is standing on the ground). The block A is stable because it belongs to an interval XAYZ where the outer blocks X and Z are stable.\n\nAn arc is built by putting one block after another. At any moment of construction all of the blocks have to be stable. For this reason, it is impossible to build some of the arcs without additional temporary constructions. For example, it is not possible to build an arc depicted above because it will never be possible to put block A in a stable manner. Therefore, the engineer is going to use a temporary wooden construction. The wooden construction is made out of wooden blocks.\n\nWhile building them it is important to take into account the same requirements: blocks are put one by one and at any moment of building the blocks have to be stable. When determining the stability of the block both wooden and stone blocks are considered identical.\n\nTherefore, the arc depicted above can be built using three wooden blocks. The essential step is illustrated here:\n\n..####..\n###^.###\n#.#^.#.#\n#.#^.#.#\n\n(^ denotes wooden blocks).\n\nThe construction starts with a plain empty field and continues with performing consecutive steps. Possible types of steps are listed below:\n\n\n\ta stone block is put in a selected square,\n\ta wooden block is put in a selected square,\n\ta wooden block is removed from a selected square.\n\n\nAt each moment of time all of the blocks that are put up have to be stable. Wodden blocks are expensive and Kostas is willing to buy as few wooden blocks as possible. The removed wooden blocks may be used again.\n\nYour task is to build an arc using the smallest possible amount of wooden blocks. After the construction has ended, the stone blocks have to be in exactly the same positions as it is stated in the plan. However, there may be some wooden blocks remaining.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30264","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tP-22 had a nice diet of deer, rabbits, and various other animals available in Griffith Park. In return, attacks on pets seem to have been extremely rare — though he is a prime suspect in the killing of an elderly koala from the Los Angeles Zoo in 2016. Hunting deer is not easy: they are generally very alert, so you have to carefully sneak up on them, and if they hear/smell you before you pounce, you have to run faster so you catch them before they get to safety.\n\nWe model this as follows: the hunting area is a rectangle, on which P-22 can move horizontally or vertically (but not diagonally) while sneaking. You are given the positions of P-22 and the grazing deer. We assume that both are at the center of their respective squares. Each square is either silent or noisy. So long as P-22 stays on silent squares, the deer does not notice him. As soon as he steps on a noisy square, the deer will start running. To be precise, we model this as follows: while P-22 is sneaking, each step starts and ends with him being in the center of the corresponding square. When he steps onto a noisy square, he makes a noise when his center is in the center of the square (not when he touches the edge).\n\nWhen the deer starts running, it runs along a straight line (geometric, ignoring the square pattern of the map) away from P-22. The deer runs at speed vD. As soon as the deer starts running, so does P-22, at speed vP, following the deer in a straight line. If P-22 catches up with the deer before it reaches the edge of the area, he has his lunch and dinner. Otherwise, he goes hungry. We assume that the deer reaches the edge of the area when its center touches the outside boundary of the area, geometrically speaking.\n\nBecause running fast is hard work (much harder than sneaking stealthily), you are to find what is the shortest running part of the hunt that P-22 can guarantee himself, while still catching the deer, of course.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30280","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tŠią žiemą Vytautas nusprendė grūdintis. Jis ketina grūdintis tiek šiltu, tiek šaltu oru, ir jis tai norėtų daryti kuo galima ilgiau be pertraukos. Prieš sudarydamas grūdinimosi tvarkaraštį, Vytautas pažiūrėjo į orų prognozę. Kiekvienai iš ateinančių N dienų jis pasižymėjo ar ta diena bus šilta ar šalta. Šiltas dienas Vytautas pažymėjo pliusais, o šaltas – minusais.\n\nŽinodami pliusų ir minusų seką, nusakančią orų prognozę, suraskite patį ilgiausią intervalą, kuriame būtų po lygiai šiltų ir šaltų dienų.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30253","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tEmperor Kostas is planning to commemorate the victory against his rival Max by building an Arc of Triumph. He has already designed the Arc and is now looking for an engineer who would build it as cheap as possible.\n\nAn arc is a narrow structure made out of stone blocks. It is fully described by its twodimensional cross-section. For example, the cross-section of one of the arc of triumphs in Rome is as follows:\n\n########\n########\n########\n###..###\n#.#..#.#\n#.#..#.#\n\nIn this cross-section # denotes a block and . denotes an empty space.\n\nIn order for an arc to stand, all of the blocks have to be stable. A block is stable if:\n\n\n\tit is standing on the ground or on another stable block\n\tit belongs to a horizontal interval of blocks where the outer blocks are stable.\n\n\nFor example, in the following diagram:\n\n########\n########\n##XAYZ##\n###..###\nB.#..#.#\nC.#..#.#\n\nthe bloc B is stable because it is standing on a stable block C (the latter is stable since it is standing on the ground). The block A is stable because it belongs to an interval XAYZ where the outer blocks X and Z are stable.\n\nAn arc is built by putting one block after another. At any moment of construction all of the blocks have to be stable. For this reason, it is impossible to build some of the arcs without additional temporary constructions. For example, it is not possible to build an arc depicted above because it will never be possible to put block A in a stable manner. Therefore, the engineer is going to use a temporary wooden construction. The wooden construction is made out of wooden blocks.\n\nWhile building them it is important to take into account the same requirements: blocks are put one by one and at any moment of building the blocks have to be stable. When determining the stability of the block both wooden and stone blocks are considered identical.\n\nTherefore, the arc depicted above can be built using three wooden blocks. The essential step is illustrated here:\n\n..####..\n###^.###\n#.#^.#.#\n#.#^.#.#\n\n(^ denotes wooden blocks).\n\nThe construction starts with a plain empty field and continues with performing consecutive steps. Possible types of steps are listed below:\n\n\n\ta stone block is put in a selected square,\n\ta wooden block is put in a selected square,\n\ta wooden block is removed from a selected square.\n\n\nAt each moment of time all of the blocks that are put up have to be stable. Wodden blocks are expensive and Kostas is willing to buy as few wooden blocks as possible. The removed wooden blocks may be used again.\n\nYour task is to build an arc using the smallest possible amount of wooden blocks. After the construction has ended, the stone blocks have to be in exactly the same positions as it is stated in the plan. However, there may be some wooden blocks remaining.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30226","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tSnails have many enemies including snakes, turtles, and birds. So, snails need to communicate their travel paths using cryptography to avoid their routes being detected.\n\nThe encryption technique: The message will contain only letters. Let’s assume the message length is L. We use the smallest odd integer N such that N×N ≥ L. Then, an N×N table is used to encrypt the message as follows: Put the first letter of the message in the cell at the center of the table and then put the remaining letters in the table by moving in a circular way (snail like) around the center cell. For example, the table to the right shows the order for placing the letters from the message in a 7×7 table. So, from the center cell, we move up, then move right, then move down, then move left, then move up, etc.\n\nBelow are some sample encryptions. To help with the illustrations, when encrypting the message, if there are more cells in the table than there are letters in the message, we put the character ‘#’ in the extra cells.\n\nMessage: ABCDEFGH\n\nEncryption:\n\n#BC\nHAD\nGFE\n\nMessage: ABCDEFGHIJKLMNOPQRSTUVW\n\nEncryption:\n\n#JKLM\n#IBCN\nWHADO\nVGFEP\nUTSRQ\n\nMessage: ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuv\n\nEncryption:\n\n#Zabcde\nvYJKLMf\nuXIBCNg\ntWHADOh\nsVGFEPi\nrUTSRQj\nqponmlk\n\nGiven the size of the two-dimensional table to use and the original message, you are to encrypt the message (to help snails live longer lives).\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30175","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou have array of n$n$ numbers a1,a2,…,an$a_{1}, a_{2}, \\ldots, a_{n}$.\n\nRearrange these numbers to satisfy |a1−a2|≤|a2−a3|≤…≤|an−1−an|$|a_{1} - a_{2}| \\le |a_{2} - a_{3}| \\le \\ldots \\le |a_{n-1} - a_{n}|$, where |x|$|x|$ denotes absolute value of x$x$. It's always possible to find such rearrangement.\n\nNote that all numbers in a$a$ are not necessarily different. In other words, some numbers of a$a$ may be same.\n\nYou have to answer independent t$t$ test cases.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30254","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tEmperor Kostas is planning to commemorate the victory against his rival Max by building an Arc of Triumph. He has already designed the Arc and is now looking for an engineer who would build it as cheap as possible.\n\nAn arc is a narrow structure made out of stone blocks. It is fully described by its twodimensional cross-section. For example, the cross-section of one of the arc of triumphs in Rome is as follows:\n\n########\n########\n########\n###..###\n#.#..#.#\n#.#..#.#\n\nIn this cross-section # denotes a block and . denotes an empty space.\n\nIn order for an arc to stand, all of the blocks have to be stable. A block is stable if:\n\n\n\tit is standing on the ground or on another stable block\n\tit belongs to a horizontal interval of blocks where the outer blocks are stable.\n\n\nFor example, in the following diagram:\n\n########\n########\n##XAYZ##\n###..###\nB.#..#.#\nC.#..#.#\n\nthe bloc B is stable because it is standing on a stable block C (the latter is stable since it is standing on the ground). The block A is stable because it belongs to an interval XAYZ where the outer blocks X and Z are stable.\n\nAn arc is built by putting one block after another. At any moment of construction all of the blocks have to be stable. For this reason, it is impossible to build some of the arcs without additional temporary constructions. For example, it is not possible to build an arc depicted above because it will never be possible to put block A in a stable manner. Therefore, the engineer is going to use a temporary wooden construction. The wooden construction is made out of wooden blocks.\n\nWhile building them it is important to take into account the same requirements: blocks are put one by one and at any moment of building the blocks have to be stable. When determining the stability of the block both wooden and stone blocks are considered identical.\n\nTherefore, the arc depicted above can be built using three wooden blocks. The essential step is illustrated here:\n\n..####..\n###^.###\n#.#^.#.#\n#.#^.#.#\n\n(^ denotes wooden blocks).\n\nThe construction starts with a plain empty field and continues with performing consecutive steps. Possible types of steps are listed below:\n\n\n\ta stone block is put in a selected square,\n\ta wooden block is put in a selected square,\n\ta wooden block is removed from a selected square.\n\n\nAt each moment of time all of the blocks that are put up have to be stable. Wodden blocks are expensive and Kostas is willing to buy as few wooden blocks as possible. The removed wooden blocks may be used again.\n\nYour task is to build an arc using the smallest possible amount of wooden blocks. After the construction has ended, the stone blocks have to be in exactly the same positions as it is stated in the plan. However, there may be some wooden blocks remaining.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30301","content":"문제\n\nThere are \nN\n$N$ chameleons residing in the Chameleon Village, which can be viewed as the two dimensional plane. The \ni\n$i$-th chameleon is located at \n(Xi,Yi)\n$(X_i,Y_i)$ and has color \nCi\n$C_i$.\n\nDeep into the night, only the first chameleon is awake, while all the other chameleons are asleep.\n\nSuddenly, an urgent issue has arisen for the \nN\n$N$-th chameleon, thus it needs to be awakened. Physical contact is required to wake up a chameleon. Therefore, to wake up a chameleon, other chameleon must either walk to its location, or extend its tongue to touch it.\n\nChameleons can move in eight directions: up, down, left, right, or diagonally. Specifically, a chameleon at \n(x,y)\n$(x,y)$ can move to one of the following locations in one second: \n(x−1,y−1)\n$(x-1,y-1)$, \n(x−1,y)\n$(x-1,y)$, \n(x−1,y+1)\n$(x-1,y+1)$, \n(x,y−1)\n$(x,y-1)$, \n(x,y)\n$(x,y)$, \n(x,y+1)\n$(x,y+1)$, \n(x+1,y−1)\n$(x+1,y-1)$, \n(x+1,y)\n$(x+1,y)$, or \n(x+1,y+1)\n$(x+1,y+1)$.\n\nAdditionally, a chameleon can extend its tongue vertically or horizontally. In other words, a chameleon at \n(x,y)\n$(x,y)$ can extend its tongue to reach locations \n(x+c,y)\n$(x+c,y)$ or \n(x,y+c)\n$(x,y+c)$ for any integer \nc\n$c$. Extending a tongue takes no time. However, chameleons of the same color are not easily visible, making it challenging to aim at each other, so they cannot extend its tongue towards each other. When extending the tongue, it doesn’t matter if there are other chameleons along the path; only the chameleon located at the destination of the tongue is awakened, and other chameleons along the path are not disturbed.\n\nSince chameleons are sleepy, they immediately fall asleep at their current location after waking up another chameleon.\n\nDetermine the minimum number of seconds required to wake up the \nN\n$N$-th chameleon."},{"problemId":"30265","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAfter P-22’s passing, there was significant discussion about what should happen to his remains. Initially, there was talk of storing them in the Natural History Museum (across from USC), but in the end, it was decided that a native tribe would give him a ritualistic burial at an undisclosed location in the Santa Monica Mountains. Of course, we do not know exactly how they chose the location, but probably, they first collected a few candidate locations, and then picked the best one according to one or more criteria. A natural criterion would be for the location to be far from all roads and hiking trails, so that the burial site would be less likely to be disturbed, and because P-22, while alive, also mostly avoided proximity to humans. Here, you will choose such a candidate location.\n\nYou will be given all the trails/roads as straight line segments — curved roads could of course be approximated by a sequence of such segments. You will also be given the candidate burial locations. You are to select the candidate location that maximizes the minimum distance to any point on any trail/road.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30255","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tEmperor Kostas is planning to commemorate the victory against his rival Max by building an Arc of Triumph. He has already designed the Arc and is now looking for an engineer who would build it as cheap as possible.\n\nAn arc is a narrow structure made out of stone blocks. It is fully described by its twodimensional cross-section. For example, the cross-section of one of the arc of triumphs in Rome is as follows:\n\n########\n########\n########\n###..###\n#.#..#.#\n#.#..#.#\n\nIn this cross-section # denotes a block and . denotes an empty space.\n\nIn order for an arc to stand, all of the blocks have to be stable. A block is stable if:\n\n\n\tit is standing on the ground or on another stable block\n\tit belongs to a horizontal interval of blocks where the outer blocks are stable.\n\n\nFor example, in the following diagram:\n\n########\n########\n##XAYZ##\n###..###\nB.#..#.#\nC.#..#.#\n\nthe bloc B is stable because it is standing on a stable block C (the latter is stable since it is standing on the ground). The block A is stable because it belongs to an interval XAYZ where the outer blocks X and Z are stable.\n\nAn arc is built by putting one block after another. At any moment of construction all of the blocks have to be stable. For this reason, it is impossible to build some of the arcs without additional temporary constructions. For example, it is not possible to build an arc depicted above because it will never be possible to put block A in a stable manner. Therefore, the engineer is going to use a temporary wooden construction. The wooden construction is made out of wooden blocks.\n\nWhile building them it is important to take into account the same requirements: blocks are put one by one and at any moment of building the blocks have to be stable. When determining the stability of the block both wooden and stone blocks are considered identical.\n\nTherefore, the arc depicted above can be built using three wooden blocks. The essential step is illustrated here:\n\n..####..\n###^.###\n#.#^.#.#\n#.#^.#.#\n\n(^ denotes wooden blocks).\n\nThe construction starts with a plain empty field and continues with performing consecutive steps. Possible types of steps are listed below:\n\n\n\ta stone block is put in a selected square,\n\ta wooden block is put in a selected square,\n\ta wooden block is removed from a selected square.\n\n\nAt each moment of time all of the blocks that are put up have to be stable. Wodden blocks are expensive and Kostas is willing to buy as few wooden blocks as possible. The removed wooden blocks may be used again.\n\nYour task is to build an arc using the smallest possible amount of wooden blocks. After the construction has ended, the stone blocks have to be in exactly the same positions as it is stated in the plan. However, there may be some wooden blocks remaining.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30227","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe 2023 FIFA Women’s World Cup was held during the summer. Several games ended in ties and penalty kicks had to be taken to determine the winner.\n\nThe professional soccer goal size (length) is 7.32m. The success rate of penalty kicks at the professional level is above 80%. If the goal length was much longer, can this success rate reach 100%?\n\nTo simplify the problem, we will assume that there is no concept of time or ball speed, so if the goalie’s reach intersects the ball’s travel path, the goalie will block the ball.\n\nAs illustrated in the picture below, we’ll assume the goalie is at (0,0) and the penalty taker (kicker) is at (0,y); y will be a positive integer.\n\nThe kicker will kick the ball towards the goal line (to the left or right of the goalie). We’ll assume the ball will intersect the goal line at (x,0); x will be a non-zero integer.\n\nThe goalie will dive to the left or right (based on the direction of the ball). The goalie has a limited reach r; r will be a positive integer.\n\n\n\nThe goalie will save the penalty if the point representing the ball (while travelling) is on the line representing the goalie’s reach. The goalie can save the penalty (i.e., block the ball) on the X-axis as well.\n\nThe primary objective for the goalie is to save the penalty and the secondary objective is to dive as close to the X-axis as possible, i.e., the angle between the goalie’s reach and the X-axis is as small as possible.\n\nGiven the kicker’s position (y), intersection point of the ball with the goal line (x) and the goalie’s reach (r), determine whether the goalie will save (block) the penalty kick.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30281","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tDu draugai, Vilius ir Adomas, apsilankė saldainių fabrike. Baigus apsilankymą jiems abiems kartu leido pasiimti po vieną kiekvienos gaminamos rūšies dėžutę.\n\nDraugai pasvarstė, kad būtų gerai pasiimti kuo didesnį kiekį saldainių, tačiau abu norėtų pasidalinę gauti po vienodą skaičių saldainių.\n\nPadėkite draugams išsirinkti, kurias dėžutes pasiimti namo, kad išsidalinę saldainius, esančius dėžutėse, jie abu parsineštų didžiausią galimą skaičių saldainių, bei suskaičiuoti, kiek daugiausiai saldainių kiekvienas jų gautų.\n\nAbu draugai turi gauti po vienodą skaičių saldainių.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30266","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn the runup to a hurricane, it is extremely important to warn as many people as possible on or near the hurricane’s path. That way, they can ideally travel somewhere safer, reinforce their homes, and — if they have to stay — stock up on essentials, install backup power systems, etc. The question is then how you reach as many people as possible. If you make announcements on TV, then people who don’t watch TV may miss the warnings and instructions. Here, you will be given a description of which media different people consume, and which media the authorities are using for their warnings, and are to determine how many people received the warning.\n\nSpecifically, this information will be encoded as strings of letters. Each letter corresponds to one type of media, such as ‘T’ for TV, ‘F’ for Fakebook, or ‘X’ for ex-Twitter. If there is a common letter between the string for the media used and the media consumed, then the person will be informed; otherwise not.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30302","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are given a bracket sequence consisting of N$N$ open brackets and N$N$ closed brackets. Let S$S$ be a nonempty set of integers between 1$1$ and 2N$2N$, inclusively. You can choose two indices in S$S$, not necessarily adjacent, and swap the brackets of the bracket sequence at those two positions.\n\nFind the number of S$S$ that can result in a proper bracket sequence by repeatedly applying this operation arbitrary number of times.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30176","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou have an array a$a$ of length n$n$. For every positive integer x$x$ you are going to perform the following operation during the x$x$-th second:\n\n\n\tSelect some distinct indices i1,i2,…,ik$i_{1}, i_{2}, \\ldots, i_{k}$ which are between 1$1$ and n$n$ inclusive, and add 2x−1$2^{x-1}$ to each corresponding position of a$a$. Formally, aij:=aij+2x−1$a_{i_{j}} := a_{i_{j}} + 2^{x-1}$ for j=1,2,…,k$j = 1, 2, \\ldots, k$. Note that you are allowed to not select any indices at all.\n\n\nYou have to make a$a$ nondecreasing as fast as possible. Find the smallest number T$T$ such that you can make the array nondecreasing after at most T$T$ seconds.\n\nArray a$a$ is nondecreasing if and only if a1≤a2≤…≤an$a_{1} \\le a_{2} \\le \\ldots \\le a_{n}$.\n\nYou have to answer t$t$ independent test cases.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30303","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are a big fan of Korea’s biggest rockstar, Koosaga. Excitingly, Koosaga has announced a lottery event offering fans an once-in-a-lifetime opportunity for an one-on-one meeting.\n\nKoosaga sells N$N$ kinds of his albums. When you purchase the i$i$-th album, it costs you Ai$A_i$ won and you get Bi$B_i$ lottery tickets. Remember, you can purchase multiple copies of the same album if you wish.\n\nOn the day of the draw, a large roulette wheel containing cells with participant names, will decide the winner. Every cell on the wheel has an equal chance of being selected. The number of cells with your name corresponds to the number of lottery tickets you’ve amassed.\n\nKoosaga will give the wheel a single spin to pick the winner. But even if luck isn’t on your side, there’s still hope! By paying R$R$ won, you can request Koosaga to spin the wheel again. You can pay for as many re-spins as you desire.\n\nArmed with insider knowledge, you’ve learned that the cumulative number of cells attributed to other participants is S$S$. You also have learned that none of them will opt for a re-spin. Only you will request a re-spin, if wanted.\n\nYour challenge is to find an optimal strategy to guarantee your win with the minimum expected cost.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30256","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tEmperor Kostas is planning to commemorate the victory against his rival Max by building an Arc of Triumph. He has already designed the Arc and is now looking for an engineer who would build it as cheap as possible.\n\nAn arc is a narrow structure made out of stone blocks. It is fully described by its twodimensional cross-section. For example, the cross-section of one of the arc of triumphs in Rome is as follows:\n\n########\n########\n########\n###..###\n#.#..#.#\n#.#..#.#\n\nIn this cross-section # denotes a block and . denotes an empty space.\n\nIn order for an arc to stand, all of the blocks have to be stable. A block is stable if:\n\n\n\tit is standing on the ground or on another stable block\n\tit belongs to a horizontal interval of blocks where the outer blocks are stable.\n\n\nFor example, in the following diagram:\n\n########\n########\n##XAYZ##\n###..###\nB.#..#.#\nC.#..#.#\n\nthe bloc B is stable because it is standing on a stable block C (the latter is stable since it is standing on the ground). The block A is stable because it belongs to an interval XAYZ where the outer blocks X and Z are stable.\n\nAn arc is built by putting one block after another. At any moment of construction all of the blocks have to be stable. For this reason, it is impossible to build some of the arcs without additional temporary constructions. For example, it is not possible to build an arc depicted above because it will never be possible to put block A in a stable manner. Therefore, the engineer is going to use a temporary wooden construction. The wooden construction is made out of wooden blocks.\n\nWhile building them it is important to take into account the same requirements: blocks are put one by one and at any moment of building the blocks have to be stable. When determining the stability of the block both wooden and stone blocks are considered identical.\n\nTherefore, the arc depicted above can be built using three wooden blocks. The essential step is illustrated here:\n\n..####..\n###^.###\n#.#^.#.#\n#.#^.#.#\n\n(^ denotes wooden blocks).\n\nThe construction starts with a plain empty field and continues with performing consecutive steps. Possible types of steps are listed below:\n\n\n\ta stone block is put in a selected square,\n\ta wooden block is put in a selected square,\n\ta wooden block is removed from a selected square.\n\n\nAt each moment of time all of the blocks that are put up have to be stable. Wodden blocks are expensive and Kostas is willing to buy as few wooden blocks as possible. The removed wooden blocks may be used again.\n\nYour task is to build an arc using the smallest possible amount of wooden blocks. After the construction has ended, the stone blocks have to be in exactly the same positions as it is stated in the plan. However, there may be some wooden blocks remaining.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30228","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tSome UCF students know that Arup loves collecting Pez dispensers. Pez dispensers dispense 12 candies in a fixed sequence. Arup is so discerning, that he can actually tell the difference between the taste of different Pez candies and values them differently.\n\nImagine a situation where he wants to eat exactly 7 Pez candies and his four dispensers have candies with the following values, each listed from top to bottom of the respective dispenser:\n\n   3    4    5    1\n   6    1    3    4\n   8    1    2    3\n   2    1    6    8\n   2    1    6    4\n   5   70    2    9\n   6    4    3    2\n   1    1    1    1\n   2    5    6    6\n   3    3    2    5\n   1    2    3    4\n   4    3    2    1\n\nIn this situation, if he wanted to maximize the total value of the 7 candies he eats, he should take 6 candies from the second Pez dispenser and 1 candy from the third dispenser, for a total value of 83. He is required to eat the candies in a specific order from each dispenser (from the top). In this particular situation, it's worth it to eat all of the candies with value 1 in the second stack in order to get to the candy worth 70. From there, the maximum remaining candy at the top of any of the dispensers makes the most sense to add.\n\nGiven the values of each of the candies in Arup's Pez dispensers as well as the number of candies he wants to eat, determine the maximum total value he will be able to obtain if he chooses his candies optimally.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30282","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tArtūras šiemet baigė mokyklą ir labai džiaugiasi įstojęs į prestižinį universitetą. Pirmas darbas, kurį turėjo atlikti Artūras nuvykęs į universitetą – išsirinkti 10 pasirenkamųjų dalykų, kuriuos jis studijuos universitete pirmą semestrą.\n\nArtūras pasirinko dešimt dalykų, tačiau vėliau susimąstė, ar nesidubliuos paskaitų laikai, t. y. ar neišsirinko jis tokių dalykų, kurių paskaitos vyksta tuo pačiu metu.\n\nJei tuo pačiu metu viena paskaita baigiasi, o kita prasideda (sutampa pabaigos ir pradžios laikas), tokios paskaitos laikomos nesidubliuojančiomis.\n\nPadėkite Artūrui išsiaiškinti, ar jis galės lankyti visus pasirinktus dalykus.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30257","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tEmperor Kostas is planning to commemorate the victory against his rival Max by building an Arc of Triumph. He has already designed the Arc and is now looking for an engineer who would build it as cheap as possible.\n\nAn arc is a narrow structure made out of stone blocks. It is fully described by its twodimensional cross-section. For example, the cross-section of one of the arc of triumphs in Rome is as follows:\n\n########\n########\n########\n###..###\n#.#..#.#\n#.#..#.#\n\nIn this cross-section # denotes a block and . denotes an empty space.\n\nIn order for an arc to stand, all of the blocks have to be stable. A block is stable if:\n\n\n\tit is standing on the ground or on another stable block\n\tit belongs to a horizontal interval of blocks where the outer blocks are stable.\n\n\nFor example, in the following diagram:\n\n########\n########\n##XAYZ##\n###..###\nB.#..#.#\nC.#..#.#\n\nthe bloc B is stable because it is standing on a stable block C (the latter is stable since it is standing on the ground). The block A is stable because it belongs to an interval XAYZ where the outer blocks X and Z are stable.\n\nAn arc is built by putting one block after another. At any moment of construction all of the blocks have to be stable. For this reason, it is impossible to build some of the arcs without additional temporary constructions. For example, it is not possible to build an arc depicted above because it will never be possible to put block A in a stable manner. Therefore, the engineer is going to use a temporary wooden construction. The wooden construction is made out of wooden blocks.\n\nWhile building them it is important to take into account the same requirements: blocks are put one by one and at any moment of building the blocks have to be stable. When determining the stability of the block both wooden and stone blocks are considered identical.\n\nTherefore, the arc depicted above can be built using three wooden blocks. The essential step is illustrated here:\n\n..####..\n###^.###\n#.#^.#.#\n#.#^.#.#\n\n(^ denotes wooden blocks).\n\nThe construction starts with a plain empty field and continues with performing consecutive steps. Possible types of steps are listed below:\n\n\n\ta stone block is put in a selected square,\n\ta wooden block is put in a selected square,\n\ta wooden block is removed from a selected square.\n\n\nAt each moment of time all of the blocks that are put up have to be stable. Wodden blocks are expensive and Kostas is willing to buy as few wooden blocks as possible. The removed wooden blocks may be used again.\n\nYour task is to build an arc using the smallest possible amount of wooden blocks. After the construction has ended, the stone blocks have to be in exactly the same positions as it is stated in the plan. However, there may be some wooden blocks remaining.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30267","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tWhen a hurricane strikes an area, such as Southern California, it is very important to predict its path. That makes it possible to predict how much total damage (in particular, rain) any particular point will be exposed to.\n\nHere, you will analyze a simplified version of this process. We assume that the hurricane moves continuously along a straight line. For a number of waypoints, you will be given when the hurricane gets to that point; we assume that in between waypoints, the hurricane moves continuously at constant speed. The hurricane will appear at the first waypoint, and disappear at the last one. You will also be given several points of interest on the line (such as important buildings) for which you want to calculate the total rain they get. Rain is accumulated continuously: from the viewpoint of one of our points, initially, the hurricane may be further away, so the point gets just a little rain. As the hurricane moves closer, more rain hits the point (in addition to the rain from earlier). At some point, the hurricane may pass over the point and move away, but while it does, additional rain (though less than earlier) still hits the point, and contributes to the total rain there.\n\nSpecifically, the model here is that if the hurricane is at distance d from a point for one unit of time, that point collects rain 1/(1+d)2; if it is half as long, it is half the rain and so on. Recall that the hurricane moves continuously. The planners are most interested in which point will be the most flooded: so among all points of interest, they want the amount of rain that accumulated at the one that collected the most rain.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30258","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tEmperor Kostas is planning to commemorate the victory against his rival Max by building an Arc of Triumph. He has already designed the Arc and is now looking for an engineer who would build it as cheap as possible.\n\nAn arc is a narrow structure made out of stone blocks. It is fully described by its twodimensional cross-section. For example, the cross-section of one of the arc of triumphs in Rome is as follows:\n\n########\n########\n########\n###..###\n#.#..#.#\n#.#..#.#\n\nIn this cross-section # denotes a block and . denotes an empty space.\n\nIn order for an arc to stand, all of the blocks have to be stable. A block is stable if:\n\n\n\tit is standing on the ground or on another stable block\n\tit belongs to a horizontal interval of blocks where the outer blocks are stable.\n\n\nFor example, in the following diagram:\n\n########\n########\n##XAYZ##\n###..###\nB.#..#.#\nC.#..#.#\n\nthe bloc B is stable because it is standing on a stable block C (the latter is stable since it is standing on the ground). The block A is stable because it belongs to an interval XAYZ where the outer blocks X and Z are stable.\n\nAn arc is built by putting one block after another. At any moment of construction all of the blocks have to be stable. For this reason, it is impossible to build some of the arcs without additional temporary constructions. For example, it is not possible to build an arc depicted above because it will never be possible to put block A in a stable manner. Therefore, the engineer is going to use a temporary wooden construction. The wooden construction is made out of wooden blocks.\n\nWhile building them it is important to take into account the same requirements: blocks are put one by one and at any moment of building the blocks have to be stable. When determining the stability of the block both wooden and stone blocks are considered identical.\n\nTherefore, the arc depicted above can be built using three wooden blocks. The essential step is illustrated here:\n\n..####..\n###^.###\n#.#^.#.#\n#.#^.#.#\n\n(^ denotes wooden blocks).\n\nThe construction starts with a plain empty field and continues with performing consecutive steps. Possible types of steps are listed below:\n\n\n\ta stone block is put in a selected square,\n\ta wooden block is put in a selected square,\n\ta wooden block is removed from a selected square.\n\n\nAt each moment of time all of the blocks that are put up have to be stable. Wodden blocks are expensive and Kostas is willing to buy as few wooden blocks as possible. The removed wooden blocks may be used again.\n\nYour task is to build an arc using the smallest possible amount of wooden blocks. After the construction has ended, the stone blocks have to be in exactly the same positions as it is stated in the plan. However, there may be some wooden blocks remaining.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30259","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tEmperor Kostas is planning to commemorate the victory against his rival Max by building an Arc of Triumph. He has already designed the Arc and is now looking for an engineer who would build it as cheap as possible.\n\nAn arc is a narrow structure made out of stone blocks. It is fully described by its twodimensional cross-section. For example, the cross-section of one of the arc of triumphs in Rome is as follows:\n\n########\n########\n########\n###..###\n#.#..#.#\n#.#..#.#\n\nIn this cross-section # denotes a block and . denotes an empty space.\n\nIn order for an arc to stand, all of the blocks have to be stable. A block is stable if:\n\n\n\tit is standing on the ground or on another stable block\n\tit belongs to a horizontal interval of blocks where the outer blocks are stable.\n\n\nFor example, in the following diagram:\n\n########\n########\n##XAYZ##\n###..###\nB.#..#.#\nC.#..#.#\n\nthe bloc B is stable because it is standing on a stable block C (the latter is stable since it is standing on the ground). The block A is stable because it belongs to an interval XAYZ where the outer blocks X and Z are stable.\n\nAn arc is built by putting one block after another. At any moment of construction all of the blocks have to be stable. For this reason, it is impossible to build some of the arcs without additional temporary constructions. For example, it is not possible to build an arc depicted above because it will never be possible to put block A in a stable manner. Therefore, the engineer is going to use a temporary wooden construction. The wooden construction is made out of wooden blocks.\n\nWhile building them it is important to take into account the same requirements: blocks are put one by one and at any moment of building the blocks have to be stable. When determining the stability of the block both wooden and stone blocks are considered identical.\n\nTherefore, the arc depicted above can be built using three wooden blocks. The essential step is illustrated here:\n\n..####..\n###^.###\n#.#^.#.#\n#.#^.#.#\n\n(^ denotes wooden blocks).\n\nThe construction starts with a plain empty field and continues with performing consecutive steps. Possible types of steps are listed below:\n\n\n\ta stone block is put in a selected square,\n\ta wooden block is put in a selected square,\n\ta wooden block is removed from a selected square.\n\n\nAt each moment of time all of the blocks that are put up have to be stable. Wodden blocks are expensive and Kostas is willing to buy as few wooden blocks as possible. The removed wooden blocks may be used again.\n\nYour task is to build an arc using the smallest possible amount of wooden blocks. After the construction has ended, the stone blocks have to be in exactly the same positions as it is stated in the plan. However, there may be some wooden blocks remaining.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30283","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAdomas vėl žaidžia smiginį. Ant sienos yra pakabintas kvadrato formos taikinys, kuris yra padalintas į 1 × 1 dydžio langelius. Kiekviename langelyje yra įrašytas sveikasis skaičius taškų, kuriuos Adomas gautų pataikęs į tą langelį. Nepataikęs į taikinį, Adomas gautų 0 taškų. Kiekvienas langelis turi koordinates (X; Y ) – X yra langelio atstumas nuo kairiojo taikinio krašto, Y – atstumas nuo viršaus. Taikinio viršutinis kairysis langelis yra (1; 1), apatinis dešinysis – (N; N).\n\nDeja, Adomas nėra labai taiklus, todėl smigis gali pataikyti su vienoda tikimybe į bet kurį langelį, nutolusį nuo norimo langelio ne daugiau nei L langelių vertikaliai ir horizontaliai nuo nusitaikyto langelio. Tiksliau, jei Adomas taikosi į langelį (X; Y), jis gali pataikyti į bet kurį langelį (X'; Y'), jei |X − X'| ≤ L ir |Y − Y'| ≤ L. Jis nori sužinoti į kurį langelį reikia taikytis, kad vidutiniškai surinktų daugiausiai taškų.\n\n\n\n1 pav.\n\nJei Adomo taiklumas L = 1 ir jis turi 1 pavyzdyje pavaizduotą taikinį, Adomas turėtų taikytis į langelį (3; 2). Tokiu atveju, jis galės pataikyti į bet kurį langelį, kuris pavyzdyje pažymėtas žaliai, o vidutinis taškų skaičius, kurį surinks Adomas, bus 7/3.\n\nSuraskite, į kurį langelį Adomui reikia taikytis, kad vidutiniškai surinktų daugiausiai taškų.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30229","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tUncle Trapezoid has a piece of land in the shape of a trapezoid that he would like to split into four pieces to bequeath to his four nieces. He is fairly lazy, so all he will do is pick a particular point inside of the trapezoid, and then the four pieces will be the four triangles formed by this point and each of the four sides of the trapezoid as illustrated below:\n\n\n\nNaturally, Uncle Trapezoid wants to be as fair as possible and minimize the difference in area between the smallest triangle and the largest triangle.\n\nGiven the length of both bases and the height of a trapezoid, determine the smallest possible difference in area between the smallest and largest triangles formed by choosing any point inside of the trapezoid to form the four triangles (one with each side of the trapezoid).\n\nNote: The bases must be parallel with a distance equal to the height between the two lines the bases define. However, where the bases are located relative to each other does not affect the answer to this problem.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30177","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou have unweighted tree of n$n$ vertices. You have to assign a positive weight to each edge so that the following condition would hold:\n\n\n\tFor every two different leaves v1$v_{1}$ and v2$v_{2}$ of this tree, bitwise XOR of weights of all edges on the simple path between v1$v_{1}$ and v2$v_{2}$ has to be equal to 0$0$.\n\n\nNote that you can put very large positive integers (like 10(1010)$10^{(10^{10})}$).\n\nIt's guaranteed that such assignment always exists under given constraints. Now let's define f$f$ as the number of distinct weights in assignment.\n\n\n\nIn this example, assignment is valid, because bitwise XOR of all edge weights between every pair of leaves is 0$0$. f$f$ value is 2$2$ here, because there are 2$2$ distinct edge weights(4$4$ and 5$5$).\n\n\n\nIn this example, assignment is invalid, because bitwise XOR of all edge weights between vertex 1$1$ and vertex 6$6$ (3,4,5,4$3, 4, 5, 4$) is not 0$0$.\n\nWhat are the minimum and the maximum possible values of f$f$ for the given tree? Find and print both.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30268","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tOne of the big problems with large amounts of rain (such as from a hurricane) in a hilly area like Los Angeles is mud slides. The rain loosens soil and debris, which then flows down. Further down, the combination of rain there and the water coming down will loosen even more soil, and soon, you have a full-blown mud slide coming down, sometimes burying houses and roads and killing those unfortunate enough to be in its path. Here, given an initial configuration of soil, as well as the amount of rain coming down everywhere, you are to calculate the maximum amount of soil that will end up in any spot.\n\nWe will view the area as a rectangular grid. For each cell, you will be given its height, how much soil starts there, how much rain comes down, and what is the required threshold of water to dislodge the soil that starts there. (The soil/rain do not contribute to the height.) When water gets to a square, it will run downhill to an adjacent (horizontal or vertical) square that is strictly lower. If there are multiple lower adjacent squares, the water will split evenly between them. If there are no adjacent lower squares, the water stays on the square. If the water getting to a square (strictly) exceeds the dislodging threshold, then all the soil from that square will start flowing down; notice that water counts for all the squares it flows over. The soil, too, will split evenly between all adjacent strictly lower squares once it starts flowing. Once the soil starts moving (after being dislodged), it will keep moving until it cannot go further down, even if the water on some of its squares is not enough to dislodge new soil. Notice that soil does not help dislodge other soil — only water does so.\n\nWe assume that the area is surrounded by high mountains, so no water or mud will ever cross outside the area. You are to compute the maximum amount of soil that ends up in any one square of the map in the end. Note that you should use double (not float) for all of your computations. (In Python, that’s the default; in Java and C/C++, you need to choose the right type.) If you use float, your outputs will probably be a little different from ours, and thus wrong.1\n\n\n1As a general note, in all programming contests, and really all of your programming, there’s no reason not to use double; the bit of memory you save is not worth it. Many programmers consider float an “f-word”.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30305","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn the game Tetris, the goal is to position blocks falling down a grid as well as possible. Before the block falls down, the player can shift the block to the left and right, and rotate it in steps of 90$90$ degrees. Then, the block falls down vertically until it hits another block. Completely filling a row removes this row from the grid, clearing up space for more falling blocks.\n\nYou have played this game one too many times, and to shake things up, you decide to play Anti-Tetris: instead of controlling the positioning of the blocks falling down, the goal is to design a Tetris grid that will perfectly fit a given block. That is, a grid such that after optimally positioning the new block, all rows of the grid are cleared and no filled cells remain.\n\nAs an example, consider the first sample case, shown in Figure A.1. The input block can be rotated clockwise 90$90$ degrees and shifted left to make it fit exactly and clear all rows of the grid once it touches down.\n\n\n\nFigure A.1: Visualization of the first sample case. The falling block (the input, light yellow) perfectly fits in the Tetris grid (the output, other colours).\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30230","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tOrlando is quickly growing and new houses have to be built. However, people don't like being too close to each other these days. Universal Condos Forever (UCF) is building some housing units. The land they have is parceled out in grid squares as shown below:\n\n\n\nIn the example above, there are 5 rows and 4 columns. The owners of the condos, denoted by triangles, do NOT want other condos in ANY of the potentially 8 adjacent (up, down, left, right, diagonal) grid squares. For example, the above layout is a valid arrangement of five condos.\n\nGiven the number of rows and columns in the lot that UCF is building condo units, determine the number of different sets of placements of condos they could choose. Two sets are different if in one set a condo is built on a specific square but in the other set no condo is on that same exact square, or vice versa. Since the number of different arrangements could be very large, find the value modulo 109 + 7.\n\nNote: trivially, building no condos is always a valid arrangement.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30178","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tConsider the infinite sequence s$s$ of positive integers, created by repeating the following steps:\n\n\n\t\n\tFind the lexicographically smallest triple of positive integers (a,b,c)$(a, b, c)$ such that\n\n\t\n\t\t a⊕b⊕c=0$a \\oplus b \\oplus c = 0$, where ⊕$\\oplus$ denotes the bitwise XOR operation.\n\t\t a$a$, b$b$, c$c$ are not in s$s$.\n\t\n\n\tHere triple of integers (a1,b1,c1)$(a_1, b_1, c_1)$ is considered to be lexicographically smaller than triple (a2,b2,c2)$(a_2, b_2, c_2)$ if sequence [a1,b1,c1]$[a_1, b_1, c_1]$ is lexicographically smaller than sequence [a2,b2,c2]$[a_2, b_2, c_2]$.\n\t\n\t\n\tAppend a$a$, b$b$, c$c$ to s$s$ in this order.\n\t\n\t\n\tGo back to the first step.\n\t\n\n\nYou have integer n$n$. Find the n$n$-th element of s$s$.\n\nYou have to answer t$t$ independent test cases.\n\nA sequence a$a$ is lexicographically smaller than a sequence b$b$ if in the first position where a$a$ and b$b$ differ, the sequence a$a$ has a smaller element than the corresponding element in b$b$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30179","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou have a tree of n$n$ vertices. You are going to convert this tree into n$n$ rubber bands on infinitely large plane. Conversion rule follows:\n\n\n\tFor every pair of vertices a$a$ and b$b$, rubber bands a$a$ and b$b$ should intersect if and only if there is an edge exists between a$a$ and b$b$ in the tree.\n\tShape of rubber bands must be a simple loop. In other words, rubber band is a loop which doesn't self-intersect.\n\n\nNow let's define following things:\n\n\n\tRubber band a$a$ includes rubber band b$b$, if and only if rubber band b$b$ is in rubber band a$a$'s area, and they don't intersect each other.\n\tSequence of rubber bands a1,a2,…,ak$a_{1}, a_{2}, \\ldots, a_{k}$ (k≥2$k \\ge 2$) are nested, if and only if for all i$i$ (2≤i≤k$2 \\le i \\le k$), ai−1$a_{i-1}$ includes ai$a_{i}$.\n\n\n\n\nThis is an example of conversion. Note that rubber bands 5$5$ and 6$6$ are nested.\n\nIt can be proved that is it possible to make a conversion and sequence of nested rubber bands under given constraints.\n\nWhat is the maximum length of sequence of nested rubber bands can be obtained from given tree? Find and print it.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30269","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAs a hurricane approaches, it is very important to fortify critical building and other infrastructure, providing extra supplies, power generators, installing sandbags or other devices to prevent flooding, etc. This is frequently a race against time: roads are about to flood, and each fortification action takes time. So it may not be possible to finish all plans. Here, you are to figure out what is the maximum number of such plans you can finish under the road flooding constraints.\n\nSpecifically, you will be given a list of locations i that need to be fortified, and for each of them the time ti it will take to fortify it. In addition, you are given a road network between the locations, and for each road the time when it will be flooded — the road can be used up to (and including) that time, but not later. We will assume that driving on roads is instantaneous (it is fast compared to the time it takes to install fortifications). Your strategy must start and finish at location 1, the safe depot for the maintenance vehicle.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30306","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe latest Table-Top Role Playing Game is out now: Better Dice. Unlike all other TTRPGs, this one is all about dice. In fact, it is all about the better die: decisions are made, friendships gained and lost, fights fought, battles won, all based on who has the better die.\n\nThis game uses special n$n$-sided dice where each of the n$n$ faces has the same probability of being rolled. Moreover, each die has its own special set of n$n$ numbers on the faces.\n\nWhile playing Better Dice you ended up in a very precarious situation where you must absolutely have a better die than your opponent, that is, you must roll higher than your opponent. Given both your die and your opponent's die, decide who is more likely to roll a higher number.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30284","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tSklype atrasta naudingųjų iškasenų. Planuojama sklype sumontuoti naują automatinę kasimo sistemą, ją naudoti ir sklypą paversti naudingųjų iškasenų karjeru.\n\nŠi sistema gali vienu metu iškasti viso karjero pločio duobę, kurios pradžia yra Si, pabaiga – Ei metrų nuo karjero pradžios, o gylis – Hi metrų.\n\nSklypą (karjerą) galima pavaizduoti kaip dvimatį brėžinį, kuris vaizduoja karjero aukštį virš jūros lygio išilgai karjero, tiek pradiniu momentu, tiek vėliau, pradėjus naudingųjų iškasenų kasimą.\n\nAutomatinė kasimo sistema dirba vykdydama kasimo komandas. Kiekviena komanda sumažins karjero aukštį Hi metrų nurodytame intervale. 1 pav. parodyta, kaip keičiasi karjero aukštis įvykdžius dvi komandas, kurių pirma kasa intervale [0; 2], antra – [1; 3], abi iškasa 1 metro gylio duobes. Komandų iškasami plotai atitinkamai pažymėti žaliai (atspausdintoje nespalvotoje sąlygoje – šviesiai pilkai) ir mėlynai (nespalvotoje sąlygoje – pilkai).\n\n\n\n1 pav.\n\nKarjero savininkas žino, kokias kasimo komandas duos šiai sistemai, bet prieš pradėdamas nori sužinoti, kaip atrodys karjeras įvykdžius visas komandas.\n\nSuraskite karjero aukštį įvykdžius visas kasimo komandas.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30231","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn the wild west, they take their Computer Science very seriously. Smokin’ Joe is widely known for his skills, and outlaws come from across the land to challenge him in a good ol’ fashioned sortin’ duel. The way that outlaws duel in the wild west, of course, is trying to be the one who makes the last move to sort an array of integers.\n\nOne fateful day, Smokin’ Joe’s nemesis, an infamous character known as The Outlaw, came to town and challenged Joe to a duel. The rules of the duel are as follows: the outlaw will spin the chambers, and a random permutation of length n will fall out (a permutation of length n is an array of the integers from 1 to n in any order). Smokin’ Joe and The Outlaw will take turns swapping two elements in this permutation, until the permutation is sorted in increasing order. The winner is the player who makes the last swap. Once an element is in its final position (i.e., value k is at position k), that element cannot be moved for the rest of the game; otherwise, there are no restrictions on which two elements can be swapped.\n\nBoth Smokin’ Joe and The Outlaw will always play perfectly, i.e., they play to win and not necessarily to sort the list as quickly as possible. Can you predict who will win?\n\nGiven a permutation, predict the winner of the game, where players take turns swapping elements, and an element cannot move once it’s in its final sorted position. The winner is the person who makes the final move to sort the array. Note that Smokin’ Joe goes first, i.e., makes the first move.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30270","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tWhile the rain, mud, and their immediate effects (in particular, drownings) often cause the most initial damage, some of the long-term danger of hurricanes results from water contamination and diseases. The high levels of water can transport dangerous sewage or other contaminated substances from where they are typically kept away from people. Drinking contaminated water can be dangerous, of course. So it is important to keep contaminants contained, even when the water levels rise.\n\nWe will model this problem as follows. You will be given a list of places with contamination (such as sewage plants, garbage deposits, biohazard labs) and a list of places that must be protected (hospitals, city water processing plants), as well as connections between places; these connections are those that would be flooded and thus transport contaminants during/after the hurricane. Your goal is to find the smallest number of connections that need to be blocked (e.g., with large piles of sandbags) to protect all important places from all contaminants.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30320","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn recent years, the ICPC community has expanded its global presence, with annual participation encompassing 111 countries, involving 3,450 universities, and engaging 75,000 team members, coaches, and volunteers. However, it is important to note that only approximately 130 teams earn the opportunity to advance to the annual ICPC World Finals. Specifically, for the 2023 ICPC World Finals, only 16 teams from the Asia Pacific Region have qualified. In the 2022 ICPC Asia Pacific Regional Contests, an impressive turnout saw over 1,800 teams representing 283 universities. Regrettably, the vast majority of these teams, more than 99%$99\\%$, were unable to progress beyond the regional contests.\n\nThe ICPC Asia Pacific Region has introduced the Asia Pacific playoff as a new tier in the selection process for teams to participate in the 2024 ICPC World Finals. This playoff represents a higher level of competition compared to the regional contests. In 2024, the first Asia Pacific playoff will take place in Hanoi, Vietnam. Approximately 66 teams will earn their spots in this playoff based on the rules outlined in the ICPC Asia Pacific Rules section. This expansion ensures that a greater number of teams will have opportunities to engage in higher-level contests in the coming years.\n\nDue to the introduction of ICPC Asia Pacific Playoff contest, the ICPC Asia Pacific Rules have been changed greatly. After reading the new rules, you find that you are allowed to participate two regional contests in 2023 to have a better chance to advance to the playoff. Your team plans to participate the ICPC Taoyuan Regional Contest and the ICPC Jakarta Regional Contest in 2023. Assume that your team's recomputed team ranks and the site scores of both regional contests are given. Please write a program to determine in which regional contest your team has a better chance of advancing.\n\n(Note: The definition of recomputed team rank and site score can be found in the ICPC Asia Pacific Rules section.)\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30307","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are part of the organization of BAPC, and you are in charge of flight operations. From time to time, the jury members of BAPC need to fly from the remote headquarters of BAPC to the current location of the operation that BAPC performs, which is currently Amsterdam. Luckily there is an airline that serves the route from BAPC's headquarters to Amsterdam. The BAPC organization has a contract with that airline that ensures that you pay the same fixed amount for each flight. If your judges need to fly the route often, these costs can add up and become really high. To avoid this, you figured out that you could also simply buy your own aircraft. Once you own your own aircraft, you can either fly with this new shiny equipment which costs some fixed price per flight for fuel and the like, or alternatively you could still fly with the airline.\n\nThe problem now is that you have no idea what the judges are doing! They are so incredibly unpredictable and always only do random and very complicated things. So random, that you cannot decide beforehand what you should do. So you need to make your decision on the fly, even though this may prevent you from making the cost-optimal decision up-front. Still, you do not want to be too loose with your spending: you set yourself the constraint that you spend at most twice as much as you would have if you exactly knew how many flights the judges would make in advance.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30285","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tKostas yra krovininio laivo, kuris jūra transportuoja automobilius, kapitonas. Jo laivo krovininis denis yra stačiakampio formos kurio ilgis yra a metrų, o plotis b metrų. Vienu reisu kapitonas plukdo tik vienos markės automobilius, kurių pločiai yra vienodi ir ilgiai yra vienodi.\n\nUžsakovas paprašė Kosto perplukdyti n automobilių, kurių ilgis – c metrų, o plotis – d metrų.\n\nPadėkite Kostui suskaičiuoti, ar jam pavyks sutalpinti visus automobilius į laivą. Automobiliai į laivą talpinami eilėmis. Eilės formuojamos tik išilgai arba tik skersai laivo denio (t.y. negali būti, kad laive yra viena eilė yra išilgai denio, o kita – skersai).\n\nAutomobiliai eilėse statomi išilgai arba skersai, tačiau toje pačioje eilėje visi automobiliai statomi viena kryptimi.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30321","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA monotone sequence is a sequence of numbers that either consistently increases or consistently decreases as you move along the sequence. In other words, it exhibits a consistent trend in either an upward or downward direction.\n\nIn a monotone increasing sequence, each term in the sequence is greater than or equal to the preceding term. Mathematically, for a sequence a1,…,an$a_1, \\dots , a_n$, it is monotone increasing if and only if for every 1≤i<n$1≤ i < n$, ai≤an+1$a_i ≤ a_{n+1}$. For example, the sequence 1,2,2,4,5$1,2,2,4,5$ is a monotone increasing sequence because each term is greater than or equal to the previous term.\n\nMonotone sequences are important in various areas of mathematics, including calculus and analysis, as they often simplify the analysis of functions and their behavior. They provide a clear and consistent trend that makes it easier to understand the behavior of a sequence or a function over a range of values.\n\nOne of our problem setters is fond of big integers. Over the past few years, the Taiwan Online Programming Contest has frequently featured problems involving big integers. This time, we have a problem that combines big integers with monotone increasing sequences. Your task is to transform a big integer, denoted as x$x$, into a monotone increasing sequence by inserting commas ',' into the gaps between its digits, while adhering to following constraints.\n\n\n\tThe last term of the monotone increasing sequence is no more than b$b$.\n\tCommas cannot be inserted before a zero.\n\tThe number of commas is minimized.\n\n\nLet's assume that x$x$ is an integer with k$k$ digits and is represented as d1d2⋯dk$d_1d_2\\cdots d_k$. For instance, if we have x=654321=d1d2⋯d6$x=654321=d_1d_2 \\cdots d_6$ and b=1000$b=1000$, we can insert commas into gaps after d3$d_3$ and d5$d_5$ to convert x$x$ into the following monotone increasing sequence: 6,54,321$6,54,321$.\n\nPlease write a program to compute the minimum number of commas required to transform a given big integer x$x$ into a monotone increasing sequence consisting of numbers no more than a given integer b$b$. If there is no way to transform, please print 'NO WAY'.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30271","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tOften, it takes a long time (months or even years) to clean up after a major hurricane1. There usually is a large amount of mud and debris, and contaminants (see the previous problem) can complicate the efforts further. Here, you will help the cleanup crew plan how to clean up debris along one road.\n\nCleaning up involves using a bulldozer to move the debris into a few big piles; from the piles, it will then be loaded onto trucks. Picking up any one pile of debris with the truck (regardless of how much debris gets loaded on it) takes an amount T of time; that’s because for each pile, the driver has to do a lot of paperwork, and by comparison, the time to drive there or load the pile is nothing.\n\nThe piles are created by moving debris with a bulldozer. You will be given how much debris starts where, and will need to decide where to move it to. (You could of course not move any debris, but then, each original pile will have to be picked up separately, which may not be optimal.) Moving u units of debris a distance of d with the bulldozer takes time u · d. Given the amount of debris at each location, you are to calculate the minimum total amount of time for moving the debris into piles, then using the truck to pick up those piles. The truck only starts driving once the bulldozer is done.\n\n\n1not a small one like ours\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30232","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA greedy drake in a long-forgotten castle stores their treasures. The drake is obsessed with certain types of treasures. It has been rumored that although the types are few, the volume is plenty. You know that the treasures would be worth a lot in the black market, which is why you waited with your carrying pack for the time when the drake leaves to pillage a nearby town.\n\nWhen you enter the drake’s abode, you notice near countless treasures and you are afraid that your pack may not be big enough. You are not planning on a return trip so your goal will be to get the most value out of this one and only opportunity.\n\nGiven the number of treasure types (each with some multiplicity, worth, and volume), and some maximum volume that can be carried, determine the most worth you can carry within the given volume limit.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30322","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA polygon is a geometric shape that consists of a closed set of straight line segments connected end-to-end to form a closed loop. These line segments enclose a region of space called the polygon's interior. The points where the line segments meet are called vertices, and the line segments themselves are called edges.\n\nA simple polygon is a polygon that has no self-intersecting edges and has no holes. In other words, none of its edges cross over or intersect with each other within the interior of the polygon, and at each of its vertex, exactly two of its edges meet.\n\nA convex polygon is a specific type of simple polygon that has an additional properties: All interior angles are strictly less than 180$180$ degrees. In a convex polygon, if you were to draw straight lines connecting any two points inside the polygon, those lines would always remain inside the polygon.\n\nDavid has a land with a convex polygon shape that has n$n$ vertices (x1,y1),…,(xn,yn)$(x_1,y_1),\\dots ,(x_n,y_n)$. He wants to divide the land into two parts by a line segment PQ―$\\overline{PQ}$ satisfying the following criteria.\n\n\n\t P$P$ and Q$Q$ are points located on different edges of the convex polygon to be divided.\n\tThe two parts are convex polygons with an equal perimeter. That is, the sum of the lengths of the first part's edges equals the sum of the lengths of the second part's edges.\n\n\nPlease help David to find out the minimum length of PQ―$\\overline{PQ}$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30308","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAs a coach of 2n$2n$ students, you are making n$n$ duos (teams of two) for the upcoming programming contest season. After the duos have been created, they will participate in r$r$ contests, each about a different topic: DP, graphs, geometry, etc. You already ran a set of internal selection contests to rank the students, and from this you were able to rank all the students with a unique integer score between 1$1$ and 2n$2n$ inclusive for each topic, with 2n$2n$ being the best.\n\nWhen a duo participates in a contest on a given topic, their score will be the maximum of the two scores of the two students for this topic.\n\nYou think it would be amazing if summed up over all duos and contests, your students could achieve a total score of at least 12rn(3n+1)$\\frac 12 rn(3n+1)$. Is this possible?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30286","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tVytis turi naują žaislą – nuotoliniu būdu valdoma bepilotę skraidyklę, dar žinomą kaip dronas arba zvimbalius. Dronas yra bepilotis sragtasparnis, kuris skrenda vykdydamas jam duotas komandas.\n\nVyčio dronas supranta keturias komandas – S, P, R, V – kurios atitinkamai liepia jam skristi vieną metrą į šiaurę, pietus, rytus ar vakarus.\n\nVytis nusprendė išbandyti savo žaislą ir įvedė į jį N komandų, tačiau jas įvedęs suprato, kad dronas, įvykdęs tas komandas, gali nesugrįžti į pradinį tašką. Deja, komandas taisyti sunku, nes drono programinė įranga neleidžia nei pridėti, nei ištrinti jau įvestų komandų, o jas pakeisti galima tik po vieną. Vytis nori pakeisti kuo mažiau komandų taip, kad įvykdęs visas komandas dronas grįžtų į pradinį tašką.\n\nSuskaičiuokite kiek mažiausiai komandų Vyčiui reikės pakeisti, kad dronas sugrįžtų į pradinį tašką.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30272","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tJustas nusipirko atsitiktinių skaičių generatorių, kuris gali sugeneruoti bet kokį teigiamą sveikąjį skaičių su lygiai N skaitmenų. Deja, generatoriaus ekranas yra labai mažas ir sugeneruotas skaičius į jį netelpa. Todėl šis skaičius yra išvedamas paeiliui parodant jo skaitmenis.\n\nKiekvieno skaitmens atvaizdas yra 9 × 8 matmenų paveikslėlis, sudarytas iš baltų ir juodų pikselių. Jei baltus pikselius vaizduotume taškais (.), o juodus – grotelėmis (#), tai skaitmenys atrodytų taip:\n\n..#####..  ....##...  .#######.  .#######.  ##.......\n.##...##.  ..####...  ##.....##  ##.....##  ##....##.\n##.....##  ....##...  .......##  .......##  ##....##.\n##.....##  ....##...  .#######.  .#######.  ##....##.\n##.....##  ....##...  ##.......  .......##  #########\n.##...##.  ....##...  ##.......  ##.....##  ......##.\n..#####..  ..######.  #########  .#######.  ......##.\n.........  .........  .........  .........  .........\n.########  .#######.  .########  .#######.  .#######.\n.##......  ##.....##  .##....##  ##.....##  ##.....##\n.##......  ##.......  .....##..  ##.....##  ##.....##\n.#######.  ########.  ....##...  .#######.  .########\n.......##  ##.....##  ...##....  ##.....##  .......##\n.##....##  ##.....##  ...##....  ##.....##  ##.....##\n..######.  .#######.  ...##....  .#######.  .#######.\n.........  .........  .........  .........  .........\n\n\nGavę N skaitmenų, atvaizduotų aukščiau nurodytu būdu, apskaičiuokite, kokį skaičių tie skaitmenys sudaro. Skaitmenys bus pateikiami paeiliui nuo kairiausio iki dešiniausio.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30233","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe UCF Programming Team Coaches, besides being the most experienced coaching group in the world, are also conscious of the forests in our planet disappearing. The coaches have taken the initiative of developing a 1-D forest. They have planted a tree seed at each integer location in the range of 1 and 105. These 105 trees are currently of height 0 (zero) but the coaches have recruited three forest rangers (Alice, Bob, and Cutz) to maintain this 1-D forest. The forest rangers are really like fairies once you see their power!\n\nAlice loves to watch the trees grow. She was gifted a magical watering pot that can make a tree grow K units, where K is the amount of water she pours on the tree. Additionally, each tree that is D (D < K) distance away from the spot will grow K-D units.\n\nBob loves to climb the trees in the forest. Bob has a special tape that can measure the height of any tree.\n\nCutz likes to cut all the trees in the forest to a specific height, i.e., taller trees are cut to all have a specific height (note that shorter trees are not affected/cut). More specifically, Cutz decides on a threshold (maximum height) and then all the trees taller than this threshold will be cut to have this new height. Cutz likes decreasing sequence (!) so they always cut at a height lower than the previous one they used (with the only exception being the first cut).\n\nFor a given list of commands that Alice, Bob, and Cutz performed, determine the height Bob measured in each of his commands. Remember that all the trees start at height 0.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30323","content":"문제\n\nExponentiation is a mathematical operation that involves raising a base number to a certain exponent to obtain a result. In the expression \nan\n$a^n$, where \na\n$a$ is the base and \nn\n$n$ is the exponent, it means multiplying \na\n$a$ by itself \nn\n$n$ times. The result of this operation is called the exponentiation of \na\n$a$ to the \nn\n$n$-th power. For examples, \n23=2×2×2=8\n$2^3=2 \\times 2 \\times 2=8$ and \n52=5×5=25\n$5^2=5 \\times 5=25$. In these examples, \n2\n$2$ is the base, \n3\n$3$ is the exponent in the first case, and \n5\n$5$ is the base, and \n2\n$2$ is the exponent in the second case. Exponentiation is a fundamental operation in mathematics and is commonly used in various contexts, such as solving equations, and cryptography.\n\nIn many cryptographic algorithms, particularly those based on number theory like RSA (Rivest-Shamir-Adleman) and Diffie-Hellman, modular exponentiation is a fundamental operation. Modular exponentiation involves raising a base to an exponent modulo a modulus. This operation is computationally intensive but relatively easy to perform, even for very large numbers.\n\nLet \nx+1x=α\n$x+\\frac{1}{x}= \\alpha$ where \nα\n$\\alpha$ is a positive integer. Please write a program to compute \nxβ+1xβmodm\n$x^\\beta + \\frac{1}{x^\\beta} \\bmod m$ for given positive integers \nβ\n$\\beta$ and \nm\n$m$."},{"problemId":"30309","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tTim needs to reach the Binary Analog Probing Conference (BAPC) on time, but he is running late. He is not sure if he can even make it on time without exceeding the speed limit! He does not like speeding, so he would like to minimize the amount that he needs to speed and plans his route accordingly. If he decides to speed by x km/h$x\\text{ km/h}$, he will exceed the speed limit everywhere by exactly x km/h$x\\text{ km/h}$.\n\nHelp Tim find the minimal amount that he needs to speed by to get to the BAPC in time.\n\nAs an example, consider the first sample case. Without speeding, Tim will take 40040+30020=25 hours$\\frac{400}{40} + \\frac{300}{20} = 25\\text{ hours}$ to drive from intersection 1$1$, via intersection 3$3$, to intersection 4$4$. In order to arrive in time, he will need to exceed the speed limit by 10 km/h$10\\text{ km/h}$, in which case his driving time will be 40040+10+30020+10=18 hours$\\frac{400}{40+10} + \\frac{300}{20+10} = 18\\text{ hours}$, following the same route.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30273","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tVelykų Zuikis turi M margučių, kuriuos jis nori įteikti N vaikų. Zuikio margučių visiems gali neužtekti, tačiau vaikai, gavę margutį, norės numarginti ir padovanoti po margutį kitiems vaikams – nesvarbu, ar margutį gavo nuo Zuikio, ar nuo kito vaiko. Dovanoti margutį vaikui galima tik jei jis dar neturi margučio. Zuikis žino, kam kiekvienas vaikas nori dovanoti margučius.\n\nPanagrinėkime pavyzdį su penkiais vaikais. Paveikslėlyje rodyklės žymi, kam vaikai norėtų dovanoti margučius, patys gavę margutį:\n\n\n\nJeigu Zuikis padovanos margutį antrajam vaikui, šis vaikas numargins ir padovanos po margutį trečiajam ir pirmajam vaikui, o pirmasis – ketvirtajam vaikui. Ketvirtasis vaikas norėtų padovanoti margutį antrajam vaikui, bet nedovanos, kadangi šis margutį jau turi. Pastebėkime, kad nors Zuikis padovanojo tik vieną margutį, galiausiai margučius gavo net keturi vaikai.\n\nZuikis suprato, kad bendras margučius gausiančių vaikų skaičius priklauso nuo to, kuriems vaikams jis išdalins savo margučius. Raskite, kiek daugiausiai vaikų gali gauti dovanas, jeigu Velykų Zuikis protingai išdalins savo turimus margučius.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30234","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn an unenchanted forest there is a mundane rabbit that steals from your garden and you end up chasing after it. The rabbit constantly moves its burrow, so knowing your options for catching the bugger is not easy. The forest is a collection of clearings joined by trails, each trail connecting exactly two clearings. You know, when you chase the rabbit, where it starts and ends its journey. You are solely interested in knowing clearing(s) you can set up a snare to ensure that you trap the rabbit. Note that setting up a snare in rabbit’s starting or ending clearings will definitely catch the rabbit. (We trust that you don’t plan on injuring the rabbit, only taking back your vegetables.)\n\nIt will always be the case that the rabbit can reach any clearing from any other clearing, i.e., the rabbit can travel from any clearing to any other clearing.\n\nGiven the description of the forest, determine the number of possible clearings where you are guaranteed to be able to trap the rabbit.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30324","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAn undirected graph is a fundamental concept in graph theory, a branch of mathematics and computer science. It is a data structure that represents a set of vertices connected by edges that have no direction. In other words, in an undirected graph, if there is an edge from vertex u$u$ to vertex v$v$, there is also an edge from vertex v$v$ to vertex u$u$. We use a two-element set {A,B}$\\{A,B\\}$ to represent such undirected edge. An undirected graph is simple if there is at most one edge between any pair of vertices.\n\nIn graph theory, a connected component is a group of vertices and edges within a graph where you can travel from any vertex to any other vertex by following a sequence of edges. A bridge is an edge in an undirected graph that, if removed, increases the number of connected components in the graph.\n\nBridges are essential concepts in graph analysis and have practical applications in network design, fault tolerance, and connectivity analysis. They are often used to identify vulnerable points in a network where the removal of a single edge could lead to the isolation of certain components or the disruption of connectivity. Identifying bridges in a graph can be done using various algorithms which can detect these crucial edges and help analyze the robustness and structure of a network or system.\n\nYou have a simple undirected graph whose vertices and edges are V={1,2,…,n}$V=\\{1,2,\\dots ,n\\}$ and E={{u1,v1},…,{um,vm}}$E=\\{\\{u_1,v_1\\}, \\dots ,\\{u_m, v_m\\}\\}$. Your friend, Flora, ask you to sequentially remove edges e1,𝑒2,…,eq$e_1,𝑒_2,\\dots ,e_q$ from your graph and report the number of bridges left in the graph after each removal. Please write a program to generate the report.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30287","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tViename mieste, kažkur Lietuvoje, yra labai neįprasta gatvė. Architektas, kuris suplanavo šią gatvę, buvo labai išradingas, todėl visi namai stovi tik vienoje jos pusėje. Šie namai turi numerius nuo 1 iki N. Namas stovintis toliau nuo gatvės pradžios turi didesnį numerį nei tas, kuris stovi arčiau. Taip pat, visi namai atrodo beveik vienodi, skiriasi tik jų aukščiai.\n\nKaip ir kiekvienoje gatvėje, taip ir šioje, gyventojai nori, kad jų namai būtų gražūs. Gatvės gyventojai sutarė, kad namas yra gražus, jei jis yra aukštesnis už visus didesnį už jį numerį turinčius namus.\n\nKiekvienas gatvės gyventojas nori sužinoti ar jo namas yra gražus, o jei ne – kiek aukštų trūksta, kad jis būtų gražus.\n\nKiekvienam namui atskirai suskaičiuokite, kiek aukštų trūksta, kad jis taptų gražus.\n\nP.s. Gyventojai, sužinoję, kiek aukštų trūksta jų namams, kad taptų gražūs, papildomų aukštų nestatys, todėl kiekvienam namui aukštų trūkumą reikia suskaičiuoti atskirai.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30274","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tDviratininkų draugija paprašė Vytauto padėti sukonstruoti dviračių plento varžyboms skirtą trasą, kuri būtų kaip įmanoma ilgesnė. Vytautas gavo žemėlapį, kuriame pažymėta N miestų ir M juos jungiančių kelių.\n\nTrasa yra miestų seka a1, a2, . . . , ak, tenkinanti tokias sąlygas:\n\n\n\tvisos gretimų miestų poros (a1 ir a2, a2 ir a3, ..., ak−1 ir ak) yra sujungtos keliu; trasa eina šiais keliais;\n\ttrasoje nėra pasikartojančių miestų (vienintelė leidžiama išimtis – žiedinė trasa, kuomet pradinis ir galinis trasos miestas sutampa, t.y. a1 = ak);\n\ttrasa negali eiti tuo pačiu keliu du kartus;\n\ttrasos vidiniai miestai (t.y. a2, a3, ..., ak−2, ak−1) neturi kitų žemėlapyje pažymėtų kelių, išskyrus tuos, per kuriuos eina trasa.\n\n\nParašykite programą, padėsiančią Vytautui rasti ilgiausią leistiną trasą. Trasos ilgis lygus ją sudarančių kelių skaičiui.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30340","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tDvyniai Antanas ir Bronius gimtadienio proga gavo didelę dėžę sausainių. Iš viso joje yra N skirtingų sausainių, sunumeruotų nuo 1 iki N.\n\nDvyniams ne visi sausainiai patinka vienodai: i-ąjį sausainį Antanas vertintų ai balų, o Bronius jį vertintų bi balų. Kuo įvertis didesnis, tuo labiau sausainis patinka. Abu dvyniai žino, kiek balų kiekvienas iš jų skirtų kiekvienam sausainiui.\n\nMama pasiūlė dvyniams saldumynus pasidalinti šitaip: pirmasis vieną sausainį pasirinktų Antanas, paskui iš likusių sausainių vieną pasirinktų Bronius ir taip toliau, iki dėžė ištuštėtų.\n\nBroliai nėra labai draugiški, todėl kiekvienas stengsis rinktis sausainius taip, kad pasibaigus dalyboms jo pasirinktų sausainių įverčių suma būtų kaip įmanoma didesnė už kito brolio pasirinktų sausainių įverčių sumą.\n\nKitaip tariant, jei dalybų metu Antanas pasirenka sausainius, kuriuos jis įvertina A balų, o Bronius pasirenka sausainius, vertus B balų, tai Antano tikslas yra pasiekti, kad dalybų pabaigoje skirtumas A − B būtų kaip galima didesnis, o Broniaus – kad skirtumas B − A būtų kuo didesnis.\n\nApskaičiuokite, kam bus lygus skirtumas A−B, jei abu dvyniai sausainius rinksis optimaliai.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30310","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYour cutlery drawer contains many types of forks. Each with their own purpose, and each with its own place in the cutlery drawer. After a nice dining party with all your friends, disaster struck! You put all the used forks in the dishwasher, but now you are unsure where to put back some of the forks, because at least two places in the cutlery drawer are empty! And worse, you do not remember which type of fork belongs where!\n\nWhat is the minimum number of forks that must have been in the dishwasher to cause this confusion?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30325","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tGrigory is a talented engineer who has a love in developing drones and, of course, geometry. As a skilled problem solver, he is able to come up with solutions in difficult situations, but today, he encountered a problem that his abilities alone are not enough to solve. Therefore, as his best sidekick, your task is to assist him.\n\nThere are n$n$ cogs on the Cartesian plane. The i$i$-th cog is located at the coordinates (xi,yi)$(x_i,y_i)$ and has a character ci$c_i$ that describes its color – \"b\" means it is a black cog, while \"w\" means it is a white cog. In addition, no three cogs lie on the same line.\n\nGrigory wants to build a gadget using some cogs. To do this, he first chooses a subset S$S$ that consists of 4$4$ or more of the n$n$ cogs. Then, a loop of chains is placed around the cogs. The loop is chosen such that:\n\n\n\tEvery cog in S$S$ either touches the loop or lies in its interior.\n\tThe total length of chains is minimal.\n\n\nFor example, the image below shows the chains that would be placed for a chosen set of cogs.\n\n\n\nFinally, consider the cogs in S$S$ that touch the loop. These are the most important cogs, so they cannot be interfering with each other. Therefore, any two adjacent cogs on the loop must have different colors, otherwise the resulting gadget won't be working properly. If a cog in S$S$ does not touch the loop, then it may have an arbitrary color.\n\nHow many different sets S$S$ can Grigory choose to build a properly working gadget? Since the answer can be very large, find the value modulo 109+7$10^9+7$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30235","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tJesse Mary just purchased an exquisite framed painting of her favorite creatures: Cows! She wants to hang this painting, but she’s misplaced her hammer. She does, however, have a wall full of pins, and an extremely excessive amount of rope (string). Being a pragmatic topologist, she wants to save herself some work in the future. She would like to tie the painting to the wall such that the painting hangs, but she only has to remove one pin for the painting to fall. Furthermore, she would like this to be true of any pin.\n\n\n\nThe above arrangement (the path created by the rope, starting with the picture, going around the pins and ending at the picture) is such that the painting will hang. But, if either pin is removed, the painting will fall on the ground, i.e., if we remove either pin, the rope won’t be around the other pin and the picture will fall on the ground.\n\nFormally, if we model her wall as a 2-D plane, she would like to find a cyclic (the start and end are the same point) path which is not homotopic to a point, but upon removal of any one of the pins, becomes so. “Homotopic” means topologically equivalent under deformation. In the above image, the path from the painting, along the black rope (string), and back to the painting (the painting closes the loop) is such a path: The path is non-homotopic to a point, meaning the painting hangs. However, if you remove either pin, the path becomes homotopic to a point, which means the painting will fall!\n\nGiven a set of points on the 2-D plane, output a cyclic path which is not homotopic to a point, but when any one of the points is removed, becomes homotopic to a point. You can ignore all selfinteractions the rope has (i.e., there will be no knots).\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30275","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tKiekvienais metais pavasarį Vladimiras keliauja su draugais į Velsą važinėti dviračiais.\n\nVelse gamta yra ypatingai graži — sraunios upės, žmogaus nepaliesti miškai, kriokliai, kalnai.\n\nKadangi reikės važinėtis kalnuotomis vietovėmis, Vladimiras nusprendė pasitreniruoti ir kiekvienai dienai suplanavo tam tikro aukščio maršrutą.\n\nVladimiras bus pasiruošęs, kai jo įveiktų maršrutų aukščių suma bus nemažesnė už M metrų.\n\nSuskaičiuokite, per kiek mažiausiai dienų jis gali pasiruošti kelionei į Velsą, jeigu treniruosis be pertraukos. Vladimiras gali pradėti treniruotis bet kurią dieną.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30311","content":"문제\n\nYou are making a new search engine for algorithms, called the Benelux Algorithm Preview Collector. All the marketing has been done, and you have plenty of investors, but there is one small problem: you have not written any code yet! As there are only five hours left until the product launch, you decide that there is not enough time to implement your own ranking algorithm. Instead, whenever a user searches for an algorithm, you just forward it to the \nk\n$k$ most popular other search engines and use their results.\n\nEach of these \nk\n$k$ search engines gives a list of \nn\n$n$ results, ordered by estimated relevance. Surprisingly, it turns out that for every search term you try, the different search engines always give the same \nn\n$n$ results, only the order differs between the search engines! You just need to find a way to combine the \nk\n$k$ different rankings into a single ranking.\n\nTo do this, you decide to give each possible combined ranking a cost: for each result \nr\n$r$ and search engine \ns\n$s$, if your combined ranking puts \nr\n$r$ at the position \ni\n$i$, and search engine \ns\n$s$ puts \nr\n$r$ at position \nj\n$j$, then you incur a cost of \n(i−j)2\n$(i-j)^2$. The total cost of a combined ranking is the sum of all \nk⋅n\n$k \\cdot n$ costs computed this way.\n\nAs an example, consider the second sample case. The first search engine returns the same result as the sample output, which has cost \n0\n$0$. The second search engine swaps two adjacent results, which has cost \n1+1=2\n$1+1=2$. For the third search engine, the first result is moved two positions back, and the other two are shifted one position to the front, which has cost \n4+1+1=6\n$4+1+1=6$. The total cost is then \n0+2+6=8\n$0+2+6=8$, which is the minimal possible cost over all possible orders.\n\nWhat is the order in which BAPC should output the results, such that the total cost is minimized?"},{"problemId":"30288","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tByteland has N cities. Some of the cities are connected by roads.\n\nByteland rally organisers asked you to set up a track that would consist of exactly four roads and that would start and end in the same city. A road can not be added to the track more than once.\n\n\n\nFigure 1: Four marked roads make a valid track\n\nKnowing the road map of Byteland, set up a rally track.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30326","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA minimum binary heap, often simply referred to as a \"min-heap,\" is a specialized type of binary tree-based data structure used in computer science. It is a binary tree that has two main properties:\n\n\n\tHeap Property: In a min-heap, for any given node, the value of that node is less than or equal to the values of its child nodes. This means that the minimum value in the heap is always found at the root node. In other words, the smallest element in the heap is at the top.\n\tBinary Tree Structure: A min-heap is typically a complete binary tree, which means that all levels of the tree are fully filled except possibly for the last level, which is filled from left to right. This structural property allows min-heaps to be efficiently implemented using arrays.\n\n\nMin-heaps are often used to implement priority queues, which are data structures that maintain a collection of elements with associated priorities. By keeping the minimum element at the root, min-heaps can quickly retrieve and remove the element with the highest priority (lowest value) in logarithmic time. However, removing any other element from a min-heap may need linear time.\n\nHank recently learned min-heaps. He wonders how many nodes can keep the k$k$-th smallest element in a min-heap of n$n$-nodes. Please write a program to help him.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30341","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tLatvijos informatikos olimpiados vertinimo komisija išsirengė į turistinę kelionę po Lietuvą. Jie išsinuomojo autobusiuką ir nusprendė, kad vairuos labiausiai patyręs komisijos narys Mārtiņš (Martinšas).\n\nLatviai kelionę pradės Biržuose ir važinės po įvairius Lietuvos miestus.\n\nLatviai susitarė sustoti pavalgyti kas K aplankytų miestų. Kitaip sakant, jie valgys pirmame aplankytame mieste (Biržuose), (K + 1)-ame, (2K + 1)- ame ir taip toliau.\n\nMartinšas žino, kad LMIO Respublikinio etapo baigiamoji dalis vyks Prienuose, todėl jis būtinai nori ten papietauti. Be to, jis nori tai padaryti kuo greičiau, t. y. aplankęs kuo mažiau miestų.\n\nMartinšas vežasi neišsamų žemėlapį, kuriame pažymėta tik N miestų ir M juos jungiančių kelių. Jis nori važiuoti tik žemėlapyje pažymėtais keliais.\n\nMiestus latviai gali aplankyti daugiau nei vieną kartą. Laikykite, kad kiekvieną kartą atvykus į kažkurį miestą jis yra vėl aplankomas – net jei jau buvo aplankytas anksčiau.\n\nLatviai tuo pačiu keliu gali važiuoti kelis kartus. Jie netgi gali apsisukti ir grįžti keliu, kuriuo jie ką tik atvažiavo, tačiau apsisukti galima tik miestuose (juos aplankant), o ne kelio viduryje.\n\nApskaičiuokite, kiek mažiausiai miestų Martinšas turės aplankyti, iki kol galės papietauti Prienuose.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30276","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tDabar pats slidinėjimo sezonas! Traukinių stotis ūžia nuo slidinėti važiuojančių poilsiautojų. Bijodami nepavėluoti į traukinį, keleiviai sulipo į vagonus nežiūrėdami, kur yra laisvos vietos.\n\nKiekviename traukinio vagone yra po K sėdimų vietų, o iš viso traukinyje sėdimų vietų yra lygiai tiek, kiek keleivių – taip jau būna šiuo metų laiku.\n\nŽinodami, kiek keleivių įlipo į kiekvieną iš vagonų, raskite, kiek mažiausiai vagonų keleiviai turės pereiti sumoje, kad kiekvienas keleivis galėtų atsisėsti.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30327","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou run a restaurant called Taste Of Pacific Cuisine (TOPC). This weekend, you will be hosting a large banquet that caters a sizable group of guests. Your chef designed n$n$ types of dishes. To ensure every guest a chance to taste each type of the dishes, you plan to prepare two dishes per dish type. (Hence there are a total of 2n$2n$ dishes at the banquet.)\n\nThere is a very long table in your restaurant, and you plan to exhibit all 2n$2n$ dishes in a line on this table all at once. Not surprisingly, the length of the table fits exactly 2n$2n$ dishes. As a considerate host, you plan to make sure that no two dishes of the same type are laying on the table together — this allows a variety of choices for introversion individuals who prefer not to wander around.\n\nNow, some dishes have already been brought to the table. Can you quickly count the number of ways to place the remaining dishes such that no two dishes of the same type are placing together? You must compute this number quickly so you can give an introductory overview to your kitchen staff on how to place the remaining dishes — that's what you call an intro version. Since the number of ways could be large, it suffices to output the answer modulo 109+7$10^9+7$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30289","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tRomas does not like doing cleaning, so he bought an autonomous robotic vacuum-cleaner. Unfortunately, it turns out that the robot is quite primitive – when vacuum-cleaning, it just moves straight forward until it hits an obstacle (e.g. a piece of furniture or a wall); then it turns right by 90 degrees and repeats the same.\n\nRomas’ flat plan can be modelled by an N × M grid; each cell of the grid is a square that represents either free area (can be cleaned by the robot), or occupied (contains an obstacle). Robot moves through squares parallel to the sides of the grid.\n\nRomas will switch the robot on before leaving to work. Upon arrival he would like to have the biggest possible area cleaned.\n\nFind the largest possible area that the robot can clean. The robot can be started from any free square in any direction – up, down, left or right.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30236","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t수열 a1,a2,…,an$a_{1}, a_{2}, \\ldots, a_{n}$이 주어진다. 다음 조건을 만족하는 수열 b1,b2,…,bn$b_{1}, b_{2}, \\ldots, b_{n}$을 좋은 수열이라고 정의한다:\n\n\n\t bi$b_{i}$는 양의 정수이다(i=1,2,…,n$i = 1, 2, \\ldots, n$).\n\t bi≠ai$b_{i} \\neq a_{i}$이다(i=1,2,…,n$i = 1, 2, \\ldots, n$).\n\t b1<b2<…<bn$b_{1} < b_{2} < \\ldots < b_{n}$이다.\n\n\n좋은 수열 b1,b2,…,bn$b_{1}, b_{2}, \\ldots, b_{n}$에 대하여, bn$b_{n}$의 최솟값을 구하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30342","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tOrganizuojant dviratininkų varžybas svarbu pasirūpinti dviem dalykais: dušais ir pica.\n\nFinišavę dviratininkai iš karto eina į dušą, o po dušo – nusipirkti picos. Kartais dušų visiems neužtenka, todėl dviratininkams tenka laukti eilėje.\n\nLaukdami jie užkandžiauja – jei dviratininkas iš pradžių planavo picai išleisti K eurų, o eilėje praleido e minučių, pirkdamas picą jis išleis K − e eurų. Jei dviratininkas dušų eilėje laukė per ilgai (K − e ≤ 0), picos jis nepirks.\n\nOrganizatoriai įrengė M dušų. Jie žino, kad varžybose dalyvauja N dviratininkų, ir kad kiekvienas dviratininkas duše praleidžia T minučių. Taip pat jie prognozuoja, kad kiekvienas dviratininkas užkandžiams planuoja išleisti po K eurų.\n\nApskaičiuokite, kiek eurų organizatoriai užsidirbs pardavinėdami picas.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30312","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou have been asked to sort! Again! For the bazillionth time! Not even numbers, but strings! Ugh! Do people still not have this in their standard library? Why do you even need to learn this? Who even uses a language without sort function‽\n\nClearly, you have not been paying attention in class for such a stupid ubiquitous function, but now you have been asked to implement it! Without calling sort! But you just cannot!\n\nBut wait! You have a better approach: what if you just assume that the list is sorted already? The order of the characters in the alphabet is arbitrary anyway\\ldots{} So, instead of sorting the list, you want to determine whether there exists some order of the characters of the alphabet such that the list of strings is sorted according to this order.\n\nNote that when a string is a prefix of some longer string, the shorter string should be sorted before the longer string.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30328","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tJerry has earned acclaim as a renowned coach in the highly competitive realm of the International Collegiate Programming Contest (ICPC). His coaching prowess is exemplified by his unique approach — meticulously training his students to excel in ICPC competitions by harnessing the power of Java, a programming language seldom utilized in this arena. Consequently, Jerry's teams have become synonymous with excellence and are affectionately known as the \"Java Warriors.\"\n\nJerry coaches n$n$ teams to compete in the 2023 ICPC Taoyuan Regional Contest. The registration fee is 4000$4000$ dollars per team, and Jerry does not have enough funds to pay for all Java Warriors. Jerry, facing a financial challenge in coaching multiple teams for the 2023 ICPC Taoyuan Regional Contest, prays to God with a heartfelt and sincere prayer.\n\n\"Dear God,\n\nI come before you today with a humble heart and a deep desire to help my teams compete in the international collegiate programming contest. The registration fee is a significant hurdle, and I find myself lacking the funds needed to support them all.\n\nI pray for your guidance and assistance, not only for myself but for the talented students who have put their trust in me as their coach. Please provide us with the resources necessary to cover the registration fees for these teams.\n\nI understand that this contest is not just about winning but about fostering learning, teamwork, and growth in these young minds. Help us to overcome this financial obstacle so that we can continue to nurture their skills and aspirations.\n\nI also pray for the wisdom to make the best decisions and the determination to explore all available options to secure the funds needed. If it is your will, open doors for us, connect us with individuals or organizations willing to support our cause, or inspire creative solutions to meet our financial needs.\n\nThank you, God, for hearing my prayer and for being a source of strength and guidance. I place my trust in you, knowing that with your help, we can overcome this challenge.\n\nIn your holy and gracious name, I pray,\n\nAmen.\"\n\nUpon hearing his heartfelt prayer, deeply moved by his sincerity and dedication, you are inspired to extend your support by covering the registration fees for the Java Warriors. Now, the question arises: how much should you donate to enable Jerry's teams to compete in the 2023 ICPC Taoyuan Regional Contest?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30277","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tJūratė turi naujos kartos televizorių, kuris leidžia jai ne tik tiesiogiai žiūrėti laidas, bet ir jas įrašyti. Televizorius nėra tobulas – jo atmintyje telpa tik V sekundžių vaizdo įrašų.\n\nJūratė gali žiūrėti laidą tiesiogiai, bei tuo pačiu metu televizorius gali įrašyti iki K kitų tuo pačiu metu rodomų laidų. Televizoriaus atmintyje yra saugomos tik dar neperžiūrėtos laidų sekundės. Taigi jeigu Jūratė nežiūri laidos tiesiogiai, o žiūri įrašą, kiekviena peržiūrėta sekundė yra iškart ištrinama iš televizoriaus atminties.\n\nJūratė gali žiūrėti laidas dalimis – ji gali dabar žiūrimą laidos įrašą sustabdyti ir pratęsti jį žiūrėti vėliau. Taip pat Jūratė turi galimybę žiūrėti laidą, kuri šiuo metu yra įrašoma.\n\nJūratė nori peržiūrėti laidą teisinga tvarka – ankstesnė laidos sekundė turi būti peržiūrėta anksčiau nei vėlesnė. Taip pat Jūratė nenori praleisti nei vienos laidos sekundės, todėl ji žiūrės laidas tol, kol peržiūrės visas laidų sekundes.\n\nJūratė turi sąrašą vienos kalendorinės paros TV laidų, kurias ji nori peržiūrėti. Nustatykite, ar įmanoma Jūratei peržiūrėti visas norimas laidas, ir jei taip, kada anksčiausiai ji gali baigti jas žiūrėti.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30290","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThere has been snowing heavily last night. Prienai snow plowing company now faces a huge challenge – it has to clean L kilometers of snow-covered road.\n\nThe company owns N snow plowers numbered from 1 to N. Initially, i-th snow plower is parked in a garage located at the Ai-th kilometer of the road. It costs Ki euros for the i-th snow plower to drive one kilometer.\n\n\n\nAfter finishing the work all snow plowers must return to the garages they left from. In order to avoid traffic jams they have to finish plowing and return to garages within T minutes.\n\nEvery vehicle can drive at most 1 kilometer per minute, regardless of whether it is plowing or not.\n\nCalculate the lowest possible cost for cleaning the snow off the entire road.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30237","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t양의 정수로 구성된 집합 S1,S2,…,Sn$S_{1}, S_{2}, \\ldots, S_{n}$이 주어진다. S1,S2,…,Sn$S_{1}, S_{2}, \\ldots, S_{n}$ 중 몇 개를 적당히 골라서, 그 합집합†$^{\\dagger}$이 S$S$와 같아지게 할 수 있다면 S$S$를 생성 가능하다고 한다. 0$0$개를 선택할 수도 있기 때문에, 공집합은 항상 생성 가능하다.\n\n집합 S$S$가 생성 가능하고, S≠S1∪S2∪…∪Sn$S \\neq S_{1} \\cup S_{2} \\cup \\ldots \\cup S_{n}$일 때, S$S$의 원소의 개수의 최댓값을 구하여라.\n\n †$^{\\dagger}$ 집합 A1,A2,…,Ak$A_1, A_2, \\ldots, A_k$의 합집합은 A1,A2,…,Ak$A_1, A_2, \\ldots, A_k$ 중 하나 이상에 포함된 수의 집합으로 정의하며, A1∪A2∪…∪Ak$A_1 \\cup A_2 \\cup \\ldots \\cup A_k$와 같이 표기한다. 예를 들어, {2,4,6}∪{2,3}∪{3,6,7}={2,3,4,6,7}$\\{2, 4, 6\\} \\cup \\{2, 3\\} \\cup \\{3, 6, 7\\} = \\{2, 3, 4, 6, 7\\}$이다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30329","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are given a string s$s$ consisting of lowercase English letters. A \"kick\" is defined as a substring of s$s$ that starts with the letter 'k' followed by the letter 'i' followed by the letter 'c' followed by the letter 'k'.\n\nYour task is to count the number of distinct \"kicks\" in the string s$s$. Note that the kicks can overlap.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30343","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tNaktį daug snigo, todėl Jonas su draugais nusprendė pažaisti sniego mūšį. Kiekvienas užėmė tam tikrą poziciją ir mūšis tuoj prasidės.\n\nMūšio lauką aprašo N sveikųjų skaičių vi, kurie žymi sniego pusnių aukščius. Kuo vi yra didesnis, tuo i-oji pusnis yra aukštesnė.\n\nMetęs sniego gniūžtę iš pozicijos A, Jonas gali pataikyti į draugą, esantį pozicijoje B, jeigu tarp jo ir draugo nėra pusnių, aukštesnių už min(vA, vB).\n\nŽemiau pateiktame pavyzdyje Jonas (pozicija 5, aukštis 5) gali pataikyti į Mantą (pozicija 2, aukštis 4), bet negali pataikyti į Astą (pozicija 7, aukštis 2).\n\n\n\nŽinodami, kaip atrodo sniego mūšio laukas, kur yra Jono bei jo draugų pozicijos, apskaičiuokite, į kelis draugus Jonas gali pataikyti mesdamas sniego gniūžtes.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30313","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIt is migration day at the Big Administration Processing Company: the database containing all administrative documents of all clients needs to be migrated to the latest version of the database software. Quite some things have changed over the past years, and this software has not been upgraded, so the number of migration jobs is high.\n\nThe migration jobs run in parallel on the multicore server machine in a first-come-first-serve fashion: every time a core is done running a job, it starts running the first job that has not yet started. The Idle Terminal (IT) Team is sitting huddled around the terminal window, eagerly awaiting the dopamine boost when another migration job completes successfully and a message is printed to the terminal.\n\nThe IT Team starts breaking out in sweat when nothing changes on the terminal for quite a long time. Did the connection hang? Has the server soft-locked? Did all jobs get stuck in infinite loops?? On the other hand, some migration jobs really do have a long duration, and it may simply be a coincidence that there are only long-running jobs active at the time. To calm down the IT Team, you decide to compute the longest time that goes by without seeing a new message on the terminal, starting from the moment that the first migration jobs start running.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30278","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMokyklos kepinių mugei Ugnė nusprendė iškepti dviejų rūšių keksiukus.\n\nIš slaptų mamos receptų ji žino, kiek ir kokių produktų reikės keksiukų ingredientų pirkimui. Ji suskaičiavo, kad vienam pirmos rūšies keksiukui reikalingi ingredientai kainuoja a eurų, o antros – b eurų.\n\nUž kiekvieną parduotą pirmos rūšies keksiuką ji gaus A eurų pelną, o už antros – B eurų. Tačiau prieš pradedama savo kepėjos karjerą, ji turi pasirūpinti produktais reikalingais keksiukų kepimui.\n\nDabar Ugnei įdomu, kokį didžiausią pelną ji galėtų uždirbti pardavinėdama savo keksiukus, jei mama jai duotų S eurų produktų pirkimui. Ji yra įsitikinusi, kad sugebėtų parduoti visus keksiukus, kuriuos iškeptų.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30279","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tLinas dovanų gavo neįprastą girliandą. Ši girlianda sudaryta iš N tarpusavyje sujungtų lempučių. Visos lemputės yra sujungtos į vieną bendrą tinklą, o tinkle ciklų nėra. Tiesiogiai sujungtas lemputes vadinsime kaimyninėmis.\n\nPradiniu momentu, t.y. įjungus girliandą į elektros tinklą (t = 0), kai kurios lemputės šviečia, o kai kurios – ne. Tuomet, kiekvieną sekundę įjungtų lempučių konfigūracija keičiasi. Laiko momentu t kiekviena lemputė yra arba įjungiama, arba išjungiama pagal tokią taisyklę:\n\n\n\tLemputė nešvies, jeigu t − 1 momentu ji turėjo bent vieną kaimyninę lemputę, kuri nešvietė;\n\tKitu atveju, lemputė švies.\n\n\nLinui parūpo sužinoti, per kiek sekundžių po įjungimo į elektros tinklą visos girliandos lemputės užges.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30330","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe concept of \"location, location, location\" is a common phrase used in real estate and business to emphasize the importance of the physical location of a property or business. In real estate, it suggests that the desirability and value of a property are heavily influenced by its location, often more so than by the property's features or condition. In business, it highlights that the success of a retail store or commercial establishment can be significantly impacted by its geographical location.\n\nIn recent years, people tend to buy electric vehicles, but the buyers soon find it is hard to install charging piles in their apartments or houses. Building a charging station can be a good idea to make a lot of money. Your boss, Lena, ask you to find a good location for establishing her charge station to serve the electric vehicle owners.\n\nIn recent times, there has been a growing trend towards the adoption of electric vehicles (EVs). However, many EV owners face the challenge of installing charging infrastructure in their apartments or houses. Establishing a charging station presents a lucrative opportunity in response to this demand. Your boss, Lena, has tasked you with identifying an optimal location for building a charging station to cater to the needs of electric vehicle owners.\n\nYou are given a list of n$n$ locations represented as (x,y)$(x,y)$ coordinates in a 2D plane. For each location, there is an apartment or a house without any charging infrastructure. Your task is to build a charging station at the location that is closest to all n$n$ locations on the list. In this problem, distance is measured using the Manhattan distance metric. The Manhattan distance between two points (x1,y1)$(x_1,y_1)$ and (x2,y2)$(x_2,y_2)$ is defined as |x1−x2|+|y1−y2|$|x_1-x_2|+|y_1-y_2|$. Your goal is to find a location (x,y)$(x,y)$ such that the sum of the Manhattan distances from that location to all n$n$ locations on the list is minimized.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30238","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t n$n$개의 카드가 덱에 쌓여 있다. 위에서 i$i$번째 카드에는 정수 ai$a_{i}$가 적혀 있다. 카드에 적혀 있는 정수는 변하지 않는다.\n\n성호는 혼자 게임을 하려고 한다. 처음에 성호의 점수는 0$0$이다. 매 턴마다 성호는 다음 중 하나의 행동을 할 수 있다:\n\n\n\t현재 남아 있는 카드 개수보다 크지 않은 양의 홀수 i$i$를 선택한다. 위에서 i$i$번째 카드를 덱에서 제거하고 해당 카드에 적혀 있는 수를 점수에 더한다.\n\t현재 남아 있는 카드 개수보다 크지 않은 양의 짝수 i$i$를 선택한다. 위에서 i$i$번째 카드를 덱에서 제거한다.\n\t게임을 종료한다. 게임 종료 전에 모든 카드를 덱에서 제거하지 않아도 된다.\n\n\n성호의 최종 점수의 최댓값을 구하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30239","content":"문제\n\n정점이 \nn\n$n$개인 트리가 주어진다. 각 정점에는 \n1\n$1$부터 \nn\n$n$까지의 번호가 붙어 있고, \ni\n$i$번 정점에는 정수 \nai\n$a_{i}$가 쓰여 있다. 당신은 원하는 만큼 시행을 하여 모든 \nai\n$a_{i}$를 같게 만들어야 한다.\n\n한 번의 시행에서 당신은 정점 \nv\n$v$와 음이 아닌 정수 \nc\n$c$를 선택한다. 그 다음 \nv\n$v$를 루트로 하는 서브트리의 모든 정점 \ni\n$i$에 대하여, \nai\n$a_{i}$를 \nai\n$a_{i}$를 \nai⊕c\n$a_{i} \\oplus c$로 바꾼다. \nv\n$v$를 루트로 하는 서브트리의 크기를 \ns\n$s$라 할 때, 이 시행의 비용은 \ns⋅c\n$s \\cdot c$이다. \n⊕\n$\\oplus$는 bitwise XOR을 의미한다.\n\n \nr\n$r$번 정점이 트리의 루트일 때 목표를 달성하기 위한 최소 비용을 \nmr\n$m_{r}$이라 하자. \nm1,m2,…,mn\n$m_{1}, m_{2}, \\ldots, m_{n}$을 구하여라."},{"problemId":"30291","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tEveryone thinks Prienai Way asteroid belt is filled with asteroids, but Lukas has a map with empty parts of the belt shown on it. In the map, asteroid belt is divided into M × N squares, each of which is either empty or full of asteroids.\n\nLukas wants to fly through the asteroid field. Naturally, he can only fly through empty squares.\n\nLukas’s spaceship can fly horizontally as long as needed, but it uses fuel to fly vertically – 1 fuel unit per each square passed vertically. Lukas’s destination is a planet in square (X2, Y2).\n\nFigure out the smallest amount of fuel Lukas will need to consume to reach the destination.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30344","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAdomas turi vienetinio pločio, N ilgio ir M aukščio dėžutę. Dėžutę galima prikrauti vienetinių kubelių. Daugiausia jų gali tilpti N × M. Tačiau į kiekvieną iš N vietų (stulpelių) galima vieną ant kito sukrauti ir mažiau nei M kubelių.\n\nAdomas pamiršo dėžutę su kubeliais lauke ir į ją prilijo vandens. Dėl skirtingo kubelių kiekio kai kuriuose stulpeliuose galėjo užsilikti vandens. Dėžutės šonai (kurių matmenys N × M) ir dugnas sudaryti iš tankios medžiagos, todėl nepraleidžia vandens, bet dėžutės galai (kurių matmenys 1 × M) vandens nesulaiko.\n\n\n\n1 pav. N = 6, M = 5, o palijus užsiliko trys kubeliai vandens.\n\nLaikykite, kad iškritusio vandens kiekis yra begalinis.\n\nApskaičiuokite, kiek vandens užsiliko dėžutėje po lietaus. Užsilikusio vandens tūris matuojamas tokį pat tūrį užimančių kubelių skaičiumi.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30314","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou just got the high score when playing Battlezone Asteroids Pac-Centipede on an arcade machine! On the \"Game Over\" screen, you can enter your initials, one letter at a time. This seems to be a very modern arcade machine: whereas the original arcade machines only allowed entering three initials, this machine allows many more. However, to select the letters, you have access to just a joystick. For every letter, you need to move the joystick up or down to cycle between the letters (wrapping around between 'Z' and 'A', in both directions) and move it to the right to move to the next letter.\n\nIt appears that the initials of the previous high-score winner are still filled in. Entering your own initials is going to take some time, and you want to know exactly how long. How many times do you need to you move the joystick up or down to enter your own initials, if you do so in the most efficient way?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30331","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAdam and Bill are playing cards. There are K cards in the deck, numbered 1 to K. The game consists of N rounds, during which each player is trying to score points. The winner is the one who has the most points at the end of the game.\n\nBefore each round, the deck is shuffled. During the first round players draw one card each. Then Bill shows his card, and Adam, knowing both cards, decides what action to take:\n\n\n\tshow his card;\n\tkeep his card.\n\n\nIf Adam decides to show his card the round is won by the player who has the higher card. The number of points won is equal to the product of the numbers written on the cards.\n\nFor example, if Adam’s card shows 7 and Bill’s card shows 10, Bill wins this round and gets 70 points. The loser does not get any points for the round. Cards are then returned to the deck and shuffled, and the round ends.\n\nIf Adam decides to keep his card, Bill’s card is returned to the deck and the deck is shuffled. In the next round (if any are left) Bill will draw a new card while Adam will use the card he has decided to keep.\n\nThe game continues in this way. Bill always shows his card while Adam can choose what to do. The game ends after N rounds are played and both players sum their points up.\n\nLet’s take an example when N = 4 and K = 10. The game could go like this:\n\n\n\tIn the first round, Bill gets a card with 2, while Adam – 6. Adam decides to show his card. Since his card is greater, he gets 6 · 2 = 12 points for this round.\n\tIn the second round, Bill gets a 9, Adam – 3. This time Adam decides to keep his card. No one gets any points for this round.\n\tIn the third round, Bill gets a 5, Adam still has his old card – 3. This time, Adam decides to show his card. Bill gets 5 · 3 = 15 points.\n\tIn the fourth round, Adam gets 8, o Bill – 4. Adam opens his card and gets 8 · 4 = 32 points.\n\tSince N = 4, the game ends here. Adam has 12 + 32 = 44 points, Bill – 15 points. Adam wins the game by 29 points.\n\n\nAdam wants to win this game by as large margin as possible. Your task is to help him. Write a program that would play this game and make decisions for Adam. It has to make sure that Adam wins and try to win by as large margin as possible.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30332","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tVincent likes mysterious words. Mystery level is defined by the number of letters that can be removed from a word one by one such that the new word exists in the dictionary.\n\nFor example, if the dictionary contains words BALANDIS, PALIS, SPALIS, PLIS, LIS, word SPALIS has a mystery level of 3: SPALIS → PALIS → PLIS → LIS. Word BALANDIS has a mystery level 0, since removing letters from it doesn’t produce any words in the dictionary.\n\nHelp Vincent find the most mysterious word in the given dictionary.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30292","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are given a tree with N$N$ vertices. You can repeat the following operation at most 105$10^5$ times.\n\n\n\tChoose four distinct vertices v1,v2,v3,v4$v_1, v_2, v_3, v_4$ such that there exist edges between v1$v_1$ and v2$v_2$, v2$v_2$ and v3$v_3$, v3$v_3$ and v4$v_4$. Remove these edges and add edges between v1$v_1$ and v3$v_3$, v1$v_1$ and v4$v_4$, v2$v_2$ and v4$v_4$.\n\n\nYour task is transform the given tree so that its diameter is at most 3$3$ . Find a sequence of operations that does so.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30333","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tRomas nemėgsta siurbti dulkių, todėl įsigijo robotą-dulkių siurblį. Deja, robotas pasirodė esąs primityvus – jis siurbdamas dulkes tiesiog važiuoja į priekį, kol atsitrenkia į kliūtį (pavyzdžiui, baldą ar sieną), tada pasisuka 90 laipsnių į dešinę ir vėl kartoja tą patį.\n\nRomo buto planas pavaizduotas N × M matmenų tinkleliu. Plane kiekvienas langelis yra arba laisvas (kur robotas gali siurbti), arba užimtas (kliūtis). Robotas juda langeliais lygiagrečiai tinklelio kraštinėms.\n\nRyte išeidamas Romas įjungs robotą ir nori, kad jam grįžus kuo didesnis plotas būtų išsiurbtas.\n\nRaskite, kokį didžiausią plotą robotas gali išsiurbti, jeigu robotą galima paleisti iš bet kurio laisvo langelio į viršų, į apačią, į kairę arba į dešinę.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30345","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMantas mėgsta žaisti klasikinį Gyvatėlės žaidimą. Žaidimo esmė paprasta – valgyk obuolius, augink gyvatėlę ir neleisk jos galvai susidurti su kūnu.\n\nKartą Mantui pavyko laimėti šį žaidimą – gyvatėlė guli spiralės pavidalu, kaip parodyta paveikslėlyje, ir užima kiekvieną ekrano tašką.\n\nPažymėkime gyvatėlės galvos koordinatę (0; 0). Žinodami ekrano plotį N ir aukštį M, apskaičiuokite gyvatėlės ilgį nuo galvos iki duoto kūno taško (X; Y ).\n\n\n\n1 pav. N = 6, M = 6; gyvatėlės ilgis nuo galvos iki X = 2, Y = 4 yra 28\n\nAtkreipkite dėmesį – koordinatės didėja į dešinę ir žemyn, o gyvatėlės ilgis skaičiuojamas langeliais nuo galvos vidurio iki duoto kūno langelio vidurio taško.\n\nApskaičiuokite gyvatėlės ilgį nuo galvos iki duoto kūno langelio vidurio taško.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30315","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tKing Carl's kingdom contains k$k$ keeps (commonly called castles).\n\nCoordinates of keeps are known, and King Carl considers himself convinced that it could be convenient to choose a central keep as King Carl's residence.\n\nCritically, King Carl considers that the average cost to carry commands from King Carl's residence to King Carl's other keeps should be small.\n\nCompute the minimal average Euclidean distance1 from his residence keep to the other keeps if King Carl chooses his residence optimally.\n\n\n1The Euclidean distance between two points is the length of a straight line segment between these points.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30293","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAlice, after mastering the sieve of Eratosthenes, excitedly created a puzzle game that made use of it.\n\nThe rules of the puzzle game are as follows:\n\n\n\tAn array p1,p2,…,pN$p_1,p_2,\\ldots ,p_N$ is given where all pi$p_i$ is initially 0$0$.\n\tA target array t1,t2,…,tN$t_1,t_2,\\ldots ,t_N$ is given. Her goal is to make pi=ti$p_i=t_i$ for all 1≤i≤N$1\\le i\\le N$.\n\tEach time, she can perform one of the following two operations:\n\t\n\t\tChoose i$i$ and increase pj$p_j$ by 1$1$ for every 1≤j≤N$1\\le j\\le N$ that is a multiple of i$i$.\n\t\tChoose i$i$ and decrease pj$p_j$ by 1$1$ for every 1≤j≤N$1\\le j\\le N$ that is a multiple of i$i$.\n\t\n\t\n\tShe can repeat this process as much as she wants.\n\n\nAlice aims to solve the puzzle using the fewest operations, showcasing her puzzle-solving skill. Please help Alice find the minimum number of operations to solve the puzzle.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30334","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tJau seniai Vytautas gyvena Anglijoje ir laisvalaikiu užsiima matematiniais galvosūkiais. Kartą jo draugas pasiūlė jam išspręsti tokį uždavinį: duota 10 teigiamų natūraliųjų skaičių, žinoma jų suma bei pirmojo ir antrojo, antrojo ir trečiojo, . . . , devintojo ir dešimtojo sandaugos. Reikia rasti tuos skaičius. Vytautas ant popieriaus išsprendė uždavinį per pusę valandos.\n\n\n\nKitą dieną jo draugas jam davė tokį pat uždavinį jau su 100 skaičių. Tada Vytautas suprato, kad paprasčiau tokių uždavinių sprendimui parašyti programą, kuri išspręstų šią problemą su N skaičių.\n\nPagal duotąjį N, visų skaičių sumą, pirmojo ir antrojo, antrojo ir trečiojo, . . . ,(N − 1)-ojo ir N-ojo skaičių sandaugas raskite pačius skaičius, jeigu tokie skaičiai egzistuoja.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30346","content":"문제\n\n간선에 가중치가 있는 무향 단순 연결 그래프 \nG=(V,E)\n$G = (V,\\,E)$가 주어진다. \nG\n$G$의 정점 위에서 정의되는 함수 \nf:V→R\n$f: V \\to \\mathbb{R}$에 대해 함수 \ngf:V→R\n$g_f: V \\to \\mathbb{R}$를 다음과 같이 정의하자.\n\n \n\ngf(u)=∑v:(u,v)∈E(f(u)−f(v))⋅w(u,v)\n$$ g_f(u) = \\sum_{v: \\, (u,\\,v) \\in E} \\big( f(u) - f(v) \\big) \\, \\cdot \\, w(u,\\,v) $$ \n\n여기서 \n\n∑v:(u,v)∈E\n$\\sum\\limits_{v: \\, (u,\\,v) \\in E}$ 는 \nu\n$u$와 인접한 모든 정점 \nv\n$v$에 대한 합을 나타내며, \nw(u,v)=w(v,u)>0\n$w(u,\\,v) = w(v,\\,u) > 0$은 정점 \nu\n$u$와 \nv\n$v$를 잇는 간선 \n(u,v)∈E\n$(u,\\,v) \\in E$의 가중치이다.\n\n \nG\n$G$의 정점을 \n1\n$1$에서 \nN\n$N$까지의 정수라고 할 때, 다음 세 조건은 \nf\n$f$와 \ngf\n$g_f$를 유일하게 결정한다.\n\n \nf(1)=1\n$f(1) = 1$이다.\n \nf(N)=0\n$f(N) = 0$이다.\n \n1<u<N\n$1 < u < N$인 모든 정수 \nu\n$u$에 대해 \ngf(u)=0\n$g_f(u) = 0$이다.\n\n그래프 \nG\n$G$가 주어질 때 \ngf(1)\n$g_f(1)$을 출력하는 프로그램을 작성하시오."},{"problemId":"30316","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tHere at the Benelux Advanced Phone Company (BAPC), we are the proud owners of the largest telephone network in the Benelux area. Unfortunately, our network has become too large for us to manage properly. As such, we have decided to sell part of our network.\n\nThe network of the BAPC consists of interconnected transmission nodes. One transmission node is marked as the central switch. All other nodes have exactly one upstream transmission node. For each transmission node, if we follow the upstream connections, we will finally end up at the central switch. A node is considered a customer transmission node when it is a leaf, i.e. when it has no downstream nodes.\n\nWhen selling parts of our network, integrity must be maintained. That means that whenever we sell a transmission node X$X$, we also have to sell nodes downstream of X$X$.\n\nOverall, BAPC decided to sell exactly k$k$ transmission nodes. While there may be many options to choose these k$k$ nodes, we actually want to make our lives as easy as possible: After selling, we want to minimize the number of customer transmission nodes in our network, while maintaining the network's integrity.\n\nAs an example, consider the second sample case, visualized in Figure L.1. The three striped red nodes are sold, and the two bold green nodes are the remaining customer nodes.\n\n\n\nFigure L.1: Visualization of the second sample input.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30335","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tŠalia vieškelio eilėje auga N ąžuolų, sunumeruotų nuo 1 iki N iš kairės į dešinę. Du ąžuolai yra laikomi gretimais, jei tarp jų auga ne daugiau nei D ąžuolų. Kitaip sakant, ąžuolai yra gretimi, jei jų numeriai skiriasi ne daugiau nei D + 1.\n\nKėkštas ketina sukti lizdą viename iš šių ąžuolų. Jis nori išsirinkti ąžuolą, kurio aukštis kiek galima daugiau viršytų gretimų ąžuolų aukščio vidurkį.\n\nPanagrinėkime pavyzdį, kai N = 4, D = 0, o ąžuolų aukščiai atitinkamai lygūs 1, 2, 2, 1. Pirmajam ąžuolui gretimas yra tik antrasis, todėl skirtumas tarp pirmojo ąžuolo ir jam gretimų ąžuolų aukščio vidurkio yra 1 − 2 = −1. Antrajam ir trečiajam ąžuolui šis skirtumas yra lygus 2 − (1 + 2)/2 = 0,5, o ketvirtajam ąžuolui skirtumas lygus 1 − 2 = −1. Taigi kėkštas turėtų sukti lizdą antrajame arba trečiajame ąžuole.\n\nRaskite ąžuolą, kurio aukštis daugiausia viršija jam gretimų ąžuolų aukščio vidurkį.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30360","content":"문제\n\nA box is divided into grids with \nH\n$H$ rows and \nW\n$W$ columns. Some squares contain strawberries.\n\nThe state of the box is denoted by \nS\n$S$, and \nSx,y=1\n$S_{x,y} = 1$ means that the square in the \nx\n$x$-th row and \ny\n$y$-th column contains one strawberry. If \nSx,y=0\n$S_{x,y} = 0$, the square in the \nx\n$x$-th row and \ny\n$y$-th column is empty.\n\nTomoe devised the following method to distinguish between these strawberries.\n\nLet \nAx,y\n$A_{x,y}$ be defined as the sum of \nSi,j\n$S_{i,j}$ for all integer pairs \n(i,j)\n$(i,j)$ satisfying \ni=x\n$i = x$, \n1≤j≤y\n$1 \\le j \\le y$.\nLet \nBx,y\n$B_{x,y}$ be defined as the sum of \nSi,j\n$S_{i,j}$ for all integer pairs \n(i,j)\n$(i,j)$ satisfying \n1≤i≤x\n$1 \\le i \\le x$, \nj=y\n$j = y$.\nIf the square in the \nx\n$x$-th row and \ny\n$y$-th column contains a strawberry, label the strawberry with the tuple \n(Ax,y,Bx,y)\n$(A_{x,y}, B_{x,y})$.\n\nThis method could result in multiple strawberries having the same label, and the strawberries could not be distinguished. Therefore, she decided to add some strawberries before labeling them.\n\nMore formally, for \n(x,y)\n$(x,y)$ such that \nSx,y=0\n$S_{x,y} = 0$, we operated \nSx,y←1\n$S_{x,y} \\leftarrow 1$ any number of times greater than \n0\n$0$.\n\nWhat is the minimum number of strawberries that must be added to label all the strawberries differently?"},{"problemId":"30336","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tArtūras sukalė karkasą naujam šiltnamiui ir ketina jį įstiklinti. Jis nusipirko M × N matmenų stačiakampio formos stiklo plokštę, bet parsivežęs namo joje pastebėjo K defektų. Laimei, visi defektai yra nedideli – laikykite, kad jie yra taškai, kuriuose stiklas yra nežymiai įtrūkęs.\n\nArtūras nenori naudoti nekokybiško stiklo, todėl planuoja iš turimos plokštės išrėžti kuo įmanoma didesnio ploto stačiakampį be defektų.\n\nArtūras turi prietaisą, į kurį gali įstatyti stiklo plokštę ir daryti rėžius, lygiagrečius jos kraštinėms, t. y. horizontalius ir vertikalius. Prietaisas yra toks tikslus, kad rėžiai gali eiti per defektus ir dėl to stiklas nesuskilinės.\n\nApskaičiuokite, kokio didžiausio ploto stačiakampį be defektų Artūras gali išpjauti iš turimos plokštės.\n\nDefektai gali likti išpjauto stačiakampio kraštuose, tačiau išpjauto stačiakampio viduje negali būti nei vieno defekto.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30347","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMantas dalyvauja automobilių lenktynėse. Lenktynių trasą sudaro ratas, o trasos pradžioje stovi šviesoforas.\n\nŠviesoforas kiekvieną T-ąją minutę dega raudonai, visą kitą laiką – žaliai. Jei šviesoforas dega raudonai – Mantas sustoja, jei žaliai – važiuoja toliau.\n\nŽinodami, kad nuo stovėjimo aikštelės iki starto Mantas nuvažiuos per M minučių, o pilną ratą įveiks per N minučių (žr. iliustraciją), apskaičiuokite, kiek pilnų ratų Mantas apvažiuos iki pirmo sustojimo prie šviesoforo.\n\n\n\nAtkreipkite dėmesį – šviesoforo laikas skaičiuojamas nuo tada, kai Mantas pajuda iš aikštelės.\n\nSužinokite, ar Mantui teks sustoti prie šviesoforo, ir jei taip, kiek pilnų ratų jis apvažiuos iki pirmo sustojimo.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30380","content":"문제\n\nAsphalt is Little L's favorite game. Different from other amateur players, Little L is good at studying game design while playing games, so he has a unique game strategy.\n\nLittle L plans to play \nn\n$n$ games, each game uses a map, and Little L will choose a car to complete the game on this map.\n\nLittle L has three racing cars, represented by capital letters \nA\n$A$, \nB\n$B$, and \nC\n$C$. There are four types of maps, represented by lowercase letters \nx\n$x$, \na\n$a$, \nb\n$b$, and \nc\n$c$.\n\nAmong them, car \nA\n$A$ is not suitable for use on map \na\n$a$, car \nB\n$B$ is not suitable for use on map \nb\n$b$, car \nC\n$C$ is not suitable for use on map \nc\n$c$, and map \nx\n$x$ is suitable for all cars to participate in.\n\nThere aren't many maps available for all racers, only \nd\n$d$ maps at most.\n\n \nn\n$n$ The map of the game can be described by a string composed of lowercase letters. For example: $S=xaabxcbc \nmeansthatlittleLplanstoplay\n$ means that little L plans to play $8\ngames,inwhichthemaptypeofthe\n$ games, in which the map type of the $1\nand\n$ and $5\ngamesis\n$ games is $x\n,suitableforallracingcars,the\n$, suitable for all racing cars, the $2\nand\n$ and $3\nmapsare\n$ maps are $a\n,notsuitableforracingcars\n$, not suitable for racing cars $A\n,andthe\n$, and the $4\nand\n$ and $7\ngamesare\n$ games are $b\n,notsuitableforracingcars\n$, not suitable for racing cars $B \n,\n$, $6\nand\n$ and $8\nmapsare\n$ maps are $c\n,notsuitableforracing\n$, not suitable for racing $C$.\n\nLittle L has some special requirements for the game. These requirements can be described by the quaternion \n(i,hi,j,hj)\n$(i, h_i, j, h_j)$, which means that if the car with the model \nhi\n$h_i$ is used in the \ni\n$i$ game, then the car with the model \nhj\n$h_j$ should be used in the \nj\n$j$ game.\n\nCan you help little L choose the car to use for each game? If there are multiple schemes, output any one of them.\n\nIf there is no solution, output -1."},{"problemId":"30294","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou have placed glues on each cells of an N×M$N\\times M$ grid to create a rectangular flea trap. Each glue has a weak direction; if a flea on the glue jumps towards its weak direction, the flea can jump out of the glue.\n\nMore precisely, each glue is represented by U, D, L, or R, meaning up, down, left, and right respectively.\n\nFleas can jump at most K$K$ cells in one jump. If a flea jumps out of the rectangle, we say that the flea has escaped.\n\nYou became curious about how effective your trap is. If a flea that is placed on a cell of the trap can escape after consecutive jumps, we call the cell an escapable cell. Your task is to count the number of escapable cells.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30361","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t N$N$ crystals are aligned in a row. However, some of them may be phantoms.\n\nJun counted the number of real crystals from l$l$-th to r$r$-th (closed interval) for every l$l$, r$r$ (1≤l≤r≤N$1 \\le l \\le r \\le N$) pair and recorded their evenness.\n\nHis N(N+1)2$\\frac{N(N+1)}{2}$ records show that there were k$k$ intervals that contained an odd number of real crystals. How many possible crystal alignments are there? Answer the remainder divided by 998244353$998244353$.\n\nNote that if there is i$i$ such that the i$i$-th crystal from the left is real on one side and phantom on the other, the two alignments are considered different.\n\nYou are given T$T$ of the above problems. Answer each of them.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30317","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou were just about to go on a nice long holiday to the south, but as always, the trains are delayed. This time, a cargo train derailed in the Gotthard Base Tunnel through the Alps, completely taking one of the two tubes out of service for several months. Luckily, after some initial repairs, the other tube is in service again for cargo traffic.\n\nSince it is now only a one-track connection, multiple trains in the same direction can closely follow each other, but trains in opposite directions can not pass each other. This also means that trains going north can only enter once all trains going south have exited the tunnel, and vice versa.\n\nToday, there are n\\(n\\) cargo trains that want to drive through the tunnel. Each train arrives at one of the ends at a given time, and takes exactly d\\(d\\) minutes to drive through the tunnel at a constant speed.\n\nEven though this is not your responsibility, you decide to make a schedule for today's trains. You will decide for each train how long is has to wait at its entrance portal before it can enter the tunnel. Your goal is to minimize the sum of waiting times at the entrance portals over all trains.\n\nFor simplicity, you assume that trains are short compared to the length of the tunnel and can be approximated by points travelling over a line segment.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30337","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tŠvenčių proga Lino šeima nupirko daug mandarinų. Linas labai mėgsta mandarinus, tačiau per vieną dieną jis daugiausiai gali suvalgyti K mandarinų. Linas žino, kad mandarinai po kurio laiko sugenda, ir jis nustatė, kiek dienų kiekvienas mandarinas bus tinkamas vartoti.\n\nRaskite, kiek daugiausiai mandarinų gali suvalgyti Linas prieš jiems sugendant.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30348","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tVilius steigia picų išvežiojimo į namus verslą. Liko sugalvoti ir įsigyti lengvai įsimenamą telefono numerį. Vilius turi galimų įsigyti telefono numerių sąrašą.\n\nJis mano, kad telefono numeris yra įsimintinas tik jei visi skaitmenys jame yra vienodi (pavyzdžiui, 2222), arba jeigu skaitmenys griežtai didėja (pavyzdžiui, 23679).\n\nDuotame galimų telefono numerių sąraše suraskite įsimintiną numerį.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30381","content":"문제\n\nLittle N is the administrator of the vegetable warehouse and is responsible for designing the sales plan of vegetables.\n\nIn the vegetable warehouse, there are \nn\n$n$ kinds of vegetables stored in total. Little N needs to design a reasonable sales plan based on the characteristics of different vegetables and comprehensively consider various factors to obtain the most benefits.\n\nWhen calculating the income from selling vegetables, for every unit of \ni\n$i$th vegetable sold, you can get \nai\n$a_i$ income.\n\nIn particular, since the policy encourages merchants to conduct diversified sales, when selling the \ni\n$i$th vegetable for the first time, they will also get an additional income of \nsi\n$s_i$.\n\nAt the start of the operation, the stock of vegetable \ni\n$i$ is \nci\n$c_i$ units.\n\nHowever, the preservation time of vegetables is very limited, once they go bad, they cannot be sold, but the smart little N has calculated the time for each unit of vegetables to go bad: for the \ni\n$i$th vegetable, there is a freshness value \nxi\n$x_i$, and there will be \nxi\n$x_i$ units of vegetables going bad at the end of each day, until all vegetables go bad. (Note: The spoilage time of each unit of vegetables is fixed and does not change with sales)\n\nFormally: for all positive integers \nd\n$d$ satisfying the condition \nd×xi≤ci\n$d\\times x_i \\leq c_i$, \nxi\n$x_i$ units of vegetables will spoil at the end of \nd\n$d$ day.\n\nIn particular, if \n(d−1)×xi≤ci<d×xi\n$(d - 1)\\times x_i \\leq c_i < d\\times x_i$ , then \nci−(d−1)×xi\n$c_i - (d - 1)\\times x_i$ units of vegetables will spoil by the end of \nd\n$d$ days.\n\nNote that when \nxi=0\n$x_i = 0$, it means that this vegetable will not go bad.\n\nAt the same time, the total amount of vegetables sold every day is also limited, and cannot exceed \nm\n$m$ units at most.\n\nNow, Little N has \nk\n$k$ query. Each query is of the form: Given \npj\n$p_j$, if you need to sell for \npj\n$p_j$ days, what is the maximum profit you can get?"},{"problemId":"30318","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t번개의 신 우제는 Treewidth가 2 이하인 무방향 연결 그래프를 가지고 있다. 임의의 두 정점을 직접 잇는 간선은 최대 하나이며, 모든 간선은 서로 다른 정점을 잇고, 각 간선에는 양의 정수 가중치가 붙어 있다. 그래프의 각 정점은 1$1$ 이상 N$N$ 이하의 서로 다른 정수로 표현된다.\n\n dist(i,j)$dist(i, j)$ 를 i$i$ 번 정점과 j$j$ 번 정점 간의 최단 경로 길이라고 하자. 우제가 가지고 있는 그래프가 주어질 때, ∑1≤i<j≤Ndist(i,j)$\\sum_{1 \\le i < j \\le N} dist(i, j)$ 를 출력하라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30319","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn the last cycle, the domestic team selection process of ICPC Taoyuan Regional Contest chooses teams from preliminary contests according to the following categories.\n\n\n\tCategory 1: Among the teams that participated in the \"ICPC Taiwan Online Programming Contest\" (TOPC) and solved one problem, the best team from each university will be selected. This category is limited to 30 teams.\n\tCategory 2: The top 40 teams in the \"National Collegiate Programming Contest\" will be selected.\n\tCategory 3: \"Taiwan Private University Programming Contest\" qualifies 10 best teams, but no more than two teams per university.\n\tCategory 4: \"Taiwan Technology University Programming Contest\" qualifies 10 best teams, but no more than two teams per university.\n\tCategory 5: 10 teams will be qualified for their CPE performance, but no more than one team from each university. Such teams must participate in TOPC and solve at least one problem.\n\tCategory 6: If a team of the above five categories resigns for any reason and there are other teams from the same university participating in TOPC. The replacement of the resigning team will be selected from the TOPC participants from the same university according to their performance.\n\tCategory 7: If the total number of teams in the above six categories is less than 100, the organizer will invite the top teams of TOPC to participate in the regional contest. The invited teams must be in the top half of the final standings.\n\tCategory 8: Free to participate, priority will be given to universities not selected in the above categories and will be ranked according to the order of registration.\n\n\nThe domestic team selection rule of ICPC Taoyuan Regional Contest has a major change in the 2023-2024 cycle. The organizer added a note, \"If the list of selected teams cannot be submitted 35 days prior to the ICPC Taoyuan Regional Contest, the category will be subject to suspension for that particular year.\" This change was made to deal with the fact that some preliminaries were held to late. Typically, it takes about five weeks to complete the logistic operations of an ICPC regional contest. Therefore, all preliminaries were held before the end of Octobor, and the regional contests were held in November in the past few years.\n\nThe 2023 ICPC Taoyuan Regional Contest will be held from Octobor 21 to Octobor 23, 2023. Consequently, some categories will be suspended if the corresponding preliminaries are still held in late September or Octobor as usual. As the director of TOPC, you must be wise enough to choose a proper date to hold TOPC. If the categories related to TOPC are suspended, there will be much less domestic teams competing in the 2023 ICPC Taoyuan Regional Contest. A contest date is too late for TOPC if it is not at least 35 days prior to Octobor 21, 2023. Please write a program to determine whether a tentative contest date is too late for TOPC.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30338","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tSniego karalienė turi labai daug pareigų. Viena iš jų – snaigių kūrimas.\n\nSukurti snaigę yra gana paprasta: tereikia paimti languotą kvadratinį sniego lakštą, sudarytą iš N stulpelių ir N eilučių, ir iš jo iškirpti keletą kvadratėlių. Kirpti bet kurių kvadratėlių nesinori, nes gauta snaigė gali būti nesimetriška.\n\nKad būtų paprasčiau gauti simetrišką snaigę, prieš iškirpdama kvadratėlius Sniego karalienė vieną, du arba tris kartus perlenkia sniego lakštą (žr. pav. 1):\n\n\n\tPirmuoju lenkimu ji užlenkia apatinę kvadratinio lakšto pusę ant viršutinės – taip gaunamas stačiakampis;\n\tAntruoju lenkimu ji užlenkia kairiąją stačiakampio pusę ant dešiniosios – taip vėl gaunamas kvadratas, tik šįkart mažesnis;\n\tTrečiuoju lenkimu ji perlenkia mažąjį kvadratą per jo įstrižainę taip, kad šis lenkimas eitų per pradinio lakšto centrą (išlanksčius lakštą, šis lenkimas sudarys × formos figūrą).\n\n\n\n\n1 pav. Galimi lenkimai\n\n\n\n2 pav. Keletas galimų vieno kvadratėlio iškirpimų\n\nTuomet iš gautos sulankstytos figūros Sniego karalienė iškerpa kelis kvadratėlius (jei matoma tik kvadratėlio dalis – ji visa nukerpama, žr. pav. 2) ir išlanksto figūrą. Laikykite, kad iškerpamas tik kvadratėlių vidus, tad figūra nesubyra.\n\nTokiu būdu Sniego karalienė paruošė jau ne vieną snaigę. Deja, šiais metais šalčiai ją užklupo netikėtai, ir papūtus stipriam vėjui užšalo dalis iškirptų kvadratėlių. Nenorėdama karpyti iš naujo, Sniego karalienė nusprendė pabandyti atkurti sugadintas snaiges.\n\nParašykite programą, kuri atkurtų galimą pradinę snaigę, turinčią kuo mažiau iškirptų kvadratėlių.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30339","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tPo šaltos žiemos, ištirpus ledui, varlių šeimynėlė išsirengė prie kūdros. Kūdra neteko nusivilti – vanduo nešaltas ir virš kūdros dūzgia daugybė musių. Tad visos mažos varlytės buvo laimingos galėdamos visą dieną taškytis vandenyje. \n\nAtėjus vakarui, varlyčių Mamai teko sunkus darbas – sukviesti visas varlytes į krantą. Jos kvietimui pakluso visos varliukės, išskyrus mažiausiąją.\n\nLelijų lapai auga tiesia linija ir yra sunumeruoti nuo 0 nuo kūdros link kranto. Mažiausioji varlytė tupi ant lapo, kurio numeris 0. Jos maksimalus šuolio ilgis yra L, t. y. tupėdama ant lapo, kurio numeris yra k, varlytė gali nušokti ant lapų, kurių numeriai yra k + 1, k + 2, . . . , k + L.\n\nVirš kiekvieno lelijos lapo zvimbia tam tikras musyčių skaičius. Užsispyrusi varlytė sutinka judėti link kranto tik jei galės sugauti visas musytes, zvimbiančias aplink kiekvieną lapą, ant kurio ji užšoks pakeliui į krantą.\n\nVarlytė šokinėja labai greitai, todėl šokinėjimui sugaišto laiko neskaičiuokime. Tačiau sugauti ir praryti vieną musytę užtrunka vieną minutę.\n\n\n\n1 pav. Keli galimi varlytės šokinėjimo scenarijai\n\nPanagrinėkime pavyzdį, kai kūdroje yra 5 lelijos (N = 5).\n\nMūsų užsispyrėlė tupi ant lelijos, kurios numeris yra 0, ir gali nušokti iki 2 lelijų tolyn (L = 2). Virš pirmosios lelijos skraido 1 musė, virš antrosios – 3, virš trečiosios – 3, o virš ketvirtosios – 2 musės (žr. pav. 1).\n\nPaveikslėlyje pavaizduoti du būdai, kaip varlytė gali pasiekti krantą.\n\nVienu atveju varlytė šoka ant lelijos, kurios numeris 2, ir randa 3 musytes. Joms pagauti sugaiš 3 minutes. Tuomet ji šoka ant lelijos, kurios numeris 4, ten randa dvi musytes, o tuomet trečiu šuoliu pasiekia krantą. Taigi, ji krantą pasiekia per 5 minutes.\n\nKitu atveju varlytė šoka ant pirmos lelijos, randa 1 musytę, tuomet šoka ant trečios lelijos ir sugauna 3 musytes, ir paskutiniu šuoliu pasiekia krantą. Šiuo atveju ji krantą pasiekia per 4 minutes.\n\nRaskite šokinėjimo kelią, kuris leistų užsispyrėlei atsirasti ant kranto per trumpiausią įmanomą laiką.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30295","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThere are N$N$ adorable geese in KAIST campus. To celebrate these lovely creatures, KAIST will host “KAIST Geese Show” for students. The main contents of the show is simply feeding the geese and enjoying their delightful reactions.\n\nYou have the honor of being chosen as the representative feeder. Your mission is to make the show as cute as possible by feeding the geese optimally. The i$i$-th goose approaches you at time Ti$T_i$ and will eagerly wait for food for a duration of L$L$. More precisely, the i$i$-th goose is available to eat food during the time interval Ti≤x≤Ti+L$T_i\\le x\\le T_i+L$. After time Ti+L$T_i+L$, the goose will lose interest and leave.\n\nThe i$i$-th goose has speed level of Ai$A_i$ and cuteness of Ci$C_i$. If you throw a food to the awaiting geese at any time, the fastest goose (highest Ai$A_i$) among those will take it. Then the goose will proudly display its cuteness for all to see, adding its cuteness value to the overall cuteness score of the show. After consuming a food, the goose will satisfy and leave. Note that there are no two geese having same speed level. Also, there can be some noisy goose, so Ci$C_i$ may be negative.\n\nYou have the freedom to throw as much food as you desire, with no constraints on frequency or quantity. Your goal is to determine the maximum cuteness score achievable for the show.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30349","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tUž stačiakampės šaudymo angos stovi stačiakampio formos taikinys. Abu stačiakampiai sudalinti į 1 × 1 dydžio langelius.\n\nTiesė, einanti per apatinius kairiuosius stačiakampių kampus, yra statmena jų plokštumoms, bei apatinės abiejų stačiakampių kraštinės yra lygiagrečios.\n\nSusitarsime, kad abiejų stačiakampių apatinio kairiojo langelio koordinatės yra (0, 0).\n\nomas gali paleisti strėlę iš bet kurio angos langelio (Xp, Yp). Deja, vėjas nupūs strėlę į šoną per (X, Y) langelių. T. y. iššovus iš langelio (Xp, Yp), strėlė pataikys į langelį (Xp + X, Yp + Y ).\n\nReikia pataikyti strėlę į taikinio langelį (0, 0). Jeigu strėlė pataiko į taikinio langelį (TX, TY), yra skaičiuojami baudos taškai B = TX + TY.\n\nĮmanoma, kad strėlė apskritai nepataikys į taikinį.\n\nPadėkite Adomui suskaičiuoti, ar jis gali apskritai pataikyti į taikinį ir jei taip – kiek mažiausiai baudos taškų jis gali gauti.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30362","content":"문제\n\nYou construct a permutation \nP=(P1,P2,…,P105)\n$P = (P_1, P_2, \\dots , P_{10^5})$ of length \n105\n$10^5$ in the following way.\n\nThe number line has points \n1,2,…,105\n$1, 2, \\dots, 10^5$. The distance between points \ni\n$i$ and \nj\n$j$ is \n|i−j|\n$|i-j|$. Also, there is a sequence \nP\n$P$ that is initially empty. Repeat the following operations from any point until the length of \nP\n$P$ is \n105\n$10^5$.\n\nLet \nx\n$x$ be the number corresponding to the current point. if \nx\n$x$ is not in \nP\n$P$, add \nx\n$x$ to the end of \nP\n$P$. Next, move to one of the points whose distance is less than or equal to \nK\n$K$.\n\nAnswer the following \nQ\n$Q$ queries.\n\nYou are given integers \nN\n$N$, \nL\n$L$, \nR\n$R$. Let the sequence created by removing elements larger than \nN\n$N$ from \nP\n$P$ be \nP′=(P1′,P2′,…,PN′)\n$P' = (P'_1, P'_2, \\dots , P'_N)$. Among the possible permutations of \nP′\n$P'$, answer the number of permutations in which \nP1′\n$P'_1$ is greater than or equal to \nL\n$L$ and less than or equal to \nR\n$R$ with \n998244353\n$998244353$."},{"problemId":"30382","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThere are n$n$ clones of Little P on the plane. Define the area occupied by a group of instances as the smallest convex polygon that covers this group of instances. Little P has limited abilities, and some clones will disappear every moment. But before the next moment, Little P will use the magic technique to make these disappeared clones reappear in their original positions.\n\nGiven m$m$ queries, after each moment when the clone disappears, what is the area occupied by the remaining clone?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30350","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tVilius gyvena kaime, o į darbą mieste važiuoja dviračiu. Šiandien lyja, todėl Vilius nori atvykti į darbą kuo mažiau sušlapęs.\n\nĮ darbą Vilius važiuoja N kilometrų. Lietus permainingas, tad kiekvieną važiavimo kilometrą apibūdina sušlapimo stiprumas vi. Kuo vi didesnis, tuo daugiau Vilius sušlaps. Viliaus sušlapimas atvykus į darbą lygus visų N kilometrų sušlapimo stiprumų sumai.\n\nKiekvieno kilometro pradžioje yra priemiestinio autobuso stotelė, kurioje Vilius gali įlipti į autobusą su dviračiu ir pavažiuoti vieną ar kelias stoteles, o toliau vėl važiuoti dviračiu, po to vėl įlipti į autobusą ir pan. Atstumas tarp gretimų stotelių – vienas kilometras. Suprantama, važiuodamas autobusu Vilius nesušlampa.\n\nVilius šiai dienai iš anksto nusipirko K bilietų važiavimui autobusu su dviračiu. Vienas bilietas galioja lygiai vienai stotelei (vienam kilometrui), todėl Vilius pažymi bilietą kiekvienoje stotelėje, jeigu nusprendžia važiuoti autobusu toliau.\n\nNustatykite, kuriose stotelėse Vilius turi važiuoti autobusu ir pažymėti bilietus, kad sušlaptų kuo mažiau.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30296","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are given a rooted tree consisting of N$N$ vertices. Its root is vertex 1$1$. Let's consider about a heavy-light decomposition of a tree, where each edge is either a heavy edge or a light edge. For each vertex, among all edges connecting the vertex with its children, at most one edge can be a heavy edge.\n\nIn this problem, we have a multiset of simple paths T$T$, which is initially empty. We will assign each edge to be a heavy edge or a light edge according to T$T$, satisfying the condition above.\n\nEach time a update is done on T$T$, your task is to find an assignment of edges that minimizes the sum of the number of light edges of all paths in T$T$.\n\n Q$Q$ updates are given in total. Each query consists of three integers s$s$, e$e$, and k$k$, meaning k$k$ copies of the simple path from s$s$ to e$e$ are inserted into T$T$. Find the minimum sum of the number of light edges of all paths in T$T$ after each update.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30383","content":"문제\n\nIn this problem, the mode of a sequence is the number that appears strictly more than half the times in the sequence. Please refer to this definition in the problem.\n\nInitially, \nn\n$n$ positive integer sequences of different lengths are given, numbered from \n1\n$1$ to \nn\n$n$, and the sequences can be empty. These \nn\n$n$ sequences are considered to exist, and the sequences corresponding to other numbers are considered to be non-existent.\n\nThere are \nq\n$q$ operations, and operations are of the following types:\n\n \n1 x y\n$1\\ x\\ y$: Insert the number \ny\n$y$ at the end of sequence \nx\n$x$. It is guaranteed that sequence \nx\n$x$ exists and \n1≤x,y≤n+q\n$1 \\le x, y \\le n + q$.\n \n2 x\n$2\\ x$: Delete the number at the end of sequence \nx\n$x$. It is guaranteed that sequence \nx\n$x$ exists, is not empty, and \n1≤x≤n+q\n$1 \\le x \\le n + q$.\n \n3 m x1 x2 ... xm\n$3\\ m\\ x_1\\ x_2\\ ...\\ x_m$: Concatenate sequences \nx1,x2,…,xm\n$x_1, x_2, \\ldots, x_m$ to get a new sequence and return its mode. Return -1 if the mode does not exist. The data guarantees that for any \n1≤i≤m\n$1 \\le i \\le m$ the sequence numbered \nxi\n$x_i$ still exists, \n1≤xi≤n+q\n$1 \\le x_i \\le n + q$, and the concatenated sequence is non-empty. There is no guarantee that \nxi\n$x_i$ are distinct. The concatenation done here won't affect future operations.\n \n4 x1 x2 x3\n$4\\ x_1\\ x_2\\ x_3$: Create a new sequence numbered \nx3\n$x_3$, which is the concatenation of sequence \nx1\n$x_1$ and sequence \nx2\n$x_2$. Then, delete the sequences numbered \nx1\n$x_1$ and \nx2\n$x_2$. After this operation, sequence \nx3\n$x_3$ is considered to exist, and the sequences \nx1\n$x_1$ and \nx2\n$x_2$ are considered to be non-existent and will not be used again in subsequent operations. It is guaranteed that \n1≤x1,x2,x3≤n+q\n$1 \\le x_1, x_2, x_3 \\le n + q$, \nx1≠x1\n$x_1 \\ne x_1$, the sequences \nx1\n$x_1$ and \nx2\n$x_2$ existed before the operation, and no operation used the sequence numbered \nx3\n$x_3$ before the operation."},{"problemId":"30297","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA permutation is called irreducible if none of its prefixes forms a permutation, except the permutation itself. For example, [2,3,1]$[2,3,1]$ and [4,1,2,3]$[4,1,2,3]$ are irreducible while [2,1,3]$[2,1,3]$ and [1,3,2]$[1,3,2]$ are not.\n\nYou are given a permutation P$P$ of length N$N$. In one operation, you can choose any two adjacent indices and swap their values.\n\nFind the minimum number, and the corresponding sequence, of operations to transform P$P$ into an irreducible permutation. It can be shown that you can always make given permutation irreducible.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30363","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe rule of this game is given as follows.\n\n\n\tThere is a knight and a chessboard with H$H$ rows and W$W$ columns. The square at the i$i$-th row from the top and the j$j$-th column from the left is called square (i,j)$(i, j)$. Initially, the knight is placed on square (x,y)$(x,y)$.\n\tAlice and Bob alternately take the following action, starting with Alice.\n\tMove the knight onto one of the unvisited squares according to the knight's movement.\n\tKnights can move from (x1,y1)$(x_1,y_1)$to (x2,y2)$(x_2, y_2)$ if and only if (x1−x2)2+(y1−y2)2$(x_1 - x_2)^2 + (y_1 - y_2)^2$ is 5$5$.\n\tThe player who cannot move the knight is the loser.\n\n\nWhen both players have done their best, determine whether Alice or Bob will win. Answer for T$T$ test cases.\n\nThe unvisited square is defined as follows.\n\n\n\tA square on the board that the knight has never visited since the beginning of the game.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30400","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이안이는 팰린드롬을 싫어한다. 팰린드롬인 단어를 보면 당장 그 단어를 지워야 할 정도로 팰린드롬을 매우 싫어한다. 팰린드롬은 'level', 'bob'과 같이 양쪽으로 읽었을 때 동일하게 읽히는 단어이다.\n\n이제 이안이는 팰린드롬이 아닌 단어더라도 부분문자열 중 팰린드롬이 있기만 해도 그 단어를 지우고 싶을 정도가 되었다. 하지만 그렇게 하면 남는 단어가 거의 없을 것이다. 대신 글자 몇 개를 부숴 길이가 M$M$ 이상인 팰린드롬인 부분문자열이 없도록 만들려고 한다.\n\n글자를 부수면 부서진 글자가 포함된 문자열은 팰린드롬이 될 수 없다. 예를 들어 abcba에서 가운데 c를 부수면 ab#ba가 되고, 이는 팰린드롬이 아니다.\n\nbanana는 부분문자열 중 anana, ana, nan이 팰린드롬이므로 글자를 부숴야 한다. M=2$M = 2$인 경우 두 번째 a를 부수면 ban#na와 같이 길이가 2$2$ 이상인 팰린드롬인 부분문자열이 없도록 할 수 있다.\n\n글자를 부수는 건 매우 귀찮은 일이다. 이안이를 도와 부숴야 하는 글자 개수의 최솟값을 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30420","content":"문제\n\nEight years ago, Little B saw an osmanthus tree, which is a tree \nT\n$T$ with \nn\n$n$ vertices, where the parent vertex of any non-root vertex in \nT\n$T$ has a smaller label than its own. Given an integer \nk\n$k$, a rooted tree \nT′\n$T'$ with \n(n+m)\n$(n + m)$ vertices is prosperous if and only if the following conditions are met:\n\nFor any \n(i,j)\n$(i, j)$ with \n1≤i,j≤n\n$1 \\leq i, j \\leq n$, the lowest common ancestor of vertices \ni\n$i$ and \nj\n$j$ in \nT\n$T$ and \nT′\n$T'$ has the same label.\nFor any \n(i,j)\n$(i, j)$ with \n1≤i,j≤n+m\n$1 \\leq i, j \\leq n + m$, the label of the lowest common ancestor of vertices \ni\n$i$ and \nj\n$j$ in \nT′\n$T'$ does not exceed \nmax(i,j)+k\n$\\max(i, j) + k$.\n\nNote that all vertices in the trees are labeled starting from \n1\n$1$, and the label of the root vertex is \n1\n$1$. \nT′\n$T'$ does not need to satisfy the condition that the parent vertex of any non-root vertex has a smaller label than its own.\n\nLittle B wants to know how many trees with \n(n+m)\n$(n + m)$ vertices are prosperous. Two trees are considered different if there exists a vertex whose parent vertex is different in the two trees. Output the number of solutions modulo \n(109+7)\n$(10^9 + 7)$."},{"problemId":"30364","content":"문제\n\nYou are given a weighted directed graph of \nN\n$N$ vertices and \nM\n$M$ edges, with vertices numbered \n1\n$1$ to \nN\n$N$ and edges numbered \n1\n$1$ to \nM\n$M$. The \ni\n$i$-th (\n1≤i≤M\n$1 \\le i \\le M$) edge connects from vertex \nui\n$u_i$ to vertex \nvi\n$v_i$ (\nui<vi\n$u_i < v_i$), and the weight of the edge is \nwi\n$w_i$.\n\nAlso, \nK\n$K$ triplets of integers are given. The \ni\n$i$-th (\n1≤i≤K\n$1 \\le i \\le K$) triplet is \n(ai,bi,ci)\n$(a_i, b_i, c_i)$ (\nai<bi<ci\n$a_i < b_i < c_i$).\n\nYou start at vertex \n1\n$1$ and move to vertex \nN\n$N$ by repeatedly moving along an edge.\n\nIn addition, for all \ni\n$i$ (\n1≤i≤K\n$1 \\le i \\le K$), if you move from vertex \nai\n$a_i$ to vertex \nbi\n$b_i$ directly, we must next move to a vertex other than vertex \nci\n$c_i$.\n\nJudge whether it is possible to reach vertex \nN\n$N$. If it is possible to reach, also calculate the minimum sum of the weights of the edges you pass through."},{"problemId":"30298","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are given n$n$ distinct points on the two dimensional plane.\n\nWe define the distance between two points P=(x1,y1)$P=(x_1, y_1)$ and Q=(x2,y2)$Q=(x_2, y_2)$ as d(P,Q)=|x1−x2|+|y1−y2|$d(P, Q)=|x_1-x_2|+|y_1-y_2|$.\n\nLet's say that three distinct points U,V,W$U, V, W$ form a good triangle if there exists a point T$T$ such that d(U,T)=d(V,T)=d(W,T)$d(U, T)=d(V, T)=d(W, T)$. Note that T$T$ does not have to be a lattice point.\n\nFind the number of good triangles that can be formed by the given points.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30299","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA 'Queue' is a linear data structure that can either\n\n\n\tInsert an element at the back (push)\n\tDelete an element at the front (pop).\n\n\nHowever we misimplemented the pop function; for each pop query, we simultaneously delete N$N$ certain elements from different indices, instead of deleting only one element at the front.\n\nSpecifically, there are N$N$ distinct locations where our pop function deletes its elements, noted by A1$A_1$, A2$A_2$, ..., AN$A_N$. The queue is indexed from 1$1$ starting at the front. After deletion, the indices are renamed with the same rule described above.\n\nBut we are curious what the misimplemented queue will look like after D$D$ pop operations.\n\nIn order to conduct an experiment, we first pushed infinitely many integers in the queue starting from 1. So the initial queue will look like \"1 2 3 4 5 6 7 8...\".\n\nThen without further push operations, we will pop the queue D$D$ times.\n\nFor example, assume the current queue was \"1 2 3 4 5 6 7 8...\". If we delete the 2nd and 5th element, the queue will change to \"1 3 4 6 7 8 9 10...\". If we do it again, it will be \"1 4 6 8 9 10 11 12...\" and so on.\n\nWe want to process Q$Q$ queries consisting of a single integer x$x$. For each query, we need to calculate the number written in the x$x$th index of the queue after D$D$ pop operations.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30384","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are playing a game called \"Remove Stones\". There are n$n$ piles of stones lined up in a row, the i$i$-th pile has ai$a_i$ stones in it, your task is to remove all the stones through the following operations:\n\n\n\tSelect a pile of stones and remove at least 2$2$ stones;\n\tSelect a contiguous interval [l,r]$[l, r]$ (1≤l≤r≤n$1 \\leq l \\leq r \\leq n$) which satisfies r−l≥2$r - l \\geq 2$ , remove exactly 1 stone from each pile in the interval.\n\n\nYou can perform the above two operations any number of times in any order until you can no longer perform the operations. If you can remove all the stones, you win.\n\nYou have k$k$ stones secretly hidden in the beginning, you must put these stones into a certain pile or in some piles of stones before the game starts. You can choose any configuration of putting in the k$k$ extra stones. For each pile, there is a range that the number of stones in it must lie in, specifically, each ai$a_i$ can be chosen from any integer in the range [li,ri]$[l_i, r_i]$. Find the number of winning configurations modulo (109+7)$(10^9 + 7)$.\n\nTwo configurations are different if and only if there exists at least one i$i$ (1≤i≤n$1 \\leq i \\leq n$) such that ai$a_i$ differs in the two initial configurations. Here, \"initial configurations\" refer to the configuration before putting the k$k$ stones into the piles.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30401","content":"문제\n\n교내의 많은 커플들 탓에 옆구리가 시렸던 창현이는 평소 좋아했던 민준이에게 고백하기로 마음먹었다.\n\n창현이는 민준이가 물질적인 선물을 좋아한다는 것을 알고 있기 때문에 목걸이를 만들어 고백할 때 선물로 주기로 했다. 창현이는 \nN\n$ N $개의 실과 \nN\n$N$개의 구슬로 이루어진 목걸이를 가지고 있다. 또, 창현이의 목걸이는 구슬에 적당히 \n1\n$1$부터 \nN\n$N$까지의 번호를 붙였을 때 \n1≤i,j≤N\n$1 \\le i,j \\le N$이고 \ni≡j±1(modN)\n$i \\equiv j \\pm 1 \\pmod{N}$인 정수 \ni\n$i$, \nj\n$j$에 대해 \ni\n$i$번 구슬과 \nj\n$j$번 구슬은 반드시 하나의 실로 연결되어 있음이 보장된다. 민준이는 화려한 선물을 좋아하기 때문에 창현이는 \nM\n$M$개의 실과 \nM\n$M$개의 구슬을 이용해 목걸이를 꾸미기로 했다.\n\n먼저, 창현이는 30개보다 적은 수의 구슬들을 실로 연결하여 \nN\n$N$개 이하의 장식을 만든다. 창현이는 장식을 만들 때 구슬의 수를 실의 수보다 하나 더 많게 만든다. 장식을 만든 다음 창현이는 장식을 이루는 구슬 중 하나와 원래 목걸이의 구슬 중 하나를 한 개의 실에 연결한다. 창현이는 이 과정을 반복하여 모든 장식을 원래 목걸이에 연결하며, 이때 창현이는 두 개 이상의 장식을 같은 구슬에 연결하지 않고, 장식을 달기 전의 목걸이를 이루는 구슬이 아닌 구슬에 장식을 달지 않는다.\n\n드디어 고백하기로 한 날이 다가왔고 창현이는 목걸이를 가지고 민준이에게 찾아갔다. 하지만, 창현이는 큰 문제를 깨달았다. 민준이가 창현이가 만든 목걸이와 같은 목걸이를 끼고 있었던 것이다. 창현이는 바로 목걸이를 다시 만들기로 했다.\n\n창현이는 새로 만든 목걸이와 전에 만든 목걸이가 같은 목걸이인지 확인하려고 한다. 두 목걸이가 주어졌을 때, 두 목걸이가 같은 것인지 판단하는 프로그램을 작성하라.\n\n두 목걸이가 같다는 것은 아래와 같이 정의한다.\n\n꾸며진 두 목걸이 \nA\n$A$, \nB\n$B$ 가 있다고 하자. \nA\n$A$와 \nB\n$B$ 의 구슬에 적당히 번호를 붙였을 때 임의의 두 번호 \n1≤x,y≤N+M\n$ 1 \\le x, y \\le N+M $, \nx≠y\n$ x \\neq y$에 대해서 \nA\n$A$에서 \nx\n$x$번, \ny\n$y$번 구슬이 하나의 실로 연결되는 것과 \nB\n$B$에서 \nx\n$x$번, \ny\n$y$번 구슬이 하나의 실로 연결되는 것이 필요충분조건이면 목걸이 \nA\n$A$와 \nB\n$B$가 같다고 정의한다."},{"problemId":"30354","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are given integers N$N$ and K$K$. For a positive integer k$k$, f(k)$f(k)$ is defined as follows.\n\n\n\tThe Sum of (Na1)×(a1a2)×⋯×(ak−1ak)$\\binom{N}{a_1} \\times \\binom{a_1}{a_2} \\times \\cdots \\times \\binom{a_{k-1}}{a_k}$ for all integer sequences (a1,a2,…,ak)$(a_1, a_2, \\dots, a_k)$ that satisfy the condition N≥a1≥a2≥⋯≥ak≥0$N \\ge a_1 \\ge a_2 \\ge \\dots \\ge a_k \\ge 0$.\n\n\nAnswer the remainder of ∑k=1Kf(k)$\\sum_{k=1}^{K}{f(k)}$ divided by 998244353$998244353$.\n\nFor each input, solve T$T$ test cases.\n\nNote that (AB)$\\binom{A}{B}$ represents \"the number of ways to select B$B$ distinct items from A$A$ items\" (i.e., the binomial coefficient).\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30421","content":"문제\n\nDepth-first search is a common search algorithm. Using this algorithm, we can obtain a tree \nT\n$T$ from an undirected connected graph \nG=(V,E)\n$G = (V,E)$ with no self-loops nor parallel edges, and a certain starting point \ns\n$s$.\n\nThe algorithm can be described as follows:\n\nSet the stack \nS\n$S$ to be empty, and let \nT=(V,∅)\n$T = (V, \\emptyset)$, which means that the edge set of \nT\n$T$ is initially empty.\nFirst, push the starting point \ns\n$s$ into \nS\n$S$.\nVisit the top vertex \nu\n$u$ of the stack and mark u as \"visited\".\nIf there is a vertex \nv\n$v$ adjacent to u and not yet visited, arbitrarily select one from these vertices and let \n(u,v)\n$(u, v)$ be added to the edge set of \nT\n$T$. Then, push \nv\n$v$ into the stack \nS\n$S$, and go back to step \n3\n$3$. If there is no such vertex, pop \nu\n$u$ out of the stack.\n\nIt can be proved that when \nG\n$G$ is a connected graph, the algorithm will obtain a certain spanning tree \nT\n$T$ of \nG\n$G$. However, the tree \nT\n$T$ obtained by the algorithm may not be unique, depending on the search order, i.e., the vertex selected in step 4. If a specific search order can be chosen so that the tree obtained by the algorithm is exactly \nT\n$T$, then we call \nT\n$T$ an \ns\n$s$-dfs tree of \nG\n$G$ with respect to the starting point \ns\n$s$.\n\nNow, given a tree \nT\n$T$ with \nn\n$n$ vertices labeled from \n1\n$1$ to \nn\n$n$, and an additional \nm\n$m$ edges, we guarantee that these \nm\n$m$ edges are distinct and connect different vertices, and are different from the \nn−1\n$n-1$ tree edges in \nT\n$T$. We call these additional \nm\n$m$ edges non-tree edges. Among these \nn\n$n$ vertices, we specify exactly \nk\n$k$ vertices as special vertices.\n\nNow, you want to know how many ways there are to select a subset of these \nm\n$m$ non-tree edges (you can possibly select none) such that: after the tree edges of \nT\n$T$ and the selected non-tree edges are combined to form a graph \nG\n$G$, there exists a special vertex \ns\n$s$ such that \nT\n$T$ is an \ns\n$s$-dfs tree of \nG\n$G$.\n\nSince the answer may be very large, you only need to output the number of solutions modulo \n(109+7)\n$(10^9+7)$."},{"problemId":"30365","content":"문제\n\nYou are given an integer sequence \nA\n$A$ of length \n2Q−1\n$2Q-1$ and \nQ\n$Q$ intervals \n[Li,Ri)\n$[L_i, R_i)$. Here, \nLi\n$L_i$, \nRi\n$R_i$ satisfy \nLi<Ri\n$L_i < R_i$, and each integer between \n1\n$1$ and \n2Q\n$2Q$ appears once as an end of an interval.\n\nYour goal is to create a set \nS\n$S$ of intervals to satisfy at least one of the following conditions for all \ni=1,2,…,Q\n$i = 1, 2, \\dots, Q$.\n\n \n[Li,Ri)∈S\n$[L_i, R_i) \\in S$ \nThere exists an integer \nx\n$x$ (\nLi<x<Ri\n$L_i < x < R_i$) such that \n[Li,x)∈S\n$[L_i, x) \\in S$ and \n[x,Ri)∈S\n$[x, R_i) \\in S$.\n\nThe cost of the set \nS\n$S$ is defined as follows.\n\nThe sum of \nAl+Al+1+⋯+Ar−1\n$A_l + A_{l+1} + \\dots + A_{r-1}$ for all intervals \n[l,r)\n$[l,r)$ included in \nS\n$S$.\n\nFind the minimum cost of the set that satisfies the condition."},{"problemId":"30385","content":"문제\n\nTHIS IS AN INTERACTIVE PROBLEM\n\nGiven a quintuple \n(T,I,SV,SE,ι)\n$(T, I, S_{V} , S_{E}, \\iota)$ where:\n\n \nT\n$T$ is a rooted tree of n points \nT=(V,E)\n$T = (V, E)$, where \nV\n$V$ is the set of points of \nT\n$T$ and \nE\n$E$ is the edge set of \nT\n$T$. The nodes of the tree are numbered \n1,2,…,n\n$1, 2, \\ldots , n$, where the root node is numbered \n1\n$1$.\n\n \nI\n$I$ is a set, and the elements in the set are called information. There are two different special elements: the UNIT element \nϵ\n$\\epsilon$ and the ILLEGAL element \n⊥\n$\\perp$.\n\nFor general information, it has two attributes: VERTEX SET and EDGE SET. For the special case of the identity element, it only has edge set attribute, while for the illegal information, it does not have either of these two attributes.\n\nFor information \no∈I∖{ϵ,⊥}\n$o \\in I \\setminus \\{\\epsilon, \\perp\\}$ (the difference \nA B\n$A \\ B$ of two sets A, B is defined as \nA B={x∈A∣x∉B}\n$A \\ B = \\{ x \\in A \\mid x \\notin B\\}$), the VERTEX SET of \no\n$o$ is a size two subset of V, denoted \nSV(o)\n$S_{V}(o)$. That is, \nSV(o)⊆V\n$SV(o) \\subseteq V$ and \n|SV(o)|=2\n$|SV(o) |=2$.\n\nFor information \no∈I∖{⊥}\n$o \\in I \\setminus \\{\\perp\\}$, the EDGE SET o is a subset of E, denoted \nSE(o)\n$S_{E}(o)$, such that \nSE(o)⊆E\n$S_{E}(o) \\subseteq E$. Define the edge set of the identity element is empty, that is, \nSE(ϵ)=∅\n$S_E(\\epsilon ) = \\emptyset$.\n\nFor any edge \ne∈E\n$e \\in E$ in the tree, denote \ne=(u,v)\n$e = (u, v)$, there is an information about \ne\n$e$, \nι(e)∈I\n$\\iota(e) \\in I$, which takes its endpoints its VERTEX SET and the edge itself as its EDGE SET, that is, \nSV(ι(e))=u,v\n$S_{V}(\\iota(e)) = {u, v}$, and \nSE(ι(e))=e\n$S_{E}(\\iota(e)) = {e}$.\n\nThere are two ways that information get combined. Denote them as R and C. They have the following properties\n\nFor all \na,b∈I\n$a, b \\in I$, shorthand \nr=R(a,b)\n$r = R(a, b)$, \nc=C(a,b)\n$c = C(a, b)$, such that \nr,c∈I\n$r, c \\in I$.\n\nCombining UNIT with any general information gives the other. That is if \na=ϵ\n$a = \\epsilon$, then \nr=c=b\n$r = c = b$; If \nb=ϵ\n$b = \\epsilon$, then \nr=c=a\n$r = c = a$.\n\nCombining ILLEGAL with ANY information results in illegal information. That is, if \na=⊥\n$a = \\perp$ or If \nb=⊥\n$b = \\perp$, then \nr=c=⊥\n$r = c = \\perp$.\n\nFor the remaining cases, if the intersection of the EDGE SET of the two information is non-empty, or the intersection of the POINT SET of the two information has size that's not 1, the combine results in ILLEGAL. That is, if \nSE(a)∩SE(b)≠∅\n$S_E(a) \\cap S_E(b) \\neq \\emptyset$ or \n|SV(a)∩SV(b)|≠1\n$|S_V (a) \\cap S_V (b)| \\neq 1$, then \nr=c=⊥\n$r = c = \\perp$.\n\nOtherwise, the operations are specified as\n\n \nSE(r)=SE(c)=SE(a)∪SE(b)\n$S_{E}(r) = S_{E}(c) = S_{E}(a) \\cup S_{E}(b)$,\n \nSV(r)=SV(a)\n$S_{V}(r) = S_{V}(a)$,\n \nSV(c)=SV(a)⊕SV(b)\n$S_{V}(c) = S_V(a) \\oplus S_V(b)$.\n\nwhere \n⊕\n$\\oplus$ represents the symmetric difference operation of sets, that is, \nA⊕B=(A∪B)∖(A∩B)\n$A \\oplus B = (A \\cup B) \\setminus (A \\cap B)$.\n\nDefine the on-tree distance of two points in \nT\n$T$ as the number of edges on the tree that a unique simple path traversed by two points as endpoints.\n\nGiven the scoring parameter \nM\n$M$ and \nq\n$q$ queries, each query consisting a vertex \nu\n$u$ of the tree and a non-negative integer \nd\n$d$. Denote \nX\n$X$ to be the set of all vertices in \nT\n$T$ whose distances to \nu\n$u$ in the tree does not exceed \nd\n$d$, and \nY={(a,b)∈E∣a,b∈X}\n$Y = \\{ (a, b) \\in E \\mid a, b \\in X\\}$ to be the set of edges inside \nX\n$X$.\n\nIt can be shown that starting from \nϵ\n$\\epsilon$ and all \nL(e)\n$L(e)$ (\ne∈E\n$e \\in E$), a finite number of R, C calls produces an information \no\n$o$ such that \no≠⊥\n$o \\neq \\perp$ and \nSE(o)=Y\n$S_{E}(o) = Y$. In particular, if \nd=0\n$d = 0$, you the output should be the UNIT element \nϵ\n$\\epsilon$.\n\nIn each set of queries, you need to construct an information \no\n$o$ that satisfies this requirement, subject to the limit that the sum of the calls to \nR\n$R$ and \nC\n$C$ does not exceed \nM\n$M$."},{"problemId":"30402","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t춘배와 나비, 영철은 어느 날 지구에 나타난 UFO에게 감마선을 맞을 뻔했다. 다행히도 감마선은 행복하게 뒹굴고 있던 고양이들 옆에 있던 컴퓨터에 맞았지만, 이로 인해 컴퓨터에 저장된 춘배와 나비, 영철의 소중한 사진들의 픽셀이 모두 섞이는 사태가 발생했다! 더 이상 형체를 알아볼 수 없게 된 사진들을 보며 슬퍼하던 고양이들은 사진 복구로 유명한 전문가에게 사진의 복구를 맡기기로 했다. 자신의 사진을 다른 고양이가 보는 게 싫었던 춘배는 사진 복구를 맡기기 전에 당신에게 사진을 분류해 주는 프로그램을 만들어 달라고 부탁하였다.\n\n프로그램은 주어진 사진이 어떤 고양이의 사진인지 구분해야 한다. 하얀색(w)이 존재한다면 춘배, 검은색(b)이 존재한다면 나비, 회색(g)이 존재한다면 영철의 사진이다. 사진은 고양이(w, b, g) 또는 배경(r, o, y, p)으로 이루어져 있으며 한 사진에 고양이는 무조건 1마리만 나온다.\n\n\n\t\n\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\t\n\t\t\t춘배(w)\n\t\t\t나비(b)\n\t\t\t영철(g)\n\t\t\n\t\n\n\n입력으로 주어진 사진이 어떤 고양이의 사진인지 구분해 주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30422","content":"문제\n\nIn recent years, the commercial development in country A has been rapid, but the domestic road construction has not kept up with the pace, which has clearly become a restriction on people's trade and has caused great concern for the managers.\n\nSpecifically, there are \n2n−1\n$2^n-1$ cities in country A, where city \n1\n$1$ is the capital. For all non-capital cities \ni\n$i$, there is a single one-way road that starts from city \ni\n$i$ and reaches city \n⌊i2⌋\n$\\lfloor \\frac{i}{2}\\rfloor$. For convenience, these roads are called \"first-class roads\", and the city \n⌊i2⌋\n$\\lfloor \\frac{i}{2}\\rfloor$ is called the \"superior city\" of city \ni\n$i$.\n\nIn addition, there are \nm\n$m$ directed roads, where the \ni\n$i$-th road goes from city \nui\n$u_i$ to city \nvi\n$v_i$, and they all have a special property: starting from city \nvi\n$v_i$ and continuously walking along the first-class roads towards the \"superior city\", one can always reach city \nui\n$u_i$. These roads are called \"second-class roads\".\n\nEach road has a corresponding length. Therefore, for any two cities \nx\n$x$ and \ny\n$y$ in country A, one can calculate the minimum value of the sum of the lengths of the roads passed through from city \nx\n$x$ to city \ny\n$y$, and this value is denoted as \ndist(x,y)\n$\\mathrm{dist}(x, y)$. However, due to serious defects in the road construction in country A, it may be impossible to reach city \ny\n$y$ from city \nx\n$x$. For convenience, \ndist(x,y)\n$\\mathrm{dist}(x, y)$ is defined as \n0\n$0$ in this case. At the same time, a city does not need to pass through any road to reach itself, so \ndist(x,x)\n$\\mathrm{dist}(x, x)$ is defined as\n0\n$ 0$.\n\nNow, the managers hope to calculate these \ndist(x,y)\n$\\mathrm{dist}(x, y)$ values in order to measure the convenience of people's trade. However, since there are too many cities in country A, listing all these values one by one is too time-consuming. Therefore, the managers only hope to find the sum of all \ndist(x,y)\n$\\mathrm{dist}(x, y)$ values, that is, \n\n\n\n\n∑i=12n−1∑y=12n−1dist(x,y)\n$\\sum\\limits_{i=1}^{2^n-1}\\sum\\limits_{y=1}^{2^n-1}\\mathrm{dist}(x, y)$, and they hope that you can help.\n\nSince the answer may be very large, you only need to output the answer modulo \n998244353\n$998244353$."},{"problemId":"30355","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThis country has a medicine for immortality. Alice got X+Y+Z$X + Y + Z$ bottles from the Hatter.\n\n X$X$ bottles contain elixir. If Alice drinks it, she will immediately become immortal.\n\n Y$Y$ bottles contain mercury, and each has a different toxicity. If she drinks the i$i$-th bottle, the following event i$i$ will occur after K+i−0.5$K + i - 0.5$ days.\n\n\n\tEvent i$i$: Alice will immediately die if she has not drunk the elixir before event i$i$. If she has drunk the elixir, she won't die.\n\n\nThe remaining Z$Z$ bottles contain yogurt. Nothing will happen when Alice drinks it.\n\nAt the same time every morning, Alice chooses one non-empty bottle with equal probability and drinks it. If all bottles are empty, she does nothing.\n\nAnswer the probability that Alice will be alive 101010$10^{10^10}$ days after the first day she starts drinking bottles. Note that Alice won't die other than events.\n\nThe probability can be expressed as PQ$\\frac{P}{Q}$ using coprime integers P$P$ and Q$Q$. Output a non-negative integer R$R$ less than 998244353$998244353$ such that  R×Q≡P(mod998244353)$R \\times Q \\equiv P \\pmod {998244353}$. It can be proven that the probability is a rational number, and R$R$ is uniquely determined under the conditions of this problem.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30423","content":"문제\n\nLittle Y is a college student who is currently doing researches related to strings. Little Y learned about the following definitions regarding strings:\n\nGiven a string \ns[1:n]\n$s[1 : n]$ of length \nn\n$n$, we define its substring \ns[l:r](1≤l≤r≤n)\n$s[l : r] (1 \\leq l \\leq r \\leq n)$ as the new string obtained by selecting \ns[l],s[l+1],…,s[r]\n$s[l], s[l + 1], \\dots , s[r]$ in order and concatenating them.\nGiven a string \ns[1:n]\n$s[1 : n]$ of length \nn\n$n$, we define its reversed result \nR(s)\n$R(s)$ as the string obtained by concatenating \ns[n],s[n−1],…,s[1]\n$s[n], s[n - 1], \\dots , s[1]$ in order, which is the string obtained by reversing the original string.\nGiven two strings \na[1:n]\n$a[1 : n]$ and \nb[1:n]\n$b[1 : n]$ of equal length \nn\n$n$, we define \na\n$a$ to be lexicographically smaller than \nb\n$b$ if and only if there exists \n1≤i≤n\n$1 \\leq i \\leq n$ such that for any \n1≤j<i,a[j]=b[j]\n$1 \\leq j < i, a[j] = b[j]$, and \na[i]<b[i]\n$a[i] < b[i]$.\n\nAfter understanding the above definitions, Little Y came up with the following problem:\n\nGiven a string \ns[1:n]\n$s[1 : n]$ of length \nn\n$n$, there are \nq\n$q$ queries, each query giving two parameters \ni\n$i$ and \nr\n$r$. You need to find out how many values of \nl\n$l$ satisfy the following conditions:\n\n \n1≤l≤r\n$1 \\leq l \\leq r$.\n \ns[i:i+l−1]\n$s[i : i + l - 1]$ is lexicographically smaller than \nR(s[i+l:i+2l−1])\n$R(s[i + l : i + 2l - 1])$.\n\nLittle Y would like to ask for your help in solving this problem."},{"problemId":"30403","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n무지개 문자열은 R(빨간색), O(주황색), Y(노란색), G(초록색), B(파란색), I(남색), V(보라색) 순으로 이루어진 문자열이며, 대소문자를 구분하지 않는다.\n\n임스는 춘배에게 영어 대소문자로 이루어진 문자열을 제공하고, 해당 문자열에 있는 문자들을 활용하여 무지개 문자열을 만들 수 있는지 물어봤다.\n\n임스가 춘배에게 제공한 문자열의 길이 N$N$과, 문자열이 주어질 때, 소문자로만 이루어진 무지개를 만들 수 있으면 yes, 대문자로만 이루어진 무지개를 만들 수 있으면 YES, 두 가지 모두 만들 수 있으면 YeS, 두 가지 모두 만들 수 없으면 NO!를 출력한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30366","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn Japan Amusement Group (JAG), members discuss how to have better amusement to attract many people. These days, they are interested in reducing waiting time stress.\n\nAs a member of JAG, you found out the hypothesis that knowing waiting time can reduce such kind of stress. Therefore, you decided to write a program which presumes the waiting time of a roller coaster.\n\n N$N$ groups stand in line for the roller coaster, and the groups are numbered from 1$1$ to N$N$. The group i$i$ has ai$a_i$ people. People in line ride the roller coaster in ascending order of group number.\n\nThe first roller coaster departs at time and departs every minute thereafter. The roller coaster can hold up to M$M$ people.\n\nFor each group, the whole group member must ride the roller coaster at the same time. Additionally, there is no need to get exactly M$M$ people on the roller coaster at one time. Each group wants to ride the roller coaster as soon as possible, so they ride it if they can.\n\nYou should output N$N$ lines. In the i$i$-th line, you should output the time the group i$i$ can ride the roller coaster.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30386","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tGiven two rooted trees G, H. Let |G|$|G|$ represent the number of nodes in tree G$G$, then the two trees satisfy the following constraints: 1≤|H|≤|G|≤|H|+k$1 \\le |H| \\le |G| \\le |H| + k$. It guarantees that k$k$ is a small constant. You can delete several nodes in G$G$, assuming that the subgraph obtained after deleting the nodes is G′$G'$. He wants to know if there is a way to delete nodes such that the subgraph G′$G'$ obtained after deletion satisfies the following conditions:\n\n\n\t G′$G'$ is connected.\n\t G′$G'$ contains the root node in G$G$ (that is, the G$G$ root node is not deleted during deletion).\n\t G′$G'$ and H$H$ are isomorphic (that is, there is a way to relabel the points in G′$G'$, so that the graph obtained by relabeling is exactly the same as H$H$, and the root node in G$G$ is exactly the root of H after relabeling the nodes).\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30424","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tLittle C has n$n$ books, each with a weight, and he decides to merge them into a pile.\n\nEach time when Little C merges, he can put one pile of books on top of another to merge them into one pile. If Little C puts the i$i$-th pile of books on top of the j$j$-th pile of books, the energy Little C needs to consume is the weight of the i$i$-th pile of books plus the wear value of the two piles of books.\n\nInitially, each book is in its own pile and the wear values are all 0$0$. Whenever Little C merges two piles of books, the wear value of the new pile of books formed is twice the larger of the wear values of the two piles of books before merging, plus one. The weight of the new pile of books is the sum of the weights of the two piles of books before merging.\n\nYour task is to design a merging order to minimize the total energy consumption of Little C and output the minimum total energy consumption.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30356","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMicchan noticed that an umbrella is a regular polygon when looking from above. So, she created the following problem.\n\nUmbrella Query\n\nA regular N$N$ polygon has N$N$ edges and N(N−1)2−N$\\frac{N(N-1)}{2} - N$ diagonals. Consider the union of them, which includes N(N−1)2$\\frac{N(N-1)}{2}$ line segments.\n\nHow many pairs of line segments satisfy the following 2$2$ conditions?\n\n\n\tThe 2$2$line segments have a common endpoint. In other words, they have a common point at one of the vertices of the regular N$N$ polygon.\n\tThe 2$2$ line segments are perpendicular.\n\n\nMicchan has given T$T$ of the above problems. However, her friend cannot solve too many requests. Answer each problem on her behalf.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30404","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t춘배는 오리를 보러 왔다. 오리는 춘배가 있는 동안 총 N$N$번 \"꽥꽥\" 소리를 낸다. 오리의 소리를 듣고 감동받은 춘배는 오리에게 박수를 쳐준다.\n\n오리가 Xi$X_i$초에 \"꽥꽥\" 소리를 낸다면 소리를 들은 춘배는 오리에게 Xi$X_i$초 이상 Xi+K$X_i+K$ 초 이하에 한 번 이상 박수를 쳐야한다.\n\n만약 오리가 소리를 낸 Xi$X_i$초부터 Xi+K$X_i+K$초 사이에 한 번도 박수를 쳐주지 않는다면 실망한 오리는 집으로 가버린다. 예를 들어 K=2,Xi=5$K=2, X_i = 5$라면 5$5$초, 6$6$초, 7$7$초 중 최소 한번은 박수를 쳐야 한다.\n\n\n\n<박수를 치는 춘배의 모습>\n\n오리가 집으로 가지 않도록 춘배가 박수를 쳐줄 때 박수를 최소 몇 번 쳐야 하는지 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30425","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t시이는 노래를 최대 몇 번 부르기 시작할 수 있는가?\n\nPS를 하며 평화롭게 시간을 보내던 시이는 돌림 노래를 부르기로 하였다. 시이가 부르고자 하는 노래는 영문 대문자 N$N$개로 이루어진 문자열이다.\n\n시이는 0$0$초부터 원하는 시각까지 매초 문자 하나를 외친다. 문자를 외치는 시간은 무시할 수 있다. 시이가 i$i$초부터 i+N$i+N$초 직전까지 외친 N$N$개의 문자들을 이어붙인 문자열이 노래와 일치하면 시이는 i$i$초에 노래를 부르기 시작한 것이다.\n\n시이는 0$0$초에 노래를 부르기 시작하고, 1$1$초부터 N$N$초 직전까지 매초 노래를 다시 부르기 시작할 수 있다.\n\n시이는 노래를 최대 몇 번 부르기 시작할 수 있는가?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30405","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t N$N$마리의 아기 고양이들은 박물관 견학을 가게 되어, 어떤 순서로 전시를 관람할지에 대한 계획을 세웠다. 박물관은 일렬로 전시관이 M$M$개 붙어 있는 형태이며, 왼쪽으로부터 i$i$번째 전시관에서는 전시 i$i$를 진행하고 있다. (1≤i≤M)$(1 \\le i \\le M)$ \n\n모든 아기 고양이들은 출입구를 통해서 입장한 뒤, 자신이 원하는 순서대로 전시를 관람하고 난 뒤 다시 출입구를 통해 퇴장한다. i$i$번째 전시관과 j$j$번째 전시관 사이 이동 거리는 |j−i|$|j - i|$로 계산한다.\n\n\n\n박물관 관장인 춘배는 M$M$개 전시관 중 하나에 아기 고양이들을 위한 출입구를 설치하려고 한다. 춘배는 모든 아기 고양이들의 이동 거리의 합이 최소가 되는 지점에 출입구를 설치하고 싶지만, 박물관의 크기가 커서 설치 위치를 정하는 데 어려움을 겪고 있다.\n\n N$N$마리의 아기 고양이들의 전시 관람 계획이 주어졌을 때, 출입구를 설치할 위치를 계산해 주는 프로그램을 만들어 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30367","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tJennifer is a software engineer at a Tech company. Her company decided to join ICPC (Inter-Company Prison breaking Contest) and she was chosen as a representative of the company.\n\nIn ICPC, every participant needs to escape from a prison. The prison can be represented as an n×m$n \\times m$ grid i.e. it has n$n$ rows and m$m$ columns of rooms. The room in the i$i$-th row and j$j$-th column in the prison is denoted as room (i,j)$(i, j)$. Two rooms (i1,j1)$(i_1, j_1)$ and (i2,j2)$(i_2, j_2)$ are adjacent if and only if |i2−i1|+|j2−j1|=1$|i_2 - i_1| + |j_2 - j_1| = 1$. Weirdly, there is an unlocked door between each pair of adjacent rooms. Some rooms in the prison are under surveillance. Participants can move to a room only if it's not under surveillance. A participant will start from a room. The goal of all participants is to reach an exit. It's guaranteed that the room with the exit and the room that participants start from are not under surveillance.\n\nTo show talents in the company, the CEO asked Jeniffer not to turn right during the contest. In other words, there should not be any two consecutive moves between rooms that fulfill the following condition.\n\nCondition: Given that Jeniffer moved from room (i1,j1)$(i_1, j_1)$ to (i2,j2)$(i_2, j_2)$, and then she moved to room (i3,j3)$(i_3, j_3)$. Then, (i2−i1)×(j3−j2)−(j2−j1)×(i3−i2)=−1$(i_2 - i_1) \\times (j_3 - j_2) - (j_2 - j_1) \\times (i_3 - i_2) = -1$ holds.\n\n\n\nFigure B.1. Example of allowed and denied moves\n\nFor example, in figure B.1., if the last move is along the dashed arrow, you cannot move downward but you can move the other three directions.\n\nNote that U-turns are allowed with this condition.\n\nAs a Jeniffer's colleague, your mission is to write a program to find the minimum number of moves between rooms to reach the exit for her.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30387","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tRecently, little Z has developed a strong interest in bubble sorting.\n\nHere is the pseudocode for bubble sort:\n\nInput: a sequence a[1...n] of length n\nOutput: a result sorted from small to large\n  for i = 1 to n do:\n    for j = 1 to n - 1 do\n      if (a[j] > a[j + 1])\n          Swap the values of a[j] and a[j + 1]\n\nThe number of swaps in bubble sort is defined as the number of swaps performed during sorting, which is the number of times the sixth line of the above bubble sort pseudocode is executed. He wants to find a sequence with as few exchanges as possible.\n\nThe sequences studied by little Z consists of non-negative integers. It is of length n$n$ and must satisfy m$m$ additional conditions.\n\nThe i$i$-th condition is: the minimum of the numbers with indices in [L[i],R[i]]$[L[i], R[i]]$, namely a[L[i]],a[L[i]+1],…,a[R[i]]$a[L[i]], a[L[i]+1],\\ldots, a[R[i]]$, is exactly V[i]$V[i]$.\n\nHe knows that bubble sort often times out. So, he wants to know what is the minimum number of swaps for bubble sort among all sequences that satisfy the additional condition.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30440","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tNCPC (Nordic Cargo Plane Control) are testing a new engine for their cargo planes. To this end they have bound a strong and sturdy infinitely thin rope to the centre of their testing platform, and to the engine. We will place a coordinate system onto this testing platform such that the rope is bound at the origin and lays along the positive x$x$-axis to (d,0)$(d, 0)$. On this testing platform there are also a number of infinitely thin pillars that can stop the rope, but ignore the engine. As the engine is started it starts rotating the rope counter-clockwise around the origin until it hits a pillar, at which point it is caught and starts rotating around that pillar counter-clockwise instead. The engine is then rotating at a smaller radius as some of the rope is caught between the origin and this pillar. This keeps going until the rope is too short to reach any other pillars.\n\nRunning these tests, buying all this infinitely thin rope and setting up these infinitely thin pillars, is expensive. Besides, the workers keep getting these nasty paper-like cuts from all these infinitely thin objects. It would be much more economical to just simulate the behaviour. \n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30357","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tConsider a tree with a green or blue stone placed at each vertex. Such a tree is called a \"Gemini Tree\" if condition 3 can be satisfied after performing the following operations 1 and 2.\n\n\n\tFirst, operate \"selecting pairs of vertices that are directly connected by edges and exchanging the stones placed on each endpoint,\" any number of times from zero to more.\n\tSecond, select one or fewer edges and delete them.\n\tAt this time, the tree is divided into at most two connected components, and only one type of stone is placed in either.\n\n\nConsider a \"Gemini tree\" with a specified length for each edge, and define its value as follows.\n\n\n\tFirst, operate \"selecting pairs of vertices that are directly connected by edges and exchanging the stones placed on each endpoint\" any number of times from zero to more. Each exchange operation costs equal to the length of the edge.\n\tSecond, select one or fewer edges and delete them.\n\tAt this time, the tree is divided into at most two connected components, and only one type of stone is placed in either.\n\tThe minimum value of the total cost of operation 1 required to achieve condition 3 is the value of \"Gemini Tree.\"\n\n\nNote that stones are not moved when calculating the value.\n\nYou are given a \"Gemini tree\" with a specified length for each edge. It has N$N$ vertices, where N$N$ is an odd number. The i$i$-th edge connects two vertices, ui$u_i$ and vi$v_i$, and has a length wi$w_i$. The stone colors placed on vertices represent the string S=s1s2…sN$S = s_1s_2\\dots s_N$.\n\nYou sequentially perform Q$Q$ operations on this tree. The j$j$-th operation is defined by two integers ej$e_j$, aj$a_j$, which represents increasing the length of the ej$e_j$-th edge by aj$a_j$. The effect of the operation remains even in subsequent operations. Answer the value of the tree after each operation.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30406","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n산타 춘배는 아기 고양이들에게 나눠줄 선물을 정리하고 있다. 총 N$N$개의 선물을 N2$\\frac{N}{2}$마리의 아기 고양이들에게 2개씩 나누어 주려고 한다. 여기서 N$N$은 짝수이다.\n\n N$N$개의 상품은 각각 가격이 있고, 이 가격은 0$0$ 이상 3$3$ 이하의 정수이다. 한 아기 고양이가 선물을 받을 때 얻는 만족도는, 받은 선물 2개의 가격을 XOR한 값이다. 예를 들어 선물 2개의 가격이 각각 1$1$, 2$2$라면 만족도는 1$1$ XOR 2=3$2 = 3$이고, 선물 2개의 가격이 각각 3$3$, 3$3$이라면 만족도는 3$3$ XOR 3=0$3 = 0$이다.\n\n산타 춘배는 아기 고양이들에게 어떻게 선물을 나눠주어야 만족도 총합이 최대가 될지 고민 중이다. 춘배를 위해 이를 계산하는 프로그램을 만들어 주자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30368","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn the JAG country, there are a total of m$m$ universities, and we plan to invite 2n$2n$ students to a training camp. Each student is affiliated with one of the m$m$ universities. During the training camp, the students will be accommodated in n$n$ twin rooms, meaning that each room will be assigned to exactly two students.\n\nTo promote diverse interactions among the students, our goal is to achieve a \"good room assignment\". A room assignment is considered good if and only if the students sharing the same room come from different universities.\n\nHere, we are wondering how often a good room assignment is feasible. There are m2n$m^{2n}$ possible sequences of universities to which each student belongs, and please find for how many of them there is a good room assignment.\n\nActually, we don't yet know how many rooms we can provide. Therefore, for each of n=1,2,…,m$n = 1, 2, \\dots , m$, please find for how many of the sequences of universities there is a good room assignment.\n\nSince the answer may be huge, print the answers modulo 998244353$998\\,244\\,353$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30426","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t돌림노래를 부르고 만족한 시이는 다시 평소의 PS 문제들을 푸는 일상으로 돌아갔다.\n\n어느 날, 시이는 문제에 제출을 할 때마다 다른 차원으로 전생하는 능력을 얻었다.\n\n시이가 문제에 제출할 때마다 전생하는 규칙은 다음과 같다.\n\n\n\t시이가 사는 기행 우주에는 N$N$개의 차원이 있다. 차원에는 각각 0$0$ 이상 N$N$ 미만의 서로 다른 번호가 매겨져 있으며, 처음에 시이는 M$M$번 차원에 있다.\n\t시이는 첫 번째 문제부터 K$K$번째 문제까지 K$K$개의 PS문제에 순서대로 정확히 한 번씩 제출한다. 각 문제에 제출할 때 시이는 채점 결과로 맞았습니다!! 또는 틀렸습니다를 받게 되며, 이외의 채점 결과는 존재하지 않는다. 의지력이 약한 시이는 틀렸습니다를 받더라도 같은 문제에 다시 제출하지 않는다.\n\t i$i$번째 문제에 제출하여 시이가 맞았습니다!!를 받았을 때 이동하는 차원의 수 Gi$G_i$와 틀렸습니다를 받았을 때 이동하는 차원의 수 Yi$Y_i$가 존재한다. 시이가 C$C$번 차원에 있을 때 i$i$번째 문제에 제출하여 채점 결과로 맞았습니다!!를 받으면 (C+Gi)modN$(C+G_i) \\bmod N$번 차원으로, 틀렸습니다를 받으면 (C+Yi)modN$(C+Y_i) \\bmod N$번 차원으로 전생한다. \n\t불안정한 차원이 L$L$개 존재하여, 시이가 이 차원들 중 하나로 전생하게 되면 차원 미아가 되어버린다. 차원 미아가 된 후에는 문제에 제출하더라도 더 이상 전생할 수 없다.\n\t시이는 유토피아로 알려진 0$0$번 차원으로 가고 싶으나, PS를 좋아하는 시이는 모든 문제에 적어도 한번 제출하지 않았으면 만족하지 못한다. 즉, 시이가 순서대로 모든 문제를 시도한 후 차원 미아가 되지 않고 0$0$번 차원에 있는 경우에 한해서 유토피아에 도달하는 데에 성공한 것이다.\n\t 0$0$번 차원과 M$M$번 차원은 불안정한 차원이 아니다.\n\n\n위의 정보가 주어졌을 때, 시이가 각 문제에 대해 맞았습니다!!와 틀렸습니다 중 하나를 받아 성공적으로 유토피아인 0$0$번 차원으로 갈 수 있을지 구하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30441","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA group of scouts are preparing to go to a large meeting with other scouts. Their leader Hildeborg, in spirit of the scout motto \"be prepared\", wants to distribute some useful items among the scouts that they most probably will need on their adventure. The items come in different sizes, so to make this as fair as possible, she wants to make sure that the total size of items carried by any scout is as small as possible. Furthermore, Hildeborg does not want to give more than two items to any scout as she is afraid that it otherwise will be too hard for them to remember to bring everything. Given the sizes of the items, what is the least maximum total size, computed as the sum of items, any scout will have to carry?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30407","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n춘배가 나비의 간식을 뺏어 먹고 도망가자 화난 나비는 냥냥펀치를 날리려 한다. \n\n냥냥펀치 : 문제에서 주어진 Ri$R_i$에서 춘배와 나비 사이의 거리를 뺀 값만큼 춘배의 체력이 깎인다. 데미지가 10$10$이고 현재 춘배와 나비 사이의 거리가 3$3$일 경우 7$7$만큼 체력이 깎인다. 체력이 깎이는 양은 음수가 될 수 없다.\n\n춘배는 도망가다 상자를 발견해서 숨게 되었고 자신이 가진 3$3$가지 기술로 대응하려 한다.\n\n\n\t\n\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\t\n\t\t\t웅크리기\n\t\t\t네발로 걷기\n\t\t\t깜짝 놀라게 하기\n\t\t\n\t\n\n\n\n\t웅크리기: 나비가 공격할 시 데미지가 절반 감소한다. 이는 데미지가 거리만큼 약해진 후 계산된다. 단, 감소 후 데미지의 소수점 아래는 버린다.\n\t네발로 걷기: 문제에서 주어진 값 K$K$ 만큼 나비와 멀어지는 방향으로 이동할 수 있다.\n\t깜짝 놀라게 하기: 나비의 다음 행동을 1$1$번 무시한다. i$i$번째 사용 할 시 Ri+1$R_{i+1}$를 무시한다. 단 1$1$번 사용할 수 있고 N$N$번째에 사용 시 아무 일도 일어나지 않는다.\n\n\n한 턴은 춘배의 기술, 냥냥펀치, 데미지 계산의 순서대로 실행된다. 춘배는 턴마다 1$1$개의 기술만 쓸 수 있다. 나비가 모든 N$N$개의 냥냥펀치를 하여 지칠 때까지 춘배가 유지할 수 있는 최대 체력을 알아보자. 어떤 행동을 해도 체력이 0$0$이하가 된다면 −1$-1$을 출력한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30388","content":"문제\n\nIn this problem, you need to solve a well-known NP problem - the quadratic integer programming problem.\n\nQuadratic integer programming problems have variables: you need to give a length \nn\n$n$ sequence of integers \n(x[1],x[2],…,x[n])\n$(x[1], x[2], \\ldots, x[n])$ that satisfies all the conditions below.\n\nQuadratic integer programming problems have constraints: the sequence of integers you give needs to satisfy the following two types of constraints:\n\nGiven a positive integer \nk\n$k$ \n(3≤k≤5)\n$(3 \\le k \\le 5)$ and \nn\n$n$ intervals \n[l[i],r[i]]\n$[l[i], r[i]]$ \n(1≤i≤n)\n$(1 \\le i \\le n)$, where \n1≤l[i]≤r[i]≤k\n$1 \\le l[i] \\le r[i] \\le k$ , the sequence you give needs to satisfy \nl[i]≤x[i]≤r[i]\n$l[i] \\le x[i] \\le r[i]$ for all \n1≤i≤n\n$1 \\le i \\le n$.\nGiven \nm\n$m$ triples \n(p[j],q[j],b[j])\n$(p[j], q[j], b[j])$, the sequence you give needs to satisfy \n|x[p[j]]−x[q[j]]|≤b[j]\n$|x[p[j]] - x[q[j]]| \\le b[j]$ for all \n1≤j≤m\n$1 \\le j \\le m$.\n\nThe quadratic integer programming problem has an objective function: you are given given \nk−2\n$k-2$ weight parameters \nv[2],v[3],…,v[k−1]\n$v[2], v[3], \\ldots , v[k-1]$. Let \nc[i]\n$c[i]$ be the number of elements in the sequence whose value is \ni\n$i$, and \nG\n$G$ be the number of pairs \n1≤i,j≤n\n$1 \\le i, j \\le n$ such that \n|p[i]−p[j]|≤1\n$|p[i] - p[j]| \\le 1$ (note that when \ni≠j\n$i \\neq j$, \n(i,j)\n$(i, j)$ and \n(j,i)\n$(j, i)$ are not the same). The weight of a sequence \nx[1],x[2],…,x[n]\n$x[1], x[2], \\ldots, x[n]$ is:\n\n \n\n\nW(x[1],x[2],…,x[n])=106G+∑i=2k−1c[i]v[i]\n$$\\displaystyle W(x[1], x[2], \\ldots, x[n]) = 10^{6}G + \\sum_{i = 2}^{k - 1} c[i] v[i]$$ \n\nYour sequence needs to maximize its weight while satisfying the above two constraints.\n\nQuadratic integer programming problems do not necessarily require multiple queries, but we will give \nq\n$q$ queries, each query giving different weight parameters \nv[2],v[3],…,v[k−1]\n$v[2], v[3], \\ldots, v[k-1]$. For each query, you need find a sequence of maximum weight that satisfies the constraints. To reduce the output, you only need to output the weight of this sequence. The data guarantees that at least one sequence that satisfies the above conditions exists."},{"problemId":"30427","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n흐에에…\n\n\n누군가가 어둠을 틈타, 시이(swi)의 엄청난 케이크를 먹어버렸다!\n\n시이는 케이크를 좋아하는 사람이다. 따라서, 시이는 여느 때처럼 근처의 가게에서 사 온 굉장히 엄청난 케이크를 식탁 위에 올려놓고 케이크를 감상하고 있었다. 하지만 방이 너무 따뜻했기 때문에 시이는 잠에 들고 말았고… 케이크는 사라져 있었다!\n\n사건이 일어났을 때, 집 안에는 시이와 시이를 제외한 N$N$명의 다른 사람들이 있었다. 케이크를 먹은 범인은 사건이 일어났을 때 집 안에 있던 사람들 중 하나이다.\n\n시이는 주변을 수소문한 결과, 사건이 일어나지 않은 곳에서 사건이 일어났을 때 목격된 사람들의 이름 M$M$개를 얻었다.\n\n이 사건은 추리 소설의 원칙을 따를 것이기 때문에, 범인을 다음과 같이 추리할 수 있다.\n\n\n\t아래 규칙은 우선순위대로 주어진다. 따라서, 두 개 이상의 규칙들이 동시에 범인을 찾아냈을 경우에는 더 규칙 번호가 작은 쪽을 우선으로 한다.\n\t동호는 악질이다. 사건 당시에 dongho가 집에 존재했을 경우, 목격담에 관계없이 dongho가 범인이다.\n\t집에 있던 사람 중 목격담이 없는 사람이 단 한 명일 경우, 소거법에 의해 당연히 그 사람이 범인이다.\n\t목격담이 없는, 이름이 bumin인 사람이 집에 있었다면, 그 사람이 범인이다.\n\t목격담이 없는, 이름이 cake인 사람이 집에 있었다면, 케이크는 거짓말이기 때문에 (The cake is a lie) 그 사람이 범인이다.\n\t목격담이 없는, 이름이 lawyer인 사람이 집에 있었다면, 변호사는 항상 범인이기 때문에 그 사람이 범인이다.\n\t빠르면 케이크를 몰래 먹기 쉽기 때문에, 집에 있던 시이가 아닌 N$N$명의 사람들 중, 목격담이 없고 사전순으로 가장 이름이 빠른 사람이 범인이다.\n\n\n케이크가 있는 방에서 잠에 든 시이는 다른 곳에서 목격되지 않는다.\n\n한 사람의 이름은 유일하고, 동명이인이 존재하지 않는다.\n\n한 사람이 여러 번 목격되었을 수 있고, 목격된 사람이 사건이 일어났을 때 집 밖에 있었을 수도 있다.\n\n시이의 케이크를 먹은 범인을 찾아주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30369","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThere is a tree with N$N$ nodes numbered from 1$1$ to N$N$. For each i=1,…,N−1$i = 1, \\dots, N-1$, the i$i$-th edge connects node ui$u_i$ and node vi$v_i$.\n\nYou are going to paint all nodes in distinct colors. Colors are represented by integers between 1$1$ and N$N$.\n\nThe assignment of colors on the tree is called good, if it is possible to complete the following operation N−1$N-1$ times repeatedly.\n\n\n\tSelect a pair (A,B)$(A, B)$ of colors which satisfies the following two conditions.\n\t\n\t\t |A−B|=1$|A - B| = 1$.\n\t\tThere exists an edge which connects a node painted in color A$A$ and a node painted in color B$B$.\n\t\n\t\n\tChange the color of all nodes currently painted in color A$A$ to color B$B$.\n\n\nYour task is to count the number of good assignments of colors on the tree modulo 998244353$998\\,244\\,353$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30358","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tConsider a tree with a green or blue stone placed at each vertex. Such a tree is called a \"Gemini Tree\" if condition 3 can be satisfied after performing the following operations 1 and 2.\n\n\n\tFirst, operate \"selecting pairs of vertices that are directly connected by edges and exchanging the stones placed on each endpoint,\" any number of times from zero to more.\n\tSecond, select one or fewer edges and delete them.\n\tAt this time, the tree is divided into at most two connected components, and only one type of stone is placed in either.\n\n\nYou are given an N$N$-vertex tree with no stones. There are 2N$2^N$ ways to place one stone at each vertex. How many of them satisfy the following condition?\n\n\n\tSelect one leaf and remove it with the stone placed. The tree must be a \"Gemini tree\" before and after the operation.\n\n\nOutput the remainder of the answer after dividing by 998244353$998244353$ because it can be large.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30359","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAppropriate temperature changes are essential for brewing delicious tea. Noli has been taught a recipe for delicious tea.\n\nThe recipe is represented by a sequence of non-negative integers A=a0,a1,a2,…,aN,aN+1$A = a_0, a_1, a_2, \\dots, a_N, a_{N+1}$ of length N+2$N+2$. She must change the temperature accordingly.\n\nRaising the temperature is hard work. The cost of a recipe A$A$ is defined by the following f(A)$f(A)$.\n\n f(A)=∑i=0Nmax(0,ai+1−ai)$f(A) = \\sum_{i=0}^{N}{\\max(0, a_{i+1} - a_i)}$ \n\nNoli has forgotten the recipe she was taught. All she remembers is that a0=aN+1=0$a_0 = a_{N+1} = 0$ and that the cost was K$K$.\n\nHow many possible recipes can be considered? Find the remainder of the number of possible recipes divided by 998244353$998244353$.\n\nNote that two recipes are different when the values of ai$a_i$ are different for any i$i$ (0≤i≤N+1$0 \\le i \\le N+1$).\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30408","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t춘배는 N$N$g 하트 하나를 가지고 있다. 마음씨 좋은 춘배는 자신이 가진 하트 무게를 나눠 M$M$g 하트 하나를 나비에게 선물해 주려 한다!\n\n\n\n춘배는 자신이 가진 A$A$g 하트를 하트 2$2$개로 나눌 수 있다. 이때 A$A$가 짝수라면 A2$ \\frac{A}{2}$g인 하트 2$2$개로 나눌 수 있고, A$A$가 홀수라면 A−12$ \\frac{A-1}{2}$g 하트 1$1$개와 (A−12+1)$(\\frac{A-1}{2}+1)$g 하트 1$1$개로 나눌 수 있다. 그 후 나눠진 2$2$개의 하트 중 무조건 하나를 선택해서 버려야 한다. 이와 같은 방법으로 남은 1$1$개의 하트가 M$M$g이 될 때까지 계속 나눈다. 하지만 하트가 1$1$g이 되면 춘배는 더 이상 하트를 나눌 수 없게 된다.\n\n춘배는 자신의 하트를 나누기 전에 M$M$g으로 만들 수 있는지 알아보려 한다. 춘배를 도와 만들 수 있는지 알려주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30428","content":"문제\n\n유토피아에 도착한 시이는 다시 지구에서 열심히 PS 문제를 풀던 날들이 그리워졌고, 다시 지구로 돌아가기로 했다.\n\n유토피아는 4차원 공간이다. 지구로 돌아가기 위해서는 스타게이트를 열어야 하기 때문에, 시이는 스타게이트를 하이퍼-직육면체 모양의 방 안에 짓기로 했다. 이 스타게이트는 매우 불안정하기 때문에 항상 하이퍼-정육면체의 형태를 가지고 있어야 하고, 더 큰 스타게이트일수록 더 안정적이기 때문에 시이는 최대한 큰 스타게이트를 열려고 한다.\n\n하이퍼-직육면체는 \nx\n$x$축, \ny\n$y$축, \nz\n$z$축, \nw\n$w$축 좌표가 각각 길이가 \n0\n$0$ 이상인 구간에 속하는 모든 점으로 이루어진 도형이다. 각 축의 좌표가 속하는 구간은 서로 달라도 된다. 각 축의 좌표가 속하는 구간의 길이를 그 축 방향의 길이라 하자. 하이퍼-정육면체는 \nx\n$x$축, \ny\n$y$축, \nz\n$z$축, \nw\n$w$축 방향의 길이가 모두 같은 하이퍼-직육면체이다.\n\n시이의 방의 \nx\n$x$축 방향의 길이가 \nN\n$N$, \ny\n$y$축 방향의 길이가 \nM\n$M$, \nz\n$z$축 방향의 길이가 \nK\n$K$, \nw\n$w$축 방향의 길이가 \nT\n$T$이고, 각 길이는 정수이다. 시이의 방을 축 방향의 길이가 \n1\n$1$인 하이퍼-정육면체들로 나누고, 나눈 하이퍼-정육면체 하나를 칸이라 하자. 각 칸의 좌표는 칸에 포함된 점 중 \nx\n$x$축, \ny\n$y$축, \nz\n$z$축, \nw\n$w$축 좌표가 모두 가장 큰 점의 좌표로 정의한다.\n\n시이의 방에는 빈칸과 장애물이 있는 칸이 있다. 스타게이트를 여는 공간의 경계를 제외한 내부에 장애물이 있는 칸이 포함되면 안 된다. \nN\n$N$, \nM\n$M$, \nK\n$K$, \nT\n$T$와 방의 각 칸에 대한 정보가 주어졌을 때, 열 수 있는 가장 큰 스타게이트의 축 방향의 길이를 구하라."},{"problemId":"30370","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tFor each i=1,2,…,N$i = 1, 2, \\dots, N$, there are Ai$A_i$ balls with i$i$ written on them. These are put into a box and mixed up. The string variable s$s$ consists of initially N$N$ “0”s. Balls are taken out of the box one by one (uniformly at random and independently). When a ball with i$i$ written on it is drawn, the i$i$-th character of s$s$ is changed to “1” (it remains unchanged if it was already “1”). Find the probability, modulo 998244353$998\\,244\\,353$, of having a point during this process that s$s$ contains “101” as a contiguous substring.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30442","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tKarl is an aspiring C programmer, and is excited by the risks and rewards of low-level manual memory management. In the program he currently develops, he stores a string containing N$N$ non-zero bytes into a buffer named \"buf\". By mistake he accidentally made the buffer 2N$2 N$ bytes in size. The last N$N$ bytes of the buffer consists of only zero-bytes.\n\nNow Karl needs to know the value N$N$, the size of the string, in a separate part of the program. Traditionally you would recover the length of a string using the strlen-function, which reports the position of the first zero-byte in the provided buffer using a linear scan. However, Karl finds that this is much too slow, and that it defeats the advantage of using C in the first place. Can you help Karl efficiently recover N$N$ without crashing his program?\n\n\n\nThe contents of the buffer in sample interaction 3 are shown here.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30389","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이 문제는 모든 언어에 대해서 시간 제한과 메모리 제한이 동일하다. 상단의 시간 제한 및 메모리 제한 란을 참조하라.\n\n문자열에 약한 비행씨는 열심히 문자열 알고리즘을 바라보고 있다. LCS, KMP, Rabin-Karp, Aho-Corasick...\n\nSuffix array를 바라보다 머리가 터져버린 비행씨는 머리를 식힐 겸 입력으로 주어진 문자열들의 접미사를 정리하려고 한다. 다만 그냥 정리하면 재미가 없으니, 문자열의 접미사 집합을 XOR하려고 한다.\n\n문자열 S$S$의 접미사 집합 suffix[S]$\\text{suffix}[S]$은 S$S$의 모든 접미사를 원소로 가지는 집합이라 정의하고, 두 집합 A,B$A, B$의 XOR인 A⊗B$A\\otimes B$는 다음과 같이 정의한다.\n\n A⊗B={x∣x∈A∪B and x∉A∩B}$$A\\otimes B=\\{x\\mid x\\in A\\cup B\\text{ and }x\\not\\in A\\cap B\\}$$ \n\n비행씨를 대신하여 주어진 문자열 S1,S2,⋯,SN$S_1,S_2,\\cdots,S_N$의 접미사 집합을 전부 XOR한 집합 (⋯((suffix[S1]⊗suffix[S2])⊗suffix[S3])⋯⊗suffix[SN])$(\\cdots((\\text{suffix}[S_1]\\otimes\\text{suffix}[S_2])\\otimes\\text{suffix}[S_3])\\cdots\\otimes\\text{suffix}[S_N])$의 원소의 개수를 구하는 프로그램을 작성해 주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30371","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThere are H$H$ rows and W$W$ columns of square cells. Each cell has either a digit or an asterisk (‘*’). The cell at the i$i$-th row from the top and the j$j$-th column from the left is denoted by (i,j)$(i,j)$.\n\nIn this problem we consider subrectangles, each of which is the set of cells which forms a rectangle. More precisely, a set of cells S$S$ is a subrectangle if there are four integers t$t$, b$b$, l$l$ and r$r$ such that 1≤t≤b≤H$1 \\le t \\le b \\le H$, 1≤l≤r≤W$1 \\le l \\le r \\le W$ and S={(i,j)∣t≤i≤b∧l≤j≤r}$S = \\{(i,j) \\mid t \\le i \\le b \\wedge l \\le j \\le r \\}$. A subrectangle is digit-only if every cell in the subrectangle has a digit. The score of a digit-only subrectangle is defined as the square of the sum of digits in cells in the subrectangle.\n\nYour task is to calculate the sum of scores of all digit-only subrectangles. Since the answer may be large, output it modulo 998244353$998\\,244\\,353$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30409","content":"문제\n\n나비는 새로 건설할 도시의 전봇대를 관리하는 일을 맡았다. 아직 전선이 연결되지 않았기 때문에, 나비는 이 전봇대들의 전선을 연결해야 한다. 전봇대는 \n1\n$1$의 간격으로 직선을 따라 총 \nN\n$N$개가 건설되어 있으며 왼쪽에서부터 번호가 \n1\n$1$부터 \nN\n$N$까지 붙어 있다. 첫 번째 전봇대의 위치는 \n1\n$1$이고 초기에 \ni\n$i$번 전봇대의 높이는 \nHi\n$H_i$이다. 좌표평면에서 나타낸다면 \ni\n$i$번 전봇대는 \n(i,0)\n$(i,0)$부터 \n(i,Hi)\n$(i,H_i)$를 연결하는 선분으로 생각할 수 있다.\n\n전선은 두 전봇대의 가장 윗부분을 최단 거리로 연결한다. 즉 \ni\n$i$번째 전봇대와 \nj\n$j$번째 전봇대가 연결된다면 \n(i,Hi)\n$(i,H_i)$와 \n(j,Hj)\n$(j,H_j)$를 선분으로 연결한다. 그리고 이때 연결 비용은 전선의 길이의 제곱이다.\n\n나비는 준혁이에게 시작 전봇대의 번호 \np\n$p$를 받고 \np\n$p$번 전봇대를 포함하여 몇 개의 전봇대를 선택하여 전선을 연결한다. 선택한 전봇대를 번호의 오름차순으로 정렬하였을 때 \nS1,S2,…,Sk\n$S_1, S_2, \\ldots, S_k$라 한다면 \nSi\n$S_i$번째 전봇대와 \nSi+1\n$S_{i+1}$번째 전봇대를 전선으로 연결하게 된다. \n(1≤i<k)\n$(1\\le i<k)$ \n\n또한 나비는 다음과 같은 조건을 만족하도록 전봇대를 선택하여 연결하여야 한다.\n\n나비가 연결한 전선과 전봇대가 교차해선 안 된다. 단, 전선이 어떤 전봇대 \ni\n$i$와 \n(i,Hi)\n$(i,H_i)$에서 만나는 것은 가능하다.\n \np\n$p$를 기준으로 왼쪽으로 갈수록 선택한 전봇대의 높이가 단조증가하고, \np\n$p$를 기준으로 오른쪽으로 갈수록 선택한 전봇대의 높이가 단조증가하여야 한다. 즉 \nSt=p\n$S_t = p$일 때 \nHS1≥HS2≥⋯≥HSt−1≥Hp≤HSt+1≤HSt+2≤⋯≤HSk\n$H_{S_1} \\ge H_{S_2} \\ge \\cdots \\ge H_{S_{t-1}} \\ge H_p \\le H_{S_{t+1}} \\le H_{S_{t+2}} \\le \\cdots \\le H_{S_k}$를 만족해야 한다.\n나비는 연결한 전선의 길이 합이 최대가 되도록 전선을 연결하려고 한다. 만약 그런 경우가 여러 가지 있다면, 연결 비용의 합이 최소인 방법으로 연결한다.\n\n준혁이는 나비에게 \nQ\n$Q$개의 작업을 준다. 작업마다 시작 전봇대가 \np\n$p$일 때 조건을 만족하게 연결 비용의 합의 최솟값을 구해보자."},{"problemId":"30429","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t시이가 연 하이퍼-스타게이트를 통해, 외계인들이 지구를 침략하려고 한다! 이 외계인들은 리버(파괴자)와 스캐럽(갑충탄) 중 하나이다. 이들은 각각 인간 사회에 교묘하게 숨어들어, 동호의 집을 날려버리려고 한다. 동호는 자신의 집을 지키기 위해 인간 사회에 숨어든 리버와 스캐럽의 수를 알아내고자 한다.\n\n이를 위해 동호는 외계인으로 의심되는 사람들을 1$1$번부터 N$N$번까지 총 N$N$명 두고, 각 사람에게 다른 사람의 정체를 들었다. N$N$명 중에는 진짜 사람이 최소 한 명은 존재한다.\n\n i$i$번 사람은 Ai$A_i$번 사람의 정체가 진짜 사람이라고 답하거나 외계인이라고 말했다. i$i$번 사람은 Ai$A_i$번 사람의 정체를 알고 있다.\n\n\n\t i$i$번 사람이 진짜 사람일 경우\n\t\n\t\t Ai$A_i$번 사람이 진짜 사람이라면 진짜 사람이라고, 외계인이라면 외계인이라고 주장한다.\n\t\n\t\n\t i$i$번 사람이 리버였을 경우\n\t\n\t\t Ai$A_i$번 사람은 항상 진짜 사람이며, Ai$A_i$번 사람이 외계인이라고 주장한다.\n\t\n\t\n\t i$i$번 사람이 스캐럽이였을 경우\n\t\n\t\t Ai$A_i$번 사람은 항상 외계인이며, Ai$A_i$번 사람이 진짜 사람이라고 주장한다.\n\t\n\t\n\n\n동호는 내심 외계인의 수가 적기를 바라고 있기 때문에 이들의 답변이 주어졌을 때 가능한 외계인의 최소 수를 구하고 싶다. 동호를 도와 가능한 외계인의 최소 수를 구하라!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30430","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t리버와 스캐럽의 수를 과소평가해 집과 집 안에 있던 전 재산을 잃은 동호는 빚더미에 앉게 되었다! 동호는 빚을 갚기 위해 게임을 잘하는 시이를 \"세계 리버시 대회\"에 출전시켜 시이의 상금 일부를 얻으려고 한다.\n\n리버시는 오델로라고도 불리는 게임으로, 흑과 백이 번갈아 돌을 놓으며 게임이 끝난 후 돌이 더 많은 쪽이 승리하는 게임이다. 그러나 본 문제와는 별로 관련이 없으니 자세한 규칙 설명은 넘어가자.\n\n하지만, 대회에서 하는 리버시는 일반적인 리버시와는 다른 게임으로, 돌을 뒤집지 못한다!\n\n돌을 뒤집는 것이 게임의 핵심 부분인 게임에서 돌을 뒤집지 못하면 게임이 매우 재미없어지기 때문에, 그 대신 다음과 같은 룰을 사용하기로 하였다.\n\n\n\t보드는 N$N$행 M$M$열의 격자이다.\n\t선공은 2×1$2 \\times 1$ 크기의 돌을 가지고 있고, 후공은 1×1$1 \\times 1$ 크기의 돌을 가지고 있다. 돌은 그대로 놓거나 90도 회전시켜 놓을 수 있다.\n\t선공부터 번갈아 가며 보드에 하나씩 자신의 돌을 놓는다. 한 칸에는 최대 하나의 돌만 위치할 수 있다.\n\t둘 중 한 명이 돌을 더 이상 놓을 수 없으면, 남은 한 명이 남은 공간을 자신의 돌로 최대한 많이 채운 후 게임이 끝난다.\n\t게임이 끝난 후, 보드에서 자신의 돌으로 더 많은 공간을 차지한 플레이어가 승리한다. 만약에 차지한 공간이 같으면 무승부이다.\n\n\n시이를 포함한 세계 리버시 대회의 출전자들은 모두 엄청난 게임 실력을 가지고 있으므로 이기기 위해 항상 최선의 행동을 한다. 시이는 동전 던지기에서 이길 운이 없기 때문에 항상 후공을 잡는다.\n\n시이가 대회에서 좋은 성적을 거둬 동호가 빚을 모두 갚을 수 있을지를 알아보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30372","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThere is a convex polygon with n$n$ vertices on a plane. Let V$V$ be the set of vertices of this convex polygon. After removing all the edges of the convex polygon, you will create a tree with n$n$ vertices by repeating the following operation n−1$n-1$ times:\n\n\n\tSelect two distinct vertices x,y∈V$x,y \\in V$. Add an edge between vertices x$x$ and y$y$. If we denote the Euclidean distance between vertices x$x$ and y$y$ as d(x,y)$d(x,y)$, you gain a score of (d(x,y))2$(d(x,y))^2$ points.\n\n\nFind the maximum possible total score obtained by n−1$n-1$ operations.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30390","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t우주왕자 VITAS는 지구인들과 친해지기 위해 사교파티를 열었다. VITAS는 포도주 A$A$병과 빵 B$B$개를 가지고 있고, 포도주 한 병을 빵 한 개로 바꾸거나 빵 한 개를 포도주 한 병으로 바꾸는 마법을 최대 K$K$번 부릴 수 있다.\n\nVITAS는 초대한 모든 지구인에게 각각 동일한 수의 포도주와 빵을 나눠 줄 것이다. 한 종류를 아무에게도 나눠 주지 않는 것도 가능하다. 단, 포도주와 빵을 나눠주고 난 뒤 남은 것이 있으면 안 된다.\n\nVITAS가 위 조건을 만족시키면서 초대할 수 있는 지구인의 수의 최댓값을 구하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30443","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMinsu, who is attending university in Seoul, is planning a gourmet trip to Busan by train for the summer vacation. After researching all the restaurants along the way from Seoul to Busan, he finds that most of them are located in cities with stations on the Gyeongbu(GB) train line, and there are occasionally restaurants in cities a bit far from the GB train line stations. Minsu decides to visit the restaurants by getting off at the cities with stations while traveling from Seoul to Busan on the GB train line. In the case that a restaurant is in a city a bit far from a station on the GB train line, he plans to get off at the station, takes a taxi to the restaurant, visits it, and then returns to the station to catch the train again. Note that each city has one restaurant where he wants to visit. After successfully completing the trip, Minsu ranks the restaurants he has visited and discovers a curious fact. When he collects the values of the differences in the rankings of the restaurants that are in adjacent cities on his travel route, all the difference values are different. What can have been the rankings of the restaurants that Minsu gives?\n\nLet us represent Minsu’s travel route in the form of a graph. The cities with stations on the GB train line or a bit far from that line where he visits restaurants are represented as nodes. Two nodes corresponding to consecutive cities on the GB train line are connected as an edge and two nodes corresponding to a city X$X$ on the GB train line and a city Y$Y$ a bit far from X$X$ are also connected as an edge. When the total number of cities where Minsu visits restaurants is n$n$, the graph has n$n$ nodes and n−1$n - 1$ edges. Nodes are numbered as distinct integers between 1$1$ and n$n$. For example, the figure below represents Minsu's travel route in the form of an undirected graph with 10$10$ nodes (10$10$ restaurants in 10$10$ cities).\n\n\n\nThe rankings of restaurants assigned by Minsu are integers from 1$1$ to n$n$ without duplication. It can be considered as an assignment of rankings to nodes in the graph. The curious fact that Minsu discovers is that the differences of rankings assigned to any two adjacent nodes are all different. For example, the figure below represents the assigned rankings (blue numbers) and the differences (red numbers) of rankings between adjacent nodes. Note that the differences of rankings are integers from 1$1$ to n−1$n - 1$ without duplication.\n\nGiven a travel route graph for n$n$ cities, write a program to compute the rankings of n$n$ restaurants in the cities satisfying the condition explained above.\n\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30410","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t춘배는 배가 너무 고파서 밥을 모두 먹어 치웠고 현재 춘배의 앞에는 N$N$개의 접시가 있다. i$i$번째 접시의 두께는 정수 Ai$A_i$로 표현되는데, 이제 배부르기 때문에 재미있는 놀이를 해보려고 한다.\n\n\n\n다음과 같이 접시를 포갤 수 있을 때, 마지막에 남는 가장 두꺼운 접시의 두께를 최대화하는 것이 목표이다.\n\n\n\t두께가 같은 인접한 두 접시를 포개어 두께가 2$2$배가 된 새로운 접시를 그 자리에 놓는다.\n\n\n진짜로 접시를 포개면 깨질 수 있기 때문에 춘배는 당신의 도움을 얻고자 한다. 마지막에 남는 가장 두꺼운 접시의 두께를 최대화해보자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30431","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t꿈에서 일어난 동호는 꿈에서 벌어졌던 일들을 PS 문제로 내기 위해 메모해 놓으려고 한다.\n\n하지만, 동호의 기억력은 좋지 않기 때문에 각 꿈의 마지막 장면만을 기억하고 그 장면으로 가기까지의 과정은 기억하지 못한다!\n\n꿈을 기억해내려는 동호를 위해, A번 문제(Re-verse), B번 문제(Rebirth), C번 문제(Reveals), D번 문제(Reversal), E번 문제(Reavers), F번 문제(Reversi)에서 가능한 출력이 입력으로 들어왔을 때, 가능한 입력 중 아무 하나를 출력하는 프로그램을 작성하시오.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30411","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n춘배는 그래프 게임을 하고 있다. 그래프 게임은 초기에 정점이 N$N$개이고 간선은 0$0$개인 그래프에 방향이 없는 간선을 하나씩 추가하며 진행된다. 정점 번호는 1$1$부터 N$N$까지이다.\n\n간선을 추가할 때 다음 조건을 만족해야 한다.\n\n\n\t이미 그래프에 정점 u$u$와 정점 v$v$를 연결하는 간선이 있다면, 정점 u$u$와 정점 v$v$를 연결하는 간선을 추가할 수 없다.\n\t정점 u$u$와 정점 v$v$를 연결하는 간선을 추가하고 난 그래프에서 포함된 간선의 수가 홀수 개인 사이클이 하나라도 존재한다면 그 간선은 추가할 수 없다. \n\n\n춘배가 조건을 만족하도록 그래프에 간선을 K$K$번 추가할 수 있다면 춘배의 승리이다. 그렇지 않다면 춘배의 패배이다.\n\n춘배가 승리할 수 있는지 알아보고 승리할 수 있다면 춘배가 추가해야 하는 간선 K$K$개를 찾아보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30460","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t i$i$초에 Ai$A_i$의 점수를 얻는 게임이 있다. N$N$초 동안 진행하는 이 게임에서는 점수를 추가로 얻기 위해 T$T$초에 스위치를 눌러 T,T+1,T+2$T,T+1,T+2$초에 얻는 점수를 2$2$배로 만들 수 있다. T$T$초에 스위치를 누르면 T+3$T+3$초부터 다시 스위치를 누를 수 있다.\n\n게임이 진행되는 동안 스위치를 적절하게 눌렀을 때 얻을 수 있는 점수의 최댓값을 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30373","content":"문제\n\nA string \nx\n$x$ is called a prefix of a string \ny\n$y$ if \nx\n$x$ can be obtained by repeating the removal of the last letter of \ny\n$y$ zero or more times. For example, “abac”, “aba”, “ab”, “a”, and an empty string are the prefixes of “abac”.\n\nFor two strings \nx\n$x$ and \ny\n$y$, let \nLCP(x,y)\n$\\text{LCP}(x, y)$be the length of the longest common prefix of \nx\n$x$ and \ny\n$y$. For example, \nLCP(\n$\\text{LCP}($\"abacab\"\n,\n$, $\"abacbba\"\n)=4\n$) = 4$ because the longest common prefix of these two strings is “abac”. Note that \nLCP(x,y)\n$\\text{LCP}(x, y)$ is always defined for any strings \nx\n$x$ and \ny\n$y$ because at least an empty string is one of their common prefixes.\n\nYou are given \nn\n$n$ strings \ns!,…,sn\n$s_!, \\dots, s_n$ and \nm\n$m$ strings \nt1,…,tm\n$t_1, \\dots, t_m$ of lowercase English letters. Then, you are given \nq\n$q$ queries. In each query you are given an integer sequence \na1,…,ak\n$a_1, \\dots, a_k$. Let \nu\n$u$ be the concatenation of \nta1,…,tak\n$t_{a_1}, \\dots, t_{a_k}$. Your task is to calculate \n∑i=1nLCP(u,si)\n$\\sum_{i=1}^{n}{\\text{LCP}(u, s_i)}$."},{"problemId":"30391","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t 1$1$번부터 N$N$번까지 번호가 부여된 N$N$개의 정점을 N−1$N-1$개의 간선으로 연결하여 트리를 만들고자 한다. 이때, 모든 정점의 차수가 K$K$ 이하가 되도록 하면서 지름이 최소가 되는 트리를 아무거나 하나 출력해 보자.\n\n트리의 지름이란, 트리에서 임의의 두 정점 사이의 거리 중 가장 먼 거리를 의미한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30444","content":"문제\n\nConsider a grid of size \nn×n\n$n \\times n$ which has \nn2\n$n^2$ cells. Each cell in the grid is labeled with an integer less than or equal to \nn\n$n$. Cells with the same label belong to a same group.\n\nIf two cells that share a side in the grid belong to the same group, they are said to be connected. If cell \nA\n$A$ is connected to cell \nB\n$B$, and cell \nB\n$B$ and cell \nC\n$C$ are connected, then cell \nA\n$A$ is said to be connected to cell \nC\n$C$ as well.\n\nGiven a grid of size \nn×n\n$n \\times n$, we want to partition the cells in the grid into \nn\n$n$ groups by assigning labels to cells. The conditions that must be observed during partition are as follows.\n\nEach group must contain \nn\n$n$ cells.\nCells belonging to the same group must be connected.\n\nFor example, when \nn=3\n$n = 3$, the partition shown in Figure B-1(A) does not meet the conditions because cells in the group \n1\n$1$ (cells labeled \n1\n$1$) are not connected. Cells in the group \n2\n$2$ are not connected either. On the other hand, the other partitions (i.e., except (A)) shown in Figure B-1 satisfy the above conditions.\n\nFigure B-1. Examples of grid partition\n\nIf you rotate the grid shown in Figure B-1(C) \n90\n$90$ degrees clockwise, it will be equal to Figure B-1(E) and if you flip it upside down, it will be Figure B-1(F). In short, the partition shown in Figure B-1(C) becomes the same partition as the partition shown in Figure B-1(F) through rotation and flipping, so these are considered the same partition. In this way, all partitions that obtained by applying consecutive rotations or flips to a partition are considered the same partition.\n\nComparing the partition shown in Figure B-1(D) with the partition shown in Figure B-1(F), only the assigned group numbers are different, however the partition itself can be seen as the same. Hence, the partition shown in Figure B-1(D) and that in shown B-1(F) are considered the same partition. In this way, grids with different labeling numbers but the same partitioning structure are all the same partition.\n\nTo be more precise, partition (C), partition (D), partition (E), and partition (F) shown in Figure B-1 are all the same.\n\nGiven an Math input error\nMath input error\n$n × n$ grid with numbers pre-assigned to some cells, we want to assign a number to each unnumbered cell such that the resulting grid is partitioned so that it satisfies the conditions described above. Partitions can differ depending on how they assign numbers to unnumbered cells.\n\nFor example, suppose we are given as input the \n4×4\n$4 \\times 4$ grid shown in Figure B-2. Cells numbered \n0\n$0$ indicate that they are not assigned any number.\n\nFigure B-2. An example of a \n4×4\n$4 \\times 4$ input grid\n\nFigure B-3 shows three different results for partitioning the grid while maintaining the pre-assigned cell numbers in the input grid shown in Figure B-2.\n\nFigure B-3. Different partitions obtained from the input shown in Fig. B-2\n\nGiven an integer \nn\n$n$ representing the size of the grid, a positive integer \nk\n$k$, and information on numbers pre- assigned to some cells in the \nn×n\n$n \\times n$ grid, you are to write a program which computes the total number of different partitions and finds \nk\n$k$ different partitions while maintaining the pre-assigned cell numbers. If there are no pre-assigned cells in the input grid, your program computes the number of all different partitions that exist in the input grid and finds any \nk\n$k$ different partitions among all the partitions."},{"problemId":"30432","content":"문제\n\nNick has always struggled with maintaining habits. The problem is that he just can't stop maintaining them. If Nick does something \nK\n$K$ times in a row, he has to keep doing it forever.\n\nLuckily, he has started visiting Dr Patternson, an expert in PBT (Pattern Breaking Therapy). The principle of PBT is simple: Nick will visit Dr Patternson every day, and if he has done the same thing \nK\n$K$ times in a row on a specific visit, the doctor will charge him money. This will motivate Nick to not continue this habit.\n\nPBT has worked out great for Nick, as he has now successfully quit all his habits. Except for one, the habit of visiting Dr Patternson. The frequent visits are starting to take a toll on Nick's economy, so your task is to calculate how many times he has to pay the doctor for the next \nN\n$N$ days.\n\nFormally, let \ns=s1s2s3…sN\n$s = s_1s_2s_3\\dots s_N$ be a string consisting of zeroes and ones. A one means that Nick has to pay the doctor on the \ni\n$i$th day. This string is generated one character at a time, in the following way:\n\n \nsi=0\n$s_i = 0$ if \ni≤K\n$i \\leq K$.\nIf \ni>K\n$i > K$, then \nsi=1\n$s_i = 1$ if the previous characters contains a pattern that repeats \nK\n$K$ times. More specifically, let \ns′=s1s2…si−1\n$s' = s_1s_2\\dots s_{i-1}$. If there is a nonempty string \nt\n$t$ such that the last \n|t|⋅K\n$|t|\\cdot K$ characters of \ns′\n$s'$ can be written as \nt+t+⋯+t\n$t+t+\\dots + t$, then \nsi=1\n$s_i = 1$. Otherwise \nsi=0\n$s_i = 0$.\n\nYou are given the numbers \nN\n$N$ and \nK\n$K$, and your task is to calculate the number of ones in the string \ns\n$s$.\n\nThe picture represents Sample 1. An angry face means that Nick had to pay on the corresponding day."},{"problemId":"30374","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA string consisting only of parentheses ‘(‘ and ‘)’ is called balanced if it satisfies one of the following conditions.\n\n\n\tIt is an empty string.\n\tIt is a concatenation of two non-empty balanced strings.\n\tIt is a concatenation of ‘(‘, a$a$, and ‘)’, for some balanced string a$a$.\n\n\nYou are given n$n$ characters s1,…,sn$s_1, \\dots , s_n$ of parentheses and n$n$ integers c1,…,cn$c_1, \\dots , c_n$. Then, you have to choose zero or more integers t1,…,tk$t_1, \\dots ,t_k$ so that they satisfy the following conditions.\n\n\n\t 1≤t1<t2<t3<⋯<tk≤n$1 \\le t_1 < t_2 < t_3 < \\dots < t_k \\le n$.\n\tThe concatenation of st1,st2,…,stk$s_{t_1}, s_{t_2}, \\dots , s_{t_k}$ is a balanced string.\n\n\nNote that the above conditions are always satisfied if you choose zero integers.\n\nYour task is to maximize ∑i=1kcti$\\sum_{i=1}^{k}{c_{t_i}}$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30412","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t춘배는 혼자 있는 것을 좋아한다. 오늘은 이안이가 춘배를 데리고 공원으로 산책을 나왔다. 공원에는 N$N$개의 탑으로 이루어진 특이한 모양의 장식물이 있었다. 춘배는 탑에 올라가고 싶어했지만, 산책을 나온 다른 고양이들도 탑에 올라가 있었고 춘배는 근처에 다른 고양이가 있는 것이 싫었다.\n\n\n\n그래서 춘배는 이안이에게 근처에 높이가 비슷한 탑이 없게 만들어달라고 했다. 춘배는 양옆에 있는 탑과의 높이의 차이가 모두 X$X$ 이상이 되도록 하고 싶었다. 장식 양 끝에 있는 탑의 경우 한쪽만 고려하면 된다. 이안이는 새로운 탑을 만들면 제일 좋겠지만, 그 정도까지의 권한은 없어 높이를 조정하는 방법을 택하기로 했다.\n\n이안이는 공원의 돌로 탑의 높이를 1$1$씩 증가시킬 수 있다. 이안이는 밤이 되고 고양이가 모두 집에 간 다음 공사를 시작할 것이라 미리 계산을 해놓기로 했다. 어떤 탑을 골라 높이를 1$1$ 증가시키는 것을 한 번의 시행이라 할 때 이안이가 춘배가 원하는 자리를 만들 수 있는 최소 시행 횟수를 구해보자. 이안이는 탑의 높이를 제한 없이 늘릴 수 있다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30461","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t건덕이는 일감호에 딸린 작은 섬, 와우도에 앉아 세월을 낚아 올리는 중이다.\n\n\n\n일감호는 N×M$N\\times M$ 공간으로 나타낼 수 있다. 공간은 1×1$1\\times 1$ 크기의 정사각형 칸으로 나누어져 있고, 각 칸에는 물고기가 여럿 존재한다. 가장 수심이 깊으면서 건덕이로부터 가장 먼 칸은 (N,M)$\\left( N,M \\right)$이다.\n\n건덕이는 낚싯대를 휘둘러 원하는 칸에 미끼를 던질 수 있다. 무게가 a$a$인 무게추를 매달아 b$b$만큼의 힘으로 낚싯대를 휘두르면 (a,b)$\\left( a,b \\right)$ 칸에 미끼가 존재하게 된다.\n\n미끼는 일감호 공간 안에서 물고기들을 사로잡는데, 그 대상은 미끼가 속한 칸으로부터 수면까지 존재하는 모든 칸에 있는 물고기들이다. 즉, (a,b)$\\left( a,b \\right)$에 존재하는 미끼는 1≤i≤a$1\\leq i\\leq a$인 모든 정수 i$i$에 대해서 (i,b)$\\left( i,b \\right)$에 존재하는 모든 물고기를 사로잡는다.\n\n건덕이가 낚싯줄을 한 바퀴 감아올리면, (a,b)$\\left( a,b \\right)$에 위치한 미끼는 (a−1,b−1)$\\left( a-1,b-1 \\right)$로 이동하며, 이동한 위치에서 물고기를 사로잡는다. 미끼가 일감호의 공간을 벗어나면 즉시 회수된다.\n\n건덕이가 무게추의 무게와 낚싯대를 휘두를 힘을 알려줄 때마다, 낚싯대를 휘두른 뒤 회수할 때까지 낚싯줄을 감아올리면 몇 마리의 물고기가 사로잡힐지 구해줘야 한다. 건덕이가 많은 물고기를 잡을 수 있도록 도와주자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30392","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t어떤 무방향 가중치 그래프가  K$K$분 그래프라는 건, 그래프의 모든 닫힌 보행 P$P$에 대해, P$P$의 간선 가중치 합이 항상 K$K$의 배수인 그래프를 의미한다. 이때 하나의 간선을 여러 번 사용했다면 간선 가중치 합에도 여러 번 더해진다.\n\n무방향 가중치 그래프 G$G$와 양의 정수 K$K$가 주어질 때, G$G$가  K$K$분 그래프인지 판별해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30462","content":"문제\n\n길이가 \nN\n$N$인 순열은 \n1\n$1$부터 \nN\n$N$까지의 정수가 정확히 한 번씩 등장하는 수열이다. 예를 들어, \n[2,3,1,5,4]\n$\\left[ 2,3,1,5,4 \\right]$는 순열이지만 \n[1,2,2]\n$\\left[ 1,2,2 \\right]$는 \n2\n$2$가 두 번 등장하기 때문에 순열이 아니다. 또한 \n[1,3,4]\n$\\left[ 1,3,4 \\right]$도 길이가 \n3\n$3$이지만 \n4\n$4$가 등장하기 때문에 순열이 아니다.\n\n길이가 \nN\n$N$인 순열 \nA\n$A$가 주어졌을 때, 수열 \nB\n$B$를 다음과 같이 정의하자.\n\n \nBi=MEX({A1,A2,⋯,Ai}) (1≤i≤N)\n$$B_i=\\operatorname{MEX}\\left( \\{A_1,A_2,\\cdots ,A_i\\} \\right)\\ (1 \\leq i \\leq N)$$ \n\n길이가 \nN\n$N$인 수열 \nB\n$B$가 주어질 때, 순열 \nA\n$A$를 구해보자.\n\n \nMEX(S)\n$\\operatorname{MEX}\\left( S \\right)$는 집합 \nS\n$S$에 포함되지 않는 가장 작은 양의 정수이다. 예를 들어, \nMEX({1,2,5})=3\n$\\operatorname{MEX}\\left(\\{ 1,2,5 \\}\\right) =3$이고 \nMEX({2,3,4})=1\n$\\operatorname{MEX}\\left(\\{ 2,3,4 \\}\\right) =1$이다. 이 문제에서 정의한 \nMEX\n$\\operatorname{MEX}$는 그 값으로 \n0\n$0$이 나올 수 없음에 주의하라."},{"problemId":"30375","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou have a table with H$H$ rows and W$W$ columns. Each cell of the table contains a letter.\n\nYou are going to construct a string by the following steps.\n\n\n\tStep 1: Pick up a cell in the table and let S$S$ be a string of length 1$1$ containing the letter in the cell.\n\tStep 2: Do either\n\t\n\t\tstop building S$S$, or\n\t\tselect a cell from four cells which shares an edge with the current one. Then, append the letter in the cell to S$S$, and move to the cell. Then, repeat step 2.\n\t\n\t\n\n\nYou also have a string T$T$. Your mission is to minimize the edit distance between S$S$ and T$T$.\n\nThe edit distance (also known as Levenshtein distance) between string U$U$ and V$V$ is the minimum number of steps required to convert U$U$ into V$V$ by using the following operations.\n\n\n\tReplace a character in U$U$ with another one.\n\tInsert a character into U$U$.\n\tDelete a character from U$U$.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30445","content":"문제\n\n코로나 19이후 우울함에 빠져 있는 소년 짐(Jim)은 세상의 모든 짐을 지고 있는 느낌이다. 짐은 친구들의 행복 정도를 측정하고 싶어졌다. 짐이 생각한 한 가지 방법은 친구들이 보낸 문자메시지를 분석하여 친구들이 행복한지 판단하는 것이다. 문자 메시지의 글자가 단어 “HAPPY”에 나타나면 그 글자는 행복한 글자이고 단어 “SAD”에 나타나면 그 글자는 우울한 글자이다. 글자 ‘A’는 양쪽에 모두 나타나므로 행복하기도 하고 우울하기도 한 글자이다. 글자 ‘B’는 어느 쪽에도 나타나지 않으므로 행복하지도 않고 우울하지도 않은 글자이다.\n\n메시지의 행복 지수는 행복 점수와 우울 점수를 이용하여 계산하는데, 행복 점수와 우울 점수는 글자가 행복한 글자인지 우울한 글자인지 여부에 따라 계산한다. 어떤 글자가 행복하면 행복 점수 \nPH\n$P_H$를 하나 증가시키고 어떤 글자가 우울하면 우울 점수 \nPG\n$P_G$를 하나 증가시킨다. 행복 지수 \nH\n$H$는 다음과 같이 계산한다:\n\n \nH=PHPH+PG\n$$H = \\frac{P_H}{P_H + P_G}$$ \n\n행복하지도 않고 우울하지도 않은 글자는 \nPH\n$P_H$나 \nPG\n$P_G$ 어느 쪽에도 계산하지 않는다. 행복 점수와 우울 점수가 모두 \n0\n$0$인 경우(\nPH=PG=0\n$P_H = P_G = 0$)에 행복 지수는 \n0.5\n$0.5$라고 가정한다.\n\n예를 들어, 친구로부터 온 메시지가 다음과 같다고 하자.\n\n“SAD MOVIES ALWAYS MAKE ME CRY”\n\nA와 Y가 각각 \n4\n$4$회, \n2\n$2$회 나타났으므로 행복 점수는 \n6\n$6$이다 (A는 SAD에 한 번, ALWAYS에 두 번, MAKE에 한 번 나타나고, Y는 ALWAYS와 CRY에 각각 한 번씩 나타남). S와 A, D가 각각 \n3\n$3$ 회, \n4\n$4$ 회, \n1\n$1$ 회 나타났으므로 우울 점수는 \n8\n$8$이다 (S는 SAD와 MOVIES, ALWAYS 에 각 한 번, \nA\n$A$는 행복 점수 산출시와 마찬가지로 \n4\n$4$번, D는 SAD에 한 번 나타남). \nPH=6\n$P_H = 6$이고 \nPG=8\n$P_G = 8$이므로 행복 지수는 \nH=614=0.4286\n$H = \\frac{6}{14} = 0.4286$, 즉 \n42.86%\n$42.86\\%$로 산출된다. 행복 지수가 \n50%\n$50\\%$보다 낮으므로 친구는 우울하다.\n\n짐의 친구의 문자 메시지가 주어졌을 때, 친구의 행복 지수를 계산하는 프로그램을 작성하라."},{"problemId":"30413","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n(잠이 안 오는 춘배의 모습)\n\n춘배는 오늘도 열심히 활동을 마친 후 자려 하지만 도저히 잠이 안 온다. 춘배는 잠을 자기 위해 자신만의 방법으로 양을 세려는데 한 마리씩 세지 않고 여러 마리를 한꺼번에 세면서 자려 한다.\n\n춘배는 일단 양의 정수 A$A$를 정한다. 그 후 양을 셀 때 첫 번째에 센 양의 수는 항상 1$1$로 두고, 그 뒤 두 번째에 센 양의 수는 A$A$, 세 번째에 센 양의 수는 A2$A^{2}$ 이렇게 점점 양의 수를 세어 간다. 즉, n$n$번째에 센 양의 수는 An−1$A^{n-1}$ 가 된다.\n\n춘배는 이러한 방식으로 양을 세다 문득 자신이 첫 번째부터 B$B$번째까지 센 모든 양의 수가 얼마나 될지 궁금해졌다. 춘배를 위해 첫 번째부터 마지막 B$B$번째까지 센 모든 양의 수가 몇 마리인지 구해보자! 하지만 수가 너무 커질 수 있기에 1000000007(=109+7)$1\\,000\\,000\\,007(= 10^{9} + 7)$로 나눈 나머지를 구하자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30433","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tErik and his grandpa often go to the forest to pick blueberries. Grandpa always finds the most berries, and even though it is not a competition, Erik has had enough of this. He has observed that grandpa uses a simple greedy strategy to pick as many berries as possible. With this information, Erik will try to finally pick at least as many berries as grandpa.\n\nThe blueberry shrubs can be represented as a string s=s1s2…sN$s = s_1s_2 \\dots s_N$ of length N=105$N = 10^5$, consisting of characters . and b. If si=$s_i =$ b, then there is a berry at position i$i$, otherwise there is no berry there. There will be exactly N/2$N/2$ berries to start with, and they are distributed uniformly at random.\n\nThe berry picking takes place in turns. In one move, a person can choose a position i$i$ (1≤i≤N−3$1 \\leq i \\leq N-3$), and pick all the berries at positions i$i$, i+1$i+1$, i+2$i+2$, and i+3$i+3$. Grandpa makes the first move, then Erik makes a move, then grandpa, and so on. Grandpa will always greedily make a move that picks as many berries as possible. Among all such moves, he will pick one uniformly at random.\n\nYou are given the string s$s$, and your task is to write a program that decides what moves Erik should make in order to pick at least as many berries as grandpa.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30393","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t최근 P=NP 임을 증명하여 세계적인 스타가 된 김채완 교수는, 신학기에 그 증명을 리뷰하는 강의를 개설하였다. 이 강의는 김채완 교수의 훈훈한 외모에 힘입어 엄청난 인기를 얻었고, 결국 월향대의 모든 학생이 이 강의를 수강신청하기에 이르렀다.\n\n자비로운 김채완 교수는 모든 학생에게 공평하게 기회를 주기 위해 각 학생이 뽑힐 확률이 균등하도록 정확히 M$M$명을 뽑아 수강 자격을 주기로 하였다. 월향대학교에는 N$N$개의 학부가 있고, i$i$번째 학부에는 Ai$A_i$명의 학생이 소속되어 있을 때, 수강 자격을 얻은 학생 중 학부가 같은 학생 쌍의 개수의 기댓값을 구해보자. 단, 한 학생은 정확히 하나의 학부에 소속되어 있다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30376","content":"문제\n\nJAG is a country with \nn\n$n$ airports numbered through \n1\n$1$ to \nn\n$n$. There are some airways, each of which connects two different airports bidirectionally. In other words, if an airway connects airports \nu\n$u$ and \nv\n$v$, a passenger can move either from \nu\n$u$ to \nv\n$v$ or from \nv\n$v$ to \nu\n$u$ in a single flight. Airways may be newly established or abolished.\n\nMr. Oddytrip, who is a traveler loving odd numbers, plans a trip from an airport to another one by flights. Let’s say that he boards \nk\n$k$ flights: A flight from \np1\n$p_1$ airport to \np2\n$p_2$, then from \np2\n$p_2$ to \np3\n$p_3$, then from \np3\n$p_3$ to \np4\n$p_4$, and so on, and finally from \npk\n$p_k$ to \npk+1\n$p_{k+1}$. This trip plan, which begins with \np1\n$p_1$ and ends with \npk+1\n$p_{k+1}$, is written as \np1→p2→p3→p4→⋯→pk→pk+1\n$p_1 \\rightarrow p_2 \\rightarrow p_3 \\rightarrow p_4 \\rightarrow \\cdots \\rightarrow p_k \\rightarrow p_{k+1}$. According to his aesthetics, a trip plan is beautiful if each of \nn\n$n$ airports appear an odd number of times in the trip plan. For example, if \nn=6\n$n = 6$, trip plans \n3→4→5→6→1→2\n$3 \\rightarrow 4 \\rightarrow 5 \\rightarrow 6 \\rightarrow 1 \\rightarrow 2$ and \n1→2→3→4→5→3→2→3→2→6\n$1 \\rightarrow 2 \\rightarrow 3 \\rightarrow 4 \\rightarrow 5 \\rightarrow 3 \\rightarrow 2 \\rightarrow 3 \\rightarrow 2 \\rightarrow 6$ are beautiful while \n1→3→6\n$1 \\rightarrow 3 \\rightarrow 6$ and \n1→2→3→4→1→5→6\n$1 \\rightarrow 2 \\rightarrow 3 \\rightarrow 4 \\rightarrow 1 \\rightarrow 5 \\rightarrow 6$ aren’t. In particular, each of the \nn\n$n$ airports appears at least one in a beautiful trip plan.\n\nInitially, there are \nm\n$m$ airways. Then, you are given \nq\n$q$ queries, which should be processed in the order they are given. Each query is of one of the two kinds below:\n\n \n1\n$1$ \nx\n$x$ \ny\n$y$: The existence of the airway between airports \nx\n$x$ and \ny\n$y$ changes. If there is already an airway between airports \nx\n$x$ and \ny\n$y$, then such an airway is abolished. In other words, Mr. Oddytrip is no longer able to board the direct flight between airports \nx\n$x$ and \ny\n$y$ (until it is newly established again). On the other hand, if there wasn’t such an airway before, an airway between airports \nx\n$x$ and \ny\n$y$ is newly established. In other words, Mr. Oddytrip can board a direct flight between airports \nx\n$x$ and \ny\n$y$ (until it is abolished again).\n \n2\n$2$ \nx\n$x$ \ny\n$y$: You have to determine whether there can be a beautiful trip plan which begins with airport \nx\n$x$ and ends with airport \ny\n$y$ using the airways which are available at that time."},{"problemId":"30463","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t서로 다른 문자의 개수가 K$K$개인 문자열을 K-문자열이라고 하자.\n\n길이가 10$10$이고 숫자로만 이루어진 문자열 N$N$개가 주어진다. 두 문자열 si,sj(1≤i<j≤N)$s_i,s_j\\left(1 \\le i<j \\le N \\right)$을 이어 붙였을 때 K-문자열이 될 수 있는 순서쌍 (i,j)$\\left( i,j \\right)$의 개수를 구해보자. 입력으로 주어지는 문자열과 이어 붙인 문자열은 0$0$으로 시작할 수 있다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30434","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe Roman numerals are a numeral system that originated in ancient Rome and was widely used throughout Europe well into the Late Middle Ages. It differs from the Arabic system that we mostly use today in that numbers are written with combinations of letters from the Latin alphabet, where each letter is assigned a fixed integer value.  Over the years many different letters were used, which was a cause of frequent confusion.  But \"modern\" style uses only these seven:\n\n\n\t\n\t\t\n\t\t\tI\n\t\t\tV\n\t\t\tX\n\t\t\tL\n\t\t\tC\n\t\t\tD\n\t\t\tM\n\t\t\n\t\t\n\t\t\t1\n\t\t\t5\n\t\t\t10\n\t\t\t50\n\t\t\t100\n\t\t\t500\n\t\t\t1000\n\t\t\n\t\n\n\nA very common misunderstanding of the Roman numerals is that they use a universal subtractive syntax. In a subtractive syntax, a lower digit written before a larger digit will be subtracted from the larger digit. 4 can be written as IIII and IV (5−1)$(5-1)$. Romans themselves only really used the subtractive syntax for smaller numbers. For larger numbers, it was largely avoided, to give more clarity. For example, 499$499$ can be written LDVLIV, XDIX, VDIV or ID, while older sources most likely would use CDXCIX. Ain't Roman numbers fun?\n\nYou are given n$n$ numbers written in the Roman numeral system, and your task is to convert them to the regular Arabic number system.\n\nFor the purposes of this problem we will subtract any digit written to the left of a larger digit, even if they are not directly adjacent.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30446","content":"문제\n\n어떤 양의 정수 \nP\n$P$에 대해 \nP\n$P$를 구성하는 숫자들을 왼쪽부터 적는 경우와 오른쪽부터 적은 결과가 서로 일치할 경우, \nP\n$P$를 회문수(palindrome number)라 한다. 예를 들어 \n1\n$1$, \n101\n$101$, \n12322321\n$12322321$은 모두 회문수이다. 양의 정수 \nn\n$n$이 주어졌을 때, \nn\n$n$ 이하의 서로 다른 회문수의 개수를 출력하는 프로그램을 작성하시오. 예를 들어 \nn=20\n$n = 20$ 인 경우, \n20\n$20$ 이하의 회문수는 총 \n10\n$10$개 (\n1\n$1$, \n2\n$2$, \n3\n$3$, \n4\n$4$, \n5\n$5$, \n6\n$6$, \n7\n$7$, \n8\n$8$, \n9\n$9$, \n11\n$11$) 존재한다."},{"problemId":"30435","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tJohn and Hans are playing a game involving 3 dice. Even though they are all 6-sided, they are not guaranteed to be identical.\n\nFirst John picks one of the dice and then Hans picks one of the remaining two. Then they both roll their chosen die. If they roll the same number, they both re-roll their die. Otherwise the winner is the one who rolled the highest number.\n\nIn case neither John or Hans can win with their chosen dice, they do not bother to re-roll the dice indefinitely and no winner is declared.\n\nCan you help John pick a die that guarantees that he wins with a probability of at least 12$\\frac{1}{2}$?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30377","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThere is an integer x$x$, initially zero.\n\nThere are n$n$ operations. Each operation is one of the following types:\n\n\n\t1 a b: Add a⋅2b$a \\cdot 2^b$ to x$x$ where a$a$ is an integer (that can be negative) and b$b$ is a non-negative integer.\n\t2 k: Write x$x$ in binary, and compute the value of the digit corresponding to a weight of 2k$2^k$.\n\n\nIt is guaranteed that x≥0$x \\geq 0$ at any time.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30394","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n버니어 캘리퍼스(Vernier Calipers)는 길이나 높이, 너비 등 기계류 또는 사람의 신체 부위 치수를 정밀하게 측정하는 자의 일종이다. 자 부분과 날 부분으로 구성되어 있으며, 두 날 부분 사이에 물건을 끼워 너비를 잰다. 재휘는 알고리즘 수업 시간에 기하학 알고리즘 중 볼록 껍질에서 사용되는 '회전하는 캘리퍼스' 알고리즘을 배웠다. 그런데 알고리즘을 있는 그대로 받아들인 재휘는 문득 캘리퍼스를 껍질 주위로 돌리는 것이 매우 어려운 일이라는 사실을 깨달았다. 그래서 재휘는 좀 더 쉬운 회전하지 않는 캘리퍼스 알고리즘을 고안해냈다.\n\n회전하지 않는 캘리퍼스 알고리즘은 다음과 같다. 먼저, 한 평면 위의 점 N$N$개가 주어진다. 그다음 캘리퍼스를 측정하고자 하는 점의 집합과 동일한 평면에 놓고 자 부분이 y$y$축과 평행하도록 세운다(날 부분이 x$x$축과 평행하게 한다). 이후 캘리퍼스의 날을 충분히 크게 벌리고 조금씩 좁혀가며 날이 점에 닿게 되면 멈춘다. 이때, 캘리퍼스의 크기는 충분히 크고, 캘리퍼스가 측정한 거리 값이 실행 결과가 된다.\n\n이제 회전하지 않는 캘리퍼스 알고리즘을 구현해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30414","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n춘배 나라에는 1$1$부터 N$N$까지의 번호가 붙은 N$N$개의 산, 그리고 두 산 사이를 이동할 수 있는 N−1$N-1$개의 길이 있다. 게다가 임의의 두 산 사이를 항상 길을 통해 이동할 수 있다고 한다. 즉, 산을 정점, 길을 간선으로 생각하면 춘배 나라는 트리 형태이다.\n\n춘배는 꿈에서 사단장이 되었다. P$P$번 산에는 병사가 N$N$명인 부대가 있다. 춘배의 첫 번째 지시로 P$P$번 산에 있는 부대에 지시를 내려, 나라에 있는 모든 산의 높이(Ai)$(A_i)$를 자신이 원하는 산의 높이(Bi)$(B_i)$로 바꾸어 달라고 하였다. 단, 모든 원래 산의 높이와 춘배가 원하는 산의 높이는 항상 양의 정수이다.\n\n고양이 병사가 할 수 있는 작업은 아래와 같다.\n\n\n\t산의 높이를 X$X$만큼 깎는다. 이 작업을 수행할 시 작업을 수행한 병사는 흙을 X$X$만큼 얻게 된다.\n\t작업을 하는 병사가 소유한 흙을 X$X$만큼 소비해 산의 높이를 X$X$만큼 늘린다. 보유한 흙이 X$X$보다 적을 때에는 작업을 할 수 없다.\n\t흙을 X$X$만큼 구매하여 구매한 병사는 흙을 X$X$만큼 얻게 된다. 이 경우 춘배는 X$X$원을 소비하게 된다.\n\t길을 통해 연결된 다른 산으로 이동한다. 만약 길이 자신이 이미 지나왔던 길이라면, 이동할 수 없다.\n\n\n각 병사는 작업을 원하는 만큼 할 수 있다. 초기에 모든 병사는 흙을 0$0$만큼 가지고 있고 흙을 양도 할 수 없다.\n\n춘배 나라의 각 부대의 병사 인원은 N$N$명이고 부대의 병사들은 서로 다른 길로 이동할 수 있다. 각 병사가 작업을 적절히 하여 모든 산을 춘배가 원하는 높이로 완성 시킬 때 춘배가 소비하는 돈의 최솟값을 출력하라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30464","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t건덕이는 학교에 가기 너무 싫은 나머지 최대한 늦게 학교에 도착하려고 한다. 등굣길은 N$N$개의 칸이 가로로 놓인 형태이며, 각 칸은 가장 왼쪽 칸부터 오른쪽으로 1$1$부터 N$N$까지 번호가 매겨진다. 건덕이는 1$1$번 칸에, 학교는 N$N$번 칸에 존재한다.\n\n건덕이는 처음에 학교를 바라보는 방향으로 서 있다. 등교하는 방법은 특이한데, 1$1$분마다 현재 자신이 서 있는 칸에 쓰인 수만큼 바라보는 방향으로 이동한다. 이때, 등굣길을 벗어나도록 이동할 수 없다.\n\n건덕이는 바라보는 방향을 최대 두 번 반전할 수 있다. 학교가 있는 칸에 처음으로 도착하는 시간을 최대한 늦추면 출발 몇 분 뒤에 도착할까? 건덕이가 방향을 반전하는 데 드는 시간은 무시한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30436","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tSara is doing her summer internship at NCPC (Never Crashing Personal Computers). One day, a rare creature appeared in the office: an algorithmic problem!\n\nThe company has a machine that places electronic components on circuit boards. Normally, it would do this one component at a time. But recently the machine has received an update which allows it to place two different components simultaneously. The bottleneck then becomes the component with greater placement time. Now it is far from obvious what strategy the machine should use in order to minimize the total placement time. Sara decides to write an algorithm to determine this strategy. \n\nYou have N$N$ different types of electronic components. There are fi$f_i$ copies of the i$i$th type, and the components of this type have a placement time of ti$t_i$ nanoseconds. The goal is to place all of the components using a sequence of moves. In one move, the machine can take two components of type i$i$ and j$j$, where i≠j$i \\neq j$, and place both of them simultaneously. This takes max(ti,tj)$\\max(t_i, t_j)$ nanoseconds. The machine can also place a single component of type i$i$ in one move, which takes ti$t_i$ nanoseconds.\n\nCalculate the minimum possible time to place all components.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30378","content":"문제\n\nThere are \nn\n$n$ worms numbered from \n1\n$1$ to \nn\n$n$. The length of a worm can be represented by a positive integer between \n1\n$1$ and \n6\n$6$. You want to arrange the worms into several queues. Initially, each worm is in its own queue with only one worm (itself). Each worm is both at the front and at the end of its queue.\n\nThere are \nm\n$m$ operations. Each operation is one of the following three types:\n\n1 i j where \n1≤i,j≤n\n$1 \\leq i,j \\leq n$: Merge the queue worm \ni\n$i$ is in with the queue worm \nj\n$j$ is in. In the new queue, worm \nj\n$j$ will be immediately after worm \ni\n$i$ (and for the rest of the worms, the worm before/after them remains unchanged). It is guaranteed that worm \ni\n$i$ is at the tail of some queue , worm \nj\n$j$ is at the front of some queue, and \ni,j\n$i,j$ are not in the same queue.\n2 i where \n1≤i≤n\n$1 \\leq i \\leq n$: Split the queue between worm \ni\n$i$ and the worm immediately after \ni\n$i$. It is guaranteed that worm \ni\n$i$ is not at the tail of some queue.\n3 s k where \nk\n$k$ is a positive integer and \ns\n$s$ is a numeric string with length at least \nk\n$k$: Find the product of \nf(t)\n$f(t)$ modulo \n998244353\n$998\\,244\\,353$ where \nt\n$t$ is over all substrings of length \nk\n$k$ in \ns\n$s$. There are \n|s|−k+1\n$|s| - k + 1$ such substrings \nt\n$t$ given \ns\n$s$ and \nk\n$k$.\n\nThe definition of \nf(t)\n$f(t)$ is given below.\n\nFor a given queue, the \nk\n$k$-string after worm \ni\n$i$ is obtained by starting from worm \ni\n$i$, walking towards the tail of the queue, and finding the \nk\n$k$ nearest worms to \ni\n$i$, including \ni\n$i$, and concatenating the lengths of these worms. If there are fewer than \nk\n$k$ worms before reaching the tail, then worm \ni\n$i$ won't have a \nk\n$k$-string. For example, if the numbers of worms in a queue are \n10,22,3\n$10,22,3$ and they have lengths \n4,5,6\n$4,5,6$; then the 3-string after worm \n10\n$10$ is \n456\n$456$, worm \n22\n$22$ does not have a 3-string, but its 2-string is \n56\n$56$ and its 1-string is \n5\n$5$.\n\n \nf(t)\n$f(t)$ denotes the number of worms whose \nk\n$k$-string is exactly \nt\n$t$."},{"problemId":"30379","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThere is a pool that can be modeled as a rectangular grid with width N$N$ meters and height 1001 meters. The bottom edge of the grid corresponds to a beach. Each 1m×1m$1m \\times 1m$ square cell of the grid represents a unit of sea.\n\nA safe area for swimming shall satisfy the following constraints:\n\n\n\tAll cells in the pool are safe.\n\tMust be rectangular.\n\tMust be adjacent to the bottom edge (i.e. the beach).\n\n\nGiven that each square cell of 1m×1m$1m \\times 1m$ has probability q$q$ to be safe (independently), and 1−q$1-q$ probability to be not safe, find the probability such that the largest safe area for swimming is exactly K$K$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30395","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t백준 온라인 저지(BOJ)에는 문제들에 태그와 난이도를 붙이는 커뮤니티 프로젝트인 solved.ac가 있다. 이외에도 뱃지 또는 배경을 통해 프로필을 꾸밀 수 있고, 아레나를 개최하고 있다.\n\nsolved.ac에서는 스트릭이라는 요소가 존재하는데, 이는 백준에서 하루에 한 문제 이상을 며칠 동안 연속으로 풀었는지 보여주는 지표다. 총 x$x$일 동안 매일 1문제 이상을 빠짐없이 풀었다면 스트릭 x$x$일이라고 한다. 그러나, 하루에 한 문제 이상 풀더라도 스트릭 계산 시에는 1문제 해결과 동일하게 취급된다. 스트릭 기간이 길어지면 뱃지와 배경 등 다양한 프로필 꾸미기 요소를 지급 받을 수 있다.\n\n예환이는 한별이 배경을 얻기 위해 solved.ac에서 열심히 스트릭을 이어 나가고 있었다. 그러던 어느 날, 깜빡하고 잠이 들어 문제를 풀지 못했다! 117일 동안 유지했던 스트릭이 끊어진 예환이는, '스트릭 프리즈'라는 아이템을 계속 구입한 뒤 장착해서 스트릭을 더 이상 끊기지 않도록 할 것이다.\n\n\n\n[스트릭 프리즈]\n\n'스트릭 프리즈'는 장착하면 하루에 문제를 한 문제도 풀지 않은 경우 자동으로 사용되며, 스트릭이 늘어나지는 않지만 끊기지 않게 해준다. '스트릭 프리즈'가 장착되어 있고, i$i$일에 푼 문제 수 Pi$P_i$가 0이라면, '스트릭 프리즈'가 i$i$일에 사용되었다고 정의하자. 하지만, 남용을 막기 위해 최대 1개만 장착할 수 있다. \n\n하지만 예환이는 '스트릭 프리즈'의 장착 여부를 잘 확인하지 않기 때문에 '스트릭 프리즈'가 i$i$일에 사용될 경우, i+2$i+2$일에 새로운 '스트릭 프리즈'를 구매 후 장착한다. 예를 들어, 1일에 문제를 해결하지 않아 '스트릭 프리즈'가 사용되었다면 3일에 새로운 '스트릭 프리즈'를 구입한 뒤 장착한다. 예환이는 '스트릭 프리즈'를 장착한 후 문제를 풀기 시작하므로, 그날 산 '스트릭 프리즈'가 당일 사용되는 것 역시 가능하다.\n\n예환이는 처음에 '스트릭 프리즈'를 장착한 채로 문제를 풀기 시작한다. 예환이가 문제를 해결했던 기간 N$N$과 N$N$일 동안 푼 문제 수의 기록이 주어질 때, 예환이의 최장 스트릭을 구해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30447","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA rectangular paper is placed in the first quadrant with its vertex at the origin as shown in the figures below. We will fold this paper along a line which is specified by two points on the different edges of the paper. You are asked to compute the area of the 2D polygonal shape of the folded paper. In the following figures, you can see two papers and the corresponding fold lines (red dotted) and the folded paper (green polygon).\n\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30465","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t 1$1$ 이상 N$N$ 이하의 모든 정수가 한 번씩 등장하는 수열 A1,A2,⋯,AN$A_1, A_2, \\cdots, A_N$이 주어진다. 이 수열에 아래 연산을 0$0$회 이상 적용해서 오름차순으로 만들려고 한다.\n\n\n\t수열의 앞쪽 ⌊N2⌋$\\left\\lfloor \\frac N2 \\right\\rfloor$개의 원소 중 하나와 수열의 뒤쪽 ⌊N2⌋$\\left\\lfloor \\frac N2 \\right\\rfloor$개의 원소 중 하나를 고른 뒤, 두 원소의 위치를 맞바꾼다.\n\n\n수열을 오름차순으로 만드는 데 필요한 최소 연산 횟수를 구하자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30415","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t고양이 리그에서는 고양이로 이루어진 팀들이 승부를 겨룬다.\n\n국제 고양이 스포츠 연맹이 제시한 팀이 만족해야 할 조건은 다음과 같다.\n\n\n\t팀에 속한 선수가 m$m$명이다.\n\t각 선수의 몸값이 1$1$ 이상 n−1$n-1$ 이하의 정수이다.\n\t서로 다른 두 선수의 몸값은 다르다.\n\t임의의 두 선수의 몸값의 최소공배수는 n$n$이다.\n\n\n어떤 재벌 고양이가 최근에 고양이 리그에 관심이 생겨 새 팀을 창단하기로 마음먹었고, 영철이에게 팀 운영을 맡겼다.\n\n\n\n영철이는 급전이 필요하다. 그래서 팀을 승인 날 정도로만 구성하고 최대한 남겨 먹을 생각이다.\n\n영철이를 도와 승인이 나며 선수들의 몸값 합이 최소가 되는 팀을 구해보자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30437","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAivar is very good at number theory. In fact, it is the only thing he is good at, but this doesn't stop him from achieving great things. However, if Aivar wants to solve any problem in life, he first needs to convert it to number theory.\n\nFor example, consider a rooted tree with N$N$ vertices. In order to deal with such structures, Aivar first constructs a divisor labelling of the tree. A divisor labelling is a way to label each vertex v$v$ with a positive integer xv$x_v$ so that v$v$ is an ancestor of u$u$ if and only if xv$x_v$ divides xu$x_u$.\n\nAfter constructing such a labelling, Aivar can simply forget about the tree and just think about the list of numbers x1,x2,…,xN$x_1, x_2, \\dots, x_N$.\n\nYou are given a rooted tree with N$N$ vertices, and your task is to find a divisor labelling. The vertices are numbered from 1$1$ to N$N$, and 1$1$ is the root.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30466","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t 1$1$부터 N$N$까지 번호가 매겨진 N$N$개의 정점으로 이루어진 트리를 구하고자 한다. 1$1$번 정점부터 깊이 우선 탐색과 너비 우선 탐색을 각각 시행했을 때, 다음과 같이 두 수열을 정의한다.\n\n\n\t di=$d_i=$ 깊이 우선 탐색(DFS)에서 i$i$번 정점을 방문한 순서\n\t bi=$b_i=$ 너비 우선 탐색(BFS)에서 i$i$번 정점을 방문한 순서\n\n\n두 번의 탐색에서 각 정점을 방문한 순서의 차이를 모두 더했을 때, 이 값을 최대로 하는 트리를 만들고자 한다. 즉, ∑i=1N|di−bi|$\\sum_{i=1}^{N}{|d_i-b_i|}$를 최대로 하는 트리를 만들어 보자. 순회 후보가 여럿인 경우에는 번호가 더 작은 정점을 먼저 방문한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30396","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t최근 체스에 관심을 가지게 된 창현이와 예환이는 4×4개의 칸이 4행 4열로 이루어진 정사각형 모양의 체스판을 사기로 하였다. 하지만 창현이가 구매 옵션을 잘못 선택하는 바람에 나이트만 가득 들어있는 체스판을 구매해 버렸다! 체스의 기물 중 하나인 나이트는 한 번 이동할 때 현재 위치에서 상하좌우 중 한 방향으로 두 칸 간 후, 그것에 수직인 방향으로 꺾어서 한 칸 더 간다. 나이트가 이동한 후에는 체스판을 벗어나거나 같은 칸에 두 개 이상의 나이트가 존재해서는 안 된다.\n\n\n\n잘못 구매한 체스판을 어떻게 처리할까 고민하던 창현이와 예환이는 나이트들이 배치된 두 개의 체스판 A, B를 그린 뒤, A의 나이트들 위치를 B처럼 만드는 데 필요한 최소 이동 횟수를 늦게 구하는 사람이 치우기로 하였다. 창현이는 치우는 게 귀찮기 때문에 꼭 이기고 싶다.\n\n창현이를 도와 나이트들의 최소 이동 횟수를 구하는 프로그램을 만들어 보자. 나이트는 한 번에 한 개만 움직일 수 있다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30416","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n춘배는 2차원 평면 위에 고정된 정사각형의 둘레와 그 내부를 포함하는 영역인 상자에 살고 있다. 춘배는 지금 살고 있는 상자가 너무 좁다고 생각해 더 넓은 상자로 이주할 계획을 세웠다. 춘배는 보미가 가지고 있는 상자 여러 개 중에서 가장 마음에 드는 상자를 구매해 입주하게 되었다.\n\n춘배는 여러 상자를 둘러보던 중 몇 개의 상자는 다른 상자를 완전히 포함하고 있어 큰 상자를 구매하면 큰 상자가 포함하는 다른 상자들도 같이 구매할 수 있다는 사실을 깨달았다!\n\n춘배를 도와 한 번에 최대한 많은 상자를 구매할 방법을 알려주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30467","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t건구스는 축제의 마무리를 장식하기 위해 하늘로 무한히 상승하는 N$N$개의 등불을 준비했다. 등불은 왼쪽부터 차례대로 1$1$번부터 번호가 매겨져 있으며, i$i$번 등불은 매초 높이가 Ai$A_i$만큼 상승한다. 처음에는 모든 등불을 높이 0$0$에 준비해 두었다. 건구스는 축제가 끝날 때, 연속하는 S$S$개의 등불을 골라 1$1$초 간격으로 번호가 작은 것부터 날려 보내려고 한다.\n\n사람들은 하나의 등불이 다른 등불들을 앞지르면, 앞지르는 등불의 개수만큼 소원을 빈다. 건구스는 사람들이 최대한 많은 소원을 빌도록 날려 보낼 등불을 고르려고 한다. S$S$개의 연속하는 등불을 적절히 골라 날려 보냈을 때, 사람들은 최대 몇 개의 소원을 빌 수 있을까?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30438","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA software company resulting from several recent mergers consists of a handful of offices in different cities. At each office there is a HR manager who knows everyone working at that office. Additionally, there are of course a lot of persons in the workforce that know each other, also across the offices. Knowing each other in this context is a symmetric relation, if employee a$a$ knows employee b$b$, then b$b$ also knows a$a$. In comparison, while everyone in the workforce (hopefully) knows of the CEO, that does not mean the CEO knows everyone. In fact, while the CEO does know all the HR managers, she does not know that many other employees. This has got to change!\n\nOne of the HR managers is instructed to plan a company outing to let people get to know each other better. Unfortunately, it seems impossible to a find a hotel that can accommodate the whole workforce. Maybe he can turn this into an advantage? He is thinking that by using up to three hotels in the vicinity of each other, perhaps it is possible to divide the employees in three groups, one per hotel, so that no two employees in a group already know each other? That would certainly encourage new acquaintances.\n\nIn this early stage in the planning, he doesn't care about the sizes of the groups, but only wants to see if such a division is at all possible. He asks you to help him and provides you with a complete list of pairs of employees who know each other. However, you are not told who the HR managers or CEO are, but you know that the CEO knows at most 15$15$ employees (this includes the HR managers) and that the company is distributed over at most 8$8$ offices.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30439","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tWelcome to the world of Heroes of Velmar, the critically acclaimed trading card game developed by Sidney Games! After the tremendous success of the physical card game, Sidney Games has decided to take it to the next level and transform it into an immersive video game experience.\n\nAs Sidney Games embarks on this ambitious video game project, they seek the expertise of talented developers like you to bring this digital version to life. The challenge lies in coding the algorithm that determines the winner in the virtual battles that unfold between players. The video game will need to retain the same core mechanics as the original card game, where players compete on three distinct locations over six turns, with abilities and power levels shaping the outcomes.\n\nThe full rules of the game are listed below. You are given the state of the locations after Setup and Gameplay have finished and the End of the Game has been reached. Sidney Games has tasked you with implementing the Location Resolution part of the game rules, including the application of Special Abilities, to determine the winner.\n\nThe game designers have provided you with images of the cards as well as a JSON file with their specifications.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30397","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t대구과학고등학교 학생들은 내기를 좋아한다. 이번에는 이안이와 예환이가 서로의 공부를 위해 시험 성적으로 내기를 하려고 한다. 어떤 과목에서 점수를 비교해서 점수가 높은 사람은 공부를 아주 열심히 했으니 100원을 받고, 점수가 낮은 사람은 공부를 안한 벌금으로 50원을 낸다. 만약 점수가 같다면 둘다 공부를 열심히 했다고 치고 20원씩 받기로 했다.\n\n그런데 여기서 맹점이 하나 있다. 이안이는 예환이와 학교가 다르기 때문에 예환이는 이안이가 어떤 과목 시험을 쳤는지 잘 모른다. 그래서 이안이는 공부를 열심히 한 척을 하기 위해 최대한 많은 과목에서 예환이를 이길 수 있도록 과목 간 점수를 바꾸고자 한다. 예를 들어 시험을 친 과목이 3과목이고 이안이가 받은 점수가 10점, 100점, 50점이고 예환이가 받은 점수가 50점, 80점, 40점이라면 이안이는 내기를 두 번 이기고 한 번 질 수 있다.\n\n이안이가 얻는 돈이 최대가 되도록 도와주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30448","content":"문제\n\nConsider the plane and any point \n(x,y)\n$(x, y)$ in the plane. Now, you draw two half-lines starting from point \n(x,y)\n$(x, y)$, one downwards vertically and the other leftwards horizontally. The (infinite) region below the horizontal half-line and to the left of the vertical half-line is called a quadrant, denoted by \nQ(x,y)\n$Q(x, y)$. Note that the two half-lines of \nQ(x,y)\n$Q(x, y)$ form its boundary, while its interior excludes the boundary. See below.\n\nLet \nL\n$L$ be a natural number and \nS\n$S$ be the set of points \n(x,y)\n$(x, y)$ in the plane with \nx,y∈{0,1,2,…,L}\n$x, y \\in \\{0,1,2, \\dots , L\\}$. So, \nS\n$S$ consists of \n(L+1)2\n$(L + 1)^2$ points. For some \nk≥1\n$k ≥ 1$, you are given \nk\n$k$ finite subsets \nP1,P2,…,Pk⊆S\n$P_1, P_2, \\dots , P_k \\subseteq S$ of \nS\n$S$ and \nk\n$k$ nonnegative integers \nc1,c2,…,ck\n$c_1, c_2, \\dots , c_k$. We say that a quadrant \nQ\n$Q$ is \n(c1,c2,…,ck)\n$(c_1, c_2, \\dots , c_k)$-perfect when the following condition is satisfied for all \ni=1,2,…,k\n$i = 1, 2, \\dots , k$:\n\nNo points in \nPi\n$P_i$ lie on the boundary of \nQ\n$Q$ and \n|Pi∩Q|=ci\n$|P_i \\cap Q| = c_i$.\n\nWrite a computer program that computes and prints out the number of points \n(x,y)∈S\n$(x, y) \\in S$ such that \nQ(x,y)\n$Q(x, y)$ is \n(c1,c2,…,ck)\n$(c_1, c_2, \\dots , c_k)$-perfect."},{"problemId":"30480","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMarina, a digital influencer who loves traveling the world, is embarking on a promotional tour for a women’s clothing brand called W2M (From Woman to Woman Marina). Marina’s journey takes her through N$N$ cities in Latin America, each with its unique charm, and identified with a distinct integer from 1$1$ to N$N$, called its popularity index.\n\nTo facilitate Marina’s travels, W2M has provided her with N−1$N - 1$ transfers, connecting pairs of cities in a way that guarantees accessibility to all N$N$ cities. Marina can traverse these connections as many times as she pleases.\n\nMarina’s mission is to showcase the brand’s dresses in each of the N$N$ cities, with a twist. Each time she visits a city for the first time, she must select a dress she hasn’t worn before and capture the city’s essence in a social media post. Every new picture she shares attracts followers, creating anticipation for the next one. The anticipation value for her first picture is 1$1$, and it increments by 1$1$ for each subsequent picture.\n\nMarina can revisit any city as often as desired, but a new picture must only be posted on her initial visit to a city. Her goal is to maximize the profit of her tour, which is computed as the sum of the anticipation value of each picture multiplied by the popularity index of the city where the picture is taken. More precisely, let pi$p_i$ be the popularity index of the city where the i$i$-th picture is taken. With this information, the profit can be calculated as\n\n ∑i=1Ni×pi=1×1+2×p2+⋯+N×pN$$\\sum_{i=1}^{N}{i \\times p_i} = 1 \\times _1 + 2 \\times p_2 + \\cdots + N \\times p_N$$ \n\nNow, Marina seeks your assistance. Given that the tour has to start in city p1=R$p_1 = R$, your task is to help Marina determine the maximum profit she can achieve by strategically planning the order of her city visits.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30398","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t서진이가 재학 중인 대구일과학고등학교는 대구광역시 소재의 고등학교로 d$d$ 차원에 존재한다. 대구일과학고등학교의 졸업 예정자들은 수능이 끝난 후 기숙사에서 방을 빼고, 통학해야 한다. 서진이는 현재 3학년이기 때문에, 곧 통학해야 하는 자신의 처지를 걱정하며 등굣길을 찾아보기로 했다. 서진이의 집에서 대구일과학고등학교로 갈 때는 특별한 규칙을 따라야 한다.\n\n서진이의 위치가 (p1,p2,...,pd−1,pd)$ (p_1, p_2, ... , p_{d-1}, p_d) $라면, 서진이는 (p1+1,p2,...,pd−1,pd)$(p_1 +1,p_2,...,p_{d-1},p_d)$, (p1,p2+1,...,pd−1,pd)$(p_1,p_2+1,...,p_{d-1},p_d)$, ..., (p1,p2,...,pd−1+1,pd)$(p_1,p_2,...,p_{d-1} + 1 ,p_d)$, (p1,p2,...,pd−1,pd+1)$(p_1,p_2,...,p_{d-1},p_d +1)$ 중 하나의 위치로 이동할 수 있다. 서진이는 집에서 대구일과학고로 갈 때 반드시 지나야 하는 P$P$개의 점들을 발견했다. 이 점들은 반드시 순서대로 지나야 하며, 이 점들 중에 중복되는 점은 없으며, 서진이의 집이나 대구일과학고등학교와 같은 위치에 있는 점도 없다.\n\n서진이의 집은 (a1,a2,...,ad−1,ad)$(a_1,a_2,...,a_{d-1},a_d)$에 위치하고, 대구일과학고등학교는 (b1,b2,...,bd−1,bd)$(b_1,b_2,...,b_{d-1},b_d)$에 위치한다.\n\n이때, 모든 1≤i≤d$1 \\le i \\le d$ 에 대해 ai=1$ a_i = 1 $, bi=N$ b_i = N $을 만족한다. 서진이의 집에서 대구일과학고등학교로 이동하는 경우의 수를 109+7$10^9+7$로 나눈 나머지를 구하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30399","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t메모리 제한에 유의하십시오.\n\n길이가 N$N$인 수열 a$a$가 있다. 초기 상태에서 모든 1≤i≤N$1 \\le i \\le N $에 대해 ai=0$a_i = 0$을 만족한다. 이 a$a$에 다음과 같은 아래 쿼리를 처리하는 프로그램을 작성하라.\n\n\n\t1 L R w : L≤i≤R$L\\le i\\le R$ 인 ai$a_i$에 w$w$를 더한다.\n\t2 L R : L≤i≤R$L \\le i \\le R$인 ai$a_i$중 홀수와 짝수의 개수를 차례대로 하나의 줄에 공백으로 구분하여 출력한다.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30417","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n오늘도 하루 만에 집에 있는 모든 쿠키를 다 먹은 춘배는 시원에게 쿠키 가게에서 이벤트를 한다는 이야기를 듣고 쿠키 가게에 가기로 했다.\n\n쿠키 가게에는 N$N$개의 칸으로 이루어진 진열대 위에 K$K$개의 쿠키가 놓여 있다. i$i$번 쿠키는 Xi$X_i$번째 칸에 있고 가격은 Ci$C_i$원이다. 단, 과자의 위치는 서로 다르다.\n\n시원이의 쿠키 가게는 이벤트를 하고 있기 때문에 i$i$번 쿠키를 구매하면 i$i$번 쿠키와 거리가 Ri$R_i$ 이하인 쿠키 중 원하는 쿠키들을 전부 무료로 준다. 두 쿠키 i$i$와 j$j$사이의 거리는 ∣Xi−Xj∣$\\mid X_i - X_j \\mid$와 같다.\n\n맥북을 사느라 가난해진 춘배는 최소의 비용으로 모든 K$K$개의 쿠키를 전부 먹고 싶었다. 춘배가 쿠키를 구매하거나 무료로 받아 모든 쿠키를 받기 위해 최소 얼마의 금액을 지불해야 되는지 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30468","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t경북대학교의 마스코트이자 따봉 요정인 호반우는 오늘도 수업을 듣기 위해 경북대학교 정문을 지나치던 도중 정체불명의 차원문에 휘말려 이세계로 오게 되었다.\n\n이세계의 신인 당신이 호반우가 마왕을 물리치고 지구로 돌아가 학교에 지각하지 않도록 도와주자!\n\n호반우의 현재 스탯인 힘(STR$STR$), 민첩(DEX$DEX$), 지능(INT$INT$), 운(LUK$LUK$)에 해당하는 4$4$가지 수가 주어진다.\n\n 4$4$가지 스탯 중 하나의 수치를 1$1$씩 올릴 수 있는 축복을 여러 번 사용해 호반우의 평균 스탯 수치를 N$N$ 이상으로 만들려고 할 때 최소 몇 번의 축복을 사용해야 하는지 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30418","content":"문제\n\n나비는 새로 건설할 도시의 전봇대를 관리하는 일을 맡았다. 아직 전선이 연결되지 않았기 때문에, 나비는 이 전봇대들의 전선을 연결해야 한다. 전봇대는 \n1\n$1$의 간격으로 직선을 따라 총 \nN\n$N$개가 건설되어 있으며 왼쪽에서부터 번호가 \n1\n$1$부터 \nN\n$N$까지 붙어 있다. 첫 번째 전봇대의 위치는 \n1\n$1$이고 초기에 \ni\n$i$번 전봇대의 높이는 \nHi\n$H_i$이다. 좌표평면에서 나타낸다면 \ni\n$i$번 전봇대는 \n(i,0)\n$(i,0)$부터 \n(i,Hi)\n$(i,H_i)$를 연결하는 선분으로 생각할 수 있다.\n\n전선은 두 전봇대의 가장 윗부분을 최단 거리로 연결한다. 즉 \ni\n$i$번째 전봇대와 \nj\n$j$번째 전봇대가 연결된다면 \n(i,Hi)\n$(i,H_i)$와 \n(j,Hj)\n$(j,H_j)$를 선분으로 연결한다. 그리고 이때 연결 비용은 전선의 길이의 제곱이다.\n\n나비는 준혁이에게 시작 전봇대의 번호 \np\n$p$를 받고 \np\n$p$번 전봇대를 포함하여 몇 개의 전봇대를 선택하여 전선을 연결한다. 선택한 전봇대를 번호의 오름차순으로 정렬하였을 때 \nS1,S2,…,Sk\n$S_1, S_2, \\ldots, S_k$라 한다면 \nSi\n$S_i$번째 전봇대와 \nSi+1\n$S_{i+1}$번째 전봇대를 전선으로 연결하게 된다. \n(1≤i<k)\n$(1\\le i<k)$ \n\n또한 나비는 다음과 같은 조건을 만족하도록 전봇대를 선택하여 연결하여야 한다.\n\n나비가 연결한 전선과 전봇대가 교차해선 안 된다. 단, 전선이 어떤 전봇대 \ni\n$i$와 \n(i,Hi)\n$(i,H_i)$에서 만나는 것은 가능하다.\n \np\n$p$를 기준으로 왼쪽으로 갈수록 선택한 전봇대의 높이가 단조증가하고, \np\n$p$를 기준으로 오른쪽으로 갈수록 선택한 전봇대의 높이가 단조증가하여야 한다. 즉 \nSt=p\n$S_t = p$일 때 \nHS1≥HS2≥⋯≥HSt−1≥Hp≤HSt+1≤HSt+2≤⋯≤HSk\n$H_{S_1} \\ge H_{S_2} \\ge \\cdots \\ge H_{S_{t-1}} \\ge H_p \\le H_{S_{t+1}} \\le H_{S_{t+2}} \\le \\cdots \\le H_{S_k}$를 만족해야 한다.\n나비는 연결한 전선의 길이 합이 최대가 되도록 전선을 연결하려고 한다. 만약 그런 경우가 여러 가지 있다면, 연결 비용의 합이 최소인 방법으로 연결한다.\n\n도시는 아직 건설중이라 계획 변경으로 인해 전봇대의 높이가 바뀔 수 있다. 준혁이는 나비에게 \nQ\n$Q$개의 작업을 준다. 작업에 따라 전봇대의 높이를 변경하거나 나비가 전선을 연결하기 시작할 시작 전봇대가 주어졌을 때 연결 비용의 합이 얼마인지 구해보자."},{"problemId":"30419","content":"문제\n\nThere is an \nn\n$n$ by \nm\n$m$ chessboard with \nn×m\n$n \\times m$ squares in total. Rows and columns are numbered starting from \n1\n$1$, and the coordinates of the square in the \ni\n$i$-th column and \nj\n$j$-th row are denoted as \n(i,j)\n$(i, j)$. Initially, all squares are white. Now, you need to perform \nq\n$q$ coloring operations on this chessboard.\n\nThere are three types of coloring operations:\n\nColor a horizontal line black. Specifically, given two squares \n(x1,y1)\n$(x_1, y_1)$ and \n(x2,y2)\n$(x_2, y_2)$ with \ny1=y2\n$y_1 = y_2$, color all squares between (including) these two squares black.\nColor a vertical line black. Specifically, given two squares \n(x1,y1)\n$(x_1, y_1)$ and \n(x2,y2)\n$(x_2, y_2)$ with \nx1=x2\n$x_1 = x_2$, color all squares between (including) these two squares black.\nColor a diagonal line black. Specifically, given two squares \n(x1,y1)\n$(x_1, y_1)$ and \n(x2,y2)\n$(x_2, y_2)$ with \nx2−x1=y2−y1\n$x_2-x_1 = y_2-y_1$ and \nx1≤x2\n$x_1 \\leq x_2$, color all squares with coordinates \n(x1+i,y1+i)\n$(x_1+i, y_1+i)$ on the diagonal between these two squares, where \n0≤i≤x2−x1\n$0 \\leq i \\leq x_2-x_1$. The number of times this type of coloring operation occurs is no more than \n5\n$5$.\n\nNow you want to know how many black squares there are on the chessboard after performing \nq\n$q$ coloring operations."},{"problemId":"30469","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이세계를 모험할 때는 무기가 필요한 법이기에 호반우는 현재 신에게 받은 소수소수검의 사용법을 익히고 있다.\n\n소수소수검을 사용하기 위해서는 검이 제시하는 두 자릿수의 소수 A,B$A,\\,B$와 양의 정수 N$N$을 이용해 소수소수를 만들어야 한다. 소수소수란 해당 수 자체가 소수일 필요는 없지만 모든 연속된 두 자릿수가 소수인 수를 말한다.\n\n예를 들어 973$973$은 97$97$과 73$73$이 소수이므로 소수소수가 되지만, 937$937$은 93$93$이 소수가 아니기에 소수소수가 아니다.\n\n이때 소수소수를 만들 때 한가지 제한사항이 있는데 처음 두 자릿수는 A$A$이고 마지막 두 자릿수는 B$B$인 N$N$ 자릿수의 소수소수를 만들어야 한다.\n\n아직 검의 사용법에 익숙하지 않은 호반우를 도와 소수소수를 만들어 주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30481","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA distant planetary system has a single sun and N − 1 planets. Each planet is identified by a distinct integer from 2 to N. In planet b, numbers are represented using base b.\n\nA palindromic number is a number that remains the same when its digits are written both forward and backward. In this context, leading zeroes are not considered when determining if a number is palindromic.\n\nThe same number can be palindromic in one planet’s base but not in another. For instance, in base 10, the number 33 is palindromic. It is also palindromic in base 2 and base 32 but not in bases such as 3 or 33, since 3310 = 1000012 = 10203 = 1132 = 1033.\n\nThe inhabitants of this planetary system have a peculiar fondness for palindromic numbers and want to know which planets make the number N a palindromic number when represented in their base. Your task is to help them with this cosmic challenge.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30449","content":"문제\n\n이상하게 들릴지 모르지만, 재훈은 요즘 \n0\n$0$과 \n1\n$1$사이의 기약 분수(irreducible fraction)를 오름차순으로 나열하는 것에 관심이 많다. 이를 위해, \nn\n$n$차 수열 \nR(n)\n$R(n)$을 \n0\n$0$과 \n1\n$1$사이의 기약 분수중에서 분모가 \nn\n$n$ 이하인 기약 분수의 오름차순 수열로 정의하고, 이를 Reafy 수열이라고 부르기로 했다. 여기서, \nn\n$n$은 양의 정수이다.\n\n예를 들어, \n1\n$1$차부터 \n5\n$5$차까지의 Reafy 수열은 다음과 같다.\n\n \nR(1)={01,11}\n$$R(1) = \\left\\{ \\frac{0}{1}, \\frac{1}{1} \\right\\}$$ \n\n \nR(2)={01,12,11}\n$$R(2) = \\left\\{ \\frac{0}{1}, \\frac{1}{2}, \\frac{1}{1} \\right\\}$$ \n\n \nR(3)={01,13,12,23,11}\n$$R(3) = \\left\\{ \\frac{0}{1}, \\frac{1}{3}, \\frac{1}{2}, \\frac{2}{3}, \\frac{1}{1} \\right\\}$$ \n\n \nR(4)={01,14,13,12,23,34,11}\n$$R(4) = \\left\\{ \\frac{0}{1}, \\frac{1}{4}, \\frac{1}{3}, \\frac{1}{2}, \\frac{2}{3}, \\frac{3}{4}, \\frac{1}{1} \\right\\}$$ \n\n \nR(5)={01,15,14,13,25,12,35,23,34,45,11}\n$$R(5) = \\left\\{ \\frac{0}{1}, \\frac{1}{5}, \\frac{1}{4}, \\frac{1}{3}, \\frac{2}{5}, \\frac{1}{2}, \\frac{3}{5}, \\frac{2}{3}, \\frac{3}{4}, \\frac{4}{5}, \\frac{1}{1} \\right\\}$$ \n\n두 양의 정수 \nn\n$n$과 \nk\n$k$가 입력으로 주어지면 Reafy 수열 \nR(n)\n$R(n)$의 \nk\n$k$번째 기약 분수를 출력하는 프로그램을 작성하시오. \nR(n)\n$R(n)$의 첫 번째 기약 분수는 \n01\n$\\frac{0}{1}$이고 \n|R(n)|\n$|R(n)|$-번째 기약 분수는 \n11\n$\\frac{1}{1}$이다."},{"problemId":"30500","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou just started a new job at a shopping mall, and as it goes, you got the shittiest task of all: closing down at night. The mall consists of many rooms (which can be shops, hallways, or other public spaces) with open doors between them that must be closed. You can walk through a door both ways if it is open, but annoyingly, each door can only be locked from one of the two rooms it connects.\n\nYour supervisor already locked the main entrance of the shopping mall, and left you inside with the task to lock all the doors. In order to do so, you may request additional exits to be installed in some of the rooms. If a room has an exit, then you are able to enter or leave the shopping mall through that room.\n\nWhat is the minimal number of exits you need to request in order for it to be possible to lock all the doors and then leave the building?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30482","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tOn the day when aliens finally attacked humanity, nobody could have anticipated their weapon of choice. No nuclear weapons, meteors, lasers, or giant monsters. Instead, our planet was subjugated with the power of physics!\n\nSpecifically, the aliens transformed Earth into a two-dimensional, flat surface, forever neutering our space-faring capabilities. Although frustrated, humanity survived, and we resumed our lives as best as we could. This new two-dimensional existence requires many adjustments, including the use of GPS (Global Positioning System).\n\nGPS normally works by using radio waves to measure the Euclidean distances from the user to several reference points (satellites), and using these distances to calculate the user’s coordinates. However, the now flat Earth has two quirks we need to adapt to:\n\n\n\tWithout satellites in orbit, we need to use radio towers instead. Each radio tower now has coverage over the entire planet due to the flat surface.\n\tRadio waves, which propagate differently in a two-dimensional world, require a shift from Euclidean to Manhattan distance for accurate calculations. Given any two points (X1, Y1) and (X2, Y2), the Manhattan distance between them is defined as |X1 − X2| + |Y1 − Y2|.\n\n\nYour task is to write software for these adapted GPS calculations. Given a list of locations of N reference radio towers and their respective Manhattan distances to the GPS user, your algorithm must provide a list of possible locations of the user. These potential user locations are limited to those that are exactly at the measured Manhattan distance from each reference radio tower. The GPS is still in the initial test phase, so the user’s true location is limited to integer coordinates.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30470","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t우여곡절 끝에 시작의 마을 앞까지 도착한 호반우지만 절벽 위의 마을로 향하는 계단이 마물들의 습격으로 망가져 통나무로 계단을 만들기로 하였다. 호반우는 통나무를 세로로 나란히 세워 계단을 만드는데, 중간중간 마물들이 마법을 사용해 방해하고 있다!\n\n마물들이 위력이 m$m$인 마법을 사용하면, 현재 계단을 구성하는 통나무 중 가장 긴 통나무의 길이 k$k$를 기준으로 길이가 max(k−m,0)$\\max (k-m,\\,0)$ 이상인 통나무들의 길이를 max(k−m,0)$\\max (k-m,\\,0)$으로 만들어 버린다. 만약 통나무가 없다면 마법은 무시한다.\n\n호반우와 마물들의 행동을 나타내는 N$N$개의 쿼리가 다음과 같이 주어진다.\n\n\n\t1 x: 호반우가 길이 x$x$의 통나무를 계단 옆에 나란히 세운다.\n\t2 x: 마물들이 계단에 위력 x$x$의 마법을 사용한다.\n\n\n호반우는 계단을 만들고 싶기에 호반우가 새로 세우는 통나무는 항상 이전에 1$1$번 쿼리로 세운 통나무의 길이보다 길며, 마물들은 통나무가 없어도 마법을 사용할 때가 있다. 호반우가 처음으로 세우는 통나무는 따로 길이의 제한이 없다.\n\n N$N$개의 쿼리를 순서대로 전부 수행한 이후 완성된 계단을 구성하는 모든 통나무의 길이의 합을 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30483","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn the frozen wilderness, a polar bear makes its home on a vast glacier, represented as a 2D plane. The coordinates of the bear’s den are (0, 0). To be healthy, each time the bear wakes up in its den, it walks to any point at distance exactly D from the den (measured using Euclidean distance).\n\nWith the bear facing the challenges of a changing climate, a team of dedicated scientists and mathematicians has set out to assist. They have received a detailed report filled with predictions of the impending impact of global warming on the glacier in the coming days. The report contains the predictions in chronological order, and each of them is represented by an infinite line that corresponds to a melting event. After each prediction comes true, the line that represents it can no longer be crossed by the bear.\n\nInitially, the glacier is considered to be infinitely large in all directions, and the bear can roam freely. However, as the team of scientists and mathematicians, you understand the bear’s dilemma: according to the predictions, the glacier might eventually shrink in such a way that the bear can no longer be healthy. Your task is to calculate the earliest moment in which this will happen, that is, when no point at distance exactly D from the den can be reached by the bear.\n\nThe figure below depicts the first sample. The circumference contains the points at distance exactly D from the den. When just the first three predictions are considered (solid lines), the bear can still reach points in the circumference. Once the fourth prediction (dashed line) is also considered, no point in the circumference can be reached from the den.\n\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30450","content":"문제\n\nRecently, the ICPC Genie gave you the power to manipulate a single event! You remember that you bought a lottery ticket just yesterday and decide to use the power to manipulate the lottery results.\n\nEvery lottery ticket is a unique sequence of \nk\n$k$ numbers, and no two tickets have the same sequence. Each number in a lottery ticket is between \n1\n$1$ and \nc\n$c$, and the same number can appear more than once in a ticket. For example, the following is the list of all possible lottery tickets when \nk=3\n$k = 3$ and \nc=2\n$c = 2$.\n\n \n(1,1,1)\n$(1,1,1)$, \n(1,1,2)\n$(1,1,2)$, \n(1,2,1)\n$(1,2,1)$, \n(1,2,2)\n$(1,2,2)$, \n(2,1,1)\n$(2,1,1)$, \n(2,1,2)\n$(2,1,2)$, \n(2,2,1)\n$(2,2,1)$, \n(2,2,2)\n$(2,2,2)$ \n\nThe lottery results are determined as follows. First, a lottery machine randomly selects a finite sequence of numbers, where each number is between \n1\n$1$ and \nc\n$c$ and each number can occur more than once. This sequence is called the losing sequence. If the losing sequence has your ticket as a subsequence, then your ticket is a losing ticket. Otherwise, your ticket is declared as a winning ticket. Given a losing sequence, it is possible that there are several different winning tickets; in this case, the prize is split evenly.\n\nFor example, if the losing sequence is \n(2,1,2,2,1)\n$(2,1,2,2,1)$, the lottery ticket of \n(1,1,1)\n$(1,1,1)$ is a winning ticket, but the lottery ticket of \n(2,2,2)\n$(2,2,2)$ is a losing ticket.\n\nYou decide to generate the losing sequence in which your lottery ticket is the only winning ticket. Since more winning tickets imply a smaller share of the prize, you want the losing sequence to have all sequences of length \nk\n$k$ as its subsequences except for your own lottery ticket.\n\nGiven numbers \nk\n$k$ and \nc\n$c$, and the sequence of \nk\n$k$ numbers on your lottery ticket that you bought yesterday, write a program that outputs the shortest losing sequence in which your ticket is the only winning ticket. If there are two or more such losing sequences, then your program must output the lexicographically first sequence among them."},{"problemId":"30501","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t천하제일의 장수 관우도 결국 죽음을 맞이했다. 유비와 장비는 관우의 복수를 위해 N$N$명의 용의자 중 관우를 죽인 범인을 찾으려 한다. 관우와 함께 있었던 장수의 말에 따르면 관우를 죽인 범인의 이름에는 S가 들어간다. 관우를 죽인 용의자 이름의 리스트에서 관우를 죽인 범인의 이름을 찾는 프로그램을 작성하시오.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30471","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t사실 호반우가 이세계에 도착했을 때부터 호반우의 이세계 모험은 생방송 플랫폼인 트위치를 통해 지구에서 방송되고 있었다.\n\n현재 방송 화면에는 호반우가 N$N$마리의 킹 슬라임이 있는 던전을 탐험하려는 모습이 송출되고 있다. 모든 킹 슬라임은 서로 다른 슬라임 그룹에 속해있으며, 1$1$번부터 N$N$번까지 번호가 주어져 있다.\n\n방송의 유일한 시청자인 상호는 TWIP의 슬롯머신을 M$M$번 사용해 호반우가 던전을 탐험하기 전에 슬라임 그룹을 합쳐보려고 한다.\n\n슬롯머신을 돌리면 1≤a<b≤N$1 \\le a < b \\le N$인 양의 정수 쌍 a,b$a,\\,b$가 적힌 아이템이 나오며 이를 인벤토리에 저장해 슬라임 그룹을 합치는데 사용할 수 있다.\n\n인벤토리에서 a,b$a,\\,b$가 적힌 아이템을 소비하여 a$a$번 킹 슬라임이 속한 그룹과 b$b$번 킹 슬라임이 속한 그룹을 합칠 수 있는데 이때 이미 a$a$번 킹 슬라임과 b$b$번 킹 슬라임이 같은 슬라임 그룹에 속해있다면 합쳐지지 않는다. 두 슬라임 그룹이 합쳐지게 되면 ($($합쳐진 슬라임 그룹에 속한 킹 슬라임의 마릿수−1)$-1)$마리의 미니 슬라임을 만든다.\n\n상호는 슬롯머신을 돌린 횟수에 따라 던전에 슬라임들(킹 슬라임과 미니 슬라임)을 얼마나 많이 만들 수 있을지 궁금해졌다. 스트리머로서 유일한 시청자인 상호에게 답을 알려주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30484","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tEvery year, mathematicians and computer scientists from around the globe gather for the prestigious Inversion Counting Puzzle Contest (ICPC). For the next ICPC, the organizers had prepared the following challenge: given a string S consisting of lowercase letters, count the number of inversions in it. An inversion is a pair of indices i < j such that Si (the letter at position i) comes after Sj in the alphabet.\n\nHowever, just last month, a group of outstanding researchers devised a sophisticated algorithm that can count the inversions in a string extremely fast. While this was great news for the advancement of science, it has been a nightmare for the ICPC staff, since their planned challenge is now obsolete.\n\nThis issue escalated to the head problem setter, who then presented a clever idea. Instead of simply receiving a string S, they should ask participants to repeat this string N times before counting the inversions. If the judges then set N to be large enough, at some point the algorithm proposed by the researchers will start to be too slow. Happy with this idea, the ICPC staff went ahead with organizing the next contest.\n\nUnfortunately, now the judges don’t know the answers to the input files anymore, and therefore can’t judge submissions! The ICPC has just kicked off, and participants are about to start submitting their solutions. Please help the judges by computing the answers, so that the ICPC can run smoothly.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30540","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThere are many problems in the field of computer science, and some are harder than others. Computer scientists have accordingly categorized problems using complexity classes, and like to analyze these classes to see how they interact with each other.\n\nA complexity class is a simply a set of problems; for example, the complexity class P is the set of decision problems which are solvable with an algorithm whose runtime scales as a polynomial function of the input size. We know some results about the relations between complexity classes: for example, every problem in the complexity class P also belongs to the complexity class NP of decision problems for which \"yes\"-instances can be verified in polynomial time. However, we don't know if every problem in NP is also in P (and we won't ask you to figure this out for today). Therefore, P and NP could be either one or two distinct complexity classes. On the other hand, we know that the Halting Problem is in ALL (the set of all decision problems) but not in R (the set of decision problems solvable by a Turing machine). Therefore, ALL and R are two distinct complexity classes.\n\nGiven a series of relations between complexity classes, can you find the minimum and maximum number of distinct complexity classes? Two complexity classes are distinct if and only if there is some problem that exists in one class but not in the other.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30502","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t세종이는 미역을 식물로 분류해야 한다고 생각하고 있다. 식물은 광합성을 하고 운동성이 없으며, 광합성을 하고 운동성이 없으면 식물이므로 미역 역시 식물의 일종으로 분류되어야 한다는 것이 세종이의 주장이다.\n\n영재는 세종이의 주장에 반박하기 위해 다양한 생물을 세종이의 기준에 따라 분류해 보기로 했다. 영재는 1$1$번 생물부터 N$N$번 생물까지 총 N$N$종의 생물을 수집해, 그들이 광합성을 하는지 또는 운동성이 있는지 알아보는 실험을 총 M$M$번 진행하고 그 결과를 기록했다. 영재가 기록한 생물들의 특징을 바탕으로 N$N$종의 생물 중 식물의 수로 가능한 것의 최솟값과 최댓값을 구하는 프로그램을 작성하시오.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30472","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t어찌저찌 마왕성까지 도착한 호반우는 예전에 시작의 마을에서 구한 운석을 소환하는 마법 카드로 메테오를 만들어 마왕성의 병사들을 한 번에 해치우기로 하였다.\n\n호반우는 처음에 최대한 높이 하늘로 올라간 후, 해당 위치를 시작점으로 하여 마법 카드 N$N$개를 이용해 다음 행동을 N$N$번 반복하려고 한다.\n\n\n\t남아있는 마법 카드 중 하나를 선택한다.\n\t선택한 마법 카드에 적혀있는 양의 정수 쌍이 a,b$a,\\,b$일때 a$a$만큼 상승하여 운석을 소환하고 b$b$만큼 다시 하강한다.\n\t사용한 마법 카드는 불타 사라지기에 다시 사용할 수 없다.\n\n\n N$N$개의 마법 카드를 사용하여 완성한 메테오의 위력은 각 운석들의 지상으로부터의 높이의 합이지만 호반우가 처음에 하늘로 너무 높이 올라가는 바람에 메테오의 위력을 계산할 수가 없게 되었다!\n\n결국 호반우는 시작점으로부터 N$N$장의 카드를 모두 사용했을 때까지의 경로 중 최저점을 지상이라 생각하여 메테오의 위력을 계산하기로 하였다. 호반우가 처음에 하늘로 올라갈 때 N$N$장의 카드를 어떤 순서로 사용하더라도 지상에 도달할 수 없을 만큼 높이 올라간다고 한다.\n\n호반우가 마법 카드를 사용하여 가장 위력이 강한 메테오를 만들 수 있게 도와주자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30520","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tSmall 버전에서는 N$N$의 최댓값의 제한이 1000$1000$으로 줄어들고 K$K$는 1$1$로 고정되어 주어진다.\n\nMike가 보고 있는 칠판에는 0$0$이 적혀 있다. Mike는 다음과 같은 두 가지의 동작 중 하나를 선택해 반복하면서 수열을 얻고자 한다.\n\n\n\t칠판에 쓰인 숫자가 a$a$라 하면, 이를 지우고 a+1$a+1$을 쓴다.\n\t칠판에 쓰인 숫자가 a$a$라 하면, 이를 지우고 a−1$a-1$을 쓴다.\n\n\n두 가지 동작의 순서는 상관없지만, 각각의 동작을 N$N$번씩 수행해야 한다. 이때, 칠판에 쓰는 숫자를 순서대로 원소로 하는 수열을 A1,A2,⋯,A2N$A_{1}, A_{2}, \\cdots, A_{2N}$이라고 하자.\n\nMike가 진행할 수 있는 모든 순서에 대해 얻어낸 수열들 각각의 최댓값을 K$K$제곱한 합을 구해보자.\n\n이때, 답이 커질 수 있으므로 소수 1 000 000 007$1\\ 000\\ 000\\ 007$로 나눈 나머지를 계산하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30541","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYour younger sister is playing with a wooden math toy consisting of number and operator blocks. Each number block is printed with a single digit from 1$1$ to 9$9$, and operator blocks are double-sided; +$+$ and ×$\\times$ are printed on each side.\n\nShe has just built a math expression by alternating number and operator blocks. The first block is a number, the second is an operator, the third is a number, and so on. She asks, \"can you answer the value of the expression?\"\n\nFurther, she repeatedly makes one of the following moves.\n\n\n\ts i$i$ j$j$ (swap): Swaps the i$i$th and j$j$th number blocks.\n\tf i$i$ (flip): Flips the i$i$th operator block. Its operator alternates between +$+$ and ×$\\times$.\n\ta (all flip): Flips all the operator blocks in the entire math expression.\n\n\nAfter her move, you have to quickly answer the updated value (possibly the same as the previous one). Remember that you must perform multiplications earlier than additions.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30503","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이 문제는 ”방형구 탐색 (Hard)” 문제와 N$N$, Q$Q$의 제한을 제외하고 같은 문제다.\n\n세종이는 수행평가로 방형구 탐색을 하고 있다. 방형구는 1×N$1\\times N$ 크기의 격자 모양이며, 각 칸에는 순서대로 1$1$번부터 N$N$번까지 번호가 붙어 있다. 방형구의 각 칸에는 꽃이 한 송이씩 피어 있다. 세종이가 사는 세상에는 10$10$억 가지 종류의 꽃이 있으며, 꽃의 종류에 1$1$부터 10$10$억까지의 번호를 붙여 구분한다. 세종이는 선생님이 정해준 구간 안에 핀 특정 꽃의 개수를 조사해야 한다. 그러나 선생님은 변덕이 많기 때문에 조사해야 할 범위를 자주 바꾸었다. 이에 화가 난 세종이는 꽃을 밟아 없애기로 했다.\n\n세종이의 수행평가를 위해 다음과 같은 쿼리를 수행하는 프로그램을 작성하시오.\n\n\n\t1 l r k: 방형구의 l$l$번 칸부터 r$r$번 칸까지의 꽃 중 꽃의 종류가 k$k$인 꽃의 개수를 출력한다.\n\t2 l r: 세종이가 방형구의 l$l$번 칸부터 r$r$번 칸까지의 꽃을 밟아 없앤다.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30485","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMonopolis is a beautiful and wealthy country. Among its impressive features is the layout of the country, where N cities are interconnected by N − 1 roads of equal length, allowing to travel between any two cities.\n\nAnother unique feature of Monopolis is that each city has a single bank with a different amount of money. Thus, it is possible to assign a distinct number from 1 to N to each city, representing its wealth ranking relative to the other cities, with city 1 having the least money and city N having the most.\n\nRob is planning a “business trip” to Monopolis. Rob’s business is, in fact, robbing. Robbing banks, to be more precise. Rob is an ambitious robber and follows a particular modus operandi: he only targets banks with more money than the one he just robbed. Thus, after robbing in a city i, he moves to the closest city having more money. If there are multiple cities with more money than i at the same distance, he selects the one with the least money. If there’s no city richer than i, he remains in the same city and reflects on his actions.\n\nEven though Rob is very set on his modus operandi, he is still planning his business trip to Monopolis, and then he asks for your assistance. Rob wants to know for each city i which would be the next city to visit in case his first heist is at city i.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30451","content":"문제\n\nSafari is a journey that involves going into nature to watch wild animals. Typically, safari participants travel through vast grasslands in four-wheel-drive cars, shortly 4WD cars. Imagine you are on safari in a 4WD car \nC\n$C$.\n\nAnimals appear in specific places on the grassland, where you can consider the places as the points on the plane. There are \nn\n$n$ animals, indicated as \n1\n$1$ to \nn\n$n$, in which the animal \ni\n$i$ appears at the point \npi\n$p_i$ in the plane. Each animal appears only in its own certain time interval. Specifically, the animal \ni\n$i$ appears in the time interval \n[ai,bi]\n$[a_i, b_i]$. So, when the car \nC\n$C$ stays at \npi\n$p_i$ for the duration \n[v,w]\n$[v, w]$, you have the opportunity to observe the animal \ni\n$i$ for the time period \n[v,w]∩[ai,bi]\n$[v, w] \\cap [a_i , b_i]$. Note that if you observe an animal during \n[α,β]\n$[\\alpha, \\beta]$, the length of time when you observe it is \n|β−α|\n$|\\beta − \\alpha|$.\n\nThe car \nC\n$C$ departs from the starting point \ns=(0,0)\n$s = (0, 0)$ at time \n0\n$0$ and it moves at speed \n1\n$1$. Thus time \nd\n$d$ has passed when \nC\n$C$ moves distance \nd\n$d$. The distance is measured in the \nL1\n$L^1$-metric. That is, the distance \nd(p1,p2)\n$d(p_1, p_2)$ between points \np1=(x1,y1)\n$p_1 = (x_1, y_1)$ and \np2=(x2,y2)\n$p_2 = (x_2, y_2)$ is \n|x1−x2|+|y1−y2|\n$|x_1 - x_2 | + |y_1 - y_2|$. It always takes as long as the distance \nd(p1,p2)\n$d(p_1, p_2)$ while the car moves from \np1\n$p_1$ to \np2\n$p_2$. Also, the car may stay at a point as long as you need, if necessary. When your safari tour ends at the last sighting point of an animal, you want to know the longest possible time for which you observe the animals.\n\nFor example, the figure below shows six animals, indicated as \n1\n$1$ to \n6\n$6$, which appear at the coordinates \n(1,2)\n$(1, 2)$, \n(2,1)\n$(2, 1)$, \n(2,4)\n$(2, 4)$, \n(4,1)\n$(4, 1)$, \n(5,3)\n$(5, 3)$, \n(5,5)\n$(5, 5)$, respectively, of points in the plane. Let us also indicate as \n1\n$1$ to \n6\n$6$ the points of animals. The time intervals when the animals appear are also displayed. First, consider the case the car \nC\n$C$ is driving along the blue path. The car departs from \ns\n$s$ at time \n0\n$0$ and arrives at the point \n2\n$2$ at time \n3\n$3$. Departing from it immediately at time \n3\n$3$, the length of time when you observe the animal \n2\n$2$ is \n0\n$0$. Afterward, you arrive at the point \n3\n$3$ at time \n6\n$6$ and stay there during \n[6,8]\n$[6, 8]$. Next, you arrive at the point \n6\n$6$ at time \n12\n$12$ and observe the animal \n6\n$6$ during \n[12,16]\n$[12, 16]$. Then the total length of time when you observe the animals is \n0+2+4=6\n$0 + 2 + 4 = 6$. Secondly, consider the case the car \nC\n$C$ is driving along the red path. At first, you arrive at the point \n1\n$1$ at time \n3\n$3$ and stay during \n[3,6]\n$[3, 6]$. Departing from it at time \n6\n$6$, you arrive at the point \n4\n$4$ at time \n10\n$10$ and stay during \n[10,12]\n$[10, 12]$. Then you arrive at the point \n5\n$5$ at time \n15\n$15$ and observe the animal \n5\n$5$ during \n[15,18]\n$[15, 18]$. In this case, the total length of time when you observe the animals is \n2+2+3=7\n$2 + 2 + 3 = 7$, which is longer than the blue path and actually, the length of the longest time when you can observe the animals.\n\nGiven \nn\n$n$ coordinates of points and \nn\n$n$ time intervals for the appearances of animals, write a program to output the length of the longest possible time when you observe the animals."},{"problemId":"30486","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tNloglonia is hosting a movie festival that spans N days. There are K distinct movies, and on each of the N days, one of them will be displayed. Each of the available movies might be displayed on multiple days or not displayed at all during the festival.\n\nThe festival schedule is given as an integer array V of size N, with 1 ≤ Vi ≤ K, indicating which movie will be shown on each day. Bob wants to watch all K movies, and he firmly believes that the order in which he watches them will significantly affect his experience. So now he wonders: is it true that for every order of the movies, he would be able to pick K days to visit the festival and watch those movies in that given order? More formally, is it true that every permutation of 1, 2, . . . , K is a subsequence of V ? If this is not the case, Bob also wants you to find some permutation (any one) that is not.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30473","content":"문제\n\n마왕에게 거의 다다른 호반우지만 마왕의 옥좌로 들어가는 문이 잠겨 못 들어가고 있다.\n\n문을 열기 위해서는 길이가 \nN\n$N$인 마법 열쇠를 길이가 정확히 \nM\n$M$인 마법 열쇠로 만들어야 하는데 마법 열쇠의 힘을 최대한 크게 만들어야 한다.\n\n길이가 \nN\n$N$인 마법 열쇠는 \nN\n$N$개의 음이 아닌 정수로 이루어진 수열 \na1,a2,a3,⋯,aN\n$a_{1},\\,\\,a_{2},\\,\\,a_{3}\\,,\\cdots,\\,a_{N}$을 가지며 길이가 \nN\n$N$인 마법 열쇠의 힘은 수열을 구성하는 \nN\n$N$개의 수의 합으로 정의한다.\n\n현재 마법 열쇠의 길이가 \nℓ\n$ℓ$일 때 마법 열쇠에 다음 \n4\n$4$가지 마법 중 하나를 적용하여 마법 열쇠의 길이를 줄일 수 있다.\n\n마법 열쇠에서 \na1,a2\n$a_{1},\\,a_{2}$를 제거하고 앞에 \na1⊕a2\n$a_{1}⊕a_{2}$를 추가하여 길이가 \nℓ−1\n$ℓ-1$인 새로운 마법 열쇠를 만든다.\n마법 열쇠에서 \naℓ−1,aℓ\n$a_{ℓ-1},\\,a_{ℓ}$을 제거하고 뒤에 \naℓ−1⊕aℓ\n$a_{ℓ-1}⊕a_{ℓ}$을 추가하여 길이가 \nℓ−1\n$ℓ-1$인 새로운 마법 열쇠를 만든다.\n마법 열쇠에서 \na1,a2,a3,a4\n$a_{1},\\,a_{2},\\,a_{3},\\,a_{4}$를 제거하고 앞에 \na2⊕a3,a1⊕a4\n$a_{2}⊕a_{3},\\,a_{1}⊕a_{4}$를 추가하여 길이가 \nℓ−2\n$ℓ-2$인 새로운 마법 열쇠를 만든다.\n마법 열쇠에서 \naℓ−3,aℓ−2,aℓ−1,aℓ\n$a_{ℓ-3},\\,a_{ℓ-2},\\,a_{ℓ-1},\\,a_{ℓ}$을 제거하고 뒤에 \naℓ−3⊕aℓ,aℓ−2⊕aℓ−1\n$a_{ℓ-3}⊕a_{ℓ},\\,a_{ℓ-2}⊕a_{ℓ-1}$을 추가하여 길이가 \nℓ−2\n$ℓ-2$인 새로운 마법 열쇠를 만든다.\n\n각 연산마다 변화를 수열로 나타내면 다음과 같다.\n\n \n(a1,a2,a3,a4,⋯,aℓ)⇒(a1⊕a2,a3,a4,⋯,aℓ)\n$({\\color{Red}a_{{\\color{Red}1}}},\\,\\,{\\color{Red}a_{{\\color{Red}2}}},\\,\\,a_{3},\\,\\,a_{4}\\,,\\cdots,\\,a_{ℓ}) \\Rightarrow ({\\color{Red}a_{{\\color{Red}1}}}{\\color{Red}⊕}{\\color{Red}a_{{\\color{Red}2}}},\\,\\,a_{3},\\,\\,a_{4}\\,,\\cdots,\\,a_{ℓ})$ \n \n(a1,⋯,aℓ−3,aℓ−2,aℓ−1,aℓ)⇒(a1,⋯,aℓ−3,aℓ−2,aℓ−1⊕aℓ)\n$(a_{1}\\,,\\cdots,\\,a_{ℓ-3},\\,\\,a_{ℓ-2},\\,\\,{\\color{Red}a_{{\\color{Red}ℓ{\\color{Red}-}{\\color{Red}1}}}},\\,\\,{\\color{Red}a_{{\\color{Red}ℓ}}}) \\Rightarrow (a_{1}\\,,\\cdots,\\,a_{ℓ-3},\\,\\,a_{ℓ-2},\\,\\,{\\color{Red}a_{{\\color{Red}ℓ}{\\color{Red}-}{\\color{Red}1}}}{\\color{Red}⊕}{\\color{Red}a_{{\\color{Red}ℓ}}})$ \n \n(a1,a2,a3,a4,a5,a6,⋯,aℓ)⇒(a2⊕a3,a1⊕a4,a5,a6,⋯,aℓ)\n$({\\color{Red}a_{{\\color{Red}1}}},\\,\\,{\\color{Blue}a_{{\\color{Blue}2}}},\\,\\,{\\color{Blue}a_{{\\color{Blue}3}}},\\,\\,{\\color{Red}a_{{\\color{Red}4}}},\\,\\,a_{5},\\,\\,a_{6}\\,,\\cdots,\\,a_{ℓ}) \\Rightarrow ({\\color{Blue}a_{{\\color{Blue}2}}}{\\color{Blue}⊕}{\\color{Blue}a_{{\\color{Blue}3}}},\\,\\,{\\color{Red}a_{{\\color{Red}1}}}{\\color{Red}⊕}{\\color{Red}a_{{\\color{Red}4}}},\\,\\,a_{5},\\,\\,a_{6}\\,,\\cdots,\\,a_{ℓ})$\n \n(a1,⋯,aℓ−5,aℓ−4,aℓ−3,aℓ−2,aℓ−1,aℓ)⇒(a1,⋯,aℓ−5,aℓ−4,aℓ−3⊕aℓ,aℓ−2⊕aℓ−1)\n$(a_{1}\\,,\\cdots,\\,a_{ℓ-5},\\,\\,a_{ℓ-4},\\,\\,{\\color{Red}a_{{\\color{Red}ℓ}{\\color{Red}-}{\\color{Red}3}}},\\,\\,{\\color{Blue}a_{{\\color{Blue}ℓ}{\\color{Blue}-}{\\color{Blue}2}}},\\,\\,{\\color{Blue}a_{{\\color{Blue}ℓ}{\\color{Blue}-}{\\color{Blue}1}}},\\,\\,{\\color{Red}a_{{\\color{Red}ℓ}}}) \\Rightarrow (a_{1}\\,,\\cdots,\\,a_{ℓ-5},\\,\\,a_{ℓ-4},\\,\\,{\\color{Red}a_{{\\color{Red}ℓ}{\\color{Red}-}{\\color{Red}3}}}{\\color{Red}⊕}{\\color{Red}a_{{\\color{Red}ℓ}}},\\,\\,{\\color{Blue}a_{{\\color{Blue}ℓ}{\\color{Blue}-}{\\color{Blue}2}}}{\\color{Blue}⊕}{\\color{Blue}a_{{\\color{Blue}ℓ}{\\color{Blue}-}{\\color{Blue}1}}})$\n\n호반우가 문을 열어 마왕에게 갈 수 있도록 도와주자!"},{"problemId":"30542","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA palindrome is a sequence of two or more characters that reads the same both forward and backward.  Palindromes can appear inside a longer text, such as “Happy days are here again.” in which “pp”, “ehe” and “ere” are some of the palindromes (ignoring spaces, punctuation, and case). An anti-palindrome is a sequence of two or more characters in which there are no palindromes. You are given text that may contain, or itself form, a palindrome. Your task is to determine if there are any palindromes in the text, in which case declare \"Palindrome\", or if there are none, declare \"Anti-palindrome\".  The text may contain spaces, as well as alphabetic and other non-alphabetic characters.  All non-alphabetic characters should be ignored, and uppercase and lowercase letters are considered the same when detecting palindromes.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30521","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMike가 보고 있는 칠판에는 0$0$이 적혀 있다. Mike는 다음과 같은 두 가지의 동작 중 하나를 선택해 반복하면서 수열을 얻고자 한다.\n\n\n\t칠판에 쓰인 숫자가 a$a$라 하면, 이를 지우고 a+1$a+1$을 쓴다.\n\t칠판에 쓰인 숫자가 a$a$라 하면, 이를 지우고 a−1$a-1$을 쓴다.\n\n\n두 가지 동작의 순서는 상관없지만, 각각의 동작을 N$N$번씩 수행해야 한다. 이때, 칠판에 쓰는 숫자를 순서대로 원소로 하는 수열을 A1,A2,⋯,A2N$A_{1}, A_{2}, \\cdots, A_{2N}$이라고 하자.\n\nMike가 진행할 수 있는 모든 순서에 대해 얻어낸 수열들 각각의 최댓값을 K$K$제곱한 합을 구해보자.\n\n이때, 답이 커질 수 있으므로 소수 1 000 000 007$1\\ 000\\ 000\\ 007$로 나눈 나머지를 계산하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30487","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe world does not have enough programming languages yet. To help with that, the Internal Committee for the Perfection of C (ICPC) is planning to build a brand new programming language: Latam++.\n\nIn Latam++, a variable name consists exclusively of one or more lowercase letters of the English alphabet. A valid expression is a “well-formed” string, expressing how to combine variables by using the four arithmetic binary operators “+”, “-”, “*” and “/”, possibly with parentheses.\n\nFormally, valid expressions are exactly those strings that can be produced by the following rules.\n\n\n\tA variable name is a valid expression.\n\tSurrounding any valid expression in parentheses produces another valid expression.\n\tIf A and B are valid expressions, then the concatenation AcB is a valid expression, where c is any of the four arithmetic binary operators “+”, “-”, “*” and “/”.\n\n\nThus, the following are all valid expressions:\n\n\n\ta+b\n\ta+b*(c+b)\n\tatoms+boots*(charly+bob)\n\t(((a)))*(bbasdsaqwe/a/a/a)\n\n\nOn the contrary, the following are not valid expressions:\n\n\n\ta+\n\ta+b(c+b)\n\tatoms+boots*((charly+bob)\n\t((()))*(bbasdsaqwe/a/a/a)\n\n\nThe language is far from complete, and it will likely take ICPC decades of debates until the first version of Latam++ is released. Meanwhile, we will focus only on a specific and very special feature of its compiler, called Automatic Valid Substring Expression Counting (AVSEC).\n\nAVSEC is an extremely useful feature, where the compiler reports the total number of substrings of a given string that are valid expressions. Your task is to implement AVSEC.\n\nFor counting purposes, two substrings are considered different if they start or end at different indexes, even if the corresponding strings are identical (that is, they are the same sequence of characters).\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30474","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t마왕의 정체는 작년에 호반우가 키우던 애완용 트리였다. 트리는 여전히 어지러움을 느끼며 루트를 계속 바꾸고 있다. 이를 본 호반우는 트리의 루트를 통해서 신성한 물인 성수를 흘려보내 트리를 정화하려고 한다.\n\n트리는 N$N$개의 노드와 N−1$N-1$개의 간선으로 이루어져 있으며 각 노드는 1$1$번부터 N$N$번까지의 번호가 정해져 있다. 1≤i≤N$1 ≤ i ≤ N$인 i$i$에 대해 i$i$번 노드는 양의 정수 ai$a_i$만큼 내부에 성수를 저장할 수 있는 공간을 가진다.\n\n어떤 노드 V$V$에 성수가 흘러 들어올 때 아래의 규칙을 따른다.\n\n\n\t V$V$와 연결된 자식 노드로만 성수를 흘려보낼 수 있다.\n\t자식 노드가 없거나 모든 자식 노드의 내부가 성수로 가득 찼다면 V$V$ 내부의 공간이 성수로 차기 시작한다.\n\t V$V$ 내부 공간의 크기가 t$t$라면 공간을 가득 채우는데 성수가 t$t$만큼 필요하다.\n\t항상 V$V$와 연결된 성수로 가득 차지 않은 자식 노드 중 번호가 가장 큰 노드와 가장 작은 노드에 동일한 양의 성수를 동시에 흘려보낸다.\n\t규칙 4에서 번호가 가장 큰 노드와 가장 작은 노드가 같을 경우 해당 노드에만 성수를 흘려보낸다.\n\t흘려보내야할 노드의 번호는 규칙 4를 기반으로 계속 유동적으로 변한다.\n\t성수는 정말 빠르게 흘러가기 때문에 물이 흘러가는 시간은 무시해도 된다. 다시 말해 성수는 루트로 흘려보내자마자 바로 성수가 채워져야 할 공간들에 도착한다.\n\n\n트리는 M$M$번 노드의 공간이 성수로 가득 차면 정화되며 정화된 이후로는 더 이상 성수를 흘려보낼 수 없다고 한다.\n\n트리의 루트가 계속 변해 어지러워하는 호반우에게 각 노드가 루트일 때 트리를 정화하기 위해 필요한 성수의 양을 알려주자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30522","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tSmall 버전에서는 Ai$A_i$, Bj$B_j$의 상한이 210$2^{10}$으로 주어진다.\n\n길이가 N$N$인 수열 A1,A2,⋯,AN$A_1, A_2, \\cdots, A_N$, 수열 B1,B2,⋯,BN$B_1, B_2, \\cdots, B_N$ 과 정수 p$p$가 주어진다.\n\n ∑i=1N∑j=1N(Ai⊕Bj)$$\\sum_{i=1}^N\\, \\sum_{j=1}^N\\, (A_i \\oplus B_j)$$ \n\n ⊕$\\oplus$는 Bitwise XOR 연산을 의미한다.\n\n위의 수식을 전개했을 때 나타나는 N2$N^{2}$개의 Bitwise XOR 연산 중 p$p$개를 Bitwise OR 연산으로 변경할 때, 가능한 수식의 최댓값을 구하는 프로그램을 작성하시오.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30488","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYour friend Pedro always gets very excited for group activities. In his excitement, he runs so fast to the meeting point that he gets tired before arriving. One day, you decided to gather data on this phenomenon and, surprisingly, noticed that he consistently gets tired exactly at the midpoint of his route. In other words, he gets tired when he has traveled half the distance he was going to travel.\n\nYour city has N crossroads identified by distinct integers from 1 to N, and M two-way roads. Each road has a length and connects a specific pair of crossroads, in such a way that there is a path in the city between every pair of crossroads. The distance between two crossroads is the length of a minimum path between those crossroads.\n\nPedro lives at crossroad P, and your group of friends decided to meet at crossroad G later today. After thinking for a while, you devised the following plan so that Pedro arrives on time. You will tell him a misleading meeting point so that he gets tired exactly at G. To make this plan work, crossroad G must belong to every path that Pedro could possibly take while going from P to the misleading meeting point, and for each such path, Pedro must get tired exactly at G. Fortunately, you know that Pedro is a good planner and would never take a path longer than needed.\n\nNow you wonder, which crossroads would work as that misleading meeting point?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30452","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe IT team of a SY company manages the sever log data. This log data is organized into an n×n$n \\times n$ grid, with each cell storing a number indicating the server access count during a specific time period. The server has recently been overloaded and is at risk of going down. To determine the cause of the server overload, the IT team uses a specialized 1×3$1 \\times 3$ analysis tool to find the sub-grids of n×n$n \\times n$ grid that represent the high access counts. The 1×3$1 \\times 3$ analysis tool covers some 1×3$1 \\times 3$ sub-grid (of the n×n$n \\times n$ grid) of vertical length of 1$1$ and of horizontal length of 3$3$. The tool reports the sum of access counts stored in the cells of the sub-grid that the tool covers. The only limitation is that you can use this analysis tool at most k$k$ times and the 1×3$1 \\times 3$ sub-grids covered by the tool should not overlap.\n\nGiven an n×n$n \\times n$ grid and a positive integer k$k$, write a program that outputs the maximum of the total sum of access counts stored in cells of the n×n$n \\times n$ grid covered by the 1×3$1 \\times 3$ analysis tool, such that the tool is used at most k$k$ times and no 1×3$1 \\times 3$ sub-grids covered by the tool overlap.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30504","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t세종이는 영재에게 빌려준 돈을 현재까지도 받지 못했다. 세종이는 영재에게 돈을 갚으라고 여러 번 독촉했지만, 슬프게도 영재는 세종이의 말을 알아듣지 못하는 것 같다. 그래서 세종이는 영재에게 마지막 유예 기간 N$N$일을 주었다. 영재는 세종이가 준 N$N$일 동안 빌린 돈을 모두 갚아야 한다.\n\n세종이와 영재에게는 특이한 규칙이 있다. 세종이는 i$i$일째 되는 날에 Ai$A_i$ 만큼 분노한다. 만약 i$i$일에 세종이가 Ai$A_i$원 이상의 돈을 받지 못한다면 세종이는 영재에게 분노를 표출하게 된다. 영재는 자신이 가진 돈을 N$N$개의 자루에 나누어 담아 세종이에게 하루에 한 자루씩 주려고 한다.\n\n세종이가 받아야 하는 최소 금액과 영재가 나눠 담은 금액이 주어졌을 때, 영재가 세종이의 분노를 피해 빚을 갚는 방법을 찾는 프로그램을 작성하시오.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30475","content":"문제\n\n이제 호반우는 그리운 경북대학교로 돌아가려고 한다. 그러나 문제가 하나 있었으니, 지구에서 이세계로 오기는 쉬워도 이세계에서 지구로 돌아가는 건 어렵다는 것이다.\n\n \n2\n$2$차원 좌표평면으로 나타낼 수 있는 우주에는 이세계를 제외한 \nN\n$N$개의 행성이 존재하며, \nx\n$x$값이 작은 순서대로 \n1\n$1$번 행성, \n2\n$2$번 행성, ... , \nN\n$N$번 행성이라고 부른다.\n\n \n1≤i≤N\n$1 ≤ i ≤ N$인 \ni\n$i$에 대해 \ni\n$i$번 행성은 \n1\n$1$사분면 위에 위치한 정수 좌표인 \n(xi,yi)\n$(x_{i},\\,y_{i})$에 있고 양의 정수 쌍 \nai,bi\n$a_{i},\\,b_{i}$를 가진다.\n\n처음에 호반우는 이세계이자 \n0\n$0$번 행성의 위치인 \n(0,0)\n$(0,\\,0)$에 있으며 여러 행성을 거쳐 지구로 돌아가는 차원문이 있는 \nN\n$N$번 행성에 가려고 한다.\n\n호반우는 한 번의 이동에 \nM\n$M$개의 행성을 지나칠 수 있다. 정확히는, 호반우가 \ns\n$s$번 행성에 있을 때 \ne\n$e$번 행성으로 이동하려면 \ns≤e≤s+M\n$s \\le e \\le s+M$을 만족해야 한다. 이때의 이동 시간은 \n0\n$0$번부터 \ne\n$e$번까지의 행성들을 모두 포함하는 가장 작은 볼록 다각형을 만들었을 때 \ns\n$s$번 행성이 볼록 다각형 경계에 위치한다면 \nae\n$a_{e}$, 그렇지 않다면 \nbe\n$b_{e}$가 소요된다. 직선도 볼록 다각형으로 생각한다.\n\n이세계로부터 \nN\n$N$번 행성까지 빠르게 도착해 호반우가 학교에 지각하지 않도록 도와주자!"},{"problemId":"30543","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are designing an old-school game you call Bombardment where the goal is to destroy a number of points by bombarding them. You do not yet know the theme of your game, just that the core mechanics should involve a bombardment.\n\nThe points to be destroyed are located on the real number line, that is each point is simply an x$x$-coordinate. A bombardment is an attack that will destroy all points within some fixed distance R$R$ from the center of the bombardment. More specifically, a single bombardment is specified by picking an integer point X$X$ (the center). All points lying in the interval [X−R,X+R]$[X-R, X+R]$ will be destroyed.\n\nYou decide to playtest a basic version of this game before you go through the effort of designing a theme, adding nice graphics, etc. Interestingly, most testers seemed to employ a greedy strategy: each bombardment is chosen to destroy the maximum number of points in that single bombardment. Sometimes, this causes players to use more bombardments than the minimum possible number of bombardments. You want to design a program that will simulate this strategy, this will help you design interesting levels. \n\nThat is, your job is to write a program that will simulate the following process. While there are still points remaining, choose a value X$X$ for a bombardment that will destroy the maximum number of remaining points. If there are multiple values X$X$ for the center of such a bombardment, you will choose the least such X$X$ each time.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30505","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t세종이를 포함한 N$N$명의 학생이 자신이 뽑은 친구를 도와주는 마니또 활동을 진행하고 있다. N$N$명의 학생은 1$1$부터 N$N$까지의 서로 다른 정수 번호가 붙어 있다. N$N$명의 학생은 모두 서로 다른 학생 한 명의 마니또가 되었으며, 자신이 스스로의 마니또가 되거나 마니또가 없는 학생은 없다.\n\n그러나 예상과 달리 학생들이 스스로 자신이 누구의 마니또인 지 밝힌 바람에 이벤트가 재미없어질 위기에 처했다! 이에 마니또 활동에 참가하지 않는 영재는 마니또를 공개하기 전에 학생들의 마니또가 누구인지 맞혀 보고자 한다. 하지만 N$N$명의 학생의 마니또를 모두 맞히는 것은 힘들다고 생각해 세종이의 마니또만을 맞혀 보기로 했다. 밝혀진 정보들을 바탕으로 세종이의 마니또로 가능한 사람의 수를 출력하는 프로그램을 작성하시오.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30489","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are using your favourite program, the BAPC ArchLinux Package Configurator, to upgrade your system. There are n$n$ outdated packages that will be upgraded, and your package manager is kind enough to inform you of the download size for each package up front. Due to recent advances in parallelism, it downloads up to k$k$ packages in parallel, although you do not know the order in which they are downloaded.\n\nYou are now looking at the download progress bar in the console, and observe that only m$m$ packages have currently finished downloading but the overall download progress is already very high. This does not seem to make sense! You wonder: what is the maximum overall percentage of the total download size that could be done with this many package downloads completed? Note that there is a small duration of time in which a package that is being downloaded is reported as 100%$100\\%$ done, but not yet finished.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30544","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe cuckoo bird pops out of the cuckoo clock and sounds off once on the quarter hour, half hour, and three-quarter hour. At the beginning of each hour, it sounds off the hour (1--12). Given the current time and a target number N$N$, your task is to determine what time it will be when the cuckoo bird finishes sounding off N$N$ times. If the cuckoo bird would be sounding off at the starting time, include those sounds in the count.\n\nIf the count is reached on the hour, report the time at the start of that hour. That is, you may assume the cuckoo finishes sounding off before the minute is up.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30476","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tDoctor Kruskal is starting a tiberium trading business. They have N possible suppliers of tiberium, and many clients interested in receiving tiberium to run their own industries.\n\nCalendar days are numbered chronologically using positive integers, and each supplier is identified by a distinct integer from 1 to N. Supplier i can supply tiberium on any day from day Si onwards, but not on the days strictly before Si. They charge a price of Pi dollars per day for such a service. Since Kruskal is very smart, the list of suppliers contains only the best suppliers in the city. Besides, it is the case that Si < Si+1 and Pi > Pi+1 for i = 1, 2, . . . , N − 1.\n\nKruskal’s system keeps a database of available clients. Initially, this database is empty and contains no clients. Clients will be arriving one by one, and each of them is immediately added to the database upon arrival. The j-th client is interested in receiving tiberium on any day up to day Ej inclusive. For each day that they receive tiberium, their industry will generate Rj dollars of gross revenue. Thus, if Kruskal matches supplier i to client j, the final profit of this whole operation after deducting the tiberium cost will be (Rj − Pi) × (Ej − Si + 1), where Si ≤ Ej, as otherwise no tiberium could be provided.\n\nAt any moment, Kruskal’s system can quickly compute, for any particular supplier i, the optimal client among those in the database, so that the profit of the operation when matching the supplier and the client is maximized, and it can report such maximum profit. It might be the case that a positive profit for a supplier cannot be achieved with any of the available clients; in that case, the system reports a profit of zero.\n\nNotice that when Kruskal’s system is requested to compute the maximum profit for a given supplier, that supplier is matched with at most one of the available clients, and in that case, such a match has no effect at all on future operations. This means that both the supplier and the client can be considered again for future matchings.\n\nYour task is to implement Kruskal’s system.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30490","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are participating in the Battle-bots Aggressive Power Contest. It is a tournament where each team builds a robot that can battle with other robots, and you win by destroying your opponent's robot. Specifically, you win when your opponent's robot stops moving after its only motor is destroyed.\n\nYou have outfitted your bot with two weapons: it has a sword that can slash the opponent's bot in half, and it has a claw that can take a chunk out of your opponent's bot and crush it into scrap. The attacks take equally long. The program that controls your bot is always running to decide which attack to use next.\n\nIf your battle-bot uses the sword attack to cut its opponent in half, the half with the motor will keep moving, and you can ignore the other half. If your battle-bot uses the claw attack, it will take a chunk of size 1$1$ out of the opponent's bot, but unless you can take the bot out entirely you have to assume that the motor of the bot is in the piece you have not clawed, and keep fighting.\n\nFor example, consider the second sample case. If your opponent's bot is so big it would take 5$5$ claw attacks to completely crush it, you could act as follows. Start with a sword slash, cutting it down into two pieces of size 212$2\\frac12$. Then use your claw on the part that is still moving, so it goes down to size 112$1\\frac12$. Cut that piece in half with your sword again to bring it down to size 34$\\frac34$. Then finally use your claw to crush the last moving piece of the bot. That way, you can beat it in four attacks.\n\nYour bot is equipped with a quantum computer that can easily simulate a googol attack patterns per microsecond. However, if it does not know what the fastest attack pattern is, it will never know it has reached that, and never stop searching.\n\nFinish your battle bot by writing a program that, given how many claw attacks it would take to take out the opponent, determines the minimal number of attacks you need in the worst case to take it out.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30523","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t길이가 N$N$인 수열 A1,A2,⋯,AN$A_1, A_2, \\cdots, A_N$, 수열 B1,B2,⋯,BN$B_1, B_2, \\cdots, B_N$ 과 정수 p$p$가 주어진다.\n\n ∑i=1N∑j=1N(Ai⊕Bj)$$\\sum_{i=1}^N\\, \\sum_{j=1}^N\\, (A_i \\oplus B_j)$$ \n\n ⊕$\\oplus$는 Bitwise XOR 연산을 의미한다.\n\n위의 수식을 전개했을 때 나타나는 N2$N^{2}$개의 Bitwise XOR 연산 중 p$p$개를 Bitwise OR 연산으로 변경할 때, 가능한 수식의 최댓값을 구하는 프로그램을 작성하시오.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30453","content":"문제\n\nTwinkling Stars in the universe attract us, guide us, and shed numerous intuitions to us. Astronomer Dr. Kobserved twinkling stars in a dark sky. One day, he was curious of symmetry of stars. To simplify the problem, he assumed the sky is a \nxy\n$xy$ plane and the stars are points placed on the plane. When the set of stars \nS\n$S$ and a point \np=(px,py)\n$p = \\left(p_x, p_y \\right)$ are given, symmetry of stars \nS\n$S$ with respect to a point \np\n$p$  is defined as the number of points \n(x,y)∈S\n$(x, y) \\in S$ such that there exists at least one point \n(x′,y′)∈S\n$(x', y') \\in S$ which satisfies \n(x+x′2,y+y′2)=(px,py)\n$\\left( \\frac{x+x'}{2}, \\frac{y+y'}{2} \\right) = \\left(p_x, p_y\\right)$. When the set of stars \nS\n$S$ is given, symmetry of stars \nS\n$S$  is defined as the maximum symmetry of stars \nS\n$S$ with respect to any point \np\n$p$ in the whole \nxy\n$xy$ plane. Let’s see an example following.\n\nIn the example above, we are given a set of stars \nS={(1,3),(3,1),(−1,2),(4,4),(1,1),(3,3)}\n$S = \\{(1,3), (3,1), (-1,2), (4,4), (1,1), (3,3)\\}$. The symmetry of stars \nS\n$S$ with respect to a point \np=(2,2)\n$p = (2,2)$ is \n4\n$4$ since the point \na=(1,3)\n$a = (1,3)$ has point \nb=(3,1)\n$b = (3,1)$ which satisfies \n(ax+bx2,ay+by2)=(1+32,3+12)=(px,py)=(2,2)\n$\\left( \\frac{a_x + b_x}{2}, \\frac{a_y + b_y}{2} \\right) = \\left( \\frac{1+3}{2}, \\frac{3+1}{2} \\right) = \\left( p_x, p_y \\right) = (2, 2)$ and the point \ne=(1,1)\n$e = (1,1)$ has point \nf=(3,3)\n$f = (3,3)$ which satisfies \n(ex+fx2,ey+fy2)=(1+32,1+32)=(px,py)=(2,2)\n$\\left( \\frac{e_x + f_x}{2}, \\frac{e_y + f_y}{2} \\right) = \\left( \\frac{1+3}{2}, \\frac{1+3}{2} \\right) = \\left( p_x, p_y \\right) = (2, 2)$. The symmetry of stars \nS\n$S$ with respect to a point \np=(−1,2)\n$p =(-1,2)$ is \n1\n$1$ since the point \nc=(−1,2)\n$c = (-1,2)$ has point \nc=(−1,2)\n$c = (-1,2)$ itself which satisfies \n(cx+cx2,cy+cy2)=(−1−12,2+22)=(px,py)=(−1,2)\n$\\left( \\frac{c_x +c_x}{2}, \\frac{c_y + c_y}{2} \\right) = \\left( \\frac{-1-1}{2}, \\frac{2+2}{2} \\right) = \\left( p_x, p_y \\right) = (-1, 2)$. The symmetry of stars \nS\n$S$ is \n4\n$4$ since the symmetry of stars \nS\n$S$ with respect to the point \np=(2,2)\n$p = (2, 2)$ is the maximum among all the points in the \nxy\n$xy$ plane.\n\nGiven a list of \nn\n$n$ distinct points that represent stars, write a program to output the symmetry of the given stars."},{"problemId":"30545","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\nThe image illustrates the superposition of four cycles a$a$, b$b$, c$c$, and d$d$ of differing offsets and periods. It can be quickly seen that a$a$ appears every 3 steps with an offset of 3, b$b$ every 4 steps with an offset of 2, c$c$ every 7 steps with an offset of 5, and d$d$ every 11 steps with an offset of 4. Cycle d$d$ can be seen to have the longest period. The first sample input describes the case in the image.\n\nGiven a sequence of strings of lowercase letters (arbitrary ordering of letters in each string) and their positions on the number line, your task is to determine which letter represents the cycle with the longest period.  The number line will start at 1 and will not be longer than 65,536$65{,}536$.  Any letter that appears will appear at least twice, and it will appear on the entire number line at locations consistent with its offset and period.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30506","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t세종이는 가위바위보 머신을 개발했다. 머신을 작동시키면 머신 가위바위보 대결을 즐길 수 있다. 한 번의 대결은 총 100$100$번의 가위바위보 게임으로 이루어지며, 각 게임의 결과는 플레이어에게 공개되지 않는다. 대신 100$100$번의 가위바위보 게임을 모두 진행한 후 플레이어는 100$100$번의 게임 중 이긴 게임의 수를 알 수 있다.\n\n가위바위보의 꽃은 무작위성이지만, 난수 생성 알고리즘을 믿지 못하는 세종이는 아예 머신이 낼 손 모양의 순서를 모두 고정해 버렸다. 이를 본 영재는 세종이와 다음과 같은 내기를 하기로 했다.\n\n\n\t영재와 머신이 대결한다. 처음에 영재는 반드시 100$100$개의 가위를 낸다.\n\t매 대결이 끝날 때마다, 영재는 자신이 이긴 게임의 수를 확인한다. 그 뒤 영재는 낼 손 모양을 원하는 대로 바꾸고 다음 게임을 진행한다.\n\t영재는 첫 대결을 포함해 총 101$101$번의 대결을 할 수 있다.\n\t대결 결과를 통해 영재가 머신의 손 모양이 무엇인지 맞히면 영재가, 맞히지 못하면 세종이가 내기에서 이긴다.\n\n\n영재가 내기에서 이길 수 있게 도와주자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30477","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tCarlinhos and Equalizer are playing a game. The game begins with 3N elements, which are integer numbers, written on a blackboard. Then, for N rounds, the following two steps are repeated.\n\n\n\tCarlinhos, the first player, selects an unchosen element and marks it with a red circle.\n\tEqualizer, the second player, picks two unchosen elements, marks one of them with a blue square, and erases the other from the blackboard.\n\n\nAt the end of these rounds, the blackboard contains N red-marked elements and N bluemarked elements, with no moves left. The game concludes with a clear winner: if the sum of the red-marked elements differs from the sum of the blue-marked elements, Carlinhos emerges victorious; otherwise, Equalizer takes the win.\n\nThe figure below depicts the only possible outcome for the first sample. In this case Equalizer wins for sure, no matter how they play both sums will be equal to 25.\n\n\n\nCarlinhos, feeling the game is imbalanced, seeks to determine whether he can secure a victory when both players play optimally. Can you help him with this task?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30546","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are a late night attendant at a busy gas station. You can only go home after all the cars have topped up their fuel tanks and left the gas station. The gas station you work at has P$P$ gas pump columns, counting from left to right, and each column has two gas pumps, pump A and pump B. A pump can serve cars with left side fuel doors on its right side, or cars with right side fuel doors on its left side. A pump can serve a car on its left side and a car on its right side simultaneously. Thus, each pump column has two lanes for cars.\n\nCars arriving at the gas station follow strict rules. A car will go to the leftmost open lane that is suitable for its fuel door side. If there are no open lanes, the car will queue up for the suitable lane with the shortest queue. If there are multiple lanes with the shortest queue, the car will queue up in the leftmost one. Once a car has joined a queue, it cannot switch to a different one. After cars leave after refueling and a lane becomes open, the next car in the queue for that lane will go to use a pump.\n\nA lane is open if pump A is available. If pump B is available but pump A is occupied, the lane is not open. When a car goes to an open lane, if both pumps are available, the car will go to pump B, otherwise it will go to pump A. If a car arrives at the same time as some other cars have just finished filling up and left, the new car waits for all other cars in the queues to move to the open pumps (if any) before deciding where to queue. When a car leaves from a pump A, but the pump B ahead of it is occupied, the car is stil able to leave immediately.\n\nYou know that Car i$i$ arrives at time ti$t_i$, requires just under fi$f_i$ minutes to fill up and leave, and has its fuel door on the si$s_i$ side.\n\nKnowing all this, you want to know when you will be able to go home.\n\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30524","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tQuicksort is a recursive sorting algorithm developed in 1959 by Tony Hoare. One of the major steps in the algorithm is the partition\\/ step: given an element p$p$ in the array (the pivot\\/ element) rearrange the elements in the array as shown below where all the values in XL$X_L$ are ≤p$\\leq p$ and all elements in XR$X_R$ are >p$> p$.\n\n\n\nFigure A.1 below shows an array before and after it's been partitioned with the pivot element 13$13$. Note that the elements in XL$X_L$ and XR$X_R$ are typically not in sorted order and either one of them could be empty.\n\n\n\nFigure A.1: An array before and after a partition\n\nHow a partition is executed and how a pivot element is selected are fascinating questions but are not of interest to us. What we would like you to do is the following: given an array, determine all the values that could be the pivot value assuming the array has been partitioned, or determine that the array has not been partitioned.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30491","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tUnlike your friends, you live in a terminal. You are cool. Your terminal is everything to you: you have optimized the font, colour scheme, keyboard shortcuts, and what not.\n\nOnce thing still annoys you though: all these commands you're typing involve so many file paths and are so long! Then it occurs to you: all this time you have been working from the root directory of the file system, but in fact you can change directory to anywhere you like! This should simplify your life a lot!\n\nThis way, if your working directory is /a/b, you can refer to the absolute file path /a/b/x using simply x. To go up a level, you can use .., so that you can refer to /a/y/z as ../y/z, and to /some/other/directory as ../../some/other/directory.\n\nYou being you, of course you overdo this and will now use relative paths everywhere!\n\nGiven the n$n$ absolute file paths in the command you want to run, find the working directory that minimizes the total number of relative path components. For example, a/a/b/c, and ../../a/b both contain 4$4$ path components. Note that you can only change the working directory to a directory and not to a file path. Filenames will never coincide with directory names in the same directory.\n\nIn the first sample it is best to set the working directory to /home/jury/compressingcommands, leading to 6$6$ components: secret, solutions, and ../../hackerman/answers.\n\nIn the second sample it is best to set the working directory to /a, leading to 19$19$ path components: b/a/a/b, a/a, ../b, a/b, b/a/a/a, ../c, and b/a/b.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30507","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t원탁에 N$N$명의 학생들이 빈 종이를 한 장씩 들고 같은 간격으로 둘러앉아 있다. 학생들이 각자 집합 S={1,−1,2,−2}$S=\\{1,-1,2,-2\\}$에서 원소 하나를 골라 자신이 가지고 있는 종이에 쓸 때, 어떤 이웃한 두 학생이 쓴 수의 합도 0$0$이 되지 않는 경우의 수를 구하시오.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30547","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\nThe Gray Code is a well-known binary sequence in which successive elements differ by only one bit, and the bit chosen to be switched yields the smallest normal binary value not yet used.  The first element of the sequence is the binary sequence corresponding to 0. For example, the 3-bit Gray Code sequence is 000, 001, 011, 010, 110, 111, 101, 100.  So the element at index 0 is 000, the element at index 4 is 110, and so on.\n\nWe want to modify the Gray Code so that successive elements differ by an even number of bits, but again the bits selected to be changed should yield the smallest normal binary value not yet used.  We call this the even Gray code.  Here are the first 3 elements of the 5-bit even Gray Code:\n\n0   0 0 0 0 0\n1   0 0 0 1 1     (2 bits switched – positions 1 and 2)\n2   0 0 1 0 1     (2 bits switched – positions 2 and 3)\n\nGiven an index K$K$, give the element at index K$K$ in the 10-bit even Gray Code.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30478","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIt’s rush hour! You’ve called it a day at work, and you need to buy candies for all your family members before the mall closes.\n\nExclusivity and uniformity are characteristics highly valued by your family, and in order to impress them, you’ve come up with a plan. All the candies given to each family member should be from a single brand, and no other family member should receive candies from that same brand. Additionally, you don’t want to admit you love some more than others, so you want everyone to receive the same number of candies.\n\nThe mall has a store that sells candies from K different brands. Coincidentally, your family consists of exactly K members. This may seem too easy, but of course there’s a catch.\n\nThe store displays its candies aligned on a single shelf. You don’t have time to select candies individually; instead, you want to buy a group of contiguous candies to complete your task efficiently. This means that when you purchase any pair of candies, you must also buy all the candies located between them on the shelf.\n\nWhat is the maximum number of candies that you can buy?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30492","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA new county has been created on artificially created land out from the coast, with code name \"Built Anew Peninsula County\", but the final name still needs to be chosen. To establish a new name, the cities within the county get to vote on the individual letters of the name.\n\nAs it happens, all cities in the county have a name with exactly m$m$ letters, and so they decide the name of the county will also have exactly m$m$ letters. Naturally, each city prefers their own name, and thus votes that the i$i$th letter of the county name should match theirs. For each of the m$m$ positions, the letter that received the most votes across all cities gets picked. In case of a tie between multiple letters, the one occurring earliest in the English alphabet gets picked.\n\nGiven the list of the city names, determine the result of the vote for the new county's name.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30525","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAll the residents of the rural community of Axes Point live on one of two parallel streets separated by a band of green park land. Recently, the local board of supervisors received a grant to (finally) bring wireless service to the town. The grant provides enough money for them to install k$k$ access points, and the supervisors have decided to place them in a straight line on County Road \"B,\" which lies in the wooded band midway between the two residential streets. They want to place them in a way that minimizes the distance between users and their nearest access point. Specifically, they want to minimize the sum of the squares of the distances of each user from their nearest access point. For instance, Figure ???\\ref{samplefig} shows two streets with eight customers and their locations along the streets (this is the first sample input). The streets are 3$3$ units apart, and two access points have been placed at points midway between the two streets so that the sum of the eight squared distances is minimized.\n\n\n\nFigure B.1: Sample Input 1 showing placement of access points\n\nGiven the locations of all customers along each of the two streets, the distance between the streets, and the number of access points, help the local government determine the minimum sum of squared distances that can be achieved.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30508","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t비 오는 날 세종이는 부모님의 심부름으로 물을 사러 갔다. 횡단보도 앞에서 신호를 기다리던 세종이는 횡단보도가 평평하지 않아 물이 고인 것을 보았다. 횡단보도는 N×M$N\\times M$ 크기의 직사각형 격자 모양이며, 세종이가 서 있는 쪽 맨 앞의 맨 왼쪽 칸을 1$1$행 1$1$열, 맨 오른쪽 칸을 1$1$행 M$M$열로 부른다.\n\n횡단보도 중 K$K$개의 칸에는 하수구가 있다. 모든 칸은 상하좌우로 인접한 칸 중 높이가 자신보다 낮거나 같은 칸에 하수구나 물이 빠진 칸이 있으면 물이 빠진다. 하수구가 없는 칸 중 물이 빠지지 않은 칸을 물이 고인 칸이라고 한다. A+B를 풀고 받은 새 신발을 더럽히고 싶지 않았던 세종이는 물이 고인 칸을 밟지 않고 횡단보도를 건너려 한다. 세종이의 새 신발은 횡단보도의 연속된 h$h$개의 행과 w$w$개의 열을 덮는 크기의 직사각형 모양이다. 세종이는 횡단보도를 건널 때 항상 신발이 횡단보도의 격자 칸에 꼭 맞게 들어가게 발을 딛으며, 발의 방향을 돌리지 않는다.\n\n횡단보도의 각 칸의 높이가 주어졌을 때, 세종이가 횡단보도에 신발을 더럽히지 않고 한쪽 발을 딛는 방법의 수를 구하는 프로그램을 작성하시오.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30479","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tWordWhiz is a popular word puzzle game that challenges players to guess a secret word within a limited number of attempts. The game uses a dictionary containing N words. Each word in this dictionary consists of five distinct lowercase letters.\n\nThe game begins with the player being presented with an empty grid, consisting of a number of rows. Each row allows a single guess. The player’s task is to fill rows with words contained in the dictionary until the secret word is found, or the player has used all available rows.\n\nAfter the player submits a guess, the game provides feedback by coloring the cells where the guess was written. The feedback consists of three colors:\n\n\n\tGray (“X”): The letter in the cell is not part of the secret word.\n\tYellow (“!”): The letter in the cell is part of the secret word but is in the wrong position.\n\tGreen (“*”): The letter in the cell is part of the secret word and is in the correct position.\n\n\nTo illustrate, let’s consider the scenario where the secret word is “hotel”, and the player submits “blast” as their guess. In this case, the first, third, and fourth cells would turn gray because “b”, “a”, and “s” are not present in the secret word “hotel”. The second and fifth cells, however, would turn yellow. This indicates that “l” and “t” are part of the secret word but appear in wrong positions: “l” should be in the fifth position instead of the second, while “t” should be in the third position instead of the fifth. This feedback would be represented by “X!XX!”.\n\nNow, if the player submits “heart” as their guess, the third and fourth cells would still turn gray, because “a” and “r” are not in “hotel”. The second and fifth cells would again turn yellow, because once more “t” is in the fifth position (instead of the third), and this time “e” is in the second position when it should be in the fourth. However, for this guess the first cell would turn green, indicating that “h” is the first letter in both the guess “heart” and the secret word “hotel”. This feedback would be represented by “*!XX!”.\n\nFinally, if the player submits “hotel” as their guess, all cells would turn green since this is the secret word. This feedback would be represented by “*****”.\n\nThe feedbacks above can be seen in the following picture.\n\n\n\nSome time ago, your company added a WordWhiz player on its website and now wants to enhance the game by adding functionality to display previous game sessions. However, only the feedback for each guess was stored, not the submitted words. This means that it might not be possible to accurately recover the guesses submitted in each session, and before investing any further effort, the company wants to analyze the recorded game sessions.\n\nGiven a dictionary of five-letter words, the secret word (included in the dictionary) and the feedback for a game session, your task is to determine how many words in the dictionary could have been submitted as each guess.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30548","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tHere is an example of a small town consisting of 5×5=25$5 \\times 5 = 25$ blocks and a population of 99. The colors highlight one way in which the town can be divided into 3 contiguous wards of 33 citizens each.\n\nYour task is to consider towns of various sizes and determine if there is at least one way to divide up the blocks into contiguous wards of equal population. All towns will be rectangular and consist of no more than 25 blocks. The number of desired wards may vary.\n\nA block is considered adjacent to another block if it shares an edge. A contiguous ward is a collection of blocks such that by starting at one, and only traveling to adjacent blocks in the ward, you can get to every block in the ward.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30454","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t사파리 투어를 나선 건덕이는 얼룩말에 관심이 많았다. 특히 얼룩말의 몸통에 검은 줄이 많을수록 얼룩말이 아름답다고 생각했다.\n\n건덕이는 얼룩말들의 털 상태를 0과 1로 기록한다. 0은 털이 흰 부분을, 1은 털이 검은 부분을 의미한다.\n\n검은 줄의 개수는 연속하는 검은 부분의 개수이다. 예를 들어, 건덕이가 한 얼룩말의 털 상태를 01101110101로 기록했다면, 이 얼룩말은 4$4$개의 검은 줄을 가지고 있다.\n\n건덕이는 모든 얼룩말에 대한 털 상태를 기록해 두었다. 건덕이가 생각하기에 가장 아름다운 얼룩말은 몇 개의 줄을 가졌고, 그런 얼룩말이 총 몇 마리가 있을까?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30493","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou have a lot of exams today! And you have not yet prepared for any of them! At least you know from experience that if you study enough for an exam, you will for sure pass it quickly, well within the allotted time. Even better, you stared so long at the daunting course curricula that you now know exactly how much time you will need to study for each exam in order to pass it within the given time. If you do not study long enough, you will for sure fail it.\n\nAs it happens, your university has some weird bureaucratic rules that require you to attend all your exams. The horror! And leaving early is not allowed, unless you know for sure you passed it!\n\nGiven the full exam schedule of when each exam starts, how long each exam takes, how much time you need to study for each exam, and how quickly you can finish each exam you studied for, how many exams can you pass at most?\n\nYou may start studying at time 0$0$, but can only study while not making an exam. The preparation for an exam does not have to be done in a contiguous block of time and may be interrupted.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30526","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tDr. Hugh Klidd is a geometry expert who has recently become preoccupied with convex hulls.  Recall that for a set of points in the x-y$x\\textrm{-}y$ plane, the convex hull is the smallest convex polygon containing all of those points. (A convex polygon has the property that for any two points on/in the polygon, the line segment connecting those two points lies entirely on/in the polygon.) Dr. Klidd has just computed the convex hull of a set of points,S,$\\textrm{points,} S,$ which he denotes H(S),$H(S),$ and is quite pleased with the result:\n\n\n\t the convex hull has n≥3$n \\geq 3$ vertices\n\t each vertex has integer coordinates\n\t no three of the convex hull vertices are collinear, i.e., lie on the same line\n\n\nDr. Klidd is ambitious, though, so he wants this convex hull to grow. Specifically, he is looking for an extension point, which is a point p=(x,y)$p=(x,y)$ satisfying the following conditions:\n\n\n\t x$x$ and y$y$ are integers\n\t if S′=S∪{p}$S' = S \\cup \\{ p \\}$ (S$S$ with p$p$ added), then the convex hull of S′,$S',$ i.e., H(S′),$H(S'),$ has n+1$n+1$ vertices\n\t no three of these n+1$n+1$ vertices are collinear\n\n\nIn other words, an extension point increases the number of convex hull vertices by1,$\\textrm{by} 1,$ while still keeping all its nice properties. For most convex hulls, H(S),$H(S),$ Dr. Klidd can usually find at least one extension point, but he would like to know how many extension points there are to choose from.  He postulates that there is an efficient way to count the number of extension points, but having never taken an algorithms course, he turns to you for help.1\n\n\n\nFigure C.1: Illustration of an extension point for Sample Input 1\n\n\n1Dr. Klidd has postulated exactly four things before now, so this is his fifth postulate.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30549","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tChristie is an ant that likes to crawl on a closed ribbon (i.e., it forms a polygon with start and end points attached). Her owner, Cindy would place a sugar cube on the ribbon for her to enjoy. Cindy always puts the sugar cube on the exterior side of the ribbon, so Christie wants to crawl on the exterior side in order to expect a sugar cube somewhere down the ribbon road. However, because Christie is so tiny, she usually has trouble finding out if she is crawling on the inside or on the outside of the ribbon.  If she is on the inside, then she would need to crawl to the outside carefully.\n\nFortunately, Christie's antenna can emit a signal, which is a ray. The rays emitted by Christie travel from her location to some other point (x,y)$(x,y)$, and the ray may pass through the ribbon. The rays she emits span [0∘,180∘]$[0^\\circ, 180^\\circ]$ with the line segment she is current on---the direction parallel to the line segment she stands on pointing forward being 0∘$0^\\circ$, the span of the ray goes above her, and direction parallel to herself pointing away from her being 180∘$180^\\circ$. The ribbon does not twist (i.e., the ribbon does not rotate about itself), so that the ribbon is not a M\\\"obius band. Therefore, whether Christie is on the inside or the outside is always the same as she walks along the ribbon.\n\nThe ray can be used to determine if Christie is crawling on the inside or the outside of the ribbon.  Note that if the ray happens to be parallel to the line segment she stands, then she will not be able to determine if she is inside or outside.  Also, if she stands on a vertex of the polygon, then she might not be to determine the answer either.  Please help Christie find out if she is on the inside of the ribbon road.\n\n\n\nAn illustration of Christie's antenna range, from which you can see if antenna is emanating 0∘$0^\\circ$ or 180∘$180^\\circ$, then Christie would not be able to tell she is inside or outside.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30550","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou recently started working as a TA (teaching assistant) for your university's Scientific Computing class.\n\nToday, Professor introduced the scientific notation, where numbers are written in the form m×10n$m \\times 10^n$ with a real number m$m$ (the significand) and an integer n$n$ (the exponent).\n\nAt the end of class, she gave students the following assignment.\n\nGiven two numbers x$x$, y$y$ in scientific notation, perform the following four arithmetic operations:\n\n\n\t x+y$x + y$ \n\t x−y$x - y$ \n\t x×y$x \\times y$ \n\t x/y$x / y$ \n\n\nAs a strict grader, you decided to write a program to grade students' answers.\n\nYou mark a solution correct if and only if both relative and absolute errors are less than 10−9$10^{-9}$ (not including 10−9$10^{-9}$).\n\nIf the correct answer is 0$0$, then 0$0$ is the only acceptable answer.\n\nOtherwise, a student's answer z$z$ will be compared to the correct answer z~$\\tilde{z}$, and the relative and absolute errors are computed as |z−z~||z~|$\\frac{|z - \\tilde{z}|}{|\\tilde{z}|}$ and |z−z~|$|z - \\tilde{z}|$, respectively.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30494","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are on a skiing trip in the Alps and need to take a funicular.1 However, there usually is a long queue for the funicular to bring you to the top of the mountain. Being someone who hates wasting time in the morning, you want to find the best moment to start queueing in order to minimize queueing time.\n\nThe funicular station is open for n\\(n\\) minutes per day. A carriage transports c\\(c\\) people at once, and one carriage leaves exactly every minute. For every minute the funicular is open today, you know the number of people arriving.\n\nYou want to arrive when the station is open, exactly at the start of a minute, like everyone else. Note that you are a sociable person and if there are other people arriving at the same minute as you, you let them go first, after which you stand in the queue.\n\nCalculate at which minute you should arrive to have minimal waiting time, or determine that it is impossible to catch a ride today. If there are two times achieving the same minimal waiting time, give the earliest occasion.\n\n\n1 A funicular is a type of cable railway system laid on a steep slope, where two counterbalanced carriages are attached to opposite ends of a haulage cable, which is looped over a pulley at the upper end of the track.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30551","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn the game of Scrabble Flash, you are given 5 tiles of letters, and you want to find as many words as you can before time runs out.  In our particular version of this game, the letter appearing on a tile can be changed to any other letter of your choice by pressing a button.  Some time will need to be spent if you want to change letters, so it is desirable to avoid such changes as much as possible.\n\nPlayers of this game have noticed that it is much easier to find another word that is similar to the current word than to find another word that is less similar.  These players believe they have come up with a formula to estimate the amount of time it takes to find the next word given the word you have most recently found.  Let w$w$ be the length of the the word being found, and s$s$ be the length of the longest common substring of the two words.  They estimate that it takes a person w(w+1)2−s(s+1)2\\[ \\frac{w (w+1)}{2} - \\frac{s(s+1)}{2} \\] seconds to find the next word.\n\nGiven a list of words, they would like you to find the maximum number of words that can be found in a given number of seconds.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30455","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t건덕이와 건구스는 N$N$개의 칸이 가로로 놓인 전장에서 승부를 겨루고 있다. 처음에는 가장 왼쪽 칸에 건덕이가, 가장 오른쪽 칸에 건구스가 자리 잡고 있으며, 승자는 아래 규칙에 따라 정해진다.\n\n\n\t자신의 차례에 아래 두 가지 행동 중 하나를 반드시 수행해야 한다. 전장을 벗어나도록 이동할 수 없으며, 행동을 마친 뒤에는 상대방의 차례가 된다.\n\n\t\n\t\t좌우로 인접한 칸으로 이동한다.\n\t\t좌우로 인접한 칸에 상대방이 있다면, 상대방을 공격한다.\n\t\n\t\n\t상대방을 공격하는 경우 승리한다.\n\n\n전장의 크기가 주어졌을 때, 누가 승리하는지 판단하자. 둘 다 최선을 다해서 승부를 겨루며, 처음 행동을 수행하는 사람은 건덕이다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30495","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tFor the longest time you could keep your toddlers happy by letting them play with triangular, square, and circular wooden blocks that fit exactly through perfectly sized holes. After letting them play a bit too long, they completely mastered this game and are now bored, preventing you from fixing the bugs in your code.\n\nJust now, they decided to reverse roles and started screaming planar coordinates at you, insisting that you determine which shape each four points make: kite, trapezium, parallelogram, rhombus, rectangle, square, or none of those. You do not have time for this, since your bugs still need fixing. Instead, you write a new program to answer your toddlers' questions, ideally without bugs.\n\nThe definitions for the quadrilateral shapes are as follows:\n\n\n\tA square has four right angles and four sides with equal lengths.\n\tA rectangle has four right angles.\n\tA rhombus has four sides with equal lengths.\n\tA parallelogram has two pairs of parallel sides.\n\tA trapezium has one pair of parallel sides.\n\tA kite has reflection symmetry across a diagonal.\n\n\n \n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30552","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tTaking attendance in your class is a tedious task. You call out the names of students one at a time in alphabetical order. If the student is present, they respond by saying \"Present!\" before you call the next name.\n\nThis is such a boring task that you sometimes zone out and don't keep a proper record of attendance. Write a program to help you summarize the absences!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30527","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tCorn farmers need to do pre-harvest yield estimates to determine the approximate number of bushels of corn their farm will produce. They do this to determine if they have enough storage space (grain bins) to store the harvested crop or if they'll have to store the corn elsewhere, like a co-op (which costs $$$). They also use these estimates when negotiating the future market prices of their corn. Estimates are typically done about a month or two before harvest. By this time, the ears have formed and the kernels on the ears are mostly developed (this makes counting the kernels easier).\n\nAccording to the University of Nebraska-Lincoln, Nebraska Extension for Educators, the standard way to estimate corn yield is to calculate the number of bushels of corn per acre. To make the calculations easier, they use an area of 1/1000th of an acre, which, with 30\" row spacing, is a section of one row about 17'5\" long. Within that 17'5\", five ears are chosen at random. For each ear, the number of kernels are counted by multiplying the number of rows of kernels around by the number of kernels over the length of the ear. The totals for each of the five ears are added together and then divided by five to determine the average number of kernels per ear of corn. This number is then multiplied by the total number of ears of corn in the 17'5\" section of row. This gives you the total number of kernels in 1/1000th of an acre. This number is then divided by the Kernel Weight Factor (KWF). The KWF is a function of how wet (or dry) the growing season is and is typically a value between 75 (wet) and 95 (dry). The resulting quotient is the number of bushels/acre the farmer can expect to harvest.\n\nFor example, suppose that the average number of kernels per ear is 512 (16 kernels around by 32 kernels lengthwise), and there are 25 ears in the 17'5\" of row with a KWF of 85. The farmer could then expect:\n\n 25×51285 = 150 bushels$$\\frac{25\\times 512}{85}\\ = \\ 150\\ bushels$$ \n\nSince farmers are quite conservative in their estimates, all calculations are done as integers with no rounding.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30553","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tGuess Who is a two-player board game in which a number of characters are uniquely identified by a set of attributes (e.g. wearing glasses), and each player attempts to guess the other player's hidden character by asking a number of yes/no questions such as \"does the person wear glasses?\"\n\nIn our variation of this game, there are N$N$ characters, each of which is uniquely identified by a set of M$M$ attributes.  The value of each attribute is either YES or NO.  You will be provided with a list of the characters and their attributes, together with a series of Q$Q$ questions and the corresponding responses.  Your task is to determine the hidden character, if possible.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30528","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe Collatz function, C(n), on positive integers is:\n\nn/2 if n is even and 3n+1 if n is odd\n\nThe Collatz sequence, CS(n), of a positive integer, n, is the sequence\n\nCS(n) = n, C(n), C(C(n)), C(C(C(n))), ...\n\nFor example, CS(12) = 12, 6, 3, 10, 5, 16, 8, 4, 2, 1, 4, 2, 1, ...\n\nThe Collatz Conjecture (also known as the 3n+1 problem) is that CS(n) for every positive integer n eventually ends repeating the sequence 4, 2, 1. To date, the status of this conjecture is still unknown. No proof has been given and no counterexample has been found up to very large values.\n\nProf. Fumblemore wants to study the problem using Collatz sequence types. The Collatz sequence type (CST) of an integer n, CST(n) is a sequence of letters E and O (for even and odd) which describe the parity of the values in CS(n) up to but not including the first power of 2. So,\n\nCST(12) = EEOEO\n\nNote that\n\nCS(908) = 908, 454, 227, 682, 341, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 3, 2, ...\n\nso 12 and 908 have the same CST.\n\nProf. Fumblemore needs a program which allows him to enter a sequence of E's and O's and returns the smallest integer n for which the given sequence is CST(n).\n\nNotes:\n\n\n\tE's are even numbers which are not powers of 2,\n\tO's are odd numbers greater than 1.\n\tThe last letter in a sequence must be an O (if C(n) is a power of 2, so is n)\n\tThere can not be two O's in succession (C(odd) = even)\n\tSince, Prof. Fumblemore does not type well, you must check that the input sequence is valid before attempting to find n. That is, the sequence contains only E's and O's, ends in O and no two O's are adjacent.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30496","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou have recently moved to a new home, and you are almost done decorating it. However, you still feel like something is missing: you need some art on the wall! Since you have already spent most of your budget on the furniture, you decide to go to the cheapest art shop there is: the Budget Art Printing Company (BAPC).\n\nAt the BAPC, you can buy infinitely large sheets of paper on which a decoration is printed. Such a decoration consists of a rectangular pattern which is repeated in all directions. This pattern in turn consists of square pixels that are colored white, red, green or blue. After buying a sheet of paper, customers may then cut out a part of the sheet to create their very own artwork.\n\nYou have just found a pattern of pixels you like, but before you have it printed you decide to check whether it is possible to cut a beautiful artwork from it. You consider an artwork beautiful if it satisfies the following properties:\n\n\n\tIt is cut out along pixel boundaries.\n\tIt is a square.\n\tThe pixels in the four corners of the square have four different colors.\n\n\nIs there a beautiful artwork hidden in this infinite sheet printed with the selected pattern?\n\nAs an example, consider the first sample input, visualized in Figure H.1. In the infinitely repeated pattern, it is possible to find several beautiful artworks.\n\n\n\nFigure H.1: Visualization of the first sample input. The pattern is shown repeated five times in the horizontal direction and two times in the vertical direction, but remember that it repeats indefinitely in all directions. The three bold outlined squares indicate some possible beautiful artworks.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30554","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe one-player game of Seven Up is played with a standard deck of 52 cards - each card has one of thirteen possible faces which we denote by A, 2, 3, 4, 5, 6, 7, 8, 9, T, J, Q, and K. There are exactly four cards of each face.\n\nInitially, seven cards are dealt face down in positions numbered 1 through 7. The ace (A) has value 1$1$, the cards with faces 2--7 have corresponding values 2$2$ through 7$7$, and the remaining cards do not have any value.\n\nA single turn consists of the player drawing a card from the top of the deck (initially having 52−7=45$52-7 = 45$ cards). The following steps are repeated until the turn is ended:\n\n\n\tif the card has no value (i.e. the face is not one of A, 2, 3, 4, 5, 6, or 7), the turn has ended,\n\totherwise if the card in the position corresponding to the value of the card held by the player is already face up, the turn has ended,\n\totherwise the player swaps the card they are holding with the card in the corresponding position except the card they placed in this position is now face up, the current turn continues\n\n\nAt the end of a turn, if all seven positions have a face-up card, the game ends.\n\nIf the remaining 45$45$ cards are randomly permuted so each ordering is equally likely, what is the expected number of turns until the game completes?\n\nMore specifically, if for any 1≤k≤45$1 \\leq k \\leq 45$ we let pk$p_k$ denote the probability (over the random ordering of the remaining 45$45$ cards) the game finishes after k$k$ turns are completed. You should compute ∑k=145k⋅pk$\\sum_{k = 1}^{45} k \\cdot p_k$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30529","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA Double Up game consists of a sequence of n$n$ numbers a1,…,an$a_1, \\ldots, a_n$, where each ai$a_i$ is a power of two. In one move one can either remove one of the numbers, or merge two identical adjacent numbers into a single number of twice the value. For example, for sequence 4,2,2,1,8$4,2,2,1,8$, we can merge the 2$2$s and obtain 4,4,1,8$4,4,1,8$, then merge the 4$4$s and obtain 8,1,8$8,1,8$, then remove the 1$1$, and, finally, merge the 8$8$s, obtaining a single final number, 16$16$. We play the game until a single number remains. What is the largest number we can obtain?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30530","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou have sent a robot out into the forest, and it has gotten lost.  It has a sensor that will detect all the trees around itself regardless of any occlusions, but unfortunately in this forest, all trees look alike.  You do have a map of all trees in the forest, represented as (x,y)$(x,y)$ points.  Conveniently, since this used to be a tree farm, all trees are at integer coordinates, though not all coordinates are occupied.  The robot's sensor tells you the x$x$ and y$y$ distance to each tree within range, relative to the front of the robot.  However, the robot is heading in an unknown direction relative to the map, so each sensor reading is given as a tuple of (distance to the right of the robot, distance forward of the robot) and either value can be negative since the robot can sense in all directions.  Helpfully, the robot will always place itself at integer coordinates and aligned to the positive or negative x$x$ or y$y$ axis, and will never be at the same location as a tree.  Can you find out where the robot is?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30555","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe game Thwack is played on a 1-dimensional grid of cells: the game board. Each grid cell contains either a black stone, a white stone, or is empty.\n\nTwo players alternate taking turns. A turn consists of choosing two adjacent stones of opposite colours and then choosing one of these stones to capture the other. That is, one stone eliminates the other stone by moving to its position. A player loses when it is their turn to play but there are no available moves, i.e. there is no pair of adjacent stones of different colours.\n\nThe interesting thing about Thwack is that there is no default \"initial setup\" of the game board. Any game can be made by simply placing stones randomly on the grid.\n\nGiven the initial configuration of a game, your job is to list all the opening moves that would be winning moves for the first player assuming both players play optimally.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30456","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t쿠는 수를 가지고 놀다가 재미있는 계산법이 떠올랐다.\n\n\n\t양의 정수 A$A$에 대해서, A$A$를 A$A$의 모든 자릿수에 적힌 수들의 곱으로 바꾼다.\n\n\n쿠는 위 연산을 어떤 양의 정수 P$P$가 한 자리 수가 될 때까지 반복했고, 그 수를 P$P$의 바닥수라고 정의했다. 예를 들어, 1234$1234$의 바닥수는 8$8$이다. 바닥수를 구하는 과정은 다음과 같다.\n\n 1234→24(=1×2×3×4)→8(=2×4)\\[1234\\rightarrow 24(=1\\times 2\\times 3\\times 4)\\rightarrow 8(=2\\times 4)\\] \n\n\n\n쿠는 바닥수를 계산하는 데 몰두한 나머지 P$P$를 잊고 말았다. 그에게 주어진 단서는 P$P$의 자릿수와 P$P$의 바닥수이다. 쿠를 대신해 원래 수 P$P$를 구해 주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30509","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t세종이는 N$N$일 동안의 방학을 알차게 보내기 위해 다른 학생들과 하루에 한 번씩 코딩 대결을 하려고 한다. 코딩을 잘할수록 코딩 대결을 쉽게 이길 수 있겠지만, 코딩 실력에 못지않게 멘탈 관리 역시 코딩 대결의 승패를 가르는 중요한 요인이다. 구체적으로, 코딩 대결에서 어떤 학생이 보이는 퍼포먼스는 그 학생의 코딩 실력과 멘탈 수치의 합으로 정의된다. 이때 둘 중 퍼포먼스가 더 높은 쪽이 코딩 대결에서 승리한다.\n\n세종이는 자신보다 코딩 실력이 높은 학생을 이긴 경우 둘의 코딩 실력의 차이만큼 멘탈 수치를 얻는다. 반대로 대결에서 진 경우 멘탈 수치를 일정 수치만큼 잃게 되며, 세종이보다 코딩 실력이 낮은 학생에게 졌다면 둘의 코딩 실력의 차이만큼 추가로 멘탈 수치를 잃게 된다. 퍼포먼스가 같은 학생과 대결을 하면 무승부가 되며, 세종이의 멘탈 수치는 변하지 않는다.\n\n멘탈 수치가 0$0$ 이하가 된다면 세종이는 코딩을 그만두게 될 것이다. 코딩을 계속하고 싶은 세종이는 멘탈 관리를 위해서는 어느 정도의 휴식 역시 필요하다고 생각했다. 휴식을 취하는 날에 세종이는 코딩 대결을 하지 않고 하루 종일 자면서 멘탈을 회복할 것이다. 그러나 이미 대결할 N$N$명의 학생들을 구한 상태였기 때문에, 각 학생과의 대결 날짜와 휴식할 날짜를 잘 조절해 방학 중에 최대한 많은 학생과 코딩 대결을 하고자 한다. 모든 학생과 최대 1$1$번만 코딩 대결을 할 때, 세종이가 코딩을 그만두지 않으면서 방학 동안 할 수 있는 코딩 대결 횟수의 최댓값을 구하는 프로그램을 작성하시오.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30510","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t미적분학 I 수업을 준비하기 위해 열심히 공부하던 세종이는 교재에서 새로운 함수를 하나 발견하였다. 0$0$ 이상 1$1$ 이하의 실수 x$x$에 대해 토마에 함수 f(x)$f(x)$는 x$x$의 값에 따라 아래와 같은 대응 관계를 가진다.\n\n\n\t x$x$가 무리수면 f(x)=0$f(x) =0$.\n\t x=0$x=0$ 이면 f(x)=1$f(x) =1$.\n\t이외의 경우 x$x$를 기약분수 pq (p,q${p\\over q}\\ (p,q$는 양의 정수, q≠0)$q\\neq 0)$ 꼴로 나타낼 수 있을 때 f(x)=1q$f(x) ={1\\over q}$.\n\n\n임의의 유리수 PQ$P\\over Q$가 주어졌을 때, f(x)≥PQ$f(x)\\ge{P\\over Q}$를 만족시키는 0$0$ 이상 1$1$ 이하의 실수 x$x$의 개수를 구하는 프로그램을 작성하시오.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30511","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t방학을 맞아 세종이와 가족들은 캠핑을 하러 갔다. 열심히 놀다 보니 어느새 저녁이 되었고 캠핑의 꽃인 캠프파이어를 하려고 한다.\n\n세종이는 모닥불에 구워 먹기 위해 꼬치에 여러 재료를 꽂고 있다. 재료를 꽂고 있던 세종이를 본 세종이의 어머니는 여러 가지 식재료를 골고루 먹기 위해 고기, 파, 버섯을 각각 하나씩 꼬치에 꽂으라고 하셨다. 하지만 편식쟁이 세종이는 버섯을 싫어해서 꼬치에 파와 고기만 꽂고 싶었다. 세종이는 엄마 몰래 버섯 없는 꼬치를 만들기 위해 꼬치에 고기와 파를 하나씩 꽂고 나서 마지막으로 버섯을 꽂는 척만 하고 그대로 모닥불에 꼬치를 굽기로 했다.\n\n꼬치의 재료는 N×M$N\\times M$ 크기의 격자 형태로 놓여 있다. 격자의 각 칸에 고기, 파, 버섯 중 하나가 들어있는 것으로 생각할 수 있다. 꼬치를 만들 때는 가로, 세로 또는 대각선으로 연속된 세 재료를 선택해 그 순서대로 꽂아야 한다. 이때 꽂는 척을 하기 위해 버섯은 꼬치의 맨 끝에 위치해야 한다. 또 고기나 파 하나가 여러 개의 꼬치에 꽂히면 안 되지만, 버섯 하나를 여러 개의 꼬치를 만드는 데에 사용하는 것은 가능하다.\n\n세종이가 만들 수 있는 버섯 없는 꼬치구이 개수의 최댓값을 구하는 프로그램을 작성하시오.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30531","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAlice builds machines that generates strings. Alice's machines each consist of N$N$ states, numbered from 1$1$ to N$N$, and a set of directed edges between these states, each labelled with a character from a fixed set. A subset of the states are \"final\" states. The machine generates strings by starting at state 1$1$, following a path that terminates at a final state, and concatenating the characters of the edge labels together in the order that the edges are traversed. The path is allowed to visit the same state more than once and can traverse the same edge more than once. The path can pass through final states before eventually terminating at a final state. Self loops are allowed and having two or more edges to and/or from the same state labelled with the same letter is also allowed.\n\nBob has a favorite string S$S$. Carol has a favorite string T$T$. Alice wonders if she can build a machine that can generate exactly the strings that have an equal number of occurrences of S$S$ and T$T$ as substrings. That is, the machine should generate every string that has an equal number of occurrences of S$S$ and T$T$ as substrings and it should not generate any strings that do not satisfy this property. Occurrences may overlap. For example, the string banana has two occurrences of the substring ana. Help Alice determine if it is possible to complete the task for Bob and Carol's favorite strings.\n\n\n\nFigure H.1: Example machine for the first case in the sample input.\n\nFigure H.1 gives an example machine for the first case in the sample input. The square states represent the final states. \n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30497","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tLong, long ago on a planet far, far away, a highly contagious virus caused an enduring pandemic.\n\nEven so, the people wanted to travel between countries for their summer holidays. In the good old before-days, travelling from any country to any other country took 1 full day. However, during the pandemic, certain countries preferred not to receive travellers from areas that had higher infection rates, so they made them quarantine for a certain number of days before allowing them to continue their trip or start their holiday.\n\nTo keep everything fair, an independent Bureau for Accurate Pandemic Classification was founded. They assigned a r$r$-value to each country based on the infection rate in that country. A higher r$r$-value indicates higher infection rate.\n\nEach country asked tourists to quarantine if the country they just came from had a r$r$-value significantly higher than their own. In particular, when you wanted to travel from country i$i$ to country j$j$, you would have to quarantine for tj$t_j$ days if ri>rj+m$r_i > r_j + m$.\n\nArchaeologists have found evidence of q$q$ tourists travelling between n$n$ countries. For each tourist, the start and destination are known. The question that remains to be answered is: how long was each tourist's minimal travel time?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30556","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA multi-billionaire has a vision to build a completely new city from scratch.  After much research and consultations, locations have been selected for all the houses, shopping malls, restaurants, etc.  Roads now have to be added to ensure that every location is reachable by any other location, but only the minimum number of roads should be built. For environmental reasons, it is also desirable to minimize the longest travel between two locations.  Each road must connect two locations, but roads may cross each other by adding overpasses (so traffic cannot switch to a different road between locations).\n\nWhat is the minimum length in the longest travel in the road network designed?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30512","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t세종이는 다음과 같은 문제를 풀고 있다.\n\n\n길이가 N$N$인 수열 A1,A2,⋯,AN$A_1,A_2,\\cdots ,A_N$이 주어진다. 이때 다음과 같은 업데이트가 총 Q$Q$개 주어진다.\n\n\n\tL R x: 모든 L≤i≤R$L\\leq i\\leq R$에 대해 Ai=min(Ai,x)$A_i=\\min(A_i,x)$ 를 적용한다. (1≤L≤R≤N; 0≤x≤1000000)$(1\\leq L\\leq R\\leq N;\\ 0\\leq x\\leq 1\\,000\\,000)$ \n\n\n Q$Q$개의 업데이트를 차례대로 수행한 후의 수열을 구하시오.\n\n\n세종이는 어떤 업데이트 이후로 더 이상 값이 변경되지 않는 원소가 생김을 발견했다. 감성적인 세종이는 이런 원소를 잊힌 원소라고 이름 짓고 이들의 개수를 기억하기로 했다. 구체적으로, 어떤 원소가 i$i$번째 업데이트를 처리한 후 남은 업데이트에 의해 값이 변경되지 않는다면 그 원소는 i$i$-잊힌 원소가 된다. 임의의 두 양의 정수 i<j$i<j$에 대해, 모든 i$i$-잊힌 원소는 j$j$-잊힌 원소이기도 함에 유의하라.\n\n세종이가 구해야 하는 수열과 각 업데이트 후의 잊힌 원소의 개수를 구하는 프로그램을 작성하시오.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30457","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t N$N$명의 학생들이 단체줄넘기를 하려고 한다. 단체줄넘기를 하기 위해서는 한 줄로 나란히 서야 하고, 학생들은 각자 줄을 잡은 양쪽 방향 중 한 곳을 바라보고 서야 한다.\n\n학생들은 각자 바라보는 방향에 자신보다 키가 크거나 같은 사람이 있다면 점프할 타이밍을 놓쳐 줄에 걸릴 수 있다. 학생들은 최대한 많이 단체줄넘기를 뛰고 싶어 하기 때문에, 줄에 걸릴 수 있는 상황을 만들지 않으려고 한다. 즉 자신이 바라보는 방향에 자신보다 키가 작은 학생들만 앞에 오도록 줄을 서려고 한다.\n\n학생들의 키를 알고 있을 때, 이 중 최대 몇 명의 학생이 단체줄넘기에 참여할 수 있을까? 줄을 돌리는 사람은 주어진 학생에 포함되지 않는다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30498","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYour local jungle is being taken over by monkeys! Trees are quickly being colonized by them! As a Brave Ape Pictures Collector, this is your chance of taking sooo many pictures of primates that for sure will amaze your colleagues.\n\nIn particular, each day, one new monkey discovers your favourite tree containing n$n$ branches. From your long experience observing primates, you know two things. First, each branch of the tree only has room for a single monkey. Second, monkeys are very social animals and always stick together in groups, that is, the branches they occupy form a single connected component.\n\nThis particular invasive species of monkeys happens to be new to you and you have not yet learned to distinguish them from each other. Still you wonder: how many different pictures of the monkey colony could you take on each day, until the tree is full of monkeys?\n\nAs an example, consider the first sample case, visualized in Figure J.1. On the third day, there are four different pictures you can take of the monkey colony.\n\n\n\nFigure J.1: Visualization of the first sample case on the third day. Branches are connected if they overlap (note the small gap between branches 1$1$ and 2$2$, and between branches 3$3$ and 4$4$).\n\nMonkey image from freevector.com\n\nGiven the exact structure of your favourite tree, determine for each day from 1$1$ to n$n$ the number of different sets of branches the monkeys could occupy on that day, modulo 109+7$10^9+7$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30499","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe king of Belle Aire People's Country has come up with a new plan: he has heard about the popular phenomenon called \"King of the Hill\", and he would like to become one as well. To do so, he has ordered you to raise a flag on the highest hill in his square kingdom, which has dimensions n×n$n \\times n$. You are given a very expensive (it is gold- and jewel-embedded) satellite-based height-measuring system. This equipment is highly accurate: the heights on every location in the kingdom are represented with distinct integers. However, to cut costs, you are only allowed to take 10n+100$10n+100$ measurements before reporting back to the king.\n\nFurthermore, you know for certain that there is only a single point that is the absolute highest: this is the only point for which its height is larger than the (up to) four orthogonally adjacent points that lie inside the kingdom. In other words, there are no local maxima besides the global maximum.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30532","content":"문제\n\nAn ISBN (International Standard Book Number) is a unique identifier assigned to a distinct edition/version of a published book (for example, hardcover and paperback versions of the same edition get different ISBNs). ISBNs assigned before 2007 were \n10\n$10$ digits long (the ISBN-10 standard), and ISBNs assigned on or after January 1, 2007, are \n13\n$13$ digits long (the ISBN-13 standard). Some books issued before 2007 that are still in print have both an original ISBN-10 and a matching ISBN-13, and some newer books are also given both an ISBN-10 and an ISBN-13, the former for backward-compatibility purposes. That \"double identity\" situation is the basis for this problem, which requires you to convert valid ISBN-10s to their corresponding ISBN-13s.\n\nThe last digit of any ISBN is a checksum digit that can be used for simple error detection. ISBN-10 and ISBN-13 use different rules for computing/verifying this last digit:\n\nISBN-10: If the \n10\n$10$ digits from left to right are \nd1,d2,…,d10\n$d_1, d_2, \\ldots, d_{10}$ (so \nd10\n$d_{10}$ is the checksum digit), and if\nS=10⋅d1+9⋅d2+8⋅d3+…+2⋅d9+1⋅d10\n\\[ S = 10 \\cdot d_1 + 9 \\cdot d_2 + 8 \\cdot d_3 + \\ldots + 2 \\cdot d_9 + 1 \\cdot d_{10} \\]\n(coefficients decrease from \n10\n$10$ to \n1\n$1$), then \nS\n$S$ must be a multiple \nof 11\n$\\textrm{of }11$, i.e., \nS≡0\n$S \\equiv 0$ \n(mod 11)\n$(\\textrm{mod }11)$.\nISBN-13: If the \n13\n$13$ digits from left to right are \nd1,d2,…,d13\n$d_1, d_2, \\ldots, d_{13}$ (so \nd13\n$d_{13}$ is the checksum digit), and if\nS=1⋅d1+3⋅d2+1⋅d3+3⋅d4+…+3⋅d12+1⋅d13\n\\[ S = 1 \\cdot d_1 + 3 \\cdot d_2 + 1 \\cdot d_3 + 3 \\cdot d_4 + \\ldots + 3 \\cdot d_{12} + 1 \\cdot d_{13} \\]\n(odd-indexed digits are multiplied by \n1\n$1$, even-indexed digits are multiplied \nby 3\n$\\textrm{by }3$), then \nS\n$S$ must be a multiple \nof 10\n$\\textrm{of }10$, i.e., \nS≡0\n$S \\equiv 0$ \n(mod 10)\n$(\\textrm{mod }10)$.\n\nIt is not hard to see that each rule uniquely determines the checksum digit (given the other digits).\n\nX Factor: Note the following small but important detail for ISBN-10 that does not apply to ISBN-13: because the modulus \nis 11\n$\\textrm{is }11$, the value of the checksum digit lies in \n{0,1,2,…,9,10}\n$\\{0, 1, 2, \\ldots, 9, 10\\}$, and in the special case that the value of the checksum digit \nis 10\n$\\textrm{is }10$, it is written as X so that only one character is required. So, for example, \n039428013X\n$039428013\\textrm{X}$ is a valid ISBN-10.\n\nHyphens: Technically an ISBN-10 consists of four parts, one of which is the checksum digit. (The exact rules defining the first three parts are complicated, so we will not deal with them here.) Two adjacent parts can optionally be separated by a hyphen, which means that an ISBN-10 may contain up to three hyphens, but it cannot begin or end with a hyphen, and it cannot contain consecutive hyphens. If there are three hyphens, one must separate the checksum digit from the digit that precedes it (if there are fewer than three hyphens, there may or may not be a hyphen between the checksum digit and the digit that precedes it). So, for the purposes of this problem, the following are valid ISBN-10s:\n\n \n039428013-X\n$039428013\\textrm{-X}$ \n\n \n0-39-428013X\n$0\\textrm{-}39\\textrm{-}428013\\textrm{X}$ \n\n \n3-540-42580-2\n$3\\textrm{-}540\\textrm{-}42580\\textrm{-}2$ \n\n \n3540425802\n$3540425802$ \n\nAnd the following are invalid ISBN-10s (the first two because of a hyphen-placement error, the last because it fails the checksum test above):\n\n \n3-540-4258-02\n$3\\textrm{-}540\\textrm{-}4258\\textrm{-}02$ \n\n \n3-540-425802-\n$3\\textrm{-}540\\textrm{-}425802\\textrm{-}$ \n\n \n0-14-028333-3\n$0\\textrm{-}14\\textrm{-}028333\\textrm{-}3$ \n\nHow do you convert an ISBN-10 to an ISBN-13? Simply (i) prepend the three digits \n978\n$978$, (ii) remove the old checksum digit, and (iii) append a new checksum digit as determined by the ISBN-13 rule.1 To keep things simple, maintain the positions of any existing hyphens, and follow the prepended 978 with a hyphen.\n\n1In general, an ISBN-13 can begin with three digits other than 978, but only 978 can be prepended to an ISBN-10 to form the matching ISBN-13."},{"problemId":"30513","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t M$M$차원 하이퍼 삼각형은 (M+1)$(M+1)$개의 꼭짓점을 갖는 M$M$차원 정다포체다. M=2$M=2$일 때 정삼각형, M=3$M=3$일 때 정사면체가 이에 해당한다.\n\n한 변의 길이가 N$N$인 M$M$차원 하이퍼 삼각형 모양 블록이 주어진다. 이 블록을 모든 모서리가 N$N$등분되도록 블록의 각 (M−1)$(M-1)$차원 면에 평행하게 나누자. 그 후 나누어진 블록을 몇 개 골라 원래 위치에서 움직이거나 돌리지 않고 합쳐 M$M$차원 하이퍼 삼각형 모양 블록을 만들 수 있다. 이때 원래의 블록은 속이 꽉 차 있으며, 새로 만든 블록 역시 속에 빈 공간이 있으면 안 된다. 이때 M$M$차원 하이퍼 삼각형 블록을 만드는 방법의 수를 구하는 프로그램을 작성하시오.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30557","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tDontBeFake is an app where people get a notification at a random point in time, and they have to take a picture of what they are doing right now.\n\nYou have N$N$ friends on DontBeFake. Each friend has a set of intervals of seconds [L,R]$[L, R]$ when they are available. If they get a notification at second s$s$ and they are available, they will take a picture and you will get to see it. Because the DontBeFake app is slow and so is taking a picture, even if they are available a second later, they will not have time to take the picture. All friends live in the same time zone and will get one notification at exactly the same time in the day. All times are specified as seconds from midnight.\n\nYou want to know what is the maximum number of pictures you can view in the day, over all possible seconds that the notification can arrive. In addition, you also want to know how many different seconds the notification could arrive for the maximum number of pictures to be taken.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30558","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIt is finally time to submit your essays on economics for assessment!\n\nEach essay is characterised by its word count w$w$ and its quality q$q$. The required word count is W$W$, so the closer w$w$ to W$W$ is in your essay, the better mark you may expect. And, surely, the higher the quality, the better. However, one essay can have a better quality and a bigger deviation from W$W$ than another, so it is not clear which one is better.\n\nAs an economics student, you may know that this kind of situation is captured by Pareto dominance. Formally, essay A$A$ is said to dominate essay B$B$ in the Pareto sense if |wA−W|≤|wB−W|$|w_A - W| \\le |w_B - W|$, qA≥qB$q_A \\ge q_B$, and at least one of these inequalities is strict.\n\nThe professor is known to use this relation to mark the essays. First, she finds all the best essays: those that are not dominated by any other essay. These essays receive the same mark, which is the highest among this year's students (but still can fall below their expectations!). Then she removes the marked essays and repeats the procedure, but the mark will be lower this time, and so on. More precisely, she uses the following algorithm:\n\n\n\tAll the essays are numbered from 1 to N$N$.\n\tEach essay can be either in work, postponed, or marked. Initially, all essays are in work.\n\tA variable r$r$ captures the rank of an essay, the lower, the better. Initially, r←1$r \\gets 1$.\n\tWhile there are any essays that are in work:\n\t\n\t\tIterate over all essay numbers from 1 to N$N$. If the i$i$-th essay is in work:\n\t\t\n\t\t\tIterate over all essay numbers from i+1$i+1$ to N$N$. If the j$j$-th essay is in work, compare essays i$i$ and j$j$ for dominance:\n\t\t\t\n\t\t\t\tIf i$i$ dominates j$j$, turn j$j$ into postponed.\n\t\t\t\tIf j$j$ dominates i$i$, turn i$i$ into postponed and break the loop.\n\t\t\t\n\t\t\t\n\t\t\tIf the i$i$-th essay is still in work, it receives rank r$r$ and turns into marked.\n\t\t\n\t\t\n\t\tAll postponed essays become in work again.\n\t\tThe rank is increased: r←r+1$r \\gets r + 1$.\n\t\n\t\n\n\nYou are afraid that you, and everyone else, will get low marks, but someone told you that if it took the professor too long to perform the entire assessment, the department would take it over, and the final marks would be based on a simple multiple-choice quiz. By rigorous computations you found out that the number of essay comparisons should be at least N3/20$N^3 / 20$ for this to happen. Find the way to disrupt the assessment procedure.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30559","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe Bulgarian city of Nodnol runs a boat service to ferry its residents between the trendy areas in which they live and the large metallic structures in which they work on the next recession.\n\nTFN (Transport For Nodnol) has issued m$m$ travel cards (known affectionally as \"Retsyo\"), which are numbered from 1$1$ to m$m$. Each pier has a card terminal at which passengers are required to tap \"in\" when starting the trip and to tap \"out\" when finishing it.\n\nAs there is only one card terminal on each pier, passengers use the same device to tap in and to tap out.\n\nTrip cost depends on the distance travelled and is determined as follows:\n\n\n\tif the trip started at the pier i$i$ and finished at the pier j$j$ (i≠j$i \\ne j$), then its cost is |i−j|$|i-j|$ pounds;\n\tif the trip started somewhere and was not finished with a tap out, then it costs \\pounds100;\n\tif the trip started and finished in the same place, then it also costs \\pounds100, as it is interpreted as an attempt to game the system.\n\n\nYou are given a sequence of tapping events --- for each you have the pier pi$p_i$ and card number ci$c_i$ recorded. You are to determine how much the transport authority should charge each of the cards\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30533","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tNikoli's Jewelry Store in Puzzletown sells a line of necklaces consisting of black and white pearls. The pearls in the necklace are firmly glued to a cord of length k$k$, where each unit of cord length either holds a pearl or is empty. Each necklace is displayed on a rectangular velvet-lined surface divided into a grid, where each cell of the grid either holds a pearl, or contains a unit of empty cord, or is unoccupied by either pearl or cord. All cord sections are either horizontal or vertical. A properly-displayed necklace corresponds to a closed, non-self-intersecting path connecting some of the cells of the display.\n\nBecause this is, after all, Puzzletown, Nikoli uses some tricky rules governing how the necklace is to be displayed, namely, the rules of a puzzle called \"Masyu.\" When the the necklace is set down along the path (the spacing units on the string match the spacing of the cells on the display surface), the pearls satisfy the constraints of the Masyu puzzle, i.e.,\n\n\n\tA white pearl may not be set down on a cell containing a path corner; in addition, at least one of the two adjacent cells that extend the path through the pearl must contain a corner.\n\tA black pearl must be placed in a cell containing a path corner; in addition, neither of the two cells extending the path through the black pearl may contain a corner.\n\n\nAn example of a necklace correctly displayed is shown in Figure J.1 (this also corresponds to sample input 1).\n\n\n\nFigure J.1: A necklace of length 16 on its display platform\n\nNikoli's clientele are somewhat picky, so he places three further restrictions on his necklaces. At least half of the necklace's length consists of pearls rather than empty sections of cord. And because black pearls are more desirable (or at least, more expensive) than white ones, the wealthy residents of Puzzletown insist that there be at least twice as many black pearls as white ones. Finally, no two pearls are ever separated by a gap of empty cord longer than five units.\n\nNikoli sometimes finds that once he has created a necklace according to these restrictions, he is not able to display it according to the rules above. Please help him!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30514","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t세종이와 아름이는 1$1$부터 N$N$까지의 번호가 붙은 N$N$개의 꽃집이 있는 동네에서 데이트하고 있다. 세종이는 아름이에게 게임을 제안했다. 게임의 규칙은 다음과 같다.\n\n\n\t세종이부터 번갈아 가며 N$N$개의 꽃집 중 하나를 골라 그곳의 꽃을 원하는 만큼 산다. 단, 반드시 한 송이 이상의 꽃을 사야 하며, 고른 꽃집에 사고자 하는 꽃과 같은 종류의 꽃이 여러 송이 있다면 그 종류의 꽃들을 모두 사야 한다.\n\n\n세종이는 마지막 남은 꽃을 자신이 사 아름이에게 주어 아름이를 두근 어질하게 만들려고 하고, 아름이 역시 같은 이유로 마지막 꽃을 자신이 사려고 한다.\n\n그런데 꽃집을 가 보니, 모든 꽃집에 꽃이 딱 한 송이씩만 남아 있었다. 데이트가 너무 빨리 끝날 것으로 생각한 세종이와 아름이는 꽃집 주인인 영재의 도움을 구해 총 N$N$일에 걸쳐 매일 한 번씩 게임을 진행하기로 했다. 첫날은 세종이부터 게임을 시작하고, 그다음 날부터는 직전 날에 마지막 꽃을 가져간 사람부터 게임을 시작한다. 매일 게임이 끝나면 세종이와 아름이는 꽃을 꽃집에 돌려놓는다. 영재는 매일 게임이 끝난 뒤 꽃이 있는 꽃집 중 하나를 골라 그곳에 있는 모든 꽃을 꽃이 있는 다른 꽃집으로 옮긴다. 이를 반복해, N$N$번째 게임에서 마지막 꽃을 산 사람이 고백하는 것으로 데이트를 마무리한다. 두 사람은 영재가 어떻게 꽃을 옮길지 모두 알고 있으며, 데이트 마지막 날에 마지막 꽃을 가져가기 위해 최선을 다할 것이다.\n\n세종이와 아름이 중 누가 데이트 마지막 날에 마지막 꽃을 사 상대를 두근 어질하게 만들지 알아내자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30458","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t팰린드롬이란 앞으로 읽어도, 뒤로 읽어도 같은 문자열을 의미한다. 예를 들어, radar는 팰린드롬이지만, konkuk은 팰린드롬이 아니다.\n\n알파벳 소문자로만 이루어진 길이 N$N$의 문자열 S$S$가 주어진다. 문자열에 아래 연산을 0$0$회 이상 수행해서 팰린드롬으로 만들 수 있을까?\n\n\n\t문자열의 왼쪽 ⌊N2⌋$\\left\\lfloor \\frac{N}{2} \\right\\rfloor$개 문자 중 하나와 오른쪽 ⌊N2⌋$\\left\\lfloor \\frac{N}{2} \\right\\rfloor$개 문자 중 하나를 골라 서로 위치를 바꾼다.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30459","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t쿠는 KUPC를 홍보하기 위해 삼각형 모양의 거대한 현수막을 제작하고자 한다.\n\n현수막을 걸 수 있는 지면에는 N$N$개의 말뚝이 한 줄로 박혀 있다. 쿠는 말뚝과 미리 준비해 둔 M$M$개의 깃대 중 하나를 이용해 현수막을 걸 수 있다. 현수막을 거는 방법은 아래와 같다.\n\n\n\t박혀있는 말뚝 중 두 개를 골라, 두 말뚝 사이의 공간이 현수막의 밑변이 되도록 현수막을 바닥에 고정한다.\n\t적절한 깃대를 골라, 두 말뚝 정중앙에 깃대의 길이가 현수막의 높이가 되도록 세워 삼각형 모양으로 현수막을 건다.\n\n\n쿠에게는 현수막을 살 돈이 충분하지 않기 때문에, 구매할 수 있는 현수막의 최대 넓이 R$R$을 미리 구해 두었다. 주어진 말뚝과 깃대를 활용해서 현수막을 걸고자 할 때, 쿠가 구매해서 걸 수 있는 현수막 넓이의 최댓값을 구해주자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30560","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are putting up an event space in Nottingham's Sherwood Forest by erecting a fence in a circular-shaped clearing you found that is exactly one kilometre in radius. You will put some fence posts in the trees around the edge of the clearing and then connect them together with fencing later.\n\nYou would like to put the fence around as much of the event space as possible. However, the ground is only suitable in a few places around the border, and you only have so many fence posts to put in the ground, so you'll have to choose carefully if you want to maximise area.\n\n\n\nFigure C.1: An illustration of using 4 posts to capture the maximum area in sample input 1.\n\nKnowing the safe places to put fence posts, and the number of posts you have, what is the maximum area of clearing you can enclose?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30534","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA Split Decisions puzzle is a type of crossword in which each across and down answer is a pair of words instead of a single word (as in standard crossword puzzles).  Each pair of words are identical except in exactly two adjacent positions for which letters have been provided in the puzzle -- these sets of letters serve as the clue for the pair of words. In the left half of Figure K.1, the letter pairs “IN” and “CR” are given, and the words “SINEW” and “SCREW” can be used to solve that clue. The right half of the figure shows a typical Split Decisions puzzle.\n\n\n\nFigure K.1: A small Split Decisions puzzle, with an example solved clue.\n\nWhile we could ask you to solve a given Split Decisions puzzle, we've decided on a slightly different task for you.  Given a list of words, we want you to find pairs of words which could be used in a Split Decisions puzzle.  Specifically, each pair must differ in exactly two consecutive letters AND be the only possible pair of words that work for those sets of letters (i.e., no other pair of words in the list of words solve that clue).\n\nFor example, if your list of words contained the words CELL, GULL, GUSH, HALL, and HASH, you could make two clues: [CE/GU]_ _ (for the answer pair CELL/GULL) and [CE/HA]_ _ (for the answer pair CELL/HALL).  Note that the clue [GU/HA]_ _ has two possible solutions (GULL/HALL and GUSH/HASH) so it should not be considered.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30561","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tGry finally becomes the Executive Courier Officer in \"Universe Express\". He has n$n$ subordinate couriers with some delivery strength fi$f_i$. The delivery strength of a team of three people is the median of their strength, i.e., the middle element after the sorting. Please help Gry to split the couriers into k$k$ teams of three people in order to maximize the total delivery strength of \"Universe Express\". The total strength is the sum of the strength of these k$k$ teams.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30535","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBrice Bilson loves to take jogs in a nearby forest known as Orthogonal Woods. The forest gets that name as the paths -- all two-way -- are laid out along an orthogonal grid, with all turns being 90 degrees. Brice is a bit persnickety when it comes to his jogs, and always follows a set of rules when he reaches an intersection of two or more paths. These rules are\n\n\n\tIf there are three remaining branches, Brice takes the middle one.  \n\tIf there are just two remaining branches, Brice takes the one on his left.\n\tIf there are no branches to take, Brice ends his jog and walks to the nearest exit.\n\n\nBrice is persnickety in another way too.  He has assigned each path an \"interest value\", which is a positive integer indicating how interesting that path is to jog.   The higher the value, the more interesting the path is.  If the value of a path is n$n$, then Brice will jog on that path no more than n$n$ times in his jog.  After the nth$n^{\\mbox{th}}$ pass that path will cease to exist as far as Brice is concerned (so, for example, any three-branch intersection using that path now becomes a two-branch intersection and any two-branch intersection becomes a one-branch intersection).  An example is shown in Figure L.1 below:\n\n\n\nFigure L.1: Sample park corresponding to Sample Input 1\n\nSuppose Brice enters the park at intersection D heading north in the figure on the left, where the numbers next to each path indicate his interest levels.  His travels takes him on the route DFGCBADFGCBA at which point we reach the figure on the right, showing the updated interest levels of each path and the \"removal\" of the path from A to B since it's now been traversed 2$2$ times.  From intersection A Brice now traverses the route ADFGCBEDA at which point he hits a dead end and ends his jog.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30515","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이 문제는 ”방형구 탐색 (Easy)”문제와 N$N$, Q$Q$의 제한을 제외하고 같은 문제다.\n\n세종이는 수행평가로 방형구 탐색을 하고 있다. 방형구는 1×N$1\\times N$ 크기의 격자 모양이며, 각 칸에는 순서대로 1$1$번부터 N$N$번까지 번호가 붙어 있다. 방형구의 각 칸에는 꽃이 한 송이씩 피어 있다. 세종이가 사는 세상에는 10$10$억 가지 종류의 꽃이 있으며, 꽃의 종류에 1$1$부터 10$10$억까지의 번호를 붙여 구분한다. 세종이는 선생님이 정해준 구간 안에 핀 특정 꽃의 개수를 조사해야 한다. 그러나 선생님은 변덕이 많기 때문에 조사해야 할 범위를 자주 바꾸었다. 이에 화가 난 세종이는 꽃을 밟아 없애기로 했다.\n\n세종이의 수행평가를 위해 다음과 같은 쿼리를 수행하는 프로그램을 작성하시오.\n\n\n\t1 l r k: 방형구의 l$l$번 칸부터 r$r$번 칸까지의 꽃 중 꽃의 종류가 k$k$인 꽃의 개수를 출력한다.\n\t2 l r: 세종이가 방형구의 l$l$번 칸부터 r$r$번 칸까지의 꽃을 밟아 없앤다.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30536","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t강아지가 소변을 이용해 영역표시를 하는 행위를 마킹이라고 한다.\n\n귀여운 강아지 시루는 이차원 평면 상에서 산책을 한다. 시루는 산책을 할 때 만나는 기둥에 마킹을 하는데, 다른 강아지들을 무서워하기 때문에 다른 강아지의 소변 냄새가 나는 경우 마킹을 하지 않는다.\n\n구체적으로, 산책로에는 N$N$개의 기둥이 있고 다른 강아지들이 이미 M$M$번의 마킹을 했다. i (1≤i≤M)$i\\ (1 \\leq i \\leq M)$번째 마킹은 Pi$P_i$번째 기둥에 되어 있으며 기둥으로부터 Ri$R_i$만큼 떨어진 곳까지 소변 냄새가 퍼진다.\n\n시루는 다른 강아지의 소변 냄새가 나지 않는 기둥에 마킹을 하고, 기둥으로부터 R0$R_0$만큼 떨어진 곳까지 소변 냄새가 퍼진다. 만약 다른 강아지의 소변 냄새가 나던 기둥이 시루의 소변 냄새로 덮이게 된다면 시루는 그 기둥에 마킹을 할 수 있다.\n\n시루가 마킹을 할 수 있는 기둥의 최대 개수를 구해보자.\n\n두 기둥 (Xi,Yi)$(X_i, Y_i)$와 (Xj,Yj)$(X_j, Y_j)$의 거리는 (Xi−Xj)2+(Yi−Yj)2$\\sqrt{(X_i-X_j)^2 + (Y_i-Y_j)^2}$으로 정의한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30516","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tSmall 버전에서는 가능한 방법 중 아무거나 1$1$가지만 출력한다.\n\n'커플 파괴자 민욱이'는 솔로이기 때문에 커플끼리 함께 있는 모습을 보기 싫어한다. 그러한 민욱이가 사람들 N$N$명이 일렬로 서 있는 대기 줄 하나를 발견했다. 민욱이는 이 대기 줄을 M$M$개의 묶음으로 나눈 뒤, 묶음의 순서를 바꾸어 어떠한 커플끼리도 이웃하지 않게 할 것이다. 단, 같은 묶음에 있는 사람들끼리의 순서를 바꾸거나 거꾸로 뒤집을 수는 없다. 각 묶음의 사람 수는 일정하지 않고 서로 달라도 된다.\n\n M$M$이 크다면 묶음의 순서를 바꾸는 민욱이의 머리가 아플 것이기 때문에 M$M$이 최소가 되게 하려고 한다. 그리고 민욱이는 M$M$이 최소일 때의 가능한 여러 가지 방법 중 아무거나 1$1$가지만 구하려고 한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30562","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tElisabeth the Efficient, a famous magician, was called by Emmanuel the Empowered, the mighty lord of the East Embarkmentlands, to enhance the magical protection of his enchanted fortress.\n\nAfter arriving at the site and studying the structure of the fortress and the existing spells that protect its integrity, Elisabeth found out the following properties of the spell to design:\n\n\n\tit should consist of symbols taken from the string s$s$;\n\tall symbols should be unique;\n\tthe strength of the spell depends only on which symbols are chosen, but not on their order;\n\tif symbols si$s_i$ and sj$s_j$, i≤j$i \\le j$, both exist in the spell, then its strength increases by di,j$d_{i,j}$.\n\n\nFor instance, if s=$s=$ ABC and\n\n d=(1−12−2−3−−1)$$\\begin{equation*} d = \\left(\\begin{array}{ccc} 1 & -1 & 2 \\\\ - & 2 & -3 \\\\ - & - & 1 \\end{array}\\right) \\end{equation*}$$ \n\nthen a spell A has strength 1, ABC has strength 2, and AC has strength 4.\n\nHowever, the problem appeared to be too difficult to Elisabeth, because she has only little experience of working with computers. Can you help her to find the strongest spell?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30538","content":"문제\n\nEvery non-negative integer \nn\n$n$ may be written as the sum of the squares of four integers:\n\n \nn=a2+b2+c2+d2\n$$n = a^2 + b^2 + c^2 + d^2$$ \n\nBy allowing subtraction, \nn\n$n$ may be written in many more ways; in fact infinitely many.\n\nIn this problem you will count the number of different ways to express an input \nn\n$n$ as a sum or difference of four squares with several restrictions:\n\nFirst, we need to decide what different means.\n\nAny of \na\n$a$, \nb\n$b$, \nc\n$c$, \nd\n$d$ may be replaced by its negative. We do not want to count these as different so we will only count different squared values.\n\nReordering \na\n$a$, \nb\n$b$, \nc\n$c$, \nd\n$d$ does not give a different representation.\n\nSo, we define a plus minus four square representation of a non-negative integer \nn\n$n$ as a sequence of four perfect squares in non-increasing order with plus or minus signs whose computation results in \nn\n$n$.\n\nIn addition, we add the following restrictions:\n\nThe first square must be no more than \nn\n$n$ to avoid having infinitely many representations.\nIf the same square appears multiple times all appearances must be preceded by (a possibly implicit) plus sign or all must be preceded by a minus sign. This avoids something like:\n64+36−36+0\n$$64 + 36 - 36 + 0$$ \nA square of zero must be preceded by a plus sign.\n\nFor example, the only sums of squares which add to 64 are:\n\n \n64+0+0+0\n$$64 + 0 + 0 + 0$$\n16+16+16+16\n$$16 + 16 + 16 + 16$$ \n\nIf we allow minus signs with the above additional restrictions we have the following which each sum up to \n64\n$64$:\n\n \n64+25−16−9\n$$64 + 25 - 16 - 9$$\n64−25+16+9\n$$64 - 25 + 16 + 9$$\n64+0+0+0\n$$64 + 0 + 0 + 0$$\n49+49−25−9\n$$49 + 49 - 25 - 9$$\n49+36−25+4\n$$49 + 36 - 25 + 4$$\n49+25−9−1\n$$49 + 25 - 9 - 1$$\n49+16−1+0\n$$49 + 16 - 1 + 0$$\n36+36−9+1\n$$36 + 36 - 9 + 1$$\n36+36−4−4\n$$36 + 36 - 4 - 4$$\n36+25+4−1\n$$36 + 25 + 4 - 1$$\n36+16+16−4\n$$36 + 16 + 16 - 4$$\n16+16+16+16\n$$16 + 16 + 16 + 16$$ \n\nWrite a program which takes as input a non-negative integer \nn\n$n$ and outputs a count of the number of different four square plus minus representations of \nn\n$n$."},{"problemId":"30539","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA palindrome is a word, number, phrase, or other sequence of characters which reads the same backward as forward, such as madam or racecar or 1881. Phrase palindromes ignore capitalization, punctuation, and word boundaries. For example:\n\nMadam I'm Adam.\n\nMorse code is a method used in telecommunication to encode text characters as standardized sequences of two different signal durations, called dots and dashes, or dits and dahs. Morse code is named after Samuel Morse, one of the inventors of the telegraph. The International Morse code for letters and digits (the code does not distinguish between upper and lower case) is:\n\n\n\nA word, number or phrase is a Morse Code Palindrome if the morse code for the letters and digits in the word, number or phrase reads the same backwards or forwards (ignoring spaces between character codes.\n\nFor example:\n\n159\n\n\n\nFootstool\n\n\n\nWrite a program which takes as input a string and determines the smallest number of characters to append to the end of the word to make it a Morse Code Palindrome.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30563","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tGry has started to use the new Expify song streaming platform. Since, Gry does not want to spend money Expify forces him to listen to advertisements. An advertisement can be played only after some song (it cannot be played in the middle) and only if the time from the end of the previous advertisement is at least c$c$ seconds.\n\nGry has a circular playlist with n$n$ songs where the duration of the i$i$-th song is di$d_i$ seconds. He wants to minimize the number of advertisements, so, he wants to find out how many advertisements will be if he starts listening to his whole playlist from i$i$-th song, i.e., the circular playlist stops playing after n$n$ songs.\n\nWe suppose that there is an advertisement right before Gry starts listening. Neither this advertisement nor the one, after the playlist stops, count.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30517","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t'커플 파괴자 민욱이'는 솔로이기 때문에 커플끼리 함께 있는 모습을 보기 싫어한다. 그러한 민욱이가 사람들 N$N$명이 일렬로 서 있는 대기 줄 하나를 발견했다. 민욱이는 이 대기 줄을 M$M$개의 묶음으로 나눈 뒤, 묶음의 순서를 바꾸어 어떠한 커플끼리도 이웃하지 않게 할 것이다. 각 묶음의 사람 수는 일정하지 않고 서로 달라도 된다. 단, 같은 묶음에 있는 사람들끼리의 순서를 바꾸거나 거꾸로 뒤집을 수는 없다.\n\n M$M$이 크다면 묶음의 순서를 바꾸는 민욱이의 머리가 아플 것이기 때문에 M$M$이 최소가 되게 하려고 한다. 그리고 민욱이는 M$M$이 최소일 때의 가능한 방법의 개수를 C$C$라고 할 때, 가능한 여러 가지 방법 중 아무거나 min(C,100)$\\min (C, 100)$가지를 구하려고 한다. 각 묶음의 사람 수가 모두 같더라도 묶음을 배열하는 순서가 다르다면 다른 방법으로 치고, 묶음을 배열하는 순서가 같더라도 각 묶음의 사람 수가 하나라도 다르다면 다른 방법으로 친다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30518","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tSmall 버전에서는 문자열의 길이 제한이 20$20$으로 주어진다.\n\n가위바위보 챔피언십이 열렸다. 수많은 관중이 지켜보고 있다. 이 상황에서 lighter와 smallant는 가위바위보 챔피언십 결승에 도달했다. 하지만 둘은 어릴 적부터 너무 친한 친구라, 누가 이기든 별로 신경 쓰지 않는다. 따라서 두 사람은 이번 결승에서 재미있는 장난을 치려고 한다.\n\n결승전은 여러 라운드의 가위바위보로 진행된다. lighter는 첫 번째 라운드를 제외하고, smallant가 바로 이전 라운드에 냈던 것을 따라 내는 장난을 치고자 한다. 하지만, 이런 장난은 관중이 정말 싫어한다. lighter가 이긴 뒤 직후 라운드에서 비기는 결과가 나온다면, 관중은 두 사람이 장난을 친다는 사실을 알아채서 분노할 것이다.\n\n관중이 분노하면 챔피언십의 후원이 끊길 수도 있기 때문에, smallant는 앞에 무엇을 낼지를 다시 생각해볼 필요가 있었다. 곰곰이 생각한 smallant는 기존에 내고자 했던 가위바위보의 정보 중 일부분만 취하면 문제가 해결됨을 알았다.\n\n일부분만 취한다는 뜻은 기존에 내고자 했던 가위바위보의 정보가 문자열로 주어졌을 때, 그중 몇 개의 문자를 제거하여 순서를 바꾸지 않고 합치는 것을 의미한다.\n\n예를 들어, 결승이 8라운드로 구성되었다고 해보자. smallant는 첫 번째 라운드부터 여덟 번째 라운드까지 <표 1>에 나온 것과 같이 낸다고 하자. 즉, 보, 가위, 보, 가위, 보, 보, 주먹, 가위 순으로 낼 것이다. 이때 lighter는 첫 번째 라운드만 주먹을 내고 그 이후 라운드부터는 smallant를 따라 낸다.\n\n\n\t<표 1>\n\t\n\t\t\n\t\t\t라운드\n\t\t\tlighter\n\t\t\tsmallant\n\t\t\t승자\n\t\t\n\t\t\n\t\t\t1\n\t\t\t주먹\n\t\t\t보\n\t\t\tsmallant\n\t\t\n\t\t\n\t\t\t2\n\t\t\t보\n\t\t\t가위\n\t\t\tsmallant\n\t\t\n\t\t\n\t\t\t3\n\t\t\t가위\n\t\t\t보\n\t\t\tlighter\n\t\t\n\t\t\n\t\t\t4\n\t\t\t보\n\t\t\t가위\n\t\t\tsmallant\n\t\t\n\t\t\n\t\t\t5\n\t\t\t가위\n\t\t\t보\n\t\t\tlighter\n\t\t\n\t\t\n\t\t\t6\n\t\t\t보\n\t\t\t보\n\t\t\t무승부\n\t\t\n\t\t\n\t\t\t7\n\t\t\t보\n\t\t\t주먹\n\t\t\tlighter\n\t\t\n\t\t\n\t\t\t8\n\t\t\t주먹\n\t\t\t가위\n\t\t\tlighter\n\t\t\n\t\n\n\n이 경우, 다섯 번째 라운드에서 lighter가 이기고 그 직후 라운드에 비겼으므로, 관중이 분노할 것이다.\n\n따라서, 이 경우는 <표 2>와 같이 smallant가 기존에 내고자 했던 보, 가위, 보, 가위, 보, 보, 주먹, 가위의 순서에서, 여섯 번째와 일곱 번째를 제외한 보, 가위, 보, 가위, 보, 가위의 순서로 결승을 진행하면 된다.\n\n\n\t<표 2>\n\t\n\t\t\n\t\t\t라운드\n\t\t\tlighter\n\t\t\tsmallant\n\t\t\t승자\n\t\t\n\t\t\n\t\t\t1\n\t\t\t주먹\n\t\t\t보\n\t\t\tsmallant\n\t\t\n\t\t\n\t\t\t2\n\t\t\t보\n\t\t\t가위\n\t\t\tsmallant\n\t\t\n\t\t\n\t\t\t3\n\t\t\t가위\n\t\t\t보\n\t\t\tlighter\n\t\t\n\t\t\n\t\t\t4\n\t\t\t보\n\t\t\t가위\n\t\t\tsmallant\n\t\t\n\t\t\n\t\t\t5\n\t\t\t가위\n\t\t\t보\n\t\t\tlighter\n\t\t\n\t\t\n\t\t\t6\n\t\t\t보\n\t\t\t가위\n\t\t\tsmallant\n\t\t\n\t\n\n\nsmallant가 내고자 했던 가위바위보의 정보가 주어졌을 때, 관중이 분노하지 않도록 smallant가 내고자 했던 가위바위보의 정보를 일부분만 취하는 경우의 수를 구해보자. 단, 최소 하나의 라운드는 존재해야 한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30519","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t가위바위보 챔피언십이 열렸다. 수많은 관중이 지켜보고 있다. 이 상황에서 lighter와 smallant는 가위바위보 챔피언십 결승에 도달했다. 하지만 둘은 어릴 적부터 너무 친한 친구라, 누가 이기든 별로 신경 쓰지 않는다. 따라서 두 사람은 이번 결승에서 재미있는 장난을 치려고 한다.\n\n결승전은 여러 라운드의 가위바위보로 진행된다. lighter는 첫 번째 라운드를 제외하고, smallant가 바로 이전 라운드에 냈던 것을 따라 내는 장난을 치고자 한다. 하지만, 이런 장난은 관중이 정말 싫어한다. lighter가 이긴 뒤 직후 라운드에서 비기는 결과가 나온다면, 관중은 두 사람이 장난을 친다는 사실을 알아채서 분노할 것이다.\n\n관중이 분노하면 챔피언십의 후원이 끊길 수도 있기 때문에, smallant는 앞에 무엇을 낼지를 다시 생각해볼 필요가 있었다. 곰곰이 생각한 smallant는 기존에 내고자 했던 가위바위보의 정보 중 일부분만 취하면 문제가 해결됨을 알았다.\n\n일부분만 취한다는 뜻은 기존에 내고자 했던 가위바위보의 정보가 문자열로 주어졌을 때, 그중 몇 개의 문자를 제거하여 순서를 바꾸지 않고 합치는 것을 의미한다.\n\n예를 들어, 결승이 8라운드로 구성되었다고 해보자. smallant는 첫 번째 라운드부터 여덟 번째 라운드까지 <표 1>에 나온 것과 같이 낸다고 하자. 즉, 보, 가위, 보, 가위, 보, 보, 주먹, 가위 순으로 낼 것이다. 이때 lighter는 첫 번째 라운드만 주먹을 내고 그 이후 라운드부터는 smallant를 따라 낸다.\n\n\n\t<표 1>\n\t\n\t\t\n\t\t\t라운드\n\t\t\tlighter\n\t\t\tsmallant\n\t\t\t승자\n\t\t\n\t\t\n\t\t\t1\n\t\t\t주먹\n\t\t\t보\n\t\t\tsmallant\n\t\t\n\t\t\n\t\t\t2\n\t\t\t보\n\t\t\t가위\n\t\t\tsmallant\n\t\t\n\t\t\n\t\t\t3\n\t\t\t가위\n\t\t\t보\n\t\t\tlighter\n\t\t\n\t\t\n\t\t\t4\n\t\t\t보\n\t\t\t가위\n\t\t\tsmallant\n\t\t\n\t\t\n\t\t\t5\n\t\t\t가위\n\t\t\t보\n\t\t\tlighter\n\t\t\n\t\t\n\t\t\t6\n\t\t\t보\n\t\t\t보\n\t\t\t무승부\n\t\t\n\t\t\n\t\t\t7\n\t\t\t보\n\t\t\t주먹\n\t\t\tlighter\n\t\t\n\t\t\n\t\t\t8\n\t\t\t주먹\n\t\t\t가위\n\t\t\tlighter\n\t\t\n\t\n\n\n이 경우, 다섯 번째 라운드에서 lighter가 이기고 그 직후 라운드에 비겼으므로, 관중이 분노할 것이다.\n\n따라서, 이 경우는 <표 2>와 같이 smallant가 기존에 내고자 했던 보, 가위, 보, 가위, 보, 보, 주먹, 가위의 순서에서, 여섯 번째와 일곱 번째를 제외한 보, 가위, 보, 가위, 보, 가위의 순서로 결승을 진행하면 된다.\n\n\n\t<표 2>\n\t\n\t\t\n\t\t\t라운드\n\t\t\tlighter\n\t\t\tsmallant\n\t\t\t승자\n\t\t\n\t\t\n\t\t\t1\n\t\t\t주먹\n\t\t\t보\n\t\t\tsmallant\n\t\t\n\t\t\n\t\t\t2\n\t\t\t보\n\t\t\t가위\n\t\t\tsmallant\n\t\t\n\t\t\n\t\t\t3\n\t\t\t가위\n\t\t\t보\n\t\t\tlighter\n\t\t\n\t\t\n\t\t\t4\n\t\t\t보\n\t\t\t가위\n\t\t\tsmallant\n\t\t\n\t\t\n\t\t\t5\n\t\t\t가위\n\t\t\t보\n\t\t\tlighter\n\t\t\n\t\t\n\t\t\t6\n\t\t\t보\n\t\t\t가위\n\t\t\tsmallant\n\t\t\n\t\n\n\nsmallant가 내고자 했던 가위바위보의 정보가 주어졌을 때, 관중이 분노하지 않도록 smallant가 내고자 했던 가위바위보의 정보를 일부분만 취하는 경우의 수를 구해보자. 단, 최소 하나의 라운드는 존재해야 한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30564","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tGlaciers are vast rivers of slowly-flowing ice, fraught with crevasses which hide under thin layers of snow and wait for unsuspecting walkers to step into and fall in. To reduce the danger, hikers usually go in teams tied together with a thick rope to reduce the consequences of a fall--if one person falls in, the other person may yet hold them from a safe distance.\n\nToday, you are roped up to cross a glacier with your partner. Your plan is to follow the exact same route, at the same speed, the first starting earlier and the second beginning to trace steps once you are exactly x$x$ metres apart. Were you to follow a completely straight path, you would thus then remain exactly x$x$ metres apart at all time.\n\n\n\nFigure G.1: An illustration of the path taken in the 2nd sample case, taken from above. This could also be a particularly festive diagram of someone falling into a crevasse.\n\nHowever, the twisting nature of the course as you avoid obstacles means that you may not always remain exactly x$x$ metres apart. What is the closest that you shall actually come while both of you are walking on the path?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30565","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAlgorithms and data structures find their place in various arts, crafts, and sciences. In this problem, we are discussing one potential application in history.\n\nHistorians are studying the urban development of a city over a period of n$n$ years. The urban development is quantified using an aggregate measure they call an urban development index (UDI), which could take integer values, including negative. There is an initial estimation ei$e_i$ of this index for each of the years. However, during the research process, due to the new documents and evidence discovered, these estimates are revised and updated. More formally, throughout the historians' work process, they could want to update the UDI estimates for all years between sj$s_j$ and fj$f_j$ (inclusive) by adding dj$d_j$ to each of them.\n\nThe main question historians are interested in is if the UDI has been increasing over a certain period of time. However, due to the noisy nature of estimates, we will not be using the standard definition. Instead, the following procedure is used:\n\n\n\twe collapse all consequent equal numbers into one. For instance, 1 1 2 2 2 3 3 3 becomes 1 2 3;\n\tthe UDI is considered increasing from year i$i$ to year j$j$ if the sequence of local minima in the UDI sequence after the above transformation is strictly increasing. An element pi$p_i$ is considered to be a local minimum if it is less than both of its neighbors (one neighbor for the first or last element).\n\n\nYou are to implement the system able to store the UDI estimates and process the requests to update them and to check if the UDI has been increasing over a certain period.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30600","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThere are n$n$ chess queens on an infinite grid. They are placed in squares with coordinates (x1,y1),(x2,y2),…,(xn,yn)$(x_1, y_1), (x_2, y_2), \\ldots, (x_n, y_n)$. Your task is to find a square that all queens attack, or report that no such square exists.\n\nA queen in square (xi,yi)$(x_i, y_i)$ attacks square (x,y)$(x, y)$ if at least one of the following conditions is satisfied:\n\n\n\t xi=x$x_i = x$;\n\t yi=y$y_i = y$;\n\t |xi−x|=|yi−y|$|x_i - x| = |y_i - y|$.\n\n\nNote that in this problem, the queens do not block each other. For example, if there are queens in squares (1,1)$(1, 1)$ and (2,2)$(2, 2)$, both of them attack square (3,3)$(3, 3)$. Moreover, you can choose a square that already contains a queen. For example, square (1,1)$(1, 1)$ would be a valid answer in this case.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30580","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tTomorrow Programming School Department of Arithmetics is going to build a new pool in the basement of their building. The pool will serve mainly for testing of innovative floating point arithmetic algorithms, especially their floating properties in different kinds of liquids. Occasionally, the members of the staff will be allowed to the pool as well. To make the pool optimally fit for human needs, the department has to decide on the pool dimensions. The pool will be rectangular, it must not be a square. Its exact surface area C is predetermined by the choice of the relevant algorithms to be tested there. The company they hired to build the pool offers the list of possible pool side lengths. They have studied the demand in detail and they guarantee that a pool with the given area can be built using the lengths in the list. However, the particular choice is up to the department.\n\nAs the presented list is relatively long, the department also hired a junior programmer who is going to find out which lengths from the list can be chosen. Before he started his job, the programmer had made interesting observations. First, all available pool side lengths are primes. Second, the surface area C of the pool is a product of two distinct primes. He thinks this information may be helpful to find appropriate side lengths reasonably quickly.\n\nBe faster than the hired programmer and solve the problem first.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30566","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tWhen you arrive into a new country, one of the first questions is \"can I charge my phone here?\". Nowadays, the question of voltage is often secondary, as modern IT equipment is mostly voltage insensitive. The shapes of outlets and plugs, however, are still a problem.\n\nIn this problem we give you descriptions of electrical plugs and sockets, and you must determine whether one can insert such a plug into such a socket. In our simplified world, each plug pin is a cylinder, and each socket hole is cylindrical too. Since sockets have springs to ensure a tight contact, the diameter of a pin may be smaller than the diameter of the matching hole. We also neglect pin lengths and hole depths, so both plug and socket are described by three circles.\n\nIn both, the plug and the socket, one of these three circles corresponds to the earth wire, so they have to match. The other circles represent different power phases, and since most countries use alternating current (AC), the corresponding plug pins are allowed to match the socket holes in either way.\n\nGiven the descriptions of a plug and a socket, is it possible to insert this plug into this socket?\n\nAn illustration for the second sample test comes below.\n\n\n\t\n\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\t\n\t\t\tThe socket\n\t\t\tThe plug\n\t\t\tHow to insert the plug\n\t\t\n\t\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30601","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn ICPC, teamwork is everything. That's why everyone on your team has a well-defined role: Sol the Solver can solve any problem in the problem set, Codie the Coder can implement any solution that Sol comes up with, and you... are the glue that holds everything together. Sol and Codie are very picky about the order of problems they would solve/code, and your job is to satisfy their preferences.\n\nThere will be n$n$ problems in the upcoming contest, and you know the general topic of each problem: greedy, geometry, graphs, etc. For simplicity, we will represent each topic with an integer from 1$1$ to n$n$. These integers don't have to be distinct, that is, multiple problems in the contest can have the same topic.\n\nSol wants to solve problems in a specific order of topics: first, the problem with the topic a1$a_1$, after that, the problem with the topic a2$a_2$, \\ldots, and finally, the problem with the topic an$a_n$. Codie also has a preference list: b1,b2,…,bn$b_1, b_2, \\ldots, b_n$, only willing to code problems in that order of topics.\n\nYour job during the contest will be to take solution sheets from Sol and hand them to Codie in the correct order. As your team only has one table to work with, you don't have enough space to arrange all the solutions neatly. Thus, you came up with the following workflow: you will ask Sol for solutions (who will hand them to you in order a1,a2,…,an$a_1, a_2, \\ldots, a_n$), store them in a stack on your part of the table, and hand them to Codie to code (in order b1,b2,…,bn$b_1, b_2, \\ldots, b_n$).\n\nMore formally, at any moment during the contest, you have (at most) two actions you can make:\n\n\n\tIf there are still any unsolved problems remaining, ask Sol for another solution and put it on top of your stack of solution sheets. This action is denoted by the character 'S'.\n\tIf your stack is not empty, take the solution sheet from the top of your stack and give it to Codie to implement. This action is denoted by the character 'C'.\n\n\nFor the given lists of Sol's and Codie's preferences, find a sequence of actions that ensures that all problems are solved and coded in the correct order. Consider all solving and coding times insignificant --- managing solution sheets is a much harder and more important job anyway.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30620","content":"문제\n\n \n2\n$2$ 이상 \n109\n$10^9$ 이하인 두 정수 \nx\n$x$와 \ny\n$y$가 주어진다. \nx\n$x$에 다음과 같은 연산을 두 번 이하로 사용해서 \nx\n$x$와 \ny\n$y$를 같은 값으로 만들어 보자.\n\n \nx\n$x$와 서로소가 아닌 \n1\n$1$ 이상 \n1018\n$10^{18}$ 이하의 정수 \nz\n$z$를 고른다. \nx\n$x$에 \nz\n$z$를 더하거나 \nx\n$x$에서 \nz\n$z$를 뺀다.\n\n연산을 시행하고 나서 \nx\n$x$는 항상 \n1\n$1$ 이상 \n1018\n$10^{18}$ 이하의 정수여야 한다.\n\n항상 두 번 이하의 연산을 사용해서 \nx\n$x$를 \ny\n$y$로 만들 수 있음을 증명할 수 있다."},{"problemId":"30602","content":"문제\n\nGeorgiy and Gennady are playing a new game they have just invented after learning about the classical game of Nim. This game is played with \nn\n$n$ stones and consists of two stages.\n\nIn the setup stage, Georgiy chooses a positive integer \np<n\n$p < n$ and puts a pile of \np\n$p$ stones on a game field. After that, Gennady forms an arbitrary number of piles, each containing an arbitrary number of stones, using all \n(n−p)\n$(n - p)$ stones not used by Georgiy.\n\nFor example, if \nn=10\n$n = 10$ and \np=2\n$p = 2$, Gennady can form:\n\n \n8\n$8$ piles of \n1\n$1$ stone each,\nor one pile of \n5\n$5$ stones and one pile of \n3\n$3$ stones,\nor \n2\n$2$ piles of \n2\n$2$ stones and \n4\n$4$ piles of \n1\n$1$ stone,\nor one pile of \n8\n$8$ stones,\netc.\n\nAfter the setup stage, the Nim stage comes. At this stage, the game of Nim is played. Players take turns, starting from Georgiy. On each turn, the player must remove at least one stone and may remove any number of stones, provided they all come from the same pile. The player who takes the last stone wins at Nim and, consequently, wins the entire game.\n\nGeorgiy and Gennady have just started the game, and now it is the middle of the setup stage: Georgiy has already made his pile of \np\n$p$ stones, but Gennady has not divided the remaining \n(n−p)\n$(n - p)$ stones into piles yet. Now Gennady wants to know what his chances are to win the game.\n\nYou are to calculate the number of ways Gennady can divide \n(n−p)\n$(n - p)$ stones into piles so that he will win the game, assuming that both players will play Nim optimally.\n\nAs you may know, according to the Sprague-Grundy theory, Gennady will win if and only if the bitwise exclusive or (XOR) of all pile sizes (the pile of \np\n$p$ stones and all piles made from the remaining \n(n−p)\n$(n-p)$ stones) is equal to zero.\n\nSince the answer can be large, please calculate it modulo \nm\n$m$. Two ways are considered to be different if the corresponding multisets of pile sizes are different --- that is, the order of piles does not matter."},{"problemId":"30581","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBaroque opera geeks in Tomorrow Programming School are developing a new string instrument suitable for their innovative performances. The instrument, named programmed lute, or proglute in short, consists of flat circular body, with N pegs situated on the body perimeter, and labeled by integers from 1 to N.\n\nEach string on the instrument is stretched between two different pegs and runs across the proglute’s body without crossing other strings. To enhance complex resonance effects, the developers decided to attach two strings to all but two pegs, called principal pegs. Only one string is attached to each principal peg. To support glissando effects, the strings are arranged in such way that it is possible for a musician to touch the string at one principal peg and then slide the finger along all strings on the instrument to the other principal peg. While sliding, musician does not remove the finger from a string, and skips from a string to another one only at their common end peg.\n\nTo build the instrument, there are many ways to arrange the strings on the proglute. Different arrangement would result in different musical properties of the instrument. The developers want to know the number of all possible arrangements of strings on the proglute. They introduced the following notions.\n\n\n\tThe characteristic of a string is an unordered pair of labels of pegs at the string ends.\n\tThe characteristic of a proglute is the set of all its string characteristics.\n\tTwo strings arrangements on proglute are considered to be different when their corresponding characteristics are different.\n\n\nCalculate the number of different string arrangements on the proglute.\n\nThe figure below shows two possible solutions for a proglute with five pegs:\n\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30567","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are making an international trip with several stops to blow off steam and celebrate your progression onto the NWERC. Since your flights are often booked with low-cost airlines, you always run the risk of your flights being cancelled last minute leaving you stuck in the airport. Normally this is no problem---take the next flight---but you have to arrive at the NWERC on time.\n\nIf any one of your flights is cancelled at the same moment you are about to depart, and all others operate as planned, you will book a new itinerary from there to your final destination. Assuming you always plot the fastest route, by how much will you be delayed in the worst case?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30603","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAfter a huge success of the last year's \"K-Shaped Figures\" problem, we've come up with an innovative \"H-Shaped Figures\" problem for this year. And we have some plans for the next 24 years.\n\nLet's say that three segments PQ$PQ$, a$a$, and b$b$ on a plane form an H-shaped figure if:\n\n\n\tpoint P$P$ lies strictly inside segment a$a$, and segments PQ$PQ$ and a$a$ are not collinear;\n\tpoint Q$Q$ lies strictly inside segment b$b$, and segments PQ$PQ$ and b$b$ are not collinear;\n\tsegments a$a$ and b$b$ do not have common points.\n\n\n\n\t\n\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\t\n\t\t\tValid H-shaped figures\n\t\t\tInvalid H-shaped figures\n\t\t\n\t\n\n\nYou are given the coordinates of points P$P$ and Q$Q$, along with n$n$ candidate segments for a$a$ and b$b$. Note that some of the given segments may coincide, but they should still be treated as different segments.\n\nFind the number of possible ways to choose one of the given n$n$ segments as a$a$ and another one as b$b$ to form an H-shaped figure along with the given segment PQ$PQ$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30621","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t'어?'\n\n팀 대회 중 주변에서 '어?'라는 말이 들리면 마음이 혼란해진다. 그렇다고 해서 '어?'를 남발하면 혼란보다는 짜증이 앞서게 된다. 이를 잘 알고 있는 성우는 적당한 선을 지키면서 대회장에 최대한 큰 혼란을 주려고 한다.\n\n\n\t대회는 시각 0$0$에 시작한다.\n\t성우가 '어?'를 외칠 수 있는 시각은 N$N$개가 있고, i$i$번째 시각은 ti$t_i$다. (1≤i≤N)$(1 \\leq i \\leq N)$ \n\t만약 성우가 시각 ti$t_i$에 '어?'를 외치려 한다면, 성우는 시각 (ti−bi)$(t_i - b_i)$부터 지금까지 '어?'를 외친 적이 없어야 한다.\n\t\n\t\t성우가 정확히 시각 (ti−bi)$(t_i - b_i)$에 '어?'를 외쳤더라도 시각 ti$t_i$에 '어?'를 외칠 수 없다.\n\t\n\t\n\n\n성우가 시각 ti$t_i$에 '어?'를 외치면 대회장에 ci$c_i$만큼의 혼란이 가해진다. 최종 혼란은 대회장에 가해진 혼란의 합이다.\n\n성우는 대회장에 줄 수 있는 최종 혼란의 최댓값이 궁금해졌다. 성우를 위해 이를 구해주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30568","content":"문제\n\nYou are developing the scheduling module for the new operating system. This module takes \nn\n$n$ tasks to be executed and the dependencies between them and then puts them in a certain order for execution.\n\nMore formally, there are \nn\n$n$ tasks numbered from \n1\n$1$ to \nn\n$n$. You are also given \nm\n$m$ dependencies numbered from \n1\n$1$ to \nm\n$m$; \ni\n$i$-th of them is described by two numbers --- \nai\n$a_i$ and \nbi\n$b_i$, meaning that the task \nai\n$a_i$ should be executed before the task \nbi\n$b_i$.\n\nIn some cases, there are cyclical dependencies --- situations when according to the dependencies given some task \nt1\n$t_1$ should be executed before \nt2\n$t_2$, \nt2\n$t_2$ before \nt3\n$t_3$, \\ldots, and \ntk−1\n$t_{k-1}$ before \ntk\n$t_k$ and \ntk\n$t_k$ before \nt1\n$t_1$. Cyclical dependencies create a problem for scheduling, so you decided to remove some of the given dependencies in such a way that the resulting set does not contain any cyclical ones.\n\nHowever, you still need to keep at least \nm/2\n$m/2$ original dependencies to preserve some of the original information. You are to write the program performing this task."},{"problemId":"30582","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tStudents visiting the Multidimensional Data Cabinet at Tomorrow Programming School may get access to multidimensional hyperspheres stored in air-conditioned helium cupboards in the cabinet. Before exploring a chosen sphere, a student has to prove he/she is knowledgeable enough to handle the sphere. There are spheres of various dimensions and various integer radiuses, each in a separate locked cupboard. The dimension and the radius of the sphere are written on the cupboard label. To unlock the cupboard, the student has to enter a specific value into the lock mechanism. The value depends on the dimension and the radius of the sphere. It is equal to the sum of absolute values of all coordinates of all integer points which lie inside or on the surface of the sphere, when the center of the sphere is exactly in the center of coordinates. The sum has to be entered modulo 109 + 7.\n\nAn integer point in a d-dimensional Euclidean space is a point which all d coordinates are integers.\n\nThe Cabinet manager is planning to obtain more spheres in the future, and you know that calculations which help to unlock some high-dimensional spheres may be quite tedious to perform by hand.\n\nWrite a program that calculates the value necessary to unlock a cupboard with a sphere in the cabinet.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30622","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t거대한 정원을 관리하는 것은 힘들다. 정원 관리 업무 중에서도 특히 힘든 일은 잡초를 제거하는 일인데, 정원을 돌아다니며 무엇이 잡초인지 일일이 확인해야 하기 때문이다.\n\n다행히도 정원사 요우무는 잡초들의 위치를 이미 알고 있다. 정원에는 N$N$개의 잡초가 자라 있으며, i$i$번 잡초의 좌표는 (xi,yi)$(x_i, y_i)$다. 모든 잡초는 서로 다른 곳에 자라 있다. (1≤i≤N)$(1 \\leq i \\leq N)$ \n\n요우무는 정원 한가운데에 서 있으며, 정원 한가운데의 좌표는 (0,0)$(0, 0)$이다. 정원 관리는 다음 과정으로 이루어지며, 요우무는 모든 잡초를 제거할 때까지 이를 반복한다.\n\n\n\t원하는 잡초의 위치로 이동한다. 이동하는 경로에 잡초가 있어도 상관없다.\n\t벤다. 요우무는 그 자리에서 잡초를 베며, 벤 잡초는 사라진다. 또한, 요우무의 검격은 매우 강력하기 때문에 연결된 잡초들도 동시에 벨 수 있다.\n\t\n\t\t상하좌우 혹은 대각선 방향으로 인접한 두 잡초는 연결되었다고 한다. 또한 잡초 a$a$와 잡초 b$b$가 연결되었고, 잡초 b$b$와 잡초 c$c$가 연결되었다면 잡초 a$a$와 잡초 c$c$도 연결되었다고 한다.\n\t\n\t\n\t정원의 한가운데로 이동한다. 만약 베야 할 잡초가 더 이상 없다면 요우무는 한가운데로 이동하지 않고 그대로 정원 관리를 마친다.\n\n\n단, 요우무는 x$x$축 또는 y$y$축에 평행한 방향으로만 이동할 수 있다.\n\n요우무는 모든 잡초를 제거하기 위해 이동해야 하는 거리의 합을 최소화하려고 한다. 요우무를 대신해 이를 구해주자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30604","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThis is an interactive problem.\n\nThere is an array of n$n$ cells, numbered from 1$1$ to n$n$. For each pair of integers (i,j)$(i, j)$, where 1≤i≤j≤n$1 \\le i \\le j \\le n$, there is a barrier covering all cells from i$i$ to j$j$, inclusive. Each barrier is either active or inactive. A cell is visible if there are no active barriers that cover it. Otherwise, the cell is invisible.\n\nThe state of each barrier is unknown to you. All you can observe is the number of visible cells. But you can flip the state of any barrier: if it's active, it turns inactive, and the other way around. Your task is to make all barriers inactive, so that all cells become visible.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30569","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn a computer game units are described by their health h$h$, damage d$d$, and time to reload t$t$.\n\nWhen such a unit fires a missile at an opposing one --- the opponent's health is decreased by d$d$ 0.5$0.5$ seconds after the missile is fired. The time between consecutive missile launches for the same unit should be at least t$t$ seconds. \n\nFor simplicity, we assume the missile supply to be infinite for all units in the game.\n\nTwo players --- one controlling a unit with health h1$h_1$, damage d1$d_1$ and time to reload t1$t_1$, and the second with a unit described by h2$h_2$, d2$d_2$ and t2$t_2$ --- have engaged in a fight in this computer game. Both units are fully reloaded at the beginning of the fight and can fire missiles immediately.\n\nThe unit is destroyed when its health becomes zero or negative. A player wins if there is a moment in time such that the opponent's unit is destroyed, while theirs is not.\n\nSince it takes 0.5 seconds for a missile to reach its target, it is possible for both units to fire missiles at the same time and ultimately destroy each other.\n\nYou are to determine who wins in case both players act optimally.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30583","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tTomorrow Programming School is going to decorate the front wall in the entrance hall with a distinctive pattern based on a visually appealing output of an elementary cellular automaton. The designers are going to study the outputs of several cellular automata and choose the one they like the most.\n\nYour task is to write a program that replicates the output of an automaton.\n\nNow, we describe elementary cellular automata and how they work. An elementary cellular automaton is a system consisting of a row of adjacent cells, and a rewriting rule. Each cell is always in one of two states: 0 or 1. The sequence of states of all cells, in the order of cells in the row, is called a generation.\n\nThe automaton operates in cycles. In one cycle, the current generation is taken as input and a new generation is calculated by applying the automaton rule to each cell in the current generation. At the end of a cycle, the current generation is replaced by the new generation. Then, another iteration of the cycle can start. The cycle can be repeated for any number of times.\n\nIt is assumed that the leftmost and the rightmost cells are also adjacent to other unused cells, which are always in state 0. This assumption ensures the automaton rule can be applied in the same way to all cells in the row. The unused cells do not appear in any input or output.\n\nThe state of a particular cell in the new generation is determined by its own state and the state of its two adjacent cells in the current generation, and by the automaton rule.\n\nLet us consider a triple of cells consisting of a particular cell C, and its left and right adjacent cell. There are 2·2·2 = 8 possible states, in which this triplet can be in the current generation: 0 or 1 in the left adjacent cell, 0 or 1 in the cell C itself, 0 or 1 in the right adjacent cell. Explicitly, all possible states of this triple of cells may be written as a sequence S of eight binary numbers: S = (111, 110, 101, 100, 011, 010, 001, 000). The middle digit denotes the state of C, and the first and the third digits denote the states of the left and the right adjacent cell to C, respectively.\n\nThe automaton rule assigns one bit, 0 or 1, to each of the eight binary numbers in S. The rule is then coded as an 8-bit vector of the bits assigned to binary numbers in S. The sequence S itself is not coded in the automaton rule.\n\nApplication of the rule on cell C consists of identifying the binary number in S which corresponds to the states of C and its two adjacent cells in the current generation. The state of C in the next generation is determined by the bit value assigned by the automaton rule to that particular binary number.\n\nThere are 28 = 256 different automatons, distinguished by their rule codes. In the input of this problem, the 8-bit vectors representing automaton rules are coded in decimal.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30623","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t 1$1$부터 N$N$까지의 정수를 하나씩 원소로 가지는 수열 A1,A2,⋯,AN$A_1,A_2,\\cdots,A_N$이 주어진다. \n\n다음과 같은 두 가지 연산을 최소 1$1$번, 최대 4$4$번 사용해서 수열의 모든 원소를 동일하게 만들어 보자.\n\n\n\t 1i$1 \\:i$ : Ai$A_i$와 Ai+1$A_{i+1}$를 바꾼다. (1≤i<N)$(1\\leq i < N)$ \n\t 2ij$2 \\:i \\:j$ : i≤k≤j$i\\leq k \\leq j$인 모든 정수 k$k$에 대해 Ak$A_k$를 다음과 같이 바꾼다. (1≤i≤j≤N)$(1\\leq i \\leq j \\leq N)$\n\t\n\t\t Ak>max(Ai,Aj)$A_k > \\max(A_i,A_j)$라면 Ak$A_k$를 min(Ai,Aj)$\\min(A_i,A_j)$로 바꾼다.\n\t\t Ak<min(Ai,Aj)$A_k<\\min(A_i,A_j)$라면 Ak$A_k$를 max(Ai,Aj)$\\max(A_i,A_j)$로 바꾼다.\n\t\n\t\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30570","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA guy named Gry found a new game called \"Mini-Tetris 3023\". This small version of Tetris is played on a very long grid only 2$2$ cells high and has just three types of tile:\n\n\n\tA square made out of 4$4$ tiles in a 2×2$2 \\times 2$ grid.\n\tAn S-tile made out of 4$4$ tiles, 2$2$ on one row and 2$2$ slightly offset on the other\n\tA corner made out of 3$3$ tiles, 1$1$ on one row and 2$2$ on the other\n\n\nTiles may be rotated 0$0$, 90$90$, 180$180$, or 270$270$ degrees to fit amongst each other, however, they cannot overlap or go outside the vertical boundary of the grid.\n\n\n\nThis game provides a$a$ squares, b$b$ S-tiles, and c$c$ corners. Gry would like to beat the high score by creating the largest-possible contiguous 2×n$2 \\times n$ rectangle out of some or all of the provided tiles, without any tiles overlapping or sticking out of the rectangle.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30605","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tJulia is a fan of wild nature photos. Yesterday, she took two photos of a beautiful river with water lilies and some frogs sitting on them. \n\nThere are many water lilies on the river, numbered with consecutive positive integers from left to right, starting from 1$1$. Both photos were taken from exactly the same spot, and both photos have the same n$n$ frogs sitting on water lilies. Each water lily can hold at most one frog.\n\nAfter comparing the photos, Julia found out that all the frogs moved between the photos, since no water lily had a frog sitting on it in both photos. However, Julia couldn't understand which frog from the first photo moved to which water lily in the second photo, as all frogs looked exactly the same!\n\nOne thing is for sure: each frog jumped to a different water lily. Some frogs moved to the left, to a water lily with a smaller number, while the other frogs moved to the right, to a water lily with a larger number.\n\nTo investigate the movement of frogs, Julia wants to answer the following question: how many frogs moved to the left between the photos? As it may not be possible to find a unique answer to this question, you need to help Julia to find all possible answers.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30584","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tА Вы знали, что сегодня проходит финал международного турнира по крестикам-ноликам на бесконечной доске? Вадим тоже не знал, но, услышав об этом монументальном событии года, он открыл стрим и увидел, что между собой сражаются два игрока, Алиса и Боб. Сейчас у Алисы A$A$ очков, а у Боба --- B$B$ очков. Как всем интересующимся известно, за победу в раунде человеку даётся 2$2$ очка, за ничью --- 1$1$ очко, за поражение --- 0$0$ очков.\n\nВадим очень опечален тем, что пропустил часть этой игры, ведь ему очень интересно, в скольких раундах победила Алиса, в скольких победил Боб и в скольких была ничья. Помогите ему ответить на этот вопрос.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30624","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t호영이와 우진이는 넓은 2차원 평면에 살고 있다. 그 평면의 x$x$축 위쪽의 반평면에는 N$N$그루의 나무가 심어져 있다. 두 사람은 x$x$축의 양의 방향으로부터 반시계 방향으로 0∘$0^{\\circ}$에서 180∘$180^{\\circ}$까지 모든 풍경이 찍히게 파노라마 사진을 찍었다.\n\n우진이는 x$x$축상의 총 M$M$개의 지점에서 사진을 찍었고, 호영이는 x$x$축 아래쪽의 반평면 어딘가에서 정확히 한 장을 찍었다. 각각의 나무는 번호가 매겨져 있는데, 두 사람은 왼쪽에서 오른쪽으로 나무가 보이는 순서가 같은 사진을 같은 풍경의 사진이라고 정의했다.\n\n호영이가 사진을 찍은 위치와 우진이가 사진을 찍은 M$M$개의 위치가 전부 주어질 때, 우진이가 찍은 사진 중 호영이가 찍은 사진과 같은 풍경의 사진이 몇 장이나 있는지 알아보자.\n\n단, 호영이가 찍은 사진에서 두 그루의 나무가 겹쳐 보이는 경우는 주어지지 않는다. 따라서 우진이가 찍은 사진에서 두 그루의 나무가 겹쳐 보인다면 호영이가 찍은 사진과 절대 같은 풍경이 될 수 없다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30585","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tПоп-ит (с англ. pop it --- <<лопни это>>) --- кнопочная игрушка, получившая популярность среди детей и подростков весной 2021 года. Представляет собой резиновую или силиконовую игрушку с полусферами для нажатия, при котором издаётся щёлкающий звук. Эти полусферы получили название <<пупырок>> по аналогии с пузырчатой упаковкой, в которой похожие полусферы можно лопать со звуком. (Википедия)\n\nПоп-ит в нашей задаче представляет собой прямоугольник высоты h$h$ и ширины w$w$, каждая единичная клетка которого содержит пупырку. Каждая пупырка может быть в одном из двух состояний --- выдавлена наружу или внутрь. Будем помечать состояние <<выдавлена наружу>> цифрой 0$0$, а <<выдавлена внутрь>> --- цифрой 1$1$. Любую пупырку можно переключить, и тогда она поменяет своё состояние на противоположное.\n\nДаша хочет привести поп-ит к исходному виду, в котором он продавался --- а для этого нужно, чтобы все пупырки были в одинаковом состоянии. Какое наименьшее число пупырок Даше нужно для этого переключить?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30571","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tWine is a sophisticated business. Bottling alone encompasses the art of label design, the physics of vacuum sealing, the craft of glassforming, and the calculus of volumetric shapes.\n\nToday we will deal with literature: every size of wine bottle has a name. You may know that a “Standard” bottle holds 0.75L. Did you also know that a 15L bottle is a “Nebuchadnezzar”, and a 12L is a mighty “Balthazar”?\n\nUsually wine bottle sizes come in multiples of 1.5L. You have some other bottles in non-standard sizes and you will need to create impressive names for them as well. Note that any two bottles of the same size must have consistent names.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30606","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tKenny has a microwave in his kitchen. The microwave has a pretty weird one-button timer interface. \n\nWhen you have put some food into the microwave and want it to start heating, you should press the button one or multiple times. When you press the button for the first time, the timer is set for 1$1$ minute. If you immediately press the button again, 2$2$ minutes are added to the timer, for a total of 3$3$ minutes. If you immediately press the button yet again, 4$4$ more minutes are added to the timer, and so on. If you press the button for the k$k$-th time without a pause, it adds 2k$2^k$ minutes to the timer.\n\nIt seems impossible to set the timer for some periods of time by using the button: for example, how to set the timer for 2$2$ minutes? Fortunately, you can reset the button counter by making a pause for one second. So, for example, if you press the button, make a pause for one second, and then press the button again, the timer is set for 2$2$ minutes. Another example: if you press, press, pause, press, press, press, the total time on the timer is 1+2+1+2+4=10$1+2+1+2+4=10$ minutes.\n\nKenny needs to heat his food for exactly x$x$ minutes. Help him to find the minimum number of one-second pauses he needs to set the timer. Let us assume that only pauses take time, while time to press the button is ignored.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30625","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t호영이는 기대하던 WooJeans의 팬미팅에 가게 되었다. 팬미팅의 하이라이트인 댄스타임에서는 마지막 라운드를 통과한 팬에게 사인 앨범을 주는데, 열혈팬 호영이도 사인 앨범을 받기 위해 열심히 춤 연습을 하고 있다.\n\n댄스타임은 N$N$개의 라운드로 이루어져 있으며, 각 라운드에는 WooJeans의 리더 우진이 바라보는 방향에 따라 올바른 춤을 춰야 한다. 댄스타임의 각 라운드에서 올바른 춤을 췄다는 것은 아래와 같이 춤을 추는 것을 뜻한다.\n\n\n\t우진이 앞을 보고 춤을 추면 호영이는 우진과 같은 춤을 춰야 한다.\n\t우진이 뒤를 보고 춤을 추면 호영이는 우진과 다른 춤을 춰야 한다.\n\n\n댄스타임에서는 최대 한 번까지 올바르지 않은 춤을 추더라도 해당 라운드를 통과할 수 있다. 즉, 두 번 이상 올바르지 않은 춤을 추면 즉시 해당 라운드에서 떨어지게 된다.\n\n호영이가 마지막 라운드까지 통과하여 사인 앨범을 받을 수 있는 경우의 수를 구해보자. 이때, 적어도 하나의 라운드에서 호영이가 추는 춤의 종류가 다르면 다른 경우이며, WooJeans의 열혈팬 호영이는 우진이 출 모든 춤을 알고 있다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30586","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tУ Марго очень много друзей и все они --- интроверты. У него дома есть круглый стол, вокруг которого стоит N$N$ стульев. Как известно, интроверт за столом чувствует себя комфортно, если количество свободных стульев до ближайшего по кругу соседа слева и до ближайшего по кругу соседа справа от него в сумме хотя бы K$K$. Марго хочет пригласить своих друзей на ужин. Для этого ему нужно узнать, какое наибольшее число интровертов можно посадить за стол так, чтобы каждому было комфортно. Помогите ему.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30607","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tConsider four integers A$A$, B$B$, C$C$, and D$D$, such that A<B<C<D$A < B < C < D$. Let's put them in the corners of a square in some order and draw a loop A−B−C−D−A$A - B - C - D - A$. Depending on the arrangement of the integers, we can get different loop shapes, but some arrangements produce the same shape:\n\n\n\nThere are three possible loop shapes we can get:\n\n\n\nNow consider an n×m$n\\times m$ matrix filled with distinct integers from 1$1$ to nm$nm$, inclusive. Each 2×2$2\\times 2$ square in this matrix can be seen as a square with integers in its corners. Let's build a loop for each of these squares like we did before:\n\n\n\nYour task is to perform the inverse operation. You are given the shape types for all (n−1)(m−1)$(n-1)(m-1)$ loops, and you need to build an n×m$n\\times m$ matrix filled with distinct integers from 1$1$ to nm$nm$, inclusive, that produces these shapes.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30626","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t근수는 대마법사 마루의 제자이다. 최근 마루는 근수에게 블레이즈를 가르쳤다. 블레이즈는 원하는 방향을 바라보고 원하는 각도만큼 불을 발산시킬 수 있는 스킬이다.\n\n심심한 마루는 블레이즈를 배운 근수를 시험해 보려 한다. 블레이즈를 사용하면 특정한 방향과 각도로 불이 무한하게 발산되므로 특수 원형 훈련장 안에서 시험하려 한다. 특수 원형 훈련장은 벽으로 막혀 있어 훈련장 안에서 블레이즈를 사용하면 불이 벽에 닿아 사라지게 된다. 또한 특수 원형 훈련장은 벽에 센서가 있어 블레이즈를 감지할 수 있고, 이 센서는 매우 민감해서 블레이즈가 지나가는 경계에서도 블레이즈를 감지한다. \n\n마루는 근수에게 N$N$번의 블레이즈를 쓰도록 지시할 것이다. 마루는 각각의 지시를 다음과 같이 내린다.\n\n\n마루: 입구부터 훈련장의 벽을 따라 반시계 방향으로 a∘$a^\\circ$만큼 이동한 곳에서 훈련장의 중심을 향해 b∘$b^\\circ$만큼의 범위로 블레이즈를 써라.\n\n\n아래는 마루의 지시를 나타낸 그림이다. \n\n\n\n위 그림에서 점 O,E,P$O, E, P$는 각각 훈련장의 중심, 훈련장의 입구, 근수의 위치를 나타내고, LR⌢$\\newcommand{arc}[1]{\\stackrel{\\Large\\frown}{#1}}\\arc{LR}$은 벽에 닿아 사라진 블레이즈의 범위를 나타낸다. 위 그림의 실선은 훈련장의 벽을 나타낸다. 또한 근수는 항상 ∠EOP=a∘,∠LPR=b∘,∠OPL=∠OPR$\\angle{EOP}=a^\\circ, \\angle{LPR}=b^\\circ, \\angle{OPL}=\\angle{OPR}$를 충족하게 블레이즈를 사용한다.\n\n수제자 근수는 항상 정확하게 블레이즈를 사용할 수 있다. 근수가 N$N$번의 지시를 따른 이후 블레이즈를 감지한 센서의 개수를 출력하자. 센서는 입구에 1$1$개 있으며, 1∘$1^\\circ$ 간격으로 한 개씩 총 360$360$개가 있다.\n\n 1≤b≤179$1 \\leq b \\leq 179$인 경우에는 근수의 위치에 있는 센서는 블레이즈를 감지하지 않지만, b=180$b = 180$인 경우에는 근수의 위치에 있는 센서도 블레이즈를 감지한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30587","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tДва игрока играют в казино в следующую игру. Рулетка крутится N$N$ раз. Каждый раз на ней равновероятно выпадает число от 1$1$ до K$K$. После чего все числа суммируются. Тот, кто угадает итоговую сумму, победил.\n\nПервый игрок поставил на то, что сумма в конце будет равна S1$S_1$, а второй на то, что сумма будет равна S2$S_2$. Определите у кого больше шансов победить.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30572","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThis is the story Alph told his schoolmate Beth. “Last vacations, I went exploring that big abandoned house in the woods above the dam lake. I was very proud at that time to be freshly admitted to Tomorrow Programming School, and so I decided to stick to firm and clear rules of exploration and to make a log of my actions.\n\nInside the house, there were only rooms connected by doors between them. No corridors, no hallways. Whenever I entered a room for the second, third, etc. time, I did it always through the door by which I had left it last time. Whenever I went through a door I wrote down one letter. When I moved from a room to an adjacent room which was either undiscovered yet or which I had discovered later than the current room, I wrote down F, like Forward. When I moved to a room which I had discovered earlier than the current room, I wrote down B, like Backward. By discovery of a room I mean entering the room for the first time.\n\nI started and finished my exploration in the entrance room of the house. When I finally left the house, I had a sequence of letters, in the order I wrote them down during my exploration. Later, to make it more suitable for some future automated processing, I substituted each F by an opening bracket and each B by a closing bracket. Here is my modified sequence. Do you think it can be used for some unusual programming task?”\n\nIt took Beth only seconds to reply. “Surely, it can be used. Insert symbol * between each )( pair. Insert symbol 1 between each () pair. And also, insert pair of symbols +1 between each )) pair. It will result in an arithmetic expression, and I will give you as many cookies, as will be the value of the expression, but you have to calculate it first, obviously.”\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30608","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThere are many ways to write a word on paper. For example, some writing systems, like Arabic and Hebrew, omit most vowels, although they write some of them.\n\nIn this problem, we will only consider strings consisting of English letters and hyphens. Letters 'a', 'e', 'i', 'o', 'u', and 'y' are considered to be vowels, while hyphens and all other letters are considered to be consonants. All comparisons are case-insensitive: uppercase and lowercase versions of the same letter are considered equal.\n\nYou are given two strings s$s$ and f$f$, called the short name and the full name, respectively. Your task is to check whether the short name s$s$ can be obtained from the full name f$f$ by omitting some vowels (possibly none).\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30660","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tDesde que saiu da cadeia, Marcos não consegue parar de beber. Ele, um ex-maratonista, havia sido preso injustamente sob acusação de roubar questões de competições de programação e vendê-las para competidores russos e chineses. Depois de 5 longos anos na cadeia, ele foi considerado inocente por falta de provas. Porém, passar tanto tempo atrás das grades de forma injusta o fez entrar em depressão e, desde então, passa todas as suas noites andando de bar em bar, de esquina em esquina. Você, como melhor amigo de Marcos, já está cansado de sempre ter que procurá-lo pela cidade depois de suas noites de bebedeira e resolveu facilitar sua própria vida criando um programa que tenta prever onde encontrar Marcos ao final de suas noites.\n\nToda noite, antes de sair para beber, Marcos avisa a você a qual bar da cidade ele vai, assim você sempre sabe onde sua noite de bebedeira começa. Depois disso, depois de cada dose bebida, há uma certa chance de Marcos ir a outro bar. Você sabe uma maneira simples de estimar essa chance: a probabilidade de Marcos ir a outro bar é proporcional 'a divisão da qualidade do bar pela distância entre o bar onde ele está agora e o bar de destino. Também há uma chance de Marcos continuar no mesmo bar, que é proporcional 'a raíz da qualidade daquele bar.\n\nA qualidade do bar i$i$ é dada por Qi$Q_i$ e a distância entre os bares i$i$ e j$j$ é dada por Di,j=Dj,i$D_{i,j} = D_{j,i}$. Assim, de maneira geral, a probabilidade Pi,j$P_{i,j}$ de Marcos ir do bar i$i$ ao bar j$j$ é dada por:\n\n (1)Pi,j=QjDi,j∑k≠iQkDi,k+Qi$$\\begin{equation} P_{i,j} = \\displaystyle\\frac{\\displaystyle\\frac{Q_j}{D_{i,j}}}{\\displaystyle\\sum_{k \\ne i}{\\displaystyle\\frac{Q_k}{D_{i,k}} + \\sqrt{Q_i}}} \\end{equation}$$ \n\nJá a probabilidade de Marcos permanecer no mesmo bar é dada por:\n\n (2)Pi,i=Qi∑k≠iQkDi,k+Qi$$\\begin{equation} P_{i,i} = \\displaystyle\\frac{\\sqrt{Q_i}}{\\displaystyle\\sum_{k \\ne i}{\\displaystyle\\frac{Q_k}{D_{i,k}} + \\sqrt{Q_i}}} \\end{equation}$$ \n\nNote que as fórmulas garantem a seguinte propriedade:\n\n (3)∑j=1nPi,j=1, ∀1≤i≤n$$ \\begin{equation} \\sum_{j=1}^{n}{P_{i,j}} = 1\\text{, }\\forall 1 \\le i \\le n \\end{equation} $$ \n\nComo Marcos bebe muito mais que a média, uma das histórias que ele mais gosta de contar quando está bêbado é a de como ele ganhou um campeonato russo de virada de vodka, você sabe que ele pode tomar uma quantidade arbitrariamente grande de doses. Para fins práticos, assuma que Marcos bebe uma quantidade infinita de doses numa noite.\n\nAssim, dados como entrada os bares, suas qualidade e suas distâncias, faça um programa que descubra em qual bar Marcos estará com maior probabilidade depois de sua noite de bebedeira.\n\nDica: Não se esqueça que a probabilidade de Marcos estar em um bar é sempre igual a 1.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30627","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t차 모임 '삼월 초하루'가 있다. 그들은 수시로 茶(차)와 다식을 먹으며 친목을 다지고 있다.\n\n어느 날 차 모임을 이끄는 팽주(차를 우리는 사람) 초승달은 자주 가는 찻집 사장님으로부터 다음과 같은 사실을 배워 왔다.\n\n\n숙우에 담긴 뜨거운 물을 다른 숙우로 이동할 때마다 물의 온도가  5$\\mathbf{5}$℃ 감소한다.\n\n\n다구 중 하나인 '숙우'는 '공도배'라고도 하며 우린 물을 나누거나 차를 우릴 물을 식히기 위해 사용한다. 물을 옮길 때마다 온도가 감소한다는 사실을 알게 된 초승달은 자신이 가지고 있었던 숙우들을 이용해 각각의 차에 맞는 적절한 온도를 가진 물을 여러 개 만들어 한꺼번에 차를 여러 종류로 우리고 싶어졌다.\n\n\n\n초승달은 1$1$번부터 N$N$번까지 N$N$개의 숙우를 가지고 있다. 1$1$번부터 N−1$N-1$번까지의 숙우에 1$1$번부터 N−1$N-1$번까지의 물이 순서대로 채워져 있고, N$N$번 숙우는 비어 있다. N−1$N-1$개의 물은 각각 목표 온도를 가지고 있다. 처음 숙우에 담긴 물은 100$100$℃이다. 숙우의 물을 이동할 때 빈 숙우로만 이동할 수 있으며, 숙우에 담긴 물을 모두 이동해야 한다.\n\n숙우 속 물을 다른 숙우로 이동하여 온도를 낮춰 목표 온도를 맞춰보자. 그리고 알록달록 다양한 숙우에 1$1$번부터 N−1$N-1$번까지의 물이 알맞게 담길 수 있도록 해 보자!\n\n참고로 오늘은 초승달이 숙우를 3$3$개만 들고 왔다고 한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30588","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tКлюкало состоит из N$N$ деталей, у каждой есть свой стандарт --- i$i$-я деталь должна весить si$s_i$ грамм. Если есть клюкало, в котором i$i$-я деталь весит ai$a_i$ грамм, то можно посчитать её отклонение по формуле |ai−si|si$\\frac{|a_i - s_i|}{s_i}$. У всей же конструкции отклонение считается по формуле Σ|ai−si|si$\\Sigma \\frac{|a_i - s_i|}{s_i}$, то есть сумма отклонений каждой детали. Допустимое отклонение клюкала по стандарту равно K$K$.\n\nВам дано клюкало. За одну минуту можно либо увеличить вес одной детали на 1$1$ грамм, либо уменьшить вес одной детали на 1$1$ грамм. За какое наименьшее время можно привести данное клюкало к стандарту с отклонением не больше K$K$?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30573","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tStudents of Tomorrow Programming School engage in different school programming clubs. Each student is a member of some number of clubs. The clubs are supervised by the Principal Club Coach (PCC). His main occupation is to talk to club members to help them organize their activities. PCC has a fixed schedule in the form of a list of students he is going to talk to in the nearest future. He always talks to only one student at a time, he may talk to a student repeatedly at various times. Each talk takes short time interval, which is always the same. There is negligible time between subsequent talks.\n\nCurrently, the school director also needs to talk to some students in the presence of PCC, because he needs to start another state supported programming project. He is going to visit PCC’s cabinet and spend some uninterrupted time there. In that time, he wants to talk to all members of at least one club. Thus, PCC defined a so-called director interval in his schedule. It is an uninterrupted sequence of his talks to students, in which all members of at least one club appear at least once.\n\nBefore he suggests an acceptable director interval, PCC at least wants to know the number of such intervals in his schedule.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30661","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tVocê foi encarregado de dispor os navios da frota naval do seu país para proteger um arquipélago. O mapa do arquipélago é dividido em quadrantes e cada quadrante de água precisa ser vigiado por pelo menos um navio.\n\nAs condições para a distribuição dos navios são as seguintes:\n\n\n\tCada navio consegue monitorar os quadrantes nas direções horizontal e vertical do quadrante do navio, a não ser que sua visão seja bloqueada por um quadrante de terra.\n\tNavios somente podem ser colocados em quadrantes de água.\n\tAlguns quadrantes de terra são portos e possuem necessidades especiais, devendo ser guardados por uma certa quantidade de navios em quadrantes adjacentes a eles, a norte, sul, leste ou oeste.\n\tA fim de evitar fogo amigo, navios não podem ser capazes de vigiar quadrantes de água contendo outro navio da sua frota.\n\n\nEncontre uma disposição de navios que satisfaça as restrições, se possível.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30589","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tМонстрам надо спать, но не у всех это легко получается. Так монстру Вадиму, который выглядит как выпуклый многоугольник из N$N$ вершин на плоскости, часто мешает свет. У Вадима есть N$N$ глаз, по одному в каждой вершине, и чтобы спокойно уснуть, ему понадобится маска для монстров, закрывающая все глаза. Маска для монстров --- это произвольная линия, которая должна вплотную прилегать к каждому глазу и не проходить внутри монстра. В магазине есть самые разные маски, но Вадиму хватит наименьшей по длине. Какой длины будет эта маска?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30609","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA chemical scientist is attempting to create a new metal alloy that possesses both flexibility and conductivity. To achieve this, the scientist blends various types of metals and then assesses their capabilities. Subsequently, the experiments yield varying levels of conductivity and flexibility over time. Certain metal alloys exhibit high flexibility but low conductivity, while others show the opposite, and finally, a few have both attributes in a diminished capacity. To further his experiments, he is solely focused on alloys that are not dominated by others, allowing for more in-depth investigations.\n\nHere, \"dominating\" refers to an alloy with flexibility x and conductivity y, where no other alloy exhibits both greater flexibility and conductivity.\n\nFor instance, consider the testing of five different alloys A, B, C, D, E resulting in the following flexibility and conductivity values: A=(1,5), B=(2,2), C=(3,4), D=(5,2), and E=(4,1). In this scenario, the scientist is particularly interested in alloys A, C, and D.\n\nAnother graphical example is depicted in the below image, where red dots represent dominant alloys.\n\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30628","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t세진이가 살고 있는 마을은 N$N$개의 구역이 있고, 각 구역을 잇는 도로가 총 M$M$개 존재한다. 각 구역에는 1$1$번부터 N$N$번까지 차례대로 번호가 붙는다. 또한, 도로에는 빨간색, 노란색, 파란색의 세 종류의 도로가 있다.\n\n김밥을 너무 좋아하는 세진이는 자신이 직접 김밥천국에 가지 않고 김밥을 주문할 수 있는 김밥 배달 전문 로봇을 만들었다. 이 로봇은 절대 멈추지 않고 움직이며 빨간색, 노란색, 파란색 도로를 지나가는 데 각각 정확히 2$2$분, 3$3$분, 6$6$분이 걸린다.\n\n세진이는 지금 막 김밥천국에 전화해 정확히 K$K$분 후에 김밥을 찾으러 가겠다고 말했다. 세진이는 지금 당장 로봇을 자신의 위치에서 출발시킬 예정이다. 마을의 구조, 세진이의 위치, 김밥집의 위치를 고려해서 정확히 K$K$분 후에 로봇이 김밥집에 도달할 수 있게 로봇의 이동 경로를 짜는 것이 가능할지 생각해 보자.\n\n참고로, K$K$분을 맞추기 위해 같은 구역을 재방문하거나 같은 도로를 두 번 이상 지나는 것도 가능하며, 김밥집이 있는 구역을 중간에 지나치는 것도 가능하다. 정확히 K$K$분 후에 로봇이 김밥집의 위치에 있을 수 있는지만 확인하면 된다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30662","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tTodas as pessoas do mundo estão jogando O Jogo, mesmo que não saibam disso. Aliás, as pessoas que não sabem dele, estão ganhando! O Jogo é um jogo muito simples, tendo apenas duas regras:\n\n\n\tToda vez que alguém pensa no jogo, perde.\n\tToda vez que alguém perde, deve alertar todos a sua volta que ele perdeu.\n\n\nBom, você acaba de perder O Jogo... Mas não se preocupe, pois assim que esquecê-lo, voltará a jogá-lo!\n\nObviamente, um jogo como esse nunca terá um vencedor já que as regras somente definem um critério de perda. Contudo, você como funcionário da maior rede de micro-blogging do mundo e inconformado de não haver um vencedor neste jogo resolveu criar um prêmio para o usuário da sua rede que menos pensou no jogo.\n\nPara alcançar seu objetivo, você terá que analisar o histórico de todos os eventos que aconteceram na rede. O funcionamento da sua rede é baseado numa arquitetura publish/subscribe e conta com as seguintes três primitivas:\n\n\n\tSUBSCRIBE A, B - usuário A passa a seguir B, ou seja, recebe mensagens dele\n\tUNSUBSCRIBE A, B - usuário A deixa de seguir B\n\tPUBLISH A - usuário A publica uma mensagem a todos que o seguem\n\n\nAs mensagens de PUBLISH já fora filtradas e só aparecem no histórico aquelas que anunciam O Jogo, fazendo com que todos que a recebem lembrem-se dele. Parece que nem todas as pessoas obedecem as regras do jogo, sendo comum que alguém receba uma mensagem falando sobre O Jogo e não avise aos seus amigos que lembrou do jogo. Contudo, tanto quem publica uma mensagem quanto quem a recebe lembra do jogo.\n\nO seu histórico é dado em texto puro com uma primitiva por linha. Em toda linha, a primitiva é precedida por um inteiro, marcando o dia no qual a primitiva foi trocada. Nem todo dia há troca de mensagens. Como exemplo, é dado o trecho abaixo:\n\n123 SUBSCRIBE alice, bob\n124 PUBLISH bob\n124 PUBLISH alice\n126 PUBLISH alice\n\n\nNo exemplo acima, no dia 123, alice passa a seguir bob sem que bob siga alice. No dia seguinte, bob lembra do jogo e acaba avisando alice através de uma mensagem. Nesse mesmo dia, alice publica uma mensagem sobre o jogo, lembrando também seus seguidores. Já no dia 126, somente alice lembra do jogo. Neste caso, alice lembrou do jogo dois dias e bob apenas um.\n\nComo sua rede possui muitos usuários, você não sabe exatamente quantos usuários aparecem no histórico e deve, portanto, estar preparado para suportar vários. Cada usuário é representado por uma string de no máximo 15 caracteres, somente letras minúsculas são usadas.\n\nDado o histórico da rede em ordem cronológica, inclusive em relação 'as mensagens trocadas no mesmo dia, descubra qual usuário lembrou menos do jogo, ou seja, quem passou mais dias, não necessariamente consecutivos, sem lembrar do jogo.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30640","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t장롱 면허를 보유한 시은이는 수직선 위에서 운전 연습을 하려고 한다. 시은이는 원점에서 출발하여 항상 양의 방향으로 이동할 것이다. 자동차는 단위 거리 1만큼 이동하는데 전기 1kWh를 소모하며, 전기를 소모하는 방법은 이동하기 밖에 없다. 처음 상태의 자동차는 전기가 없으며, 전기가 없는 자동차는 충전하기 전엔 이동할 수 없다.\n\n수직선 위에는 0번부터 N번까지, 총 N + 1개의 충전소가 있다. i번 충전소는 수직선 위의 점 Ai에 있으며 방문하면 Fi kWh의 전기를 충전할 수 있다. 0번 충전소를 제외한 나머지 충전소들 중 하나에는 장난꾸러기 마법사가 숨어있다. 마법사는 시은이가 해당 충전소에 도착하면 그보다 이전에 있는(즉, 원점에 더 가까운) 충전소들 중 하나로 순간이동하게 만든다. 재미있게도 순간이동할 충전소는 시은이가 고를 수 있다. 순간이동에 의해 소비되는 전기는 없으며, 마법사는 한 번 장난을 치면 다시는 장난을 치지 않는다.\n\n마법사가 장난을 칠 때에는 충전을 할 수 없으며, 순간이동을 통해 다시 만난 충전소에서는 충전을 할 수 있다. 예를 들어 시은이가 3번 충전소에서 마법사를 만나 1번 충전소로 순간이동 하기로 했다면, 0 → 1 → 2 → (마법사의 장난에 의해 3번에서 충전을 하지 못함) → 1 → 2 → 3 → … 번 충전소의 순서로 자동차를 충전할 수 있다.\n\n시은이가 각 충전소에서 마법사를 만났다고 가정했을 때, 원점으로부터 가장 먼 위치에서 자동차가 방전되게 하려면 몇 번 충전소를 선택해야 할지 알아보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30590","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tВсе встречали задачи с ленивым условием. Эта задача не является исключением.\n\nНайдите пару различных целых чисел с наибольшим наибольшим общим делителем среди всех пар различных x,y$x,y$ таких, что L≤x,y≤R$L \\le x,y \\le R$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30610","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAn environmental agency is asked to perform a survey of the lakes found in various places. This effort is part of a program to estimate the size and distribution of the lakes depending on the place they’re located. At the initial stage of this project, the agency is going to use aerial photographs to perform the estimation. Due to the large number of lakes that will be investigated they decided to use a computer program to help with the task. More specifically, given a ‘two color’ image that looks like this:\n\n\n\nThe task is to find the number of the lakes (marked with blue) as well as the surface area of each one of them. The encoded image is given as a 2D array of tiles that can be either a ground tile or a water tile. Each tile in the image corresponds to one square meter of area. Given a single water tile, a lake is defined to cover all the water tiles that are reachable from the initial tile by performing an arbitrary sequence of up/down/left or right moves on water tiles (not diagonally). You can assume that the border tiles found at the edge of the image are always ground tiles.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30574","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe students of Tomorrow Programming School are admitted to the school in the nationwide School Admission Process (SAP), which involves most schools in the region. SAP consists of two rounds.\n\nAt the beginning of the first SAP round, each student applies for two schools, while indicating his priorities. For each student there is a school which is his first priority and a school which is his second priority. All students who apply are tested in a national exam that gives each student a unique score and creates a common list CL of students sorted according to their scores in the test in descending order (the highest score is the best). CL is available to each school. Each school prefers to admit students with better score. The capacity of each school is bounded by common capacity limit C. Each school keeps a list of candidates, the capacity of the list is also C. The lists are initially empty.\n\nThen, the second round of SAP starts. It consists of one or more cycles of so-called update events. In a cycle, each school, one after another, performs one update event.\n\nIn an update event, the school with update list L searches CL from its end (starting with the worst score applicant) and they select the first applicant A who is not in L and who fulfills all following conditions:\n\n\n\tEither L is not full, or the score of A is better than the worst score of the candidates in L.\n\tThe school with list L is either the first or the second priority of A.\n\tA is currently either not on a candidate list of any school or they are currently on candidate list of their second priority school.\n\n\nIf the school cannot select an applicant fulfilling the conditions, the update event is claimed to be empty and it is terminated. Otherwise, if L is full at the moment, the candidate with worst score in L is removed from L. Next, A is included in L. If A had been to this moment on a candidate list of another school, A is removed from that list. Finally, the update event is claimed to be valid.\n\nIf, during a cycle, at least one update event is valid, a new cycle is started all over again. The second round of SAP ends when all update events in one cycle are empty. Then, the schools admit the students which are on their respective candidate lists.\n\nThe regional statisticians want to know, how many students were admitted to their first or second priority schools. Write an appropriate program for them.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30663","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tDado n, dizer se n pode ser obtido como a soma de 2 ou mais números inteiros positivos consecutivos.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30591","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<<Гигачат>> --- прогрессивная IT-компания, разрабатывающая одноимённую прогрессивную социальную сеть. Недавно Ваня устроился работать в эту компанию. Его текущая задача --- реализовать базу данных, которая будет отслеживать регистрации новых пользователей. К сожалению, сейчас Ваня готовится к четвертьфиналу ICPC, поэтому ему нужна Ваша помощь.\n\nИзначально база данных пуста. В течение некоторого времени Q$Q$ человек делают по одному запросу в эту базу данных. Каждый запрос представляет собой непустую строку, которая может содержать строчные и заглавные буквы английского алфавита, а также цифры. Длина строки не превышает 10$10$. Если в системе ещё нет пользователя, именем которого является данная строка, то необходимо зарегистрировать пользователя с данным именем. В противном случае, к имени пользователя дописывается 1$1$ и проверяется наличие такого пользователя в системе. Если такого пользователя нет, то необходимо зарегистрировать пользователя с данным именем (с единицей в конце). Если же такой пользователь уже есть, необходимо вместо 1$1$ дописать 2$2$, затем (в случае наличия такого пользователя) вместо 2$2$ дописать 3$3$ и так далее. Ответом на каждый запрос является полученное пользователем имя.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30611","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAs a student at a university, you want to choose a set of courses for the next semester. Each course may or may not have a set of prerequisite courses. Therefore, before making your final decision, you want to ensure that you have satisfied all the prerequisites required for the courses you intend to take.\n\nFor instance, suppose a student has successfully completed courses courseA, courseB, courseC, courseE, courseG, and courseH. The course she wishes to enroll in has specific prerequisites, namely courseA, courseC, and courseG. In this scenario, the student meets the prerequisites because she has already completed all of them - courseA, courseC, and courseG.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30629","content":"문제\n\n이 문제는 재미없다. 보통 사람들은 재미없는 문제를 풀지 않겠지만, 대회 참가자인 당신은 이 문제를 풀어야 한다.\n\n \nN\n$N$과 \nM\n$M$이 주어졌을 때, 다음 조건을 모두 충족하는 길이 \nN\n$N$의 수열 \nA\n$A$를 구하라. 해당 수열은 항상 존재한다.\n\n \n0≤x≤M\n$0 \\leq x \\leq M$인 모든 정수 \nx\n$x$에 대해, \n∑k=lrAk=x\n$\\sum^r_{k=l} A_k = x$인 정수 \nl\n$l$, \nr\n$r$이 존재한다. \n(1≤l≤r≤N)\n$(1 \\leq l \\leq r \\leq N)$ \n \nx>M\n$x > M$인 모든 정수 \nx\n$x$에 대해, \n∑k=lrAk=x\n$\\sum^r_{k=l} A_k = x$인 정수 \nl\n$l$, \nr\n$r$이 존재하지 않는다. \n(1≤l≤r≤N)\n$(1 \\leq l \\leq r \\leq N)$ \n \n1≤i≤N\n$1 \\leq i \\leq N$인 모든 정수 \ni\n$i$에 대해, \n0≤Ai≤109\n$0 \\leq A_i \\leq 10^9$이다.\n수열 \nA\n$A$의 모든 원소는 정수이다."},{"problemId":"30664","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMuita gente sonha em ganhar dinheiro fácil. Algumas pessoas tentam fazer isso através da loteria. Compram jogos como as “raspadinhas” e bilhetes de loteria aguardando sorteios multimilionários.\n\nGilmar, um rapaz muito malandro, decidiu usar seus conhecimentos matemáticos para tentar aumentar suas chances nestes jogos de sorte. Ele comprou vários bilhetes de um mesmo tipo de raspadinha e analisou as cartelas, até que percebeu uma propriedade muito curiosa: cada raspadinha tinha impresso um número identificador do cartão que permitia a ele ter noção das chances de ser premiado.\n\nDe cada 10 cartões que comprou na banca, aproximadamente 1 ou 2 vinham premiados de alguma forma: no mínimo uma outra raspadinha grátis ele ganhava, ou um prêmio simbólico em dinheiro. Quando aplicou seu método para escolher que cartões comprar, percebeu que de cada 10 cartões, em média 8 continham algum prêmio!\n\nComo a tarefa é muito cansativa para ser feita manualmente, ele pensou que você, amigo de longa data, poderia ajudá-lo com um programa que, dado o número identificador do cartão, diz se ele faz parte do conjunto de cartões com maior chance de prêmio. O truque é procurar os cartões cujo número identificador seja múltiplo de 42. Você está apto a ajudar seu colega nesta empreitada?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30641","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t회문이란 앞에서부터 읽으나 뒤에서부터 읽으나 똑같은 문자열이다. 예를 들어 “MADAM”, “RACECAR”, “K”는 회문이고, “MAMA”, “IGRUS”는 회문이 아니다.\n\n호영이와 아란이가 영어로 회문 끝말잇기를 하려고 한다. 사전에 없는 단어라도 영어 알파벳(A, B, C, ..., Z의 총 26가지 문자)으로 구성된 회문이기만 하면 사용할 수 있다. EYE → ECWWCE → EEVEE → ... 물론 이러면 게임이 영원히 끝나지 않으므로, 길이가 L이상 U이하인 회문만 사용하기로 했다.\n\n게임은 호영이가 먼저 시작하며, 둘은 항상 회문 끝말잇기에서 승리하기 위해 최선을 다한다. 게임이 끝난 뒤 승자는 누구인지, 사용된 단어는 총 몇 개인지 알아보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30592","content":"문제\n\nВ связи с некоторыми событиями Марго необходимо покинуть Мегабайтбург. Известно, что этот город представляет собой прямоугольную матрицу, длина которой равна \nM\n$M$, а высота -- \nN\n$N$. Клетки матрицы бывают двух типов: свободные (обозначаются символом '\n.\n$.$') и занятые стеной (обозначаются символом '\n#\n$\\#$'). Марго может за один ход переместиться из клетки \n(i,j)\n$(i, j)$ в любую из клеток \n(i−1,j)\n$(i - 1, j)$, \n(i+1,j)\n$(i + 1, j)$, \n(i,j−1)\n$(i, j - 1)$, \n(i,j+1)\n$(i, j + 1)$. Также Марго может не более \nK\n$K$ раз совершить в качестве хода Мегапрыжок: из клетки \n(i,j)\n$(i, j)$ попасть в любую из клеток \n(i−2,j)\n$(i - 2, j)$, \n(i+2,j)\n$(i + 2, j)$, \n(i,j−2)\n$(i, j - 2)$, \n(i,j+2)\n$(i, j + 2)$. При этом, вне зависимости от того, использовался ли Мегапрыжок или нет, Марго должен завершить свой ход в свободной клетке, которая находится внутри Мегабайтбурга. Общежитие, в котором сейчас находится Марго, расположено в клетке \n(dx,dy)\n$(d_x, d_y)$, а аэропорт, в который Марго хочет попасть, -- в клетке \n(ax,ay)\n$(a_x, a_y)$. Гарантируется, что общежитие и аэропорт находятся в разных свободных клетках. Сейчас нет времени на размышления, поэтому требуется Ваша помощь. Выясните, может ли Марго добраться от общежития до аэропорта."},{"problemId":"30575","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tPart of the training in arithmetic classes in Tomorrow Programming School consists of quick evaluation of a given arithmetic expression, in the head only. Fortunately, the expressions contain only positive integers, no brackets, and only three operations: addition, subtraction, and multiplication. Thus, the result is guaranteed to be an integer. Moreover, at introductory stages, a student has to evaluate only the parity of the result – is it odd or even?\n\nUnfortunately, the professor presenting the expressions on the blackboard is known to be quite absentminded. He often rewrites various numbers in an expression, even more times, while the students are already calculating. Typically, it changes the value of the whole expression, and the students have to start their calculations all over again.\n\nThe students decided to write a program which would help them. The input of the program will be the original expression, and the sequence of subsequent value changes in it. For each change, the program will calculate the value of the modified expression, possibly even without recalculating the whole expression from scratch.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30630","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n직각삼각형의 동생은 직각삼각이다!\n\n\n이 글에 깊은 감명을 받은 성우는 직각삼각형과 관련된 문제를 내기로 결심했다. 문제의 내용은 다음과 같다.\n\n 2$2$차원 평면 위에 놓인 검은색 점이 N$N$개 주어진다. 이 점들의 x$x$좌표와 y$y$좌표는 모두 양수이다. 이제 당신은 M$M$개의 질문에 각각 답해야 한다.\n\n\n\t각 질문마다 주어지는 점 (ai,bi)$(a_i, b_i)$에 대해, 점 (0,0)$(0, 0)$, 점 (ai,bi)$(a_i, b_i)$, 점 (ai,0)$(a_i, 0)$을 각 꼭짓점으로 갖는 삼각형 내부에 존재하는 검은색 점의 개수가 몇 개인지 구해야 한다. 단, 삼각형의 경계에 속하는 점은 삼각형의 내부에 속하는 것으로 생각한다.\n\n\n하지만 성우는 풀이를 생각하기 너무 귀찮았고, 그만 잠들어 버렸다. 성우 대신 당신이 이 문제를 풀어주자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30631","content":"문제\n\n \nN\n$N$명의 사람들이 \"렉시오\"라는 보드게임을 즐기고 있다. 참가자들은 일렬로 앉아 있으며, 왼쪽의 참가자부터 차례대로 \n1,2,⋯,N\n$1, 2, \\cdots, N$번으로 번호가 매겨진다.\n\n렉시오는 매 턴 모든 사람이 카드를 같은 개수로 나눠 갖고, 자신이 가진 카드를 규칙에 따라 제거하다가 누군가 한 명이 자신의 카드를 모두 제거하면 해당 턴이 끝나고 점수를 정산하는 방식으로 진행되는 게임이다. 원하는 만큼 턴을 즐기고 최종 점수가 가장 높은 사람이 승리하는 게임인데, 한 턴의 점수를 정산하는 방식이 독특하다.\n\n각 턴이 끝날 때 자신보다 카드가 적은 사람이 있으면 그 사람에게 카드 개수의 차이만큼 점수를 전달한다. 따라서 점수가 같은 쌍을 제외한 모든 쌍의 참가자들이 점수를 주고받게 된다. 규칙대로 점수를 정산하면 점수를 전달하는 횟수가 워낙 많아서 점수를 정산하는 방식을 최적화하려고 한다. 사람들은 적어도 다음의 네 가지 조건에 맞는 정산 방식을 좋은 정산 방식이라고 부르기로 했다.\n\n결과적으로 각 참가자가 얻거나 잃은 점수는 규칙에 따라 직접 점수를 주고받았을 때와 같아야 한다.\n임의의 한 참가자가 이웃한 참가자에게 점수를 전달하는 것이 가능하다.\n참가자 한 쌍을 골라서 한 참가자가 다른 참가자에게 점수를 전달할 수 있다. 이런 전달은 전체 정산 과정에서 최대 한 번 가능하다.\n위 조건들을 만족하면서 점수를 전달하는 행위를 최소화해야 한다. 다시 말해서, 조건을 만족하면서 점수를 전달하는 행위가 더 적은 정산 방식이 있으면 좋은 정산 방식이 아니다.\n\n예를 들어 \nA\n$A$, \nB\n$B$, \nC\n$C$의 \n3\n$3$명이 렉시오를 해서 턴이 종료했다고 하자. 턴이 끝나고 남은 카드가 각각 \n10\n$10$, \n5\n$5$, \n0\n$0$개라면 \nA\n$A$는 \nB\n$B$에게 \n5\n$5$점, \nC\n$C$에게 \n10\n$10$점을 줘야 하고, \nB\n$B$는 \nC\n$C$에게 \n5\n$5$점을 줘야 한다. \n1\n$1$번 항목에 따라 어떤 과정을 통해서 전달하든 \nA\n$A$는 \n15\n$15$점을 잃고 \nB\n$B$는 점수를 잃지 않고 \nC\n$C$는 \n15\n$15$점을 얻기만 하면 된다.\n\n \nA\n$A$, \nB\n$B$, \nC\n$C$가 순서대로 앉아 있다고 했을 때, \nA\n$A$가 \nB\n$B$에게 \n15\n$15$점을 주고, \nB\n$B$가 \nC\n$C$에게 \n15\n$15$점을 주면 점수를 \n2\n$2$번 전달해서 정산을 마칠 수 있다.\n\n그런데 \n3\n$3$번 항목에 쓰여있는 대로 참가자 쌍 \n(A,C)\n$(A, C)$를 선택해 \nA\n$A$가 \nC\n$C$에게 \n15\n$15$점을 전달하면 한 번에 점수를 정산할 수 있다. 더 적은 횟수로 정산할 수는 없으니 \n3\n$3$번 항목에 따라 좋은 정산 방식은 한 번에 점수를 정산하는 방식이 된다.\n\n턴이 끝나고 남아있는 카드의 개수가 참가자들이 앉아있는 순서대로 주어진다고 할 때, 좋은 정산 방식의 점수 전달 횟수를 구해보자."},{"problemId":"30593","content":"문제\n\nУ Вадима есть одномерная доска для игры в Snakes&Snakes, состоящая из \nN\n$N$ клеток, которые пронумерованы от \n1\n$1$ до \nN\n$N$ слева направо. Изначально в клетке \n1\n$1$ стоит фишка. Цель игры --- попасть в клетку \nN\n$N$. Каждой клетке (кроме клеток \n1\n$1$ и \nN\n$N$) соответствует некоторое целое неотрицательное число \npi\n$p_i$. Если \npi=0\n$p_i = 0$, то \ni\n$i$-я клетка пустая. В противном случае в клетке стоит телепорт, отправляющий фишку влево. Гарантируется, что клетки \n1\n$1$ и \nN\n$N$ пустые.\n\nВ Snakes&Snakes ход совершается по следующему алгоритму.\n\nИгрок бросает шестигранный кубик. Если ему выпало число \nk\n$k$, то он двигает фишку на \nk\n$k$ клеток вправо, при этом фишка не может оказаться правее клетки \nN\n$N$. Другими словами, если фишка стояла в клетке \ni\n$i$, то она оказывается в клетке \nmin(i+k,N)\n$min(i + k, N)$;\nЕсли фишка оказалась в клетке \nN\n$N$, то игрок побеждает;\nЕсли фишка оказалась в \ni\n$i$-й клетке, которая не содержит телепорт (\npi=0\n$p_i = 0$), то происходит переход к шагу \n4\n$4$. В противном случае фишка перемещается влево на \npi\n$p_i$ клеток (в клетку с номером \ni−pi\n$i - p_i$), после чего повторяется шаг \n3\n$3$;\nЕсли игрок на шаге \n1\n$1$ выбросил на кубике \n6\n$6$, то он может повторить все действия алгоритма, начиная с шага \n1\n$1$, не прекращая текущий ход. В противном случае текущий ход игрока завершается.\n\nМарго интересуется у Вадима, за какое минимальное количество ходов можно победить в этой игре (даже если это маловероятно). Помогите Вадиму ответить на данный вопрос."},{"problemId":"30642","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIGRUS는 Inha Group of Research for Unix Security의 약자로, 2000년부터 시작된 정통처 산하 컴퓨터 학술 자치회이다. IGRUS의 동아리방은 사실 복층 구조로, 1층부터 N층까지 총 N개의 층이 있다. 홀수 층에는 몸집이 큰 동물을 위한 화장실이, 짝수 층에는 몸집이 작은 동물을 위한 화장실이 있다.\n\n인하대학교의 마스코트 안뇽이는 용이고 인덕이는 오리다. 용은 몸집이 큰 동물이며, 오리는 몸집이 작은 동물이라고 하자. IGRUS 동방에 방문한 안뇽이와 인덕이를 위해 “(<안뇽이> or <인덕이>) 가 <K>층에 있을 때, 자신의 몸집에 맞는 가장 가까운 화장실은 몇 층일까?” 라는 질문에 답하는 프로그램을 만들어보자.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30576","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tNot so long ago, a rare type of meteorite, called mesosiderite, fell on the premises of Tomorrow Programming School and was immediately collected. The school was given the honour of organizing the cutting of the meteorite into smaller pieces, which will be exported to laboratories around the world. Swiss Precision Cutting Agency (SPCA) was hired to do the cutting job.\n\nSPCA operates various cutting machines. Each machine can cut the meteorite or a piece of the meteorite into a number of smaller pieces, each of which weighs exactly the same. The number of resulting smaller pieces is the characteristic of that particular machine and cannot be changed. SPCA is quite sure that each of their machines can process any number of meteorite pieces in one day. A piece of meteorite produced by a machine cut cannot be cut again by the same machine in the same day, because of possible cross-contamination and ensuing loss of precision.\n\nEach day, there is exactly one cutting machine available. The order of available machines in successive days is fixed. SPCA created a list of days in the near future and assigned to each day the characteristic of the machine available that day. SPCA calls this list a cutting schedule. The cutting process will take one or more days to complete, before a satisfactory number of meteorite pieces is obtained.\n\nThere are a few additional rules governing the cutting and exporting process.\n\n\n\tAll laboratories demand that they all receive the same total weight of meteorite pieces.\n\tNo meteorite piece can be shared among laboratories.\n\tEach piece of the meteorite must go to some laboratory, there should be no leftovers.\n\tAt the end of each day in the cutting process, the weights of all meteorite pieces must be the same, to simplify cutting management.\n\tThe whole cutting process has to be completed in a period of successive days, which should not be interrupted by any day without cutting.\n\n\nThe school has been given the cutting schedule and it is up to them to choose when to perform the actual cutting. A cutting period can be any sequence of consecutive days in the cutting schedule. Clearly, some cutting periods are favourable and some are not. A cutting period is favourable if a cutting process that starts in the first day of the cutting period would produce meteorite pieces, which satisfy the laboratories’ demands at the end of the last day of the cutting period.\n\nThe school needs a program that can decide for a cutting period whether it is favourable or not.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30612","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou're taking part in the development of a novel simulation system that is developed to help with extreme rain in mountainous areas. There have been many occasions of extreme weather recently, and there is a need to calculate the amount of water that will form between mountaintops in the worst-case scenario. This program will be used by experts to aid in predicting the outcome of future extreme weather events.\n\nThe program will accept a list of heights that result from discrete measurements from the corresponding mountain ranges. A lake can only form if it's surrounded by higher mountains, and its maximum height will be the minimum of the two surrounding mountains. If a height of 0 is given, it represents the ground. A lake cannot form if any of its parts would be connected to the ground; it would quickly drain otherwise. For each lake formed, its size is the number of 'discrete blocks' that it occupies between the mountaintops.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30594","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tВчера Вадим нашёл на дороге бинарное дерево a$a$ с корнем в 0 из N$N$ вершин. Однако любимым у него является бинарное дерево b$b$ с корнем в 0 из N$N$ вершин. Поэтому он решил преобразовать дерево a$a$ в дерево b$b$, используя следующую операцию:\n\n\n\tВыбирается произвольная вершина v$v$, кроме корня. Её поддерево, включая саму вершину, переподвешивается за другую вершину u$u$, которая не принадлежит выбранному поддереву. Результатом должно получиться бинарное дерево с корнем в 0.\n\n\nВадим уверен, что с помощью подобной операции возможно привести найденное бинарное дерево в изоморфное его любимому, используя не более, чем N$N$ преобразований. Помогите ему найти последовательность этих преобразований.\n\nНапомним, что бинарное дерево --- это такое дерево, что каждая вершина является предком не более, чем 2 других вершин, у корня предка нет. Два корневых бинарных дерева называются изоморфными, если:\n\n\n\tЭти два дерева состоят из одной вершины;\n\tКоличество детей у корней этих деревьев одинаковое, поддерево каждого ребёнка первого изоморфно поддереву какого-то ребёнка второго и поддерево каждого ребёнка второго изоморфно поддереву какого-то ребёнка первого.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30632","content":"문제\n\nМама купила мальчику Васе \nn\n$n$-мерную шоколадку, представляющую собой \nn\n$n$-мерный куб, у которого длина каждой стороны равна \n1\n$1$. У шоколадки намечено разделение на дольки. По \ni\n$i$-му измерению ее можно разделить гиперплоскостями на \nai\n$a_i$ равных частей. Таким образом, шоколадка делится суммарно на \na1⋅a2⋅a3⋅…⋅an\n$a_1 \\cdot a_2 \\cdot a_3 \\cdot \\ldots \\cdot a_n$ долек, у каждой дольки длина по \ni\n$i$-му измерению равна \n1ai\n$\\frac{1}{a_i}$, соответственно объём каждой дольки равен \n1a1a2⋯an\n$\\frac{1}{a_1 a_2 \\cdots a_n}$.\n\nВася с друзьями хочет разрезать шоколадку, чтобы получилось хотя бы \nk\n$k$ кусочков, при этом Вася хочет максимизировать объем наименьшего из них. Резать шоколадку можно только по местам соединения долек, причём каждый разрез должен проходить через всю шоколадку вдоль некоторой гиперплоскости, участвующей в образовании долек. Только сделав все разрезы, Вася разбирает шоколадку на кусочки.\n\nБолее формально, Вася хочет выбрать числа \nb1,b2,…,bn\n$b_1, b_2, \\dots, b_n$ (\n1≤bi≤ai\n$1 \\le b_i \\le a_i$) --- количество частей на которые Вася разрежет шоколадку вдоль каждого измерения. Должно выполняться условие \nb1⋅b2⋅…⋅bn≥k\n$b_1 \\cdot b_2 \\cdot \\ldots \\cdot b_n \\ge k$, чтобы получить не менее \nk\n$k$ кусочков после всех разрезаний. Можно заметить, что при оптимальном разрезании с такими параметрами, минимальный кусочек будет содержать \n⌊a1b1⌋⋯⌊anbn⌋\n$\\lfloor \\frac{a_1}{b_1} \\rfloor \\dotsm \\lfloor \\frac{a_n}{b_n} \\rfloor$ долек, а его объём будет равен \n⌊a1b1⌋⋯⌊anbn⌋⋅1a1a2⋯an\n$\\lfloor \\frac{a_1}{b_1} \\rfloor \\dotsm \\lfloor \\frac{a_n}{b_n} \\rfloor \\cdot \\frac{1}{a_1 a_2 \\cdots a_n}$.\n\nВася хочет получить максимальное возможное значение объема минимального кусочка, умноженного на \nk\n$k$, то есть он хочет максимизировать число \n⌊a1b1⌋⋯⌊anbn⌋⋅1a1a2⋯an⋅k\n$\\lfloor \\frac{a_1}{b_1} \\rfloor \\dotsm \\lfloor \\frac{a_n}{b_n} \\rfloor \\cdot \\frac{1}{a_1 a_2 \\cdots a_n} \\cdot k$. Помогите ему в этом."},{"problemId":"30595","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tНа планете Мидав очень близок конец света. Как известно, эта плоская планета, которую можно представить как бесконечную плоскость с декартовыми координатами. На этой планете есть Q$Q$ поселений.\n\nВ нулевой день на Мидаве случилось заражение. Оно представляет из себя выпуклый многоугольник на N$N$ вершинах. Каждый день площадь заражения меняется неизвестным образом, но для каждого дня c номером i>0$i > 0$ верно следующее:\n\n\n\tЕсли в i$i$-й день заражена любая точка на расстояние d$d$ от исходного многоугольника, то заражены и все остальные точки на расстоянии не большем d$d$ от исходного многоугольника;\n\tПусть Sk$S_{k}$ --- площадь заражения в k$k$-й день. Тогда верно Si=2⋅Si−1$S_i = 2 \\cdot S_{i-1}$.\n\n\nЕсли какое-то поселение окажется внутри или на границе заражения, то все живые организмы в нём сразу же вымрут. Для каждого поселения планеты Мидав осталось совсем немного времени, поэтому ответьте, какой день (включая и нулевой) окажется для поселения последним.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30577","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tRobotic labs in Tomorrow Programming School produce minirobots in big numbers. To perform various complex tasks, robots often form teams. Before the task begins, a team measures its strength. The robots in the team select one robot among themselves to be the team captain. Next, the robots arrange themselves in one row behind the captain. Each robot refers to the captain the value of the greatest common divisor of its own height and the height of the neighbour robot standing directly in front of it. That value predicts the strength of the bond between these robots when they perform the task. The captain totals all received values and claims the total to be the strength of the team.\n\nThe height of each robot is always expressed in centimeters and it is an integer ranging from 1 to 20. The strength of the team depends on the order of the robots in the row behind the captain. Also note, that a selection of the captain also influences the team strength. Any robot in a team can be selected as its captain.\n\nThe robots in a team always tend to maximize the team strength by selecting an appropriate captain and positioning themselves appropriately in the row. However, that is not an easy exercise for the robots, because checking all their possible arrangements is often beyond their computational scope.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30613","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tGeorge is an aspiring meteorologist who is passionate about analyzing temperature data. He is tasked with finding the largest temperature increase that occurs within specific time frames. Your task is to help George develop an efficient algorithm to calculate such temperature increases for any time interval.\n\nGiven a sequence of daily temperature measurements over a period of n days, George is interested in finding the greatest temperature increase that occurs within a window of m days. In other words, he wants to identify the maximum temperature difference between two days, where the second day occurs no more than m days after the first one.\n\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30643","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n너비가 W인 강에 목수가 나무토막으로 이루어진 나무 다리를 지으려 한다.\n\n너비가 W인 강을 건너기 위한 나무 다리는 위 그림과 같이 가로 길이가 2, 세로 길이가 1인 W개의 나무토막을 엮어서 만들며, 원활한 통행을 위해 위아래로 인접한 나무토막과 가로로 겹치는 구간의 길이가 1 또는 2여야 한다.\n\n자기가 짓는 나무 다리가 최대한 커보이기를 바란 목수는 나무 다리의 왼쪽 끝과 오른쪽 끝 사이의 거리가 안전 상 최대 한도인 L이 되도록 나무 다리를 만들기로 할 때, 목수가 지을 수 있는 서로 다른 나무 다리 모양의 개수를 출력하는 프로그램을 작성하시오.\n\n이때, 두 다리가 있을 때 지은 위치가 다르더라도 다리 하나를 왼쪽이나 오른쪽으로 평행이동시켜 일치한다면 두 다리는 같은 모양의 다리이다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30633","content":"문제\n\nБерляндия --- это огромная страна, состоящая из \nn\n$n$ городов. Дорожную сеть Берляндии можно представить в виде корневого дерева, то есть всего в стране \nn−1\n$n - 1$ дорога, и от любого города можно добраться до любого другого ровно по одному пути, если не посещать никакой город дважды. Для удобства представления страны, для каждого города \ni\n$i$ зафиксирован город \npi\n$p_i$, равный первому городу, в который надо ехать из города \ni\n$i$, чтобы добраться до города \n1\n$1$. Иными словами, город \npi\n$p_i$ равен предку города \ni\n$i$, если дерево подвесить за город \n1\n$1$.\n\nВ каждом городе Берляндии работает по одной заправке. У заправок особое ценообразование, и для каждой заправки зафиксирован диапазон цен, за которые там готовы продавать бензин. Заправка в городе с номером \ni\n$i$ готова продавать бензин по любой цене от \nli\n$l_i$ до \nri\n$r_i$ включительно.\n\nКороль Берляндии --- примерный семьянин, и в течение \nm\n$m$ лет каждый год у него рождалось по двое сыновей. Дети короля с раннего детства участвуют в государственных делах, и в конце каждого года они проверяют честность цен на бензин. С самого рождения дети короля, которые рождены в год \ni\n$i$, отвечают за проверку цен на бензин на путях от города \nai\n$a_i$ до города \nbi\n$b_i$ и от города \nci\n$c_i$ до города \ndi\n$d_i$ соответственно.\n\nПроверка происходит следующим образом: оба ребенка одновременно начинают путь от городов \nai\n$a_i$ и \nci\n$c_i$ соответственно. Первый сын короля, рождённый в год \ni\n$i$, двигается по пути от города \nai\n$a_i$ до города \nbi\n$b_i$, а второй --- от города \nci\n$c_i$ до города \ndi\n$d_i$. Дети проверяют, что цена на бензин в городе \nai\n$a_i$ совпадает с ценой на бензин в городе \nci\n$c_i$. Далее они проверяют, что цена на бензин во втором городе на пути от \nai\n$a_i$ до \nbi\n$b_i$ совпадает с ценой во втором городе на пути от \nci\n$c_i$ до \ndi\n$d_i$. Далее они повторяют то же самое для пары третьих городов на их путях и так далее. В конце они проверяют, что цена на бензин в городе \nbi\n$b_i$ совпадает с ценой на бензин в городе \ndi\n$d_i$. Гарантируется, что длина пути от города \nai\n$a_i$ до города \nbi\n$b_i$ совпадает с длиной пути от города \nci\n$c_i$ до города \ndi\n$d_i$.\n\nЗаправки должны строго подчиняться законам, а поэтому все проверки цен на бензин не должны выявлять нарушений. Помогите заправкам Берляндии выяснить, сколькими способами они могут выставлять цены на бензин в течение \nm\n$m$ лет. Другими словами, для каждого \ni\n$i$ от \n1\n$1$ до \nm\n$m$ посчитайте, сколькими способами можно выставить цены на бензин во всех заправках, чтобы после рождения первых \ni\n$i$ пар детей короля, все их проверки не выявили нарушений, а на любой заправке цена находилась в допустимом диапазоне цен. Так как число таких способов может быть большим, посчитайте ответ по модулю \n109+7\n$10^9 + 7$."},{"problemId":"30614","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are developing a robot that helps in storing containers that have arrived at ports before sending them to ships. These robots are responsible for handling these containers using limited space. Specifically, the space can fit multiple containers one over the other, but not side by side, as depicted in the figure.\n\nWhile operating, the robot performs two actions:\n\n\n\tPutting a container in storage.\n\tTaking a container from storage.\n\n\nThere are 26 types of containers in this port, each one characterized by a letter of the Latin alphabet. Each time an action is performed, the robot logs the type of the container in lowercase when storing a container and in uppercase when taking a container from storage. Your task is to check if the logs produced by a robot indicate stable operation. In stable operation, the logged containers of action type 2 exist in storage and are in the uppermost position. Moreover, in stable operation, we always end with empty storage.\n\n\n\nAs an example, consider a scenario in which the robot produces the log: 'cdDC'. Here, we have a stable operation of the robot, as the robot initially places 'c' and then 'd' (indicating that 'd' is in the upper position). The robot then takes the first 'd' out and, finally, takes out 'c'. On the other hand, an unstable operation would result from the log: 'cdCD', since the robot cannot take 'c' before taking out 'd'.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30634","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tСовсем недавно в Берляндии была построена новая дорожная сеть. Между некоторыми парами городов есть односторонние дороги, i$i$-я из которых ведёт из города ui$u_i$ в город vi$v_i$, а её длина равна wi$w_i$. Два главных города Берляндии имеют номера a$a$ и b$b$.\n\nКороль Берляндии очень любит свою страну. В частности, он обожает подсчитывать всякие характеристики в ней. Он называет красотой пути побитовое исключающее ИЛИ длин всех дорог на этом пути. А красотой своей страны он называет побитовое исключающее ИЛИ красот всех путей из города a$a$ в город b$b$. Обратите внимание, что таких путей может быть бесконечно много, и они могут проходить через один и тот же город несколько раз.\n\nКороль хочет узнать, чему равна красота его страны, а поэтому он обратился к вам за помощью и просит вас посчитать это значение или сказать, что красоту страны посчитать невозможно.\n\nПобитовым исключающим ИЛИ множества чисел называется побитовое исключающее ИЛИ всех ненулевых чисел в этом множестве. Если в множестве бесконечно много ненулевых чисел, то побитовое исключающее ИЛИ посчитать невозможно. \\\n\nПобитовое исключающее ИЛИ (или побитовое сложение по модулю два) --- это бинарная операция, действие которой эквивалентно применению логического исключающего ИЛИ к каждой паре битов, которые стоят на одинаковых позициях в двоичной записи операндов. Иными словами, если соответствующие биты операндов различны, то соответствующий двоичный разряд результата равен 1; если же биты одинаковые, то двоичный разряд результата равен 0. Например, если x=10910=11011012$x = 109_{10} = 1101101_2$, а y=4110=1010012$y = 41_{10} = 101001_2$, то их побитовое исключающее ИЛИ равно x⊕y=10001002=6810$x \\oplus y = 1000100_2 = 68_{10}$.\n\nПутём в графе называется последовательность вершин, в которой любые две последовательные вершины соединены ребром.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30596","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAlex has four sticks with positive integer lengths a1$a_1$, a2$a_2$, a3$a_3$, and a4$a_4$ (a1≤a2≤a3≤a4$a_1 \\le a_2 \\le a_3 \\le a_4$).\n\nShe wants to place them on a plane in such a way that each stick is parallel to one of the two coordinate axes, and the area enclosed by these sticks is as large as possible.\n\nFind this maximum enclosed area.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30578","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tHamster Joe is one of the beloved pets of Tomorrow Programming School. The biology department entrusted the school’s “Central Robot Endowed with Smashing AI” (CRESAI) with the job of projecting and building a playpen for Joe. This playpen will be situated in a newly designated animal space within the department. This space is a flat horizontal area, tiled with uniformly sized square tiles of unit side length, that come together to create a rectangular grid marked by grooves where tiles meet. The playpen will be bordered by unit-length wall segments, each rising from the groove between two adjacent tiles, ensuring that both ends of every segment align with tile corners.\n\nJoe can move from his current tile to any adjacent tile if the tiles are not separated by a wall segment. Joe cannot jump or crawl over any wall segment and Joe also cannot squeeze himself between two adjacent wall segments, or smash himself through them. Thus, when the locations of the wall segments are chosen appropriately, they form an enclosure, from which Joe would not be able to escape.\n\nSurprisingly, CRESAI was not up to the task. It positioned each wall segment of unit length correctly, in the sense that each segment’s base now sits in a groove and its ends coincide with the corners of a tile. However, it seems that most of the wall segments were positioned randomly so that the existence of any enclosure of any shape is not guaranteed.\n\nTo fix the problem at least temporarily, biologists are looking for the minimum number of additional wall segments of unit length, which, when installed at appropriately selected unused grooves, would create an enclosure of any shape or size. In the resulting layout, some of the wall segments originally installed by CRESAI may remain useless.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30579","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tDepartment of successful computing in Tomorrow Programming School is famous for stockpiling large quantities of desks and monitors in their labs, it serves well to the whole community.\n\nAny time a meeting is being held in a lab, the number of desks and monitors in it should be sufficient to serve all participants. In case of necessity, additional desks and/or monitors may be borrowed from neighbouring labs. In extreme cases, all desks and all monitors from all neighbouring labs may be brought in. Thus, available desks and monitors in a lab are exactly those desks and monitors which are in the lab itself and in all its neighbour labs. Desks or monitors are never transported from more distant labs, it is deemed ineffective and accident prone. After a meeting, all borrowed desks and monitors are returned back to their original labs, before any other meeting starts.\n\nThe desired configuration for a meeting is when the number of available desks and monitors in the lab is equal. Often, the number of available desks in a lab is either smaller or bigger than the number of available monitors, and that creates specific problems for the maintenance staff each time.\n\nThe inflow of desks and monitors to the department is rapid. Frequently a shipment of desks and monitors arrives to the department and its contents is added to various labs. It is added immediately or immediately after the end of the current meeting.\n\nTo plan the meetings, and equipment maintenance as well, it is important to know how many desks and monitors are available in any lab at any moment. The department needs a program that can process two kinds of queries. The first kind of query specifies a number of desks or monitors that have just been added to a particular lab. The second kind of query asks for a relation between the number of available desks and monitors in a particular lab.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30615","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tUnfortunately, this year, you somehow managed to make your math teacher at school really angry with you. He wants to take his revenge but without raising any suspicion. After some thought, he comes up with a plan: he will hand you a list of very boring math exercises that you'll have to solve during the school's Christmas break...\n\nSo he comes up with the following exercise for you:\n\nLet x1, x2, ..., xn be variables.\n\nYou're given an ordered list of constraints (equations) of the form xi = xj or xi = -xj. The constraints are transitive, so if you're given xi = xj and xj = xk, then xi = xk holds true even if not explicitly given in the list.\n\nThen for each constraint between two variables xi and xj, you must mark it with:\n\n\n\tThe letter N if it's a new constraint, meaning that xi and xj are so far not constrained in any way (neither directly or transitively).\n\tThe letter E if it's an existing constraint, meaning that no new information is added (the constraint existed either directly or transitively).\n\tThe letter C it's a contradicting constraint, meaning that it's impossible to fulfill the constraint given the previous ones. If you come across a contradiction the exercise ends and you don't mark the rest of the constraints.\n\n\nIn addition, we consider that a constraint xi = xi is always existing and a constraint xi = -xi is always contradicting.\n\nThe exercise is difficult, but your teacher is kind enough to give an example with explanations:\n\nLet's say we have N = 4 variables and the following M = 7 constraints:\n\n\n\tx1 = x2\n\tx3 = -x4\n\tx1 = -x4\n\tx1 = x3\n\tx2 = -x4\n\tx2 = -x3\n\tx1 = -x4\n\n\nThey're marked as follows:\n\n\n\tIs a new constraint, as x1 and x2 weren't bound in any way. (N)\n\tIs a new constraint, as x3 and x4 weren't bound in any way. (N)\n\tIs a new constraint, as x1 and x4 weren't bound in any way. (N)\n\tIs an existing constraint due to the transitive property from constraints 2 and 3: From x1 =-x4 and -x4 = x3 we can get x1 = x3. (E)\n\tIs an existing constraint too, by using transitivity on constraints 1 and 2. (E)\n\tIs a contradiction, because applying the transitive property at constraints 1 and 4 gives us x2 = x3 which cannot hold at the same time with x2 = -x3. (C)\n\n\nSince we've reached a contradiction, the exercise stops.\n\nThe only thing that your teacher didn't knew is that you're really good at programming. In order to quickly solve all the exercises and get your time back, you've decided to write a program that automatically solves any instance of this exercise.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30665","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA Empresa Rural Internacional (ERI) está buscando expandir seus negócios. Para isso, ela precisa encontrar uma nova cidade para instalar um novo centro de distribuição. Entretanto, como algum centro pode ficar inoperante, como aconteceu no último verão devido 'as chuvas, ela quer se certificar de que não ficará sem distribuir seus produtos caso alguma cidade fique incomunicável. Para isso, ao invés de instalar seu novo centro de distribuição em uma única cidade, ela escolherá duas cidades vizinhas, de forma a garantir que haja redundância, caso algum problema ocorra com uma das localidades.\n\nSimonal, diretor de logística da ERI, conhece bem a região e seus possíveis clientes. Dada uma cidade, Simonal sabe a área de alcance de sua empresa, ou seja, as cidades alcançadas caso um novo centro de distribuição seja instalado nessa cidade. Naturalmente, a área de alcance de uma cidade sempre inclui ela mesma. A fim de que a redundância desejada seja satisfeita, as duas cidades candidatas a receber o novo centro de distribuição devem ter a mesma área de alcance.\n\nVocê, estagiário buscando um aumento de salário para comprar a mais nova expansão do seu MMORPG favorito, quer agradar o seu chefe, Dionísio Cabeço Fechantes, também conhecido como Dudu, e, usando os dados obtidos com Simonal, quer mostrar o quão bom você é em computação e contar de quantas formas distintas estas cidades podem ser escolhidas.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30644","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t숫자가 적힌 종이로 된 띠가 있다. 띠에는 N개의 서로 다른 수가 적혀 있다.\n\n\n\n이때, 이 띠에 적힌 수 사이에 가위질을 하여 하나의 띠를 여러개의 띠로 분리할 수 있으며, 여러개의 띠가 있을 때 각 띠간의 순서를 자유롭게 바꿀 수 있다.\n\n\n\n또한, 각 띠에 대해 띠에 적힌 수를 모두 지우고 원래 적혀있던 수의 역순으로 수를 적을 수 있다.\n\n\n\n띠에 적힌 수가 주어질 때, 띠에 적힌 수를 왼쪽부터 오름차순으로 정렬된 상태로 표시하기 위해 필요한 최소한의 가위질 횟수를 구하는 프로그램을 작성하시오.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30597","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBarbara has always known how to represent integers in the decimal numeral system (base ten), using digits 0,1,2,…,9$0, 1, 2, \\ldots, 9$. Recently she has learned that for any integer base b≥2$b \\ge 2$, she can also represent integers in base b$b$, using symbols with values from 0$0$ to b−1$b-1$, inclusive, as digits.\n\nBarbara's favorite digit is 0$0$. Luckily, it looks the same in all bases.\n\nToday Barbara is playing with a positive integer n$n$. Now she wonders: in what bases does the representation of n$n$ contain the biggest number of zeros? Help her to find all such bases.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30635","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tМальчик Витя очень любит слушать музыку. Он пристально следит за обновлениями своих любимых групп, поэтому знает, что в эту пятницу должны быть выпущены n$n$ альбомов, i$i$-й из которых содержит ki$k_i$ треков. Разумеется, Витя, как самый преданный фанат, уже послушал все треки, которые должны выйти в ближайшее время, и знает, что в i$i$-м альбоме крутость j$j$-го трека равна ai,j$a_{i,j}$.\n\nУ Вити есть подруга Маша, которую он очень хочет пригласить на фестиваль, где выступают его любимые группы. Однако для того, чтобы подруга согласилась, она должна сначала оценить вышедшие новинки. Витя знает, что, если Маша послушает трек, который был круче всех прошлых, она получит 1 единицу впечатления. К сожалению, альбомы можно слушать только целиком, не меняя песни в них местами.\n\nПомогите Вите найти такой порядок альбомов, чтобы впечатление Маши оказалось как можно больше, и она точно сходила вместе с ним на фестиваль.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30616","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe NIS spy network has decided to change the phone number from its headquarters every day as an extra security measure. To inform the spies about the new number, a sequence of words is given only to the spies (a total of 10 words), which they must then compare to a sequence of words from a newspaper, word by word. The comparison of words is done by finding the minimum number of operations required to make the first word identical to the second word. The possible operations that can be performed on the first word are the following:\n\n\n\tOperation 1 (INSERT): Insert any character before or after any index of str1\n\tOperation 2 (REMOVE): Remove a character from str1\n\tOperation 3 (REPLACE): Replace a character at any index of str1 with some other character.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30666","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tUm número k é primo se e somente se k ≥ 2 e k tem exatamente dois divisores, 1 e k. Dois primos k e l são consecutivos se e somente se k < l e não existe um primo p tal que k < p < l.\n\nDado n, dizer se n pode ser obtido como a soma de q primos consecutivos, onde q é primo.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30636","content":"문제\n\nФилипп очень любит задачечки на строчечки. Он уже решил все известные ему задачечки, но этого ему было мало. Поэтому Филипп решил придумать свою собственную задачечку.\n\nДля этого он взял строку \nt\n$t$ и набор из \nn\n$n$ строк \ns1\n$s_1$, \ns2\n$s_2$, \ns3\n$s_3$, \\ldots, \nsn\n$s_n$. У Филиппа есть \nm\n$m$ запросов, в \ni\n$i$-м из них Филипп хочет взять подстроку строки \nt\n$t$ с \nli\n$l_i$-го по \nri\n$r_i$-й символ, и посчитать число её подстрок, которые совпадают с какой-то строкой из набора. Более формально, Филипп хочет посчитать число пар позиций \na\n$a$, \nb\n$b$, таких что \nli≤a≤b≤ri\n$l_i \\le a \\le b \\le r_i$, и подстрока строки \nt\n$t$ с \na\n$a$-го по \nb\n$b$-й символ совпадает с некоторой строкой \nsj\n$s_j$ из набора.\n\nПодстрокой строки \nt\n$t$ с \na\n$a$-го по \nb\n$b$-й символ называется строка, полученная из \nt\n$t$ путём удаления \na−1\n$a - 1$ символа из начала и \n|t|−b\n$|t| - b$ символами из конца, где \n|t|\n$|t|$ обозначает длину строки \nt\n$t$.\n\nФилипп уже решил эту задачу, а сможете ли вы?"},{"problemId":"30645","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n탁자 위에 인형을 전시하려고 한다. 탁자는 위에서 보았을 때 R개의 행과 C개의 열을 가진 R × C개의 칸을 가진 2차원 배열이며, 각 칸에 하나의 인형을 전시할 수 있다. 현재 전시할 수 있는 인형은 N개이며, 탁자 위에 N개의 인형을 모두 전시할 필요는 없다.\n\n탁자를 정면으로 보면 1행에 놓은 인형들이 맨 앞쪽에 있는 방향으로 보게 되는데, 같은 열에 있는 인형들에 대해 앞쪽 행에 인형을 놓은 경우 앞쪽 인형보다 뒤쪽 행에 있고 높이가 앞쪽 인형의 높이 이하인 인형은 앞쪽 인형에 가려져 보이지 않게 된다.\n\n이때, 탁자에 인형들을 적당히 배치했을 때 탁자의 정면 방향에서 보이는 인형의 개수의 최댓값을 구하는 프로그램을 작성하시오.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30598","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tColorful Village is a popular tourist destination. It has 2n$2n$ houses, numbered from 1$1$ to 2n$2n$. Every house has one of n$n$ colors, numbered from 1$1$ to n$n$. Coincidentally, for each of the n$n$ colors, exactly two houses are colored into it.\n\nThere are 2n−1$2n-1$ bidirectional roads in Colorful Village. Each road connects two different houses, and it is possible to reach any house from any other house using these roads.\n\nCatherine is planning a trip to Colorful Village. Her time is limited, so she wants to choose a set S$S$ of n$n$ houses to visit, with exactly one house of each color. However, since Catherine also needs to move between houses, the set of houses she is going to visit must be connected. In other words, it must be possible to reach any house in S$S$ from any other house in S$S$ using the roads, and only visiting houses in S$S$ on the way.\n\nHelp Catherine to find a connected set S$S$ of n$n$ houses, one of each color, or report that no such set exists.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30599","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tDmitry has recently learned a simple rule to check if an integer is divisible by 3. An integer is divisible by 3 if the sum of its digits is divisible by 3.\n\nLater he also learned that the same rule can be used to check if an integer is divisible by 9. An integer is divisible by 9 if the sum of its digits is divisible by 9.\n\nDmitry's elder sister Daria wants to trick him by showing that the same rule can be applied to any divisor d$d$. To do this, she wants to show Dmitry an example of a positive integer n$n$ such that n$n$ is divisible by d$d$, and the sum of the digits of n$n$ is also divisible by d$d$. Help her to find such a number.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30667","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t 1$1$부터 N$N$까지의 정수를 한 번씩만 사용하여 다음 조건을 만족하는 수열 A1$A_1$, A2$A_2$, ⋯$\\cdots$, AN$A_N$을 출력하시오.\n\n\n\t Ai+Ai+1$A_i + A_{i + 1}$은 제곱수이다. (1≤i<N)$(1 \\le i \\lt N)$ \n\t A1+AN$A_1 + A_N$은 제곱수이다.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30617","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t성우는 요즘 박자에 맞춰 두 개의 노브를 정확히 조작해야 하는 리듬 게임에 빠져 있다. 노브 시스템은 다음과 같은 특징을 가지고 있다.\n\n\n\t노브는 왼쪽 노브와 오른쪽 노브로 2$2$개가 있다.\n\t각 노브는 시계 방향 또는 반시계 방향으로 돌릴 수 있다. 노브를 돌리지 않고 가만히 둘 수도 있다.\n\n\n성우가 지금 플레이하는 곡의 길이는 T$T$이다. 이 곡의 t$t$번째 박자에서는 lt$l_t$의 값에 따라 왼쪽 노브를, rt$r_t$의 값에 따라 오른쪽 노브를 각각 다음과 같이 조작해야 한다. (1≤t≤T)$(1 \\leq t \\leq T)$ \n\n\n\t값이 0$0$인 경우, 해당하는 노브를 돌리지 않고 가만히 둬야 한다.\n\t값이 −1$-1$인 경우, 해당하는 노브를 반시계 방향으로 돌려야 한다. 값이 1$1$인 경우에는 시계 방향으로 돌려야 한다.\n\n\n이때, 성우가 느끼는 곡의 재미도는 매 박자에 다음과 같이 측정된 값의 총합이다.\n\n\n\t(2$2$번째 박자 또는 그 이후에) 왼쪽 노브를 돌려야 할 때, 직전 박자와 같은 방향으로 돌려야 한다면 재미도가 1$1$ 오른다.\n\t(2$2$번째 박자 또는 그 이후에) 오른쪽 노브를 돌려야 할 때, 직전 박자와 같은 방향으로 돌려야 한다면 재미도가 1$1$ 오른다.\n\t양쪽 노브를 모두 돌려야 할 때, 왼쪽과 오른쪽 노브를 같은 방향으로 돌려야 한다면 재미도가 추가로 1$1$ 오른다.\n\n\n성우는 재미도를 계산할 여유가 없다. 여러분이 성우를 위해 이를 대신 구해주자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30637","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tУ маленького Саши есть две подруги, которых он хочет порадовать подарками на Восьмое марта. Для этого он отправился в самый большой торговый центр в городе.\n\nВ торговом центре есть n$n$ отделов, в каждом из которых находятся ровно два магазина. Для удобства пронумеруем отделы целыми числами от 1$1$ до n$n$. Известно, что подарки в первом магазине i$i$-го отдела стоят ai$a_i$ рублей, а во втором магазине i$i$-го отдела --- bi$b_i$ рублей.\n\nВойдя в торговый центр, Саша посетит каждый из n$n$ отделов торгового центра, причем в каждом отделе он зайдет ровно в один магазин. Таким образом, когда Саша попадет в i$i$-й отдел, он выполнит ровно одно из двух действий:\n\n\n\tКупить подарок первой подруге, потратив на это ai$a_i$ рублей.\n\tКупить подарок второй подруге, потратив на это bi$b_i$ рублей.\n\n\nДля каждой подруги Саша собирается купить хотя бы один подарок. Более того, он хочет подобрать подарки таким образом, чтобы разность цен самых дорогих подарков, купленных подругам, была как можно меньше, чтобы никто не обиделся.\n\nБолее формально: пусть m1$m_1$ --- максимальная цена подарка, купленного первой подруге, а m2$m_2$ --- максимальная цена подарка, купленного второй подруге. Саша хочет выбрать подарки таким образом, чтобы минимизировать величину |m1−m2|$\\lvert m_1 - m_2 \\rvert$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30668","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tRecently Vasya learned about integer division. Inspired by this sacred knowledge, he decided to learn more about arrays of positive integers which satisfy some divisibility conditions. More precisely, Vasya calls an array a={a1,a2,…,an}$a=\\{a_1,a_2,\\ldots,a_n\\}$ good iff for every i$i$ from 1$1$ to n−1$n-1$, ai$a_i$ is divisible by ai+1$a_{i+1}$. Please help him count the number of good arrays of length n$n$ consisting of integer numbers not greater than c$c$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30646","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t크기가 N인 배열 a가 주어진다. 배열 a의 임의의 위치를 나타내는 두 수 i, j를 골랐을 때, 아래 두 조건을 만족하면 같은 수 순서쌍 (i, j)를 만들 수 있다.\n\n\n\t1 ≤ i ≤ j ≤ N\n\tai = aj\n\n\n만들어진 같은 수 순서쌍 (i, j)의 합은 ai부터 aj까지의 합 ai + ai+1 + ai+2 + … + aj-1 + aj로 정의된다. 이때 주어진 배열에서 만들 수 있는 같은 수 순서쌍의 최대 합을 찾고, 최대 합을 가지는 같은 수 순서쌍의 개수를 출력하는 프로그램을 작성하시오.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30618","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t순열은 1$1$부터 N$N$까지 N$N$개의 정수가 각각 한 번씩 나오는 수열이다. 예를 들어, [1]$[1]$, [3,5,2,1,4]$[3, 5, 2, 1, 4]$, [1,3,2]$[1, 3, 2]$는 순열이지만, [2,3,2]$[2, 3, 2]$, [4,3,1]$[4, 3, 1]$, [0]$[0]$은 순열이 아니다.\n\n순열의 점수는 다음과 같은 방법으로 구한다.\n\n\n\t순열의 모든 연속 부분 수열 각각에 대해 원소의 합을 구한다.\n\t순열의 점수는 (1)에서 구한 모든 값의 합이다.\n\n\n길이가 N$N$인 모든 순열 중에서 점수가 가장 높은 순열을 구해보자. 점수가 가장 높은 순열이 여러 가지라면 그 중 아무거나 하나를 출력한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30619","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t서강대학교에는 비어 있는 집이 N$N$채 있다. 그래서 서강대학교는 N$N$명의 사람들이 한 사람당 한 채의 집에 입주해 살 수 있도록 배정해 주려고 한다. 서강대학교에서는 입주한 사람들을 위해 특별한 혜택을 제공하는데, 바로 x$x$번 집에 y$y$번 사람이 입주해서 살게 되면 xy$xy$만큼의 세금을 감면해 준다는 것이다.\n\n사람들이 집에 배정된 상태는 1$1$부터 N$N$까지의 정수를 하나씩 원소로 가지는 수열 A1,A2,⋯,AN$A_1,A_2,\\cdots,A_N$로 표현되는데, 이는 현재 i$i$번 집에 Ai$A_i$번 사람이 배정되어 있음을 의미한다. \n\n다음과 같은 쿼리를 해결하는 프로그램을 작성해 보자.\n\n\n\t L$L$ R$R$: 초기의 집 배정 상태에서, L$L$번부터 R$R$번까지의 사람들에게 이미 배정된 집들을 학교가 원하는 만큼 서로 교환해 재배정할 수 있을 때, 감면되는 세금의 합이 최대가 되도록 집에 사람들을 새롭게 배정하였을 때의 수열 A$A$를 출력한다.\n\n\n모든 쿼리는 독립적이다. 즉, 쿼리가 실행된 직후 수열 A$A$는 초기 상태로 복구된다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30638","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tЭто интерактивная задача.\n\nПеред вами партия из n$n$ золотых монет, среди которых есть k$k$ фальшивых. Все монеты выложены в ряд. Предполагаемый вес i$i$-й монеты равен i$i$ грамм. Если монета фальшивая, ее вес равен 0$0$ грамм.\n\nМонеты трогать запрещено и единственная доступная вам операция --- это выбрать некоторое 1≤p≤n$1 \\leq p \\leq n$ и взвесить первые p$p$ монет. В результате вам будет сказан настоящий суммарный вес этих монет.\n\nИспользуя как можно меньше операций узнайте, какие k$k$ монет являются фальшивыми. Количество баллов будет зависеть от количество запросов, сделанных вашим решением, подробности смотрите в системе оценки.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30639","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tИзвестный фокусник Боря Будини путешествовал по стране X$X$, которая состоит из n$n$ городов. Однако случилось несчастье, и его обокрали в городе номер 1$1$. Теперь Будини предстоит нелегкий путь домой в город n$n$.\n\nДобираться он собирается самолетами. Всего в стране есть m$m$ авиарейсов, i$i$-й летит из ai$a_i$ в bi$b_i$ и стоит si$s_i$. Чтобы им воспользоваться, Боря должен быть в городе ai$a_i$ и иметь на руках хотя бы si$s_i$ денег (которые он потратит на перелет).\n\nПосле ограбления у него осталось всего p$p$ рублей, однако он не отчаивается! Находясь в городе i$i$, он может хоть каждый день организовывать представления, которые будут приносить ему по wi$w_i$ рублей.\n\nПомогите фокуснику узнать, сможет ли он добраться до дома, а также какое минимальное количество представлений придется для этого организовать.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30669","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn order to make the capital of Berland a more attractive place for tourists, the great king came up with the following plan: choose two streets of the city and call them avenues. Certainly, these avenues will be proclaimed extremely important historical places, which should attract tourists from all over the world.\n\nThe capital of Berland can be represented as a graph, the vertices of which are crossroads, and the edges are streets connecting two crossroads directly. In total, there are n$n$ vertices and m$m$ edges in the graph, you can move in both directions along any street, you can get from any crossroad to any other by moving only along the streets, each street connects two different crossroads, and no two streets connect the same pair of crossroads.\n\nIn order to reduce the flow of ordinary citizens moving along the great avenues, it was decided to introduce a toll on each avenue in both directions. Now you need to pay 1$1$ tugrik for one passage along the avenue. You don't have to pay for the rest of the streets.\n\nAnalysts have collected a sample of k$k$ citizens, i$i$-th of them needs to go to work from the crossroad ai$a_i$ to the crossroad bi$b_i$. After two avenues are chosen, each citizen will go to work along the path with minimal cost.\n\nIn order to earn as much money as possible, it was decided to choose two streets as two avenues, so that the total number of tugriks paid by these k$k$ citizens is maximized. Help the king: according to the given scheme of the city and a sample of citizens, find out which two streets should be made avenues, and how many tugriks the citizens will pay according to this choice.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30647","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t민겸이는 2023 INPC 참가자들의 점수를 관리하는 업무를 맡고 있다. 대회가 종료되면 순위표를 공개하려 하는데, 이를 만들기 위해 필요한 데이터는 참가자의 이름, 점수, 비공개 여부 3가지이다. 다음은 순위표를 만드는 방법에 대한 자세한 설명이다.\n\n\n\t2023 INPC의 참가자는 N명이다.\n\t각 참가자는 이름, 점수, 비공개 여부 3가지 값을 각자 가지고 있다.\n\t\n\t\t이름은 영어 소문자 알파벳으로 구성된 길이 1 이상 10 이하의 문자열이다.\n\t\t점수는 1 이상 109이하의 정수이다.\n\t\t비공개 여부는 자신을 순위표에서 숨길지 공개할지 결정하는 참 또는 거짓의 값이다.\n\t\n\t\n\t두 참가자의 점수가 다르다면 더 높은 점수를 받은 참가자에게 더 높은 순위를 매긴다.\n\t\n\t\t가능한 가장 높은 순위는 1등이고, 가장 낮은 순위는 N등이다.\n\t\n\t\n\t동점자가 있다면 모두에게 가능한 높은 순위를 매긴다.\n\t\n\t\t예를 들어 6인의 참가자의 점수가 각각 10, 10, 8, 6, 6, 6이라면, 순위는 순서대로 1, 1, 3, 4, 4, 4가 된다.\n\t\n\t\n\t순위표는 공개를 선택한 참가자들 중 순위가 높은 참가자부터 순위, 이름, 점수를 보여주어야 한다.\n\t\n\t\t순위가 같다면 이름이 사전순으로 앞서는 참가자를 먼저 보여주어야 한다.\n\t\t비공개를 선택한 참가자를 보여주면 안된다.\n\t\t비공개 여부는 실제 순위에 영향을 주지 않는다.\n\t\n\t\n\n\n민겸이는 순위표 작성 프로그램을 만드는 즐거움을 INPC 참가자들에게도 공유하고 싶어 이 문제를 만들었다. 여러분도 위 설명에 따라 순위표 작성 프로그램을 만들어보자.\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30670","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tEgor has table of size n×m$n \\times m$, where all lines are numbered from 1$1$ to n$n$ and all columns are numbered from 1$1$ to m$m$. Each cell is painted in some color that can be presented as integer from 1$1$ to 109$10^9$.\n\nLet us call the cell that lies in r$r$-th row and c$c$-th column as (r,c)$(r, c)$. We define the manhattan distance between two cells (r1,c1)$(r_1, c_1)$ and (r2,c2)$(r_2, c_2)$ as the length of shortest path between them where each consecutive cells have common side. The path can go through cells of any color. For example, the manhattan distance between (1,2)$(1, 2)$ and (3,3)$(3, 3)$ is 3, one of the shortest paths is the following: (1,2)→(2,2)→(2,3)→(3,3)$(1, 2) \\to (2, 2) \\to (2, 3) \\to (3, 3)$.\n\nEgor decided to calculate the sum of manhattan distances between each pair of cells of same color. Help him to calculate this sum.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30648","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t왼쪽 아래의 각이 직각인 직각이등변삼각형 모양의 정원이 있다. 정원의 왼쪽 아래 꼭지점의 좌표를 (0, 0)이라 하고, 길지 않은 변의 길이를 R이라고 하자. 다음은 R = 6인 정원의 모습이다.\n\n\n\n정원에 트릭 플라워를 심으면 1초가 지날 때마다 한 송이씩 새로운 꽃이 피어난다. 트릭 플라워의 좌표를 (x0, y0)라 하고, t초가 지났을 때 피어나는 꽃의 좌표를 (xt, yt)라고 하자. 좌표 (xt, yt)를 알고 있다면 (xt + 1, yt + 1)는 다음과 같이 알아낼 수 있다.\n\n\n\t부등식 (xt + 1) + (yt + 1) < R 이 참이라면 xt + 1과 yt + 1은 각각 xt + 1, yt + 1 이다.\n\t그렇지 않다면 xt + 1과 yt + 1은 각각 xt ÷ 2, yt ÷ 2 이다.\n\t단 계산 과정에서 소수점은 모두 버리며, 여러 송이의 꽃이 한 좌표에 필 수도 있다.\n\n\n비어있는 정원에서 좌표 (a, b)에 트릭 플라워를 심었을 때, 적어도 몇 초가 지나야 한 좌표에 두 송이의 꽃이 피어있게 되는지 알아보자. 특히 트릭 플라워도 꽃으로 취급하며, 트릭 플라워로 인해 피어나는 꽃은 모두 트릭 플라워가 아닌 일반적인 꽃이다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30671","content":"문제\n\nDima is taking part in a show organized by his friend Peter, the show is called <<Peter helps his fellow bro to get a job>>. In this show Dima is required to cross a \n3×n\n$3 \\times n$ rectangular field, consisting of \n3\n$3$ rows and \nn\n$n$ columns. Each row has its cells indexed from \n1\n$1$ to \nn\n$n$, from left to right.\n\nEach cell of the filed contains an integer \nai,j\n$a_{i,j}$. Initially Dima's score equals zero, and whenever Dima reaches a cell in row \ni\n$i$ and column \nj\n$j$, his score changes by \nai,j\n$a_{i,j}$. Note that, the score might become negative.\n\nInitially all cells in the first and in the third row are marked as available, and all cells in the second row are marked as unavailable. However, Peter offered Dima some help: there are \nq\n$q$ special offers in the show, \ni\n$i$-th special offer allows Dima to mark cells in the second row between \nli\n$l_i$ and \nri\n$r_i$, though Dima's score changes by \nki\n$k_i$ whenever he accepts the special offer. Dima is allowed to use as many special offers as he pleases, and might mark the same cell as available multiple times.\n\nDima starts his journey in the first row and in the first column and would like to reach the cell in the third row and in the last column. He can move either down to the next row or right to the next column (meaning he could increase the current row or column by 1), thus making \nn+1\n$n+1$ moves in total, out of which \nn−1\n$n-1$ would be horizontal and \n2\n$2$ --- vertical.\n\nPeter promised Dima to pay him based on his final score, so the sum of all numbers of all visited cells minus the cost of all special offers used. Please help Dima to maximize his final score."},{"problemId":"30672","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIgor is a big fan of geometry, so he bought himself a plane together with a set P$P$ of n$n$ distinct points, i$i$-th of them is located at (xi,yi)$(x_i,y_i)$.\n\nIt was extremely easy for Igor to find two points among them furthest away from each other. He quickly got bored and decided to come up with q$q$ real numbers α1$\\alpha_1$, α2$\\alpha_2$, α3$\\alpha_3$, …$\\ldots$, αq$\\alpha_q$. For each of these numbers Igor is interested in the maximum possible distance between any two of the points if he scales the x$x$-coordinate of each point by αj$\\alpha_j$. Formally speaking, he is interested in finding the two furthest points in a set (xi⋅αj,yi)$(x_i \\cdot \\alpha_j, y_i)$. Please help Igor!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30649","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tSudoku is a logic-based, combinatorial number-placement puzzle. The objective is to fill a 9 × 9 grid with digits from 1 to 9 in such a way that the following statements hold:\n\n\n\tEach row contains exactly one occurrence of each digit from 1 to 9.\n\tEach column contains exactly one occurrence of each digit from 1 to 9.\n\tEach of the nine 3 × 3 subgrids contains exactly one occurrence of each digit from 1 to 9.\n\n\nFor a given not yet finished sudoku grid, determine if there is a mistake in it.\n\nNote: It is not necessary to check whether the sudoku grid is solvable.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30673","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are given an array a$a$ of n$n$ positive integers numbered from 1$1$ to n$n$. Let's call an array integral if for any two, not necessarily different, numbers x$x$ and y$y$ from this array, x≥y$x \\ge y$, the number ⌊xy⌋$\\left \\lfloor \\frac{x}{y} \\right \\rfloor$ (x$x$ divided by y$y$ with rounding down) is also in this array.\n\nYou are guaranteed that all numbers in a$a$ do not exceed c$c$. Your task is to check whether this array is integral.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30674","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tWhile looking at the kitchen fridge, little boy Tyler noticed magnets with symbols, that can be aligned into a string s$s$.\n\nTyler likes strings, and especially those that are lexicographically less than string t$t$. After playing with magnets on the fridge he is wondering, how many distinct strings can be composed out of letters of string s$s$ by rearranging them, so that the the resulting string is lexicographically less than string t$t$. Tyler is studying only in the third grade, so he can not answer this question. Help him to calculate the number of permutations of letters of string s$s$, that are lexicographically less than string t$t$.\n\nWe call string x$x$ lexicographically less than string y$y$ if one of the followings conditions is fulfilled:\n\n\n\tThere exists such position of symbol m$m$ that is presented in both strings, so that before m$m$-th symbol the strings are equal, and the m$m$-th symbol of string s$s$ is less than m$m$-th symbol of string y$y$.\n\tString x$x$ is the prefix of string y$y$.\n\n\nBecause the answer can be too large, print it modulo 998244353$998\\,244\\,353$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30650","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\nWhat is an EJOI for you?\n\nGame room!\n\n\nTeo is searching for the Croatian EJOI team! She has already found Gabriel, but is still looking for Vito, Dino, and Ivo.\n\nTeo and the EJOI team are in a labyrinth consisting of n × m rooms, all of the same size. The rooms form a grid. The top-left room is labeled with (1, 1), and the bottom-right with (n, m). Between each pair of adjacent rooms, there is a door colored in one of four colors: blue (marked with 'P'), red (marked with 'C'), green (marked with 'Z') and orange (marked with 'N').\n\n\n\nIllustration of the third example. The black circle marks the room in which Teo and Gabriel are located at in the fourth question, and the white circle marks the room in which Vito, Ivo and Dino are located at. The gray path is one of the possible paths that passes through three different door colors.\n\nAt some point, Gabriel says: I know where the rest of the team is, but I will only tell you if you can answer all of my questions.\n\nGabriel’s questions are: If we are currently in room (ai, bi) and the rest of the team is in room (ci, di), what is the minimum number of door colors we have to go through to reach them?\n\nTeo is very good at answering Gabriel’s questions, but there are simply too many of them. She does not have much time (the bus is leaving soon), so she is asking you to help her answer q of Gabriel’s questions!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30675","content":"문제\n\nBerland --- is a large country with developed airlines. In total, there are \nn\n$n$ cities in the country that are historically served by the Berlaflot airline. The airline operates bi-directional flights between \nm\n$m$ pairs of cities, \ni\n$i$-th of them connects cities with numbers \nai\n$a_i$ and \nbi\n$b_i$ and has a price \nci\n$c_i$ for a flight in both directions.\n\nIt is known that Berlaflot flights can be used to get from any city to any other (possibly with transfers), and the cost of any route that consists of several consequent flights is equal to the cost of the most expensive of them. More formally, the cost of the route from the city \nt1\n$t_1$ to the city \ntk\n$t_k$ with \n(k−2)\n$(k-2)$ transfers in cities \nt2, t3, t4, …, tk−1\n$t_2,\\ t_3,\\ t_4,\\ \\ldots,\\ t_{k - 1}$ is equal to the maximum cost of flights from \nt1\n$t_1$ to \nt2\n$t_2$, from \nt2\n$t_2$ to \nt3\n$t_3$, from \nt3\n$t_3$ to \nt4\n$t_4$ and so on until the flight from \ntk−1\n$t_{k - 1}$ to \ntk\n$t_k$. Of course, all these flights must be operated by Berlaflot Airline.\n\nA new airline, S8 Airlines, has recently started operating in Berland. This airline provides bi-directional flights between all pairs of cities that are not connected by Berlaflot flights. Thus, between each pair of cities there is a flight of either Berlaflot or S8 Airlines.\n\nThe cost of S8 Airlines flights is calculated as follows: for each pair of cities \nx\n$x$ and \ny\n$y$ that is connected by a S8 Airlines flight, the cost of this flight is equal to the minimum cost of the route between the cities \nx\n$x$ and \ny\n$y$ at Berlaflot according to the pricing described earlier.\n\nIt is known that with the help of S8 Airlines flights you can get from any city to any other with possible transfers, and, similarly to Berlaflot, the cost of the route between any two cities that consists of several S8 Airlines flights is equal to the cost of the most expensive flight.\n\nDue to increased competition with S8 Airlines, Berlaflot decided to introduce an air reform and change the costs of its flights. Namely, for the \ni\n$i$-th of its flight between the cities \nai\n$a_i$ and \nbi\n$b_i$, Berlaflot wants to make the cost of this flight equal to the minimum cost of the route between the cities \nai\n$a_i$ and \nbi\n$b_i$ at S8 Airlines. Help Berlaflot managers calculate new flight costs."},{"problemId":"30676","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t스타는 안에 별이 담긴 기계장치를 보았다. 기계장치 내부를 볼 수 없어 별을 구경할 순 없었지만, 기계장치에는 별빛의 파장을 알려주는 계기판이 있었다. 계기판에 표시된 파장의 값을 토대로 스타는 별의 색을 알아낼 수 있었다. 스타가 알아낸 별의 색은 무엇이었을까?\n\n색상별 파장의 범위는 다음과 같다.\n\n\n\t빨간색: 620nm 이상 780nm 이하\n\t주황색: 590nm 이상 620nm 미만\n\t노란색: 570nm 이상 590nm 미만\n\t초록색: 495nm 이상 570nm 미만\n\t파란색: 450nm 이상 495nm 미만\n\t남색: 425nm 이상 450nm 미만\n\t보라색: 380nm 이상 425nm 미만\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30651","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tWhile wandering around Building 21, you came across a wall completely covered with numbers, arranged in a table of n rows and m columns. Soon you noticed that there was a frame leaning against the wall large enough to frame r rows and s columns of the table on the wall. And next to the frame you found a pencil and a piece of paper containing an empty table.\n\nYou are sad that the table on the piece of paper is empty, so you decided to play around with the frame to fill it.\n\nYou leaned the frame against the wall so that the number in the i-th row and j-th column is in the upper left corner, and the borders of the frame are parallel to the edges of the wall. Considering the numbers inside the frame, and since you like large numbers, you have decided to write the largest among them in the i-th row and j-th column of the table on the piece of paper.\n\nYou repeated the process for every possible position of the frame on the wall (such that the frame is entirely on the wall, and that there are exactly r × s numbers inside it), making sure that the edges of the frame are parallel to the edges of the wall.\n\nWhen you were done, the table on the piece of paper was even more beautiful than the one on the wall. What numbers are in the table on the piece of paper?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30677","content":"문제\n\n스타는 별가루를 만드는 마법 연습을 하는 중이다. 본인의 실력을 시험하기 위해 하루에 한 번씩, 총 \nN\n$N$일 동안 마법을 사용하여 별가루를 얼마나 만들 수 있는지 확인하고자 했고 \nN\n$N$일 동안의 계획을 세웠다.\n\n스타는 별가루를 만들 수 있는 \nK\n$K$가지의 마법을 사용할 수 있다. 각각의 마법을 \n1\n$1$번 마법, \n2\n$2$번 마법, ... , \nK\n$K$번 마법이라고 부르기로 하자.\n\n \ni\n$i$번 마법을 사용해서 만들 수 있는 별가루의 개수는 다음과 같다.\n\n \nΔStardust=⌊basei(1+combo⋅C100)(1+skilli⋅si100)⌋\n$\\Delta Stardust = \\lfloor base_i(1+\\frac{combo \\cdot C}{100})(1+\\frac{skill_i \\cdot s_i}{100}) \\rfloor$ \n\n식에 대한 설명은 다음과 같다.\n\n \nΔStardust\n$\\Delta Stardust$: 만들어진 별가루의 개수이다.\n \nbasei\n$base_i$: \ni\n$i$번 마법을 사용해서 기본적으로 만들 수 있는 별가루의 개수이다.\n \ncombo\n$combo$: 연속으로 마법을 사용한 횟수이다. 예를 들어, 오늘 마법을 사용하기 전에 마법을 \n5\n$5$일 연속으로 사용했다면 \ncombo=5\n$combo = 5$이다.\n \nskilli\n$skill_i$: \ni\n$i$번 마법의 숙련도이다. 예를 들어, 오늘 마법을 사용하기 전에 \ni\n$i$번 마법을 사용한 경험이 \n3\n$3$번 있으면 \nskilli=3\n$skill_i = 3$이다.\n \nC\n$C$와 \nsi\n$s_i$는 상수이다.\n\n스타의 초기 피로도는 \n0\n$0$이며, \ni\n$i$번 마법을 사용할 때마다 스타의 피로도는 \npi\n$p_i$만큼 상승한다. 피로도가 \n100\n$100$을 초과하게 되면, 마법봉이 망가지고 이후에는 어떤 마법도 쓸 수 없게 된다. 동시에, 지금까지 만들었던 별가루도 못 쓰게 된다. 피로도는 휴식을 통해 줄일 수 있다. 휴식을 취하면 피로도가 \nR\n$R$만큼 줄어들지만, 연속으로 마법을 사용한 횟수는 \n0\n$0$이 된다. 피로도는 \n0\n$0$ 미만으로 내려가지 않으며, 만약 휴식으로 감소하는 피로도가 현재 피로도보다 크다면 피로도는 \n0\n$0$이 된다.\n\n스타의 계획을 보고 \nN\n$N$일 동안 만들 수 있는 별가루의 총 개수를 계산해 보자."},{"problemId":"30652","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tFor his thirteenth birthday, Donald’s parents bought him a brand-new set of Lego cubes. In the set, there are n cubes of equal size, where the i-th cube came in color i. Using these cubes he decided to build a wall.\n\nDonald will build his wall on a row-like Lego base that has k places where cubes can be put in. He puts the cubes in the following way:\n\n\n\tFirst, he puts the cube with color 1 on an arbitrary spot on the base.\n\tFor each cube from 2 to n, he places it in a spot neighboring the previously placed cube. If that spot isn’t empty, he puts the new cube on top of all the others.\n\n\nAfter he built the wall, Donald wrote on a piece of paper a sequence of length k: on the i-th position in the sequence he wrote the color of the top cube in the i-th place, or 0 if there isn’t a cube in that place.\n\nHe immediately asked himself how many different sequences could he have written on the piece of paper. Two sequences are considered different if there exists a position in which they differ. After some time, he has managed to calculate the solution, but he is not sure whether it is correct, so he asks for your help.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30680","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t밤하늘에 무지갯빛 별이 하나 반짝이고 있다. 이 무지갯빛 별과 N$N$개의 장식을 사용해서 별자리를 만들어 밤하늘을 예쁘게 꾸미려고 한다.\n\n각 장식의 특징은 다음과 같다.\n\n\n\t각 장식은 Ai$A_i$개의 별과 (Ai−1)$(A_i-1)$개의 실로 이루어진 트리다. 실은 서로 다른 두 별을 연결한다.\n\t각 장식에는 정확히 1$1$개의 붉은색 별이 있다. 그리고 붉은색 별을 루트 노드로 생각했을 때, 리프 노드에 해당하는 별들은 전부 파란색이다. 나머지 별들은 전부 흰색이다.\n\t각 별에는 번호가 적혀있다. 번호는 1$1$이상 Ai$A_i$이하의 정수이다. 붉은색 별의 번호는 항상 1$1$번이며 별마다 서로 다른 번호가 적혀있다.\n\n\n별자리를 만들기 전에 스타는 다음과 같은 용어들을 정의했다.\n\n\n\t별자리에서 별을 하나 선택하고 무지갯빛 별부터 선택한 별까지 실을 따라 이동할 때, 거치는 실의 최소 갯수를 해당 별의 깊이라고 정의한다.\n\t별자리의 모든 별의 깊이를 구해서 이 중 최댓값을 별자리의 길이로 정의한다.\n\n\n스타는 장식을 한 개씩 받아 가며 별자리에 장식을 단다. 모든 장식은 받은 순서대로 다음 규칙을 지키면서 달아야 한다.\n\n\n\t첫 번째 장식의 붉은색 별과 무지갯빛 별 사이를 실로 연결한다.\n\t i(i>1)$i (i > 1)$번째 장식의 붉은색 별과 i−1$i-1$번째 장식까지 달아서 만든 별자리에서 아직 다른 장식과 연결되지 않은 깊이가 최소인 파란색 별 사이를 실로 연결한다. 이러한 별이 여러 개라면 아무거나 선택한다.\n\n\n스타는 규칙을 지키면서 길이가 최소인 별자리를 만들고 싶어한다. 스타가 만들 수 있는 별자리의 최소 길이를 구해보자. \n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30678","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t규칙에 따라 별을 찍어보자.\n\n먼저 Star0$Star_0$는 별이 하나만 있는 패턴이다.\n\n*\n\n그리고 양의 정수 i$i$에 대하여 Stari$Star_i$의 패턴은 다음과 같다. 빈칸은 공백으로 채워져야 한다.\n\n\n\n정수 N$N$이 주어질 때 StarN$Star_N$을 출력해 보도록 하자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30679","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t스타는 별을 가두는 장치를 만들어 본인이 가지고 있는 별을 보관하려고 한다.\n\n스타의 장치에는 N×M$N \\times M$ 크기의 격자가 있으며, 격자의 각 칸에는 양의 정수가 적혀 있다. 이 장치는 다음과 같은 과정을 거쳐 격자에 별을 가둔다.\n\n\n\t첫 번째 열의 원하는 칸에 별을 올려둔다.\n\t다음과 같은 과정을 따라 별이 이동한다.\n\t\n\t\t별은 바라보고 있는 방향으로, 별이 놓인 칸에 적힌 수만큼 이동한다.\n\t\t별이 바라보는 방향이 시계 방향으로 90도 돌아간다.\n\t\n\t\n\n\n별은 처음에 오른쪽을 바라보고 있으며, 별이 격자 밖으로 나가지 않고 위 과정이 무한히 반복된다면 별을 성공적으로 가둔 것이다. 하지만 중간에 별이 격자 밖으로 나가게 된다면 별을 가두는 데에 실패한 것이다.\n\n\n\n스타는 처음에 별을 어느 칸에 올려놔야 별을 가둘 수 있는지 궁금해졌다. 스타를 위해 별을 가둘 수 있는 칸을 알아 내보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30740","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBigData Inc. is a corporation that has n$n$ data centers indexed from 1$1$ to n$n$ that are located all over the world. These data centers provide storage for client data (you can figure out that client data is really big!).\n\nMain feature of services offered by BigData Inc. is the access availability guarantee even under the circumstances of any data center having an outage. Such a guarantee is ensured by using the two-way replication. Two-way replication is such an approach for data storage that any piece of data is represented by two identical copies that are stored in two different data centers.\n\nFor each of m$m$ company clients, let us denote indices of two different data centers storing this client data as ci,1$c_{i,1}$ and ci,2$c_{i,2}$.\n\nIn order to keep data centers operational and safe, the software running on data center computers is being updated regularly. Release cycle of BigData Inc. is one day meaning that the new version of software is being deployed to the data center computers each day.\n\nData center software update is a non-trivial long process, that is why there is a special hour-long time frame that is dedicated for data center maintenance. During the maintenance period, data center computers are installing software updates, and thus they may be unavailable. Consider the day to be exactly h$h$ hours long. For each data center there is an integer uj$u_j$ (0≤uj≤h−1$0 \\leq u_j \\leq h - 1$) defining the index of an hour of day, such that during this hour data center j$j$ is unavailable due to maintenance.\n\nSumming up everything above, the condition uci,1≠uci,2$u_{c_{i,1}} \\neq u_{c_{i,2}}$ should hold for each client, or otherwise his data may be unaccessible while data centers that store it are under maintenance.\n\nDue to occasional timezone change in different cities all over the world, the maintenance time in some of the data centers may change by one hour sometimes. Company should be prepared for such situation, that is why they decided to conduct an experiment, choosing some non-empty subset of data centers, and shifting the maintenance time for them by an hour later (i.e. if uj=h−1$u_j = h - 1$, then the new maintenance hour would become 0$0$, otherwise it would become uj+1$u_j + 1$). Nonetheless, such an experiment should not break the accessibility guarantees, meaning that data of any client should be still available during any hour of a day after the data center maintenance times are changed.\n\nSuch an experiment would provide useful insights, but changing update time is quite an expensive procedure, that is why the company asked you to find out the minimum number of data centers that have to be included in an experiment in order to keep the data accessibility guarantees.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30653","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tWhen Leonhard Euler resolved the famous Königsberg bridge problem, he had no clue he had discovered a whole new area of mathematics - graph theory!\n\nUnfortunately, the Königsberg bridge problem is far too easy for the programmers of this era, so Euler came up with another problem - the Zagreb bridge problem!\n\nThe bridges of Zagreb form a graph with n nodes and m edges where the edges represent the bridges and the nodes represent the riverine islands. The graph is connected, in other words, it’s possible to get from any node to any other by traveling across the edges. Now Euler asked, how many edges are there such that after their removal the graph becomes disconnected?\n\nAgain, Euler didn’t know that this problem is also famous today (those damn Codeforces blogs). So the author of this problem decided to give you an even harder one, how many edges are there such that after the removal of the nodes which it connects, the remaining n − 2 nodes become disconnected?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30681","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t스타는 밧줄을 사용해서 별을 포획하려고 한다. 포획 과정은 다음과 같다.\n\n\n\t밧줄로 포획하려는 모든 별을 감싼 뒤 팽팽하게 당긴다. 이때, 별과 별 사이에 걸린 밧줄의 부분은 팽팽해야 하며, 스타가 잡고 있는 밧줄 부분은 서로 평행하게 하면서 만나지 않도록 한다.\n\t\n\t\n\t1.에서 밧줄에 닿은 별들을 제외하고 나머지 별들은 밧줄에 닿지 않을 정도로만 밧줄을 잡은 채로 양손을 가까이 당긴다.\n\t\n\t\n\t있는 힘껏 잡아당긴다.\n\t\n\t\n\n\n별들을 포획하다 보면 밧줄에 무리가 가서 끊어질 수 있어 밧줄의 부담을 최소화하여 별들을 포획하려고 한다. 어떻게 해야 밧줄의 부담을 줄일 수 있을지 고민하던 스타는 2.에서 별과 별 사이에 걸린 밧줄의 길이의 합이 작을수록 밧줄의 부담이 줄어든다는 것을 알아냈다.\n\n\n\n그럼, 이제 별과 별 사이에 걸린 밧줄의 길이의 합을 최소화하면 된다. 어느 정도까지 길이의 합을 줄일 수 있을지 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30720","content":"문제\n\nВо Флатляндии проводится ежегодный турнир по танцам!\n\nИз города \nNN\n$NN$ приехала команда, состоящая из \nn\n$n$ танцоров, и вот настал день соревнований.\n\nСостязания проходят в таком формате: танцоры пронумерованы от \n1\n$1$ до \nn\n$n$, и изначально \ni\n$i$-й танцор стоит на \ni\n$i$-м месте. После этого они начинают танцевать по заранее согласованной программе выступления \na\n$a$: каждую минуту танцор с \nai\n$a_i$-го места передвигается на \ni\n$i$-е место, при этом все \nai\n$a_i$ различны. От команды требуется выстроиться так, чтобы \ni\n$i$-й танцор оказался на \nbi\n$b_i$-м месте (аналогично, все \nbi\n$b_i$ различны). После этого выступление завершается, и жюри оценивает его техничность и артистизм. При этом выступление должно продлиться хотя бы одну минуту, иначе оценивать будет просто нечего.\n\nНо в этом году участники заподозрили жюри в подлоге: к ним пришла мысль, что, возможно, следуя программе \na\n$a$, они никогда не смогут занять требуемое положение \nb\n$b$, что приводит к автоматическому поражению в турнире.\n\nТак как они не программисты по образованию, команда города \nNN\n$NN$ решила обратиться к вам за помощью: проверьте по их программе выступления \na\n$a$ и требуемому положению \nb\n$b$, существует ли такое положительное количество минут \nk\n$k$, что через \nk\n$k$ минут после начала выступления \ni\n$i$-й танцор будет находиться на \nbi\n$b_i$-м месте."},{"problemId":"30741","content":"문제\n\nInstructors of Some Informatics School make students go to bed.\n\nThe house contains \nn\n$n$ rooms, in each room exactly \nb\n$b$ students were supposed to sleep. However, at the time of curfew it happened that many students are not located in their assigned rooms. The rooms are arranged in a row and numbered from 1 to \nn\n$n$. Initially, in \ni\n$i$-th room there are \nai\n$a_i$ students. All students are currently somewhere in the house, therefore \na1+a2+…+an=nb\n$a_1 + a_2 + \\ldots + a_n = nb$. Also \np\n$p$ instructors live in this house (\np≤2\n$p \\leq 2$).\n\nThe process of curfew enforcement is the following. One instructor starts near room \n1\n$1$ and moves toward room \nn\n$n$. If there is a second instructor, she starts near room \nn\n$n$ and moves toward room \n1\n$1$. After processing current room, each instructor moves on to the next one. If there are two instructors they enter rooms and move simultaneously. If \nn\n$n$ is odd and there are two instructors, then only the first instructor processes the middle room. When all rooms are processed, the process ends.\n\nWhen an instructor processes a room, she counts the number of students in the room, then turns off the light, and locks the room. Also, if the number of students inside the processed room is not equal to \nb\n$b$, the instructors writes down the number of this room into her notebook (and turns off the light, and locks the room). Instructors are in a hurry (to prepare the study plan for the next day), so they don't care about who is in the room, but only about the number of students.\n\nWhile instructors are inside the rooms, students can run between rooms that are not locked and not being processed. A student can run by at most \nd\n$d$ rooms, that is she can move to a room with number that differs my at most \nd\n$d$. Also, after (or instead of) running each student can hide under a bed in a room she is in. In this case the instructor will not count her during the processing. In each room any number of students can hide simultaneously.\n\nFormally, here is what's happening:\n\nA curfew is announced, at this point in room \ni\n$i$ there are \nai\n$a_i$ students.\nEach student can run to another room but not further than \nd\n$d$ rooms away from her initial room, or stay in place. After that each student can optionally hide under a bed.\nInstructors enter room \n1\n$1$ (and also room \nn\n$n$ if \np=2\n$p=2$), counts students there, and locks the room (after it no one can enter or leave this room).\nEach student from rooms with numbers from \n2\n$2$ to \nn\n$n$ (or to \nn−1\n$n - 1$ if \np=2\n$p=2$) can run to another room but not further than \nd\n$d$ rooms away from her current room, or stay in place. Each student can optionally hide under a bed.\nInstructor(s) move from room \n1\n$1$ to room \n2\n$2$ (and from room \nn\n$n$ to room \nn−1\n$n - 1$ if \np=2\n$p=2$).\nThis process continues until all rooms are processed.\n\nLet \nxi\n$x_i$ denote the number of rooms in which \ni\n$i$-th instructor counted the number of students different from \nb\n$b$. Students know that the principal will only listen to one complaint, therefore they want to minimize the maximum of numbers \nxi\n$x_i$. Help them find this value if they use the optimal strategy."},{"problemId":"30721","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tДана перестановка a$a$ чисел от 1$1$ до n$n$, а также набор из m$m$ пар индексов. За один ход разрешается выбрать одну из этих m$m$ пар и поменять элементы на соответствующих позициях местами (перестановка, соответственно, изменится). Вы можете сделать произвольное количество ходов (в частности, разрешается не делать ни одного хода).\n\nОпределим возрастающую подпоследовательность длины k$k$ как набор индексов j1,j2,…,jk$j_1, j_2, \\ldots, j_k$, для которых выполняются два условия:\n\n\n\t 1≤j1<j2<…<jk≤n$1 \\le j_1 < j_2 < \\ldots < j_k \\le n$;\n\t aj1<aj2<…<ajk$a_{j_1} < a_{j_2} < \\ldots < a_{j_k}$.\n\n\nКакой максимально возможной длины наибольшей возрастающей подпоследовательности можно достичь при правильных обменах элементов?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30682","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t본 문제와 Hard 문제는 입력 제한만 다른 동일한 문제이다.\n\n스타는 밖에서 밤하늘 사진을 찍고 있다. 이 중 가장 잘 찍힌 사진을 액자에 담아 전시하려고 한다. 가장 잘 찍은 사진을 어떻게 고를지 고민하던 스타는 다음과 같은 방법으로 각 사진에 점수를 매기려고 한다.\n\n그 당시 밤하늘을 2차원 격자로 나타낼 수 있으며 각 칸은 (x,y)$(x, y)$로 표현한다. 그리고 스타가 찍은 사진에 담긴 밤하늘의 영역은 항상 직사각형이며 격자 칸 일부만 사진에 포함되는 경우는 없다.\n\n별 N$N$개에 대하여 각 별의 위치를 (xi,yi)$(x_i, y_i)$, 밝기를 pi$p_i$라고 하면 격자 칸 (x,y)$(x, y)$에서의 밝기 bx,y$b_{x, y}$는 다음과 같이 계산한다.\n\n bx,y=∑i=1Nmax(pi−(|x−xi|+|y−yi|),0)$b_{x, y} = \\sum_{i = 1}^N max(p_i-(|x-x_i|+|y-y_i|), 0)$ \n\n마지막으로 사진에 담긴 밤하늘의 격자 중 맨 왼쪽 아래가 (a,b)$(a, b)$, 맨 오른쪽 위가 (c,d)$(c, d)$일 때, 사진의 점수 score$score$는 다음과 같이 계산한다.\n\n score=∑y=bd∑x=acbx,y$score=\\sum_{y = b}^d \\sum_{x = a}^c b_{x, y}$ \n\n사진과 사진을 찍을 당시 밤하늘에 떠 있던 별 N$N$개에 대한 정보가 주어졌을 때, 사진의 점수를 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30700","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t고려대학교의 영문 이름은 KOREA UNIVERSITY이다.\n\n영어 알파벳 대문자 K, O, R, E, A로만 이루어진 문자열 S$S$가 주어진다. S$S$에서 0$0$개 이상의 문자를 지웠을 때 “KOREAKOREAKOR” 처럼 ‘K’로 시작하고 각 글자가 ‘K’, ‘O’, ‘R’, ‘E’, ‘A’ 순서로 반복되는 문자열을 만들려고 한다. 이를 KOREA 문자열이라고 하자.\n\n문자열이 주어졌을 때, 0$0$개 이상의 문자를 지워서 만들 수 있는 가장 긴 KOREA 문자열의 길이를 구하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30742","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIt is never too late to play the fancy \"Binary Cards\" game!\n\nThere is an infinite amount of cards of positive and negative ranks that are used in the game. The absolute value of any card rank is a power of two, i.e. each card has a rank of either 2k$2^k$ or −2k$-2^k$ for some integer k≥0$k \\geq 0$. There is an infinite amount of cards of any valid rank.\n\nAt the beginning of the game player forms his deck that is some multiset (possibly empty) of cards. It is allowed to pick any number of cards of any rank but the small deck is considered to be a skill indicator. Game consists of n$n$ rounds. In the i$i$-th round jury tells the player an integer ai$a_i$. After that the player is obligated to draw such a subset of his deck that the sum of ranks of the chosen cards is equal to ai$a_i$ (it is allowed to not draw any cards, in which case the sum is considered to be equal to zero). If player fails to do so, he loses and the game is over. Otherwise, player takes back all of his cards into his deck and the game proceeds to the next round. Player is considered a winner if he is able to draw the suitable set of cards in each of the rounds.\n\nSomebody told you which numbers ai$a_i$ the jury is going to tell you in each round. Now you want to pick a deck consisting of the minimum number of cards that allows you to win the \"Binary Cards\" game.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30654","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t국보 제 1883호로 지정된 '고려 오백나한도'에서는 500명의 깨달음을 얻은 나한들의 모습을 보여주고 있다. 역사에 관심이 깊은 한별이는 이 그림이 마음에 들었는지 자신의 방에 걸어두고, 잠을 잤다. 그날 밤, 한별이는 기묘한 꿈을 꾸었다. 오백명의 나한들을 만나게 된 것이다! 나한들과 즐거운 시간을 지내던 한별이는 나한들의 발걸음을 주시하다가 문득 특이한 성질을 발견하였다. 나한들의 보폭은 자연수이며 각 나한마다 항상 일정하지만, 서로 다른 두 나한의 경우에는 다를 수도 있다는 것이다.\n\n프로그래머로서도 호기심이 왕성한 한별이는 다음과 같은 궁금증이 생겼다:\n\n“나한들이 걸은 이동거리의 총합이 K$K$가 되도록 하는 방법이 있을까?”\n\n한별이의 궁금증을 해소하기 위해, 나한들이 걷는 방법이 존재하는지 판별하고, 존재한다면 그 실례를 찾아주자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30743","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tDima is a beginner programmer. During his working process, he regularly has to repeat the following operation again and again: to remove every second element from the array. One day he has been bored with easy solutions of this problem, and he has come up with the following extravagant algorithm.\n\nLet's consider that initially array contains n$n$ numbers from 1$1$ to n$n$ and the number i$i$ is located in the cell with the index 2i−1$2i - 1$ (Indices are numbered starting from one) and other cells of the array are empty. Each step Dima selects a non-empty array cell with the maximum index and moves the number written in it to the nearest empty cell to the left of the selected one. The process continues until all n$n$ numbers will appear in the first n$n$ cells of the array. For example if n=4$n = 4$, the array is changing as follows:\n\n\n\nYou have to write a program that allows you to determine what number will be in the cell with index x$x$ (1≤x≤n$1 \\leq x \\leq n$) after Dima's algorithm finishes.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30722","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tНазовём красотой числа произведение цифр в нем. Например, красота числа 123$123$ равняется 6$6$, так как 1⋅2⋅3=6$1 \\cdot 2 \\cdot 3 = 6$, а красота числа 209$209$ равна 0$0$, так как 2⋅0⋅9=0$2 \\cdot 0 \\cdot 9 = 0$. По заданным числам l$l$ и r$r$ найдите максимально красивое число x$x$ такое, что l≤x≤r$l \\leq x \\leq r$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30760","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAndrysha is fond of computer games. He recently he found another exciting game:\n\nGame world is an infinity plane, divided into cells. Each cell has its own game coordinates. Player controls a robot, initially located in the cell with coordinates (0,0)$(0, 0)$. Player is able to move robot left, up, right and down by pressing keyboard buttons. In fact:\n\n\n\tevery time button 'L' is pressed, the first coordinate of the robot position decreases by 1$1$.\n\tevery time button 'U' is pressed, the second coordinate of the robot position increases by 1$1$.\n\tevery time button 'R' is pressed, the first coordinate of the robot position increases by 1$1$.\n\tevery time button 'D' is pressed, the second coordinate of the robot position decreases by 1$1$.\n\n\nThe goal is to move robot to some given cell (x,y)$(x, y)$. Though the game sounds easy, Andrysha was unable to finish it and asked his friend Zhenya for help. Zhenya told him a sequence of pressings of the buttons that he used, but this hint didn't help (maybe Zhenya had a different target cell)! Andrysha went mad and slammed keyboard so hard that broke some buttons. Broken buttons no longer react on pressings and this might be really helpful!\n\nAndrysha wants to find out, if he can finish the game using Zhenya's instructions and breaking some buttons at some moments of time. Pressing broken button doesn't affect the robot. Andrysha can break any button before any pressure of any button or after any pressure of any button. Moreover, he can break several buttons (even all of them) at the same time. He also can break buttons before the very first pressure. He always breaks all the remaining buttons at the end of the game.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30744","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYear 18 AD. Famous astronomer Philon the Berlander publishes a book \"About Sky and Cosmos>>, in which he describes an incredible picture seen by him on a night sky while observing the skies. He once seen 2n$2n$ stars on a clear sky and the Moon. Surprisingly, it was possible to divide all stars in pairs in such way that any line passing through the centers of two paired stars also passed through the center of the Moon, also all such lines were distinct. Philon carefully represented such a situation on a sky map, introducing a coordinate system. While doing that, he noticed that centers of all stars and the center of the Moon are points with integer coordinates. As Philon thought that the Earth and the Moon were flat, his coordinate system was two-dimensional. Coordinate system was chosen by an astronomer in such way that the coordinates of all objects (including the Moon) are no more than 106$10^6$ by the absolute value. Moreover, no two objects (two stars or a star and a Moon) were not located at the same point.\n\nApart from the sky map Philon wrote a prediction that in 2000 years stars will take exactly the same places, but the Moon will be replaced by a huge comet which will destroy the Earth.\n\nIt is 2018 AD now. You got a book of Philon the Berlander and you were horrified to discover that the stars on the sky are in exactly the same position as they were 2000 years ago! Unfortunately, some parts of a sky map were lost, so there are only star locations that are visible on it and there are no details about how the stars were divided in pairs. Moreover,, there is no point corresponding to the center of the Moon on this map. In order to find out the possible location of a comet and save the humanity from the terrible end, you should immediately find out some suitable location for the center of the Moon!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30761","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn the year 20yy$20yy$ Moscow city completely ran out of space for the new construction works. The government is actively looking for the new income opportunities, and it finally announced that all railway tracks within the city boundaries are going to be replaced by the underground tunnels. Quite obviously, freed space will be used for development.\n\nReconstruction process begins with the section of Octyabrskaya Railway Tracks, which is k$k$ meters long. Vacant space will attract a lot of tourists, but should balance its pressure onto the tunnel --- that means only the most important businesses get a chance to use the newly emerged area, like coffee stops and ice-cream vans.\n\nRenovated track consists of k$k$ equal segments, conveniently numbered from 1$1$ to k$k$. There are n$n$ companies willing to use the new territory, and i$i$-th of them would like to use all the segments numbered from li$l_i$ to ri$r_i$. Every company provided a detailed construction plan including integer pi$p_i$ --- the building's pressure. Every company's application can either be rejected, or accepted: there is no way to build only a part of any.\n\nSince the major is quite greedy, he wants to make sure that each segment is used by at least one company. However, for safety reasons it was decided to minimize the maximal pressure on any segment. Please note that it's possible for one segment to be used by multiple companies, and in this case the total pressure is determined as a sum of individual pressure values of the buildings.\n\nPlease help the major to accept a set of applications so for every segment there is at least one accepted application which intend to use this segment, and the maximal pressure among the segments is as small as possible.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30655","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tJoão, que gosta de informática, procura pensar em como seria um programa para automatizar tudo que ele faz no seu dia a dia. Maria o desafiou a fazer um programa que fosse útil de algum jeito para quando eles brincarem de pique esconde.\n\nJoão teve uma ideia muito boa de um programa, mas como ele ainda está em suas primeiras aulas de informática, ainda não descobriu como implementar essa ideia. Assim, você deve ajudá-lo. A ideia de João é numerar as crianças participando da brincadeira de 1 a n. O programa recebe como entrada o número total de crianças e também o número correspondente 'a criança que está procurando os demais participantes. Depois, o programa recebe uma lista com n − 2 números identificando as crianças que já foram encontradas e deve responder qual a criança que está faltando.\n\nSua tarefa é implementar esse programa e ajudar João a mostrar para Maria que a informática pode ser útil até nas mais simples tarefas.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30723","content":"문제\n\nВам дана строка \ns1s2…sn\n$s_1 s_2 \\ldots s_n$, состоящая из \nn\n$n$ маленьких английских букв. Жюри загадало перестановку \np1,p2,…,pn\n$p_1, p_2, \\ldots, p_n$ и получило новую строку \nt\n$t$, поставив \ni\n$i$-й символ строки \ns\n$s$ на \npi\n$p_i$-ю позицию в строке \nt\n$t$. Вам необходимо найти строку \nt\n$t$.\n\nДля этого вы можете один раз задать вопрос, состоящий из \nk\n$k$ выбранных вами пар индексов. Для пары индексов \n(ai,bi)\n$(a_i, b_i)$ (\n1≤i≤k\n$1 \\leq i \\leq k$, \n1≤ai<bi≤n\n$1 \\leq a_i < b_i \\leq n$) вы узнаете, верно ли, что \npai<pbi\n$p_{a_i} < p_{b_i}$.\n\nВы хотите определить искомую строку, спросив про наименьшее количество пар, то есть минимизируя значение числа \nk\n$k$, при условии, что проверяющая программа является адаптивной. Это означает, что ответ к каждому тесту может быть различен в зависимости от того, про какие пары индексов вы спрашиваете. Другими словами, ваше решение должно успешно восстанавливать строку \nt\n$t$ для любой возможной перестановки \np1,p2,…,pn\n$p_1, p_2, \\ldots, p_n$."},{"problemId":"30762","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThis is an interactive problem.\n\n1804. Vice-president of the United States of America Aaron Burr challenged gubernatorial race candidate Alexander Hamilton for writing several offending pamphlets.\n\nBut Burr is sane enough to understand that, even if he kills Hamilton, he will lose his reputation and ruin his career. So, the enemies decided to simply play a game. To make everything more fair they decided to play it g$g$ times.\n\nEach game starts with Hamilton thinking up a positive integer n$n$, and after that Burr tries to guess it. For any positive integer x$x$ Burr may ask Hamilton about fraction of numbers between 1$1$ and n$n$ inclusive that are divisible by x$x$. In the other words, when asks a question about x$x$, he receives the value of ⌊nx⌋n.$$\\frac{\\left\\lfloor\\frac{n}{x}\\right\\rfloor}{n}.$$ Important detail is that Hamilton reports the answer to Burr as an irreducible fraction (here ⌊r⌋$\\left\\lfloor r \\right\\rfloor$ denotes the integral part of r$r$).\n\nHelp Burr find the answer using some certain number of queries.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30745","content":"문제\n\nOrganization of Meticulous Oil Inspectors (OMOI) is an association of \nn\n$n$ oil inspectors of the city N. All oil inspectors in the organization are numbered successively from \n1\n$1$ to \nn\n$n$ in the order of joining the OMOI. There is a tree-like hierarchy among the OMOI members so that the oil inspector \n1\n$1$ is the head of OMOI, and every other oil inspector \ni\n$i$ has an immediate supervisor \npi\n$p_i$ who joined OMOI prior to \ni\n$i$, that is, has a smaller number. An oil inspector \nv\n$v$ is a supervisor of an oil inspector \nu\n$u$ if \nv\n$v$ is present in the chain of immediate supervisors starting at \nu\n$u$, that is, in the sequence \npu\n$p_u$, \nppu\n$p_{p_u}$, and so on. In this case, the oil inspector \nu\n$u$ is a subordinate of the oil inspector \nv\n$v$.\n\nAll members of OMOI are very meticulous, and it is not uncommon for them to argue on business questions. We assume that two oil injectors may argue only if none of them is a supervisor of the other. To resolve their dispute, arguing oil inspectors ask their closest common supervisor for advice, that is, an oil inspector who is their common supervisor with the largest number. Every oil inspector \ni\n$i$ (expect for the head of OMOI) has a perfectionism level that is expressed with an integer \nci\n$c_i$. Intensity of an argument between two oil inspectors is the sum of their perfectionism levels. Finally, tension of a working day is the total intensity of all arguments during the day.\n\nAt the end of a working day an oil inspector \nv\n$v$ thinks himself an effective manager if for each one of his subordinates he resolved at least one argument involving this subordinate during the day. Formally, that means that for each oil inspector \nu\n$u$ who is a subordinate of \nv\n$v$ there is an oil inspector \nw\n$w$ such that \nu\n$u$ and \nw\n$w$ had an argument during the day, and \nv\n$v$ was the closest common supervisor of \nu\n$u$ and \nw\n$w$. In particular, every oil inspector who does not have any subordinates thinks himself an effective manager according to this definition.\n\nYou are employed at OMOI as a programmer, and know every oil inspector in the organization. At the end of today's workday every oil inspector in the organization told you in confidence that he thought himself an effective manager on this day. You are now interested what could be the smallest tension of today's workday if every oil inspector indeed was an effective manager today."},{"problemId":"30656","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tSeja s uma string. Denotamos por sn a concatenação de n cópias de s. Por exemplo, se s = “eri” e n = 3, temos s3 = “erierieri”.\n\nDadas strings r e s, sua tarefa é determinar se existem inteiros m e n tais que rm = sn.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30746","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAt the beginning of 16-th century a group of European explorers arrived to the island inhabited by several tribes that never seen a person from Europe.\n\nIn order to establish friendship with island inhabitants, a group leader is going to give a present to the head of any local tribe explorers meet on their way. In order to do so, group leader brought a long chain of glass pieces that looks similar to jewels. Consider this chain to be a string s$s$ consisting of lowercase English letters, with each letter denoting the type of glass piece on the corresponding position. Explorers are going to cut down the chain into small fragments and give exactly one fragment to head of each tribe they meet. The group leader is going to divide the chain into fragments according to the following rules:\n\n\n\tTo reduce time on cutting the chain apart, each fragment should be a contiguous group of glass pieces, i.e. a substring of string s$s$.\n\tAll glass pieces should be used, i.e. each glass piece should be included in exactly one fragment.\n\tAs the explorers do not know how local inhabitants would like certain kinds of glass pieces, they want each tribe head to get exactly the same set of glass pieces ignoring the order of their appearance in a fragment. In the other words, for each glass piece type the number of glass pieces of this type should be the same in each of the fragments.\n\tExplorers do not know how many tribes there are on the island, so they would like the number of fragments to be maximum possible.\n\n\nHelp group leader to find out the maximum possible fragment count that may be obtained without violating the rules above.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30763","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tРуководство Большой Софтверной Компании решило провести тренинги по тимбилдингу для всех n$n$ сотрудников компании. На тренинги отведено два дня, в течение которых участники будут выполнять различные задания командами по k$k$ человек. Известно, что количество сотрудников компании делится нацело на k$k$, таким образом, в каждый из двух дней будет образовано ровно n/k$n / k$ команд по k$k$ человек в каждой. В оба дня возможно деление на произвольные команды, в частности, разбиение на команды во второй день может никак не зависеть от разбиения на команды в первый день.\n\nСейчас организаторы тренингов заняты составлением графика распределения людей по командам в каждый из двух дней. Так как одна из целей тренингов --- увидеть, как сотрудники действуют в одной команде с самыми разными людьми, к распределению по командам имеется естественное требование: количество пар людей, участвующих в тренинге в оба дня в одной и той же команде, должно быть как можно меньше.\n\nОказалось, что распределить людей требуемым образом --- не такая простая задача, как кажется на первый взгляд. Помогите организаторам тренингов определить минимальное количество пар сотрудников, которые окажутся в одной команде в оба дня.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30764","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tДля путешествий по странам шенгенской зоны турист, который не является гражданином входящих в неё государств, должен получить шенгенскую визу. Она позволяет не только совершать путешествия в любую страну шенгенской зоны, но и свободно перемещаться между ними. Если же турист получает мультивизу --- он может совершать произвольное количество путешествий в страны шенгенской зоны, разумеется, если все поездки полностью укладываются в сроки действия визы. \n\nГеннадий только что получил шенгенскую мультивизу на a$a$ дней. Он уже запланировал n$n$ поездок, когда узнал о наличии дополнительного требования миграционной полиции: для любых последовательных b$b$ дней он может находиться в шенгенской зоне не более, чем c$c$ дней. При этом день приезда и день отъезда считаются полностью проведёнными в шенгенской зоне днями. Теперь Геннадий просит вас определить, соответствует ли его план требованиям миграционной полиции, или ему лучше сразу отказаться от части поездок. % пока его не загребли\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30747","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tНа каникулах Роман решил отдохнуть во Флатландии и арендовал себе апартаменты и роскошный автомобиль. Разумеется, такой автомобиль нельзя оставлять во дворе, поэтому Роман хочет также арендовать место на ближайшей охраняемой парковке. Поскольку он уже поиздержался с жильём и машиной, он хочет потратить на парковку как можно меньше бурлей.\n\nНа парковке доступны три тарифа аренды:\n\n\n\tЗаплатив a$a$ бурлей, можно использовать парковку в течение 1$1$ дня.\n\tЗаплатив b$b$ бурлей, можно использовать парковку в течение одной недели, то есть 7$7$ дней.\n\tЗаплатив c$c$ бурлей, можно использовать парковку в течение четырёх недель, то есть 28$28$ дней.\n\n\nРоман планирует отдыхать во Флатландии n$n$ дней. Любой тариф можно использовать произвольное количество раз, также можно арендовать парковку на суммарно больший срок, чем нужно. Какое минимальное количество бурлей придётся заплатить Роману, чтобы иметь возможность использовать стоянку все n$n$ дней?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30724","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tОпытным участникам соревнований по спортивному программированию хорошо известна классическая задача о нахождении количества вхождений подстроки в строку. Обычно она формулируется так: дана строка-образец s$s$ и строка t$t$, требуется найти количество индексов, начиная с которых строка s$s$ содержится в строке t$t$.\n\nК сожалению, для решения этой задачи уже придумано множество алгоритмов, поэтому сама по себе она может быть интересна только в качестве упражнения, но не олимпиадной задачи. Однако, как это часто бывает со стандартными задачами, её легко усложнить --- представим, что нас интересуют не сами строки s$s$ и t$t$, а некоторые их подстроки s[l1…r1]$s[l_1 \\ldots r_1]$ и t[l2…r2]$t[l_2 \\ldots r_2]$. \n\nКак вы уже, наверное, догадались, вам дано q$q$ запросов, i$i$-й из которых задаёт некоторые подстроки s¯=s[l1i…r1i]$\\bar s = s[{l_1}_i \\ldots {r_1}_i]$ и t¯=t[l2i…r2i]$\\bar t = t[{l_2}_i \\ldots {r_2}_i]$. Для каждого такого запроса необходимо посчитать количество вхождений строки s¯$\\bar s$ в строку t¯$\\bar t$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30748","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tВ одной стране все населённые пункты являются деревнями и расположены вдоль длинной прямой дороги. Всего вдоль дороги имеется n$n$ остановок, расстояние между любыми двумя соседними остановками равно одному километру. Рядом с некоторыми остановками расположены деревни.\n\nМинистерство транспорта решило запустить между деревнями рейсовые автобусы, ровно по одному маршруту из каждой деревни. Планируется, что автобус будет выезжать из деревни и двигаться направо вдоль дороги (в сторону увеличения номеров остановок) до тех пор, пока не встретит k$k$ деревень, либо не доедет до последней. После этого автобус будет возвращаться в начальную деревню. Так, для самой последней деревни автобус проедет расстояние 0$0$ (направо, ему, конечно, ехать некуда, и, казалось бы, он вообще никому не нужен, но этот вопрос остаётся за рамками данной задачи). Необходимо посчитать длину маршрута каждого автобуса. \n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30657","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAna e Bob gostam de brincar de geometria. Semana passada, enquanto ouviam uma canção que falava de quadrados, Bob, que estava brincando com seus blocos de madeira, se perguntou quantos quadrados poderiam ser formados usando os blocos como vértices, mas sem movê-los. Ana, que aprendeu a programar recentemente, teve a ideia de desenvolver um programa para resolver esse problema. Entretanto, Ana teve dificuldade para resolver esse problema e decidiu pedir a sua ajuda. Como os blocos são pequenos quando comparados à distância entre eles, você pode assumir que eles são pontos em um plano.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30765","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tБомбослав только что забрал чистые вещи из прачечной и разложил их по полочкам в своём шкафу. Теперь у Бомбослава в ящике лежат n$n$ чистых носков, цвет i$i$-го из них выражается целым неотрицательным числом ci$c_i$, определяющим некоторый оттенок серого цвета. Чем больше значение ci$c_i$, тем светлее носок, в частности, ci=0$c_i = 0$ означает, что носок полностью чёрный.\n\nКаждое утро Бомбослав достаёт из ящика два носка и надевает их, а вечером кладёт их в корзину с грязным бельём и больше не использует, пока не сходит снова в прачечную. Бомбослав опасается полиции моды, поэтому никогда не наденет два носка, если их оттенки серого отличаются более чем на d$d$. Формально говоря, Бомбослав может одновременно надеть носки i$i$ и j$j$ (разумеется, один носок нельзя надеть на две ноги, то есть i≠j$i \\neq j$), если |ci−cj|≤d$|c_i - c_j| \\leq d$. Известно, что Бомбослав использует ровно одну пару носков в день.\n\nБомбослав очень занятой человек, он старается оптимизировать своё время, поэтому его интересует максимальное количество дней, через которое ему всё-таки придётся нести корзину с грязным бельём в прачечную, при условии, что каждое утро он выбирает пару носков оптимально.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30766","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tКоля считает себя очень крутым программистом. При этом Коля еще и хипстер --- он не хочет программировать на какой-то стандартной клавиатуре с резиной под клавишами, и, как истинный ценитель, купил себе модную винтажную механическую клавиатуру, в которой под клавишами расположены настоящие пружины. Клавиатура оказалась настолько старой, что все символы, написанные на её клавишах, давно стёрлись, но это нисколько не смущает Колю --- ведь он очень крутой программист!\n\nС помощью своей клавиатуры Коля печатает на n$n$ различных языках. По счастливому стечению обстоятельств количество букв в каждом из этих языков совпадает с количеством клавиш на Колиной винтажной клавиатуре и равняется m$m$. Все символы всех языков присутствуют в используемой Колей кодировке и, следовательно, могут быть представлены как числа от 1$1$ до c$c$. Один и тот же символ может присутствовать в произвольном количестве языков, но для двух различных языков обязательно найдётся хотя бы один символ, который есть в одном из них и отсутствует в другом. Некоторые числа от 1$1$ до c$c$ могут быть не заняты ни одним известным Коле символом.\n\nДрузьям Коли порядком надоело, что он везде таскает с собой эту новую клавиатуру и раздражает окружающих, громко клацая её механическими клавишами. Они решили подшутить над ним и написали компьютерный вирус, который при каждом переключении языка делает две пакости:\n\n\n\tВместо переключения на какой-то определённый язык, он меняется на совершенно случайно выбранный из n$n$ языков, используемых Колей (при этом язык может и не измениться).\n\tРаскладка клавиатуры для данного языка перемешивается произвольным образом, выполняется лишь одно условие --- разным клавишам соответствуют разные символы.\n\n\nСтолкнувшись со зловредным вирусом, Коля сначала запаниковал, но вскоре понял, что всё не так уж и плохо. Нажав по разу на каждую клавишу, Коля может выяснить, какой символ ей соответствует, а по этой информации уже определить, какой язык сейчас включен. Однако ему кажется, что определить текущий язык можно и за меньшее количество нажатий. Помогите Коле показать друзьям, что он действительно крутой программист, вычислив минимальное количество нажатий на клавиши винтажной клавиатуры, которое придётся сделать Коле для определения текущего языка в самом худшем случае.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30749","content":"문제\n\nКак известно, в столице Берляндии есть \nn\n$n$ перекрёстков. На некоторых их этих перекрёстков находятся жилые дома. Пусть \nai\n$a_i$ --- это количество человек в семье, проживающей в доме, который находится на перекрёстке \ni\n$i$ для всех \n1≤i≤n\n$1 \\leq i \\leq n$. Если \nai\n$a_i$ равно нулю, будем считать, что на этом \ni\n$i$-м перекрёстке нет жилого дома.\n\nНекоторые перекрёстки соединены дорогами. Всего в Берляндии \nm\n$m$ дорог. По каждой дороге можно ходить в любом направлении. Каждая дорога соединяет два различных перекрёстка. Любые два перекрёстка соединены не более чем одной дорогой. От любого перекрёстка можно добраться по дорогам города до любого другого перекрёстка. Назовём расстоянием между перекрёстками \ni\n$i$ и \nj\n$j$ минимальное количество дорог, по которым нужно пройти, чтобы добраться от перекрёстка \ni\n$i$ до перекрёстка \nj\n$j$.\n\nКогда одна семья ходит в гости к другой семье, каждый человек находит себе ровно одного собеседника из другой семьи, и они вдвоем разговаривают между собой. Двум семьям общаться скучно, если какой-то человек останется без собеседника.\n\nПо какой-то непонятной причине правительство Берляндии попросило вас найти два ближайших жилых дома \nv\n$v$ и \nu\n$u$, таких что если семья из дома \nv\n$v$ придёт в гости к семье из дома \nu\n$u$, то им будет скучно общаться, то есть \nav>0\n$a_v > 0$, \nau>0\n$a_u > 0$, \nav≠au\n$a_v \\ne a_u$ и расстояние от \nv\n$v$ до \nu\n$u$ минимально. Гарантируется, что существуют два жилых дома с различным количеством жильцов."},{"problemId":"30725","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tСегодня у Алёны выходной, а значит ничто не помешает ей заниматься любимым делом --- смотреть сериалы по телевизору. В течение всего дня на канале А будут показывать новый сезон сериала <<Борьба табуреток>>, а на канале Б новый сезон сериала <<Дворец из домино>>. Поскольку Алёна не может выбрать, какой из этих двух сериалов ей нравится больше, то она решила попробовать смотреть оба, переключаясь на другой канал каждый раз, когда начинается реклама.\n\nВ момент времени 0$0$ Алёна включит телевизор и начнёт смотреть сериал <<Борьба табуреток>> по каналу А. Если в какой-либо момент времени на телеканале, который Алёна сейчас смотрит, начнётся реклама, то Алёна переключит телевизор на другой телеканал и будет смотреть его. Если Алёна переключает телеканал, а там тоже в данный момент идёт реклама, то она не станет переключаться обратно в надежде, что на этом канале реклама закончится раньше. В момент времени t$t$ Алёна выключит телевизор и пойдёт спать.\n\nПо заданному расписанию показа рекламы и продолжительности одного рекламного ролика определите, какое количество единиц времени Алёна будет смотреть каждый из сериалов.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30750","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tНа одну из кафедр филфака университета Байтландии поступили n$n$ студентов. Поскольку они совершенно не знакомы друг с другом, им необходимо найти способ быстро и надежно передавать друг другу информацию о предстоящих экзаменах и зачётах.\n\nДля этого студенты создадут несколько диалогов в новом Байтландском мессенджере. В каждом диалоге будет участвовать ровно два студента. Информация будет распространяться следующим образом: после того, как один из студентов узнал о предстоящей контрольной работе, он рассылает это сообщение во все диалоги со своими одногруппниками. После этого все те люди, которым он разослал сообщения и которые его ещё не получали, рассылают сообщение во все диалоги, в которых они участвуют и так далее.\n\nСтароста загорелся идеей построить сеть диалогов таким образом, чтобы каждый получил сообщение хотя бы один раз. При этом он хочет, чтобы количество диалогов было минимально возможным. Поскольку таких вариантов всё ещё очень много, староста придумал свою странную оценку качества сети диалогов: каждому человеку из группы он сопоставил число ai$a_i$. Он считает, что оценка одного диалога, созданного между одногруппником u$u$ и одногруппником v$v$, равна НОДНОД(au,av)$НОД(a_u, a_v)$, где НОДНОД(x,y)$НОД(x, y)$ --- наибольший общий делитель чисел x$x$ и y$y$, то есть максимальное целое положительное d$d$, которое делит и x$x$, и y$y$. Староста хочет, чтобы суммарная оценка всех диалогов была как можно больше.\n\nПомогите старосте найти максимальную суммарную оценку!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30767","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tАня и Боря играют в известную игру Dungeons & Dragons. Сейчас их герой находится в подземелье и сражается с драконом. К несчастью, силы неравны, и у героя друзей осталась лишь одна жизнь, а значит, следующая атака принесёт дракону победу, и игра завершится. Осталась только одна надежда на спасение --- нанести критический удар, мгновенно убивающий дракона.\n\nСогласно правилам той версии игры Dungeons & Dragons, в которую играют Аня и Боря, чтобы нанести критический удар, они должны одновременно бросить свои кубики. Они смогут нанести критический удар, только если сумма выпавших на кубиках значений в точности равна n$n$. Кубик Ани устроен таким образом, что на нём может выпасть любое целое число от a$a$ до b$b$ включительно. Аналогично на кубике Бори может выпасть любое целое число от c$c$ до d$d$ включительно.\n\nРебята очень хотят поиграть подольше, поэтому они просят вас посчитать количество возможных исходов, при которых их герой нанесёт критический удар. Два варианта считаются различными, если в них отличаются значения, выпавшие хотя бы на одном из кубиков. Например, вариант, когда на первом кубике выпало значение 1$1$, а на втором выпало значение 2$2$, отличается от варианта, когда на первом кубике выпало значение 2$2$, а на втором --- значение 1$1$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30658","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tEric Ruiz Irrigado, o famoso Erí, é conhecido entre seus amigos por querer fazer previsões. Em ´ todo tipo de competição ou evento esportivo ele sempre tenta adivinhar os vencedores, os perdedores, artilheiros e coisas similares. Apesar das brincadeiras e deboches de seus amigos, Erí nunca desistiu e sempre busca padrões onde os outros vêem apenas coincidências.\n\nAcompanhando os times da Maratona de Programação, Erí percebeu que a colocação dos times de seu estado na primeira fase sempre se invertiam na segunda fase, ainda que outros times de outras regiões do país estivessem entre eles. Assim, se o time da Uni1 ficar na frente da Uni2 na primeira fase, Erí imagina que o time da Uni2 ficará na frente do time da Uni1 na segunda fase.\n\nPara validar sua hipótese, ele quer desenvolver um programa que, dada uma lista de colocação dos times na primeira fase, mostre qual será a posição relativa destes mesmos times na segunda fase.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30659","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tEm toda cidade vemos que algumas vias são mais largas que outras. Isto é, algumas tem mais faixas de rolamento para veículos do que outras. Cada faixa de rolamento a mais numa via significa que mais carros podem ir de um extremo a outro desta via num mesmo intervalo de tempo.\n\nÉ comum termos a sensação de que, na hora do rush (aquele período em que a maior parte da população se desloca de casa para o trabalho ou vice-versa), nunca existem faixas de rolamento suficientes por conta do congestionamento que se forma.\n\nRoberval, nosso herói trabalhador, trabalha na companhia de engenharia de tráfego da SBCity. Seu chefe está muito preocupado com as condições de trânsito da cidade, pois, com a instalação iminente de uma nova empresa na cidade, a Empresa de Reciclagem Insubstituível do Rio de Janeiro, ERI-RJ, o número de veículos circulando aumentará consideravelmente. Assim, ele quer fazer uma análise sobre a possibilidade de surgimento de novos engarrafamentos e Roberval, claro, foi eleito para descobrir se eles ocorrerão.\n\nSua idéia é bem simples: simular a situação do trânsito. Mais especificamente, o trânsito do local onde a ERI irá se instalar para alguns bairros de interesse, onde morarão os funcionários da empresa. A quantidade de funcionários morando em cada um desses bairros dependerá da facilidade de acesso a esses bairros. Portanto, você pode assumir que os funcionários são indiferentes ao bairro onde morarão.\n\nQuando der a hora de saída do trabalho, todos os funcionário da ERI-RJ começarão a sair furiosamente em direção 'as suas casas num fluxo constante de veículos que levará algumas horas para cessar. Como o estacionamento da empresa é bem grande mas com apenas uma saída para cada rua, a quantidade de carros saindo da empresa por segundo é limitada.\n\nRoberval fez uma modelagem simplificada da cidade e quer saber se existe capacidade para receber todos esses veículos sem criar gargalos nas ruas da cidade. Lembre-se que os motoristas de SBCity não se importam de percorrerem caminhos maiores desde que não encontrem gargalos pela frente nem de alterarem seus caminhos para que outros motoristas também possam chegar até suas casas sem trânsito.\n\nDado um mapa de ruas da SBCity e a quantidade de carros por segundo que cada via comporta, diga se é possível que os funcionários da empresa saiam do trabalho ao mesmo tempo sem enfrentar os desagradáveis congestionamentos do dia-a-dia.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30751","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tВупсень очень любит давать задачи на поиск наибольшей общей подпоследовательности. Пупсень очень любит давать задачи на поиск наибольшей правильной скобочной подпоследовательности. Нет ничего удивительного в том, что они решили объединиться и подготовить очень сложную задачу на поиск наибольшей общей правильной скобочной подпоследовательности.\n\nПодпоследовательностью строки a$a$ называется такая строка b$b$, которую можно получить удалением из строки a$a$ символов на каких-либо (возможно, никаких) позициях.\n\nПоследовательность круглых скобок называется правильной в следующих случаях:\n\n\n\tЕсли она пустая.\n\tЕсли она состоит из правильной скобочной последовательности, заключённой в скобки.\n\tЕсли она состоит из двух правильных скобочных последовательностей, записанных одна за другой.\n\n\nВам даны две строки s$s$ и t$t$, состоящие из круглых открывающих и закрывающих скобок. Найдите правильную скобочную последовательность w$w$ максимальной длины, являющуюся подпоследовательностью строк s$s$ и t$t$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30726","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tВ качестве новогоднего подарка Андрей получил коробку с конфетами. Или не совсем коробку. На самом деле он быстро обнаружил, что внутри коробки находятся ещё несколько одинаковых коробок меньшего размера, внутри которых содержатся ещё меньшие коробки и так далее... Формально, скажем что конфета является коробкой уровня 0$0$, а коробка уровня i$i$ содержит в себе ai$a_i$ коробок уровня i−1$i - 1$. Коробка, подаренная Андрею, имеет уровень n$n$.\n\nСегодня к Андрею в гости придут друзья и он хочет поделиться с ними некоторым количеством конфет, для чего ему придётся открыть некоторое количество коробок. Разумеется, Андрей не может открыть коробку, если она находится внутри ещё не открытой коробки. Ему хотелось бы знать, какое минимальное количество коробок ему потребуется открыть, чтобы достать x$x$ конфет. Поскольку Андрей ещё не уверен, сколько друзей к нему сегодня придут, он просит вас решить задачу для нескольких значений x$x$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30768","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tКак известно, в Берляндии ровно две проблемы, и дороги --- одна из них.\n\nИз курса школьной географии вам должно быть знакомо, что в Берляндии ровно n$n$ городов и m$m$ дорог с двусторонним движением. Некоторые дороги, будем честны, находятся в плачевном состоянии.\n\nДля поддержания качества дорог правительство объявило некоторые из них платными. Каждая платная дорога обслуживается одной из k$k$ компаний, которая и обеспечивает своевременный ремонт дороги (она же и взимает плату за проезд по ней).\n\nВ Берляндии не только две проблемы, но и две столицы. Они находятся на разных широтах, поэтому одну называют Северной, а другую --- Южной. Споры о том, какая столица главнее, длятся уже много лет, но для компаний важно не кто главнее, а то, что именно между этими двумя городами сосредоточен основной автомобильный трафик. \n\nБерляндская антимонопольная служба заподозрила, что дороги были распределены нечестно, а именно, что существует путь между Северной столицей и Южной, такой что какая-то из компаний не владеет ни одной из дорог этого пути. По мнению представителей службы, это создает нездоровую конкуренцию, и таких ситуаций необходимо избегать, но для начала необходимо выявить все компании, страдающие от подобной несправедливости. Эту нелёгкую задачу антимонопольная служба поручила вам.\n\nНазовем компанию обделённой, если существует какой-нибудь путь между двумя столицами, на котором нет ни одной дороги, обслуживаемой этой компанией. Выведите номера всех обделённых компаний.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30752","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tБригадир Павел руководит командой рабочих, занимающихся возведением концертного зала по новейшему проекту иностранных архитекторов. Главной особенностью здания должна стать колоннада у главного входа, состоящая из n$n$ колонн. При этом, каждая из колонн, вопреки классическим архитектурным представлениям, будет иметь свою высоту, не совпадающую с высотой крыши над входом. По текущему плану высоты колонн составляют a1,a2,…,an$a_1, a_2, \\ldots, a_n$ метров относительно уровня крыши в порядке следования слева направо (например, высота в 10$10$ метров означает, что колонна выдаётся на десять метров над крышей, а высота в −5$-5$ метров означает, что между верхом колонны и крышей остаётся зазор в пять метров).\n\nЗа три дня до сдачи объекта и торжественного открытия зала архитекторы прибыли на место строительства и изменили проект, выдвинув новое требование: в соответствии с последними веяниями европейской моды разность высот любых двух соседних колонн должна быть одной и той же, то есть, для любых двух целых i$i$ и j$j$ от 1$1$ до n−1$n - 1$ должно выполняться условие: ai+1−ai=aj+1−aj$a_{i+1} - a_i = a_{j+1} - a_j$. Точное значение высоты каждой колонны при этом не имеет значения. По техническим причинам колонны могут только иметь высоту, выражающуюся целым числом метров относительно уровня крыши.\n\nИзменение высоты колонны на x$x$ метров как в сторону увеличения, так и в сторону уменьшения, будет стоить x$x$ бурлей. Павел просит вас помочь ему выбрать новую высоту для каждой колонны так, чтобы выполнить поставленное требование и затратить при этом суммарно как можно меньше денег на изменение высот колонн. Помогите ему, или его больше никогда не будут приглашать возводить здания по иностранным проектам.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30727","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tСегодня на уроке строковедения профессор Моррис рассказывал студентам различные способы вычисления расстояния между двумя строками. Один из способов был следующий, пусть имеются две строки s$s$ и t$t$ длины n$n$, состоящие только из десятичных цифр. Тогда цифровым расстоянием между двумя данными строками профессор Моррис считает сумму модулей разности цифр на одинаковых позициях, то есть ∑i=1n|si−ti|$\\sum_{i = 1}^{n} |s_i - t_i|$, где si$s_i$ означает цифру, записанную на позиции i$i$ в строке s$s$, а ti$t_i$ означает цифру, записанную на позиции i$i$ в строке t$t$.\n\nВ качестве домашнего задания профессор дал каждому студенту строку длины n$n$ и поручил выписать все строки длины n$n$ (а это целых 10n$10^n$ строк) в порядке неубывания цифрового расстояния до данной строки. При равенстве расстояния до двух строк, их следует сравнивать лексикографически.\n\nПоскольку у профессора мало времени, чтобы проконтролировать выполнение всего задания каждым из студентов, он дополнительно сообщил каждому из них число k$k$ и просит лишь сказать ему строку, находящуюся на k$k$-м месте в выписанной последовательности. Студенты не горят желанием выполнять вручную столь объёмное и монотонное задание, поэтому попросили вас написать программу, которая будет выводить ответ по заданной строке и числу k$k$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30769","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tГлавный распорядитель столовой Галактической Школы Добра Иннокентий очень любит порядок. Но каждый день на Очень Большой Перемене, когда ученики направляются на обед, в его владениях воцаряется хаос. \n\nНачинается всё вполне безобидно --- двое самых проворных школьников встают в очередь. Далее очередь расширяется в k$k$ этапов. На i$i$-м этапе (1⩽i⩽k$1 \\leqslant i \\leqslant k$) в каждый промежуток между соседними школьниками, уже стоящими в очереди, вклинивается по ai$a_i$ человек. Например, в случае k=2$k = 2$, a1=3$a_1 = 3$, a2=1$a_2 = 1$ после первого этапа расширения в очереди оказывается 5 человек, а после второго --- 9.\n\nНесмотря на название учебного заведения, такие метаморфозы очереди не проходят без ссор и потасовок. Уставший от бардака Иннокентий твёрдо решил бороться с этим безобразием. Для того чтобы железной рукой наводить порядок, он хочет научиться выяснять, как происходил процесс расширения очереди, зная только итоговое число n$n$ учеников в ней. Понимая, что по n$n$ процесс не восстанавливается однозначно, Иннокентий хочет найти максимально возможное число этапов расширения очереди k$k$, а также соответствующий ему набор чисел ai$a_i$ (1⩽i⩽k$1 \\leqslant i \\leqslant k$), обозначающих количества школьников, которые вклинивались между каждыми двумя соседями в очереди на каждом из этих этапов.\n\nКоличество воспитанников Школы, которые могут прийти в столовую, поистине огромно, поэтому за помощью в этом нелёгком деле Иннокентий обратился к вам.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30728","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tГород N состоит из n$n$ перекрёстков и m$m$ соединяющих их двусторонних дорог. Известно, что из любого перекрёстка выходят хотя бы две дороги, и что, используя данную сеть дорог, можно дойти от любого перекрёстка до любого другого перекрёстка. Дополнительно известно, что любые два перекрёстка напрямую соединены не более, чем одной дорогой.\n\nСтудент только что вышел из увеселительного заведения, расположенного рядом с перекрёстком s$s$, и направляется в свой дом, расположенный рядом с перекрёстком t$t$. Каждую минуту происходит следующее:\n\n\n\tСтудент выбирает одну из дорог, начинающихся от перекрёстка, где он сейчас находится, и идёт вдоль этой дороги.\n\tЕсли он оказался в перекрёстке с номером t$t$, то он немедленно идёт домой и ложится спать.\n\tВ противном случае под неожиданным воздействием непреодолимой жажды приключений он выбирает какую-то случайную дорогу, начинающуюся от текущего перекрёстка, и идёт вдоль неё. Единственное ограничение состоит в том, что он никогда не выберет дорогу, вдоль которой он только что попал на данный перекрёсток (то есть использовал её в пункте 1 текущей минуты).\n\tЕсли после этого действия он оказался на перекрёстке t$t$, то он идёт домой.\n\n\nПо заданному описанию дорожной сети города и номерам перекрёстков s$s$ и t$t$ определите, верно ли что студент сможет гарантированно попасть домой за конечное число шагов. Если это так, то определите минимальное число x$x$, такое что студент сможет оказаться дома за не более, чем x$x$ минут, вне зависимости от того, какие случайные решения он будет принимать в пункте 3 каждой минуты.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30753","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tЭто интерактивная задача. В секции <<Протокол взаимодействия>> вы найдёте информацию о том, как сбрасывать буфер вывода (делать операцию 'flush').\n\nВ новом квесте, набирающем популярность в городе N, игроку необходимо выбраться из лабиринта, состоящего из неизвестного числа комнат. В каждой комнате имеется некоторое количество дверей, одна лампочка и два переключателя. Первый переключатель в каждой из комнат отвечает за включение и выключение лампочки и может быть использован произвольное количество раз. Второй переключатель может быть активирован только один раз и он запирает все двери, ведущие из данной комнаты, сразу после того как игрок пройдет через одну из них, после чего комната становится недоступной.\n\nИзначально все комнаты открыты, и в некоторых из них горит свет. Целью игры является включить свет во всех комнатах лабиринта, а также закрыть все комнаты, кроме одной (любой). Данная задача была бы простой, если бы у игрока была возможность оставлять в комнатах какие-то отметки, но это запрещено правилами квеста. Когда игрок заходит в какую-либо комнату, он видит только количество дверей в этой комнате, горит или не горит в ней свет, а также знает через какую дверь он только что вошёл. Заходя в комнату, игрок всегда видит двери в одном и том же порядке и нумерует из одинаково.\n\nИгрок может выполнять следующие действия:\n\n\n\tВключить свет в комнате, где он сейчас находится.\n\tВыключить свет в комнате, где он сейчас находится.\n\tПопробовать пройти через какую-то из дверей, данное действие завершится успехом, если комната по ту сторону двери не заперта. Проходя через какую-либо из дверей можно также активировать закрытие покидаемой комнаты.\n\tЗавершить игру, если игрок считает, что он уже запер все комнаты кроме текущей и включил везде свет.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30770","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tЕжедневно огромное количество людей пользуется электричками. В данной задаче мы рассмотрим направление от станции <<Жилые Мытищи>> (далее ЖМ) до станции <<Большая Центральная>> (далее БЦ). Всего вдоль этого направления находится n+1$n + 1$ станция, при этом станция ЖМ имеет номер n$n$, а станция БЦ имеет номер 0$0$. Все пары соседних станций (то есть пары станций с номерами i$i$ и i+1$i + 1$) соединены перегонами, при этом никакие другие пары перегонами не соединены.\n\nКаждая электричка стартует в ЖМ и едет в БЦ, при этом на станции номер i$i$ ежедневно находятся ci$c_i$ пассажиров, которые хотят попасть на станцию БЦ. Других пассажиров не бывает, ведь кому придёт в голову ехать не до конечной станции? Для каждого перегона известно количество минут ei$e_i$, за которое его проезжает обычная электричка. Посадка пассажиров на электричку происходит моментально.\n\nСовет директоров компании Российские Стальные Дороги решил пустить экспресс из депо станции <<Жилые Мытищи>> до станции <<Большая Центральная>>. После продолжительных совещаний было решено назвать новый поезд <<Путник>>. На каждом перегоне была построена отдельная колея для нового поезда, и время его проезда от станции i$i$ до станции i−1$i - 1$ составляет pi$p_i$. Как это часто бывает на практике, pi$p_i$ может быть как меньше ei$e_i$, так и больше.\n\nПоскольку <<Путник>> --- не просто электричка, то ему требуется одна минута на остановку, чтобы бортпроводники провели инструктаж по технике безопасности при поездках на высокоскоростных поездах.\n\nВсе пассажиры руководствуются весьма простой логикой: они будут пользоваться новым экспрессом вместо старой электрички, только если это сделает время в пути от их станции до станции 0$0$ строго меньше. Считается, что пассажир садится в <<Путник>> в самом начале его остановки, то есть тратит минуту на приветствие бортпроводника и прослушивание инструктажа.\n\nСовет директоров хочет максимизировать популярность нового поезда, поэтому они поручили вам выбрать, на каких именно станциях должен останавливаться экспресс, чтобы как можно больше людей им воспользовались. Обратите внимание, что, хотя <<Путник>> стартует из депо станции <<Жилые Мытищи>>, он не обязан остановиться на этой станции.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30729","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tНа дворе уже ранняя весна, а Бомбослав только что получил диплом заключительного этапа Открытой олимпиады школьников по программированию и сейчас находится на даче, помогая своему дедушке Пафнутию Максимовичу засеять огород.\n\nОгород представляет собой прямоугольник размеров w×h$w \\times h$, где w$w$ и h$h$ --- целые числа. В этом году Пафнутий Максимович решил засеять огород репой и редькой. При этом он хочет для каждого из растений выделить некоторую область огорода в виде квадрата с целой длиной стороны, причём ориентированного таким образом, что стороны квадрата параллельны сторонам огорода. Квадраты могут иметь разные размеры, но они не должны выходить за пределы огорода и не могут пересекаться по ненулевой площади.\n\nБомбослав хочет продемонстрировать дедушке, что не зря получил диплом Олимпиады, и поэтому он решил вычислить, какую максимальную площадь огорода можно засеять указанным способом. Поскольку репу дедушка Бомбослава любит меньше, чем редьку, разрешается не сеять её вовсе (то есть использовать только одну квадратную область), если это позволит покрыть б\\'{о}льшую площадь огорода. \n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30754","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tИскандер и Оля любят придумывать ребусы. Но больше, чем придумывать ребусы, они любят придумывать какие-нибудь игры на строках. Вот и сейчас им в голову пришла забавная игра со следующими правилами:\n\n\n\tВыбирается какой-то набор запрещённых двоичных (состоящих из нулей и единиц) строк f1,f2,…,fn$f_1, f_2, \\ldots, f_n$. \n\tВыбирается некоторая стартовая бинарная строка s$s$, такая что ни одна из запрещённых строк не входит в неё как подстрока.\n\tИгроки по очереди дописывают в конец строки s$s$ по одному символу <<0>> или <<1>>. Оля ходит первой.\n\tПроигрывает тот, после чьего хода хотя бы одна из запрещённых строк f1,f2,…fn$f_1, f_2, \\ldots f_n$ входит в s$s$ как подстрока.\n\tВ случае если при оптимальной игре обоих игроков игра может продолжаться сколь угодно долго, то объявляется ничья.\n\n\nВы обожаете портить другим людям их любимые развлечения, поэтому решили написать программу, которая будет определять исход игры по заданному набору запрещённых строк и стартовой строке s$s$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30771","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tФлорен и её друзьям на уроке английского поручили подготовить рефераты по предоставленным статьям --- каждому ученику была выдана отдельная статья, по которой он должен сделать реферат. В рамках данной задачи статьёй называется непустая строка, состоящая из строчных символов английского алфавита. Рефератом статьи называется непустая строка, являющаяся подстрокой данной статьи. Все ученики должны будут представить свои рефераты у доски. Чтобы их было интереснее слушать, учитель потребовал, чтобы каждый из представленных рефератов не встречался как подстрока ни в одном тексте статьи, кроме той, из текста которой он был образован. \n\nТак как Флорен и её друзья не любят тратить много времени на выполнение домашнего задания, они попросили вас помочь им выбрать для каждой статьи реферат минимальной длины, который не является подстрокой никакой другой статьи, либо сообщить, что выбрать реферат, удовлетворяющий требованию учителя, невозможно. Если для какого-то ученика возможно образовать несколько кратчайших рефератов, из них требуется выбрать лексикографически минимальный. Вы, конечно же, согласились им помочь.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30755","content":"문제\n\nBritish scientists decided to study ornithology and to investigate the life of an extraordinary kind of cuckoos. They have planted a large tree and put \nn\n$n$ nests on it, each of the nests is inhabited with one cuckoo. The investigation involves checking if it is possible to put an extra egg to the certain nest or not.\n\nEach egg may be raised only in some two of the nests. Each egg is defined as an unordered pair of distinct integers \n(x,y)\n$(x, y)$. The egg \n(x,y)\n$(x, y)$ may be raised in any of the nests \nx\n$x$ and \ny\n$y$ and may not be raised in any of the other nests. Notice that egg \n(x,y)\n$(x, y)$ не is the same as the egg \n(y,x)\n$(y, x)$.\n\nNow we will describe the process of putting an extra egg into a given nest. Suppose we want to put the egg \n(x,y)\n$(x, y)$ to the nest \nx\n$x$. If the nest \nx\n$x$ is empty then \n(x,y)\n$(x, y)$ remains in that nest and the process is over. Otherwise, if there is already an egg \n(x,p)\n$(x, p)$ in the nest \nx\n$x$, then cuckoo puts the egg \n(x,y)\n$(x, y)$ to the nest \nx\n$x$ and tries to put the egg \n(x,p)\n$(x, p)$ to the nest \np\n$p$ in a similar manner, and the process continues.\n\nYou task is to answer several queries of the scientists. There are three types of queries:\n\n\\item(Theoretical) Will the process of putting of an egg \n(x,y)\n$(x, y)$ to the nest \nx\n$x$ eventually stop? Since the question is theoretical, this egg is not added actually, and the state of nests is not changed.\n\\item(Practical) Will the process of putting of an egg \n(x,y)\n$(x, y)$ to the nest \nx\n$x$ eventually stop? If the answer is positive, the egg is added according to the description of the process above.\n\\item(Theoretical) How many ordered pairs of distinct integers \n(x,y)\n$(x, y)$ exist such that the egg \n(x,y)\n$(x, y)$ may be put into the nest \nx\n$x$ and the process will eventually stop? The answer for each pair is determined independently from any other pair."},{"problemId":"30730","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tМама подарила маленькой девочке Алёне массив чисел. Девочку заинтересовали непрерывные подмассивы с равными числами на концах. Среди таких подмассивов ненулевой длины Алёна хочет найти подмассив с максимальной суммой. Формально говоря, требуется найти такие 1≤l≤r≤n$1 \\leq l \\leq r \\leq n$, что al=ar$a_l = a_r$ и сумма чисел al+al+1+⋯+ar$a_l + a_{l+1} + \\dots + a_r$ максимальна.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30772","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tЭто интерактивная задача.\n\nНа Новый год Дед Мороз подарил Глебу то, о чём он уже давно мечтал --- клетчатый квадрат размером n×n$n \\times n$. Подарок этот не простой, а с сюрпризом --- внутри квадрата Дед Мороз выбрал некоторый непустой прямоугольник, и в каждую клетку этого прямоугольника он положил по мандарину.\n\nТеперь, чтобы получить желанный подарок, Глебу нужно сыграть с Дедом Морозом в очень интересную игру. Глеб должен отгадать, в каком именно прямоугольнике находятся все мандаринки, подаренные Дедом Морозом. Будем считать, что строки и столбцы занумерованы числами от 1$1$ до n$n$ снизу вверх и слева направо. Глеб может производить два типа запросов:\n\n\n\t ?x1y1x2y2$?\\,\\,x_1\\,y_1\\,x_2\\,y_2$ (1≤x1≤x2≤n$1 \\le x_1 \\le x_2 \\le n$, 1≤y1≤y2≤n$1 \\le y_1 \\le y_2 \\le n$) --- в ответ на этот запрос Дед Мороз говорит, сколько мандаринок находится в прямоугольнике, левым нижним углом которого является клетка (x1,y1)$(x_1,\\,y_1)$, а правым верхним --- клетка (x2,y2)$(x_2,\\,y_2)$;\n\t !x1y1x2y2$!\\,\\,\\,x_1\\,y_1\\,x_2\\,y_2$ (1≤x1≤x2≤n$1 \\le x_1 \\le x_2 \\le n$, 1≤y1≤y2≤n$1 \\le y_1 \\le y_2 \\le n$) --- когда Глеб уверен, что он точно знает, где находятся мандаринки, он должен сделать запрос такого вида, чтобы сообщить свой ответ. При этом (x1,y1)$(x_1, y_1)$ соответствует предполагаемому расположению левого нижнего угла, а (x2,y2)$(x_2, y_2)$ --- правого верхнего.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30756","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tWhen Gleb is not busy with writing long problem statements he enjoys playing with numbers. He picks two integers l$l$ and r$r$ and tries to find integers a$a$ and b$b$ such that l≤a≤b≤r$l \\le a \\le b ≤ r$ and the Hamming distance between a$a$ and b$b$ is maximum possible.\n\nThe Hamming distance between two integers x$x$ and y$y$ is defined as the number of decimal places at which they are different. If these integers are of different length, the shorter one is prepended with leading zeroes.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30731","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tКолдун Азазель заполучил наконец Жезл Всевластия, на который последовательно нанизаны волшебные кольца. На каждом кольце выгравирована одна строчная или заглавная буква английского алфавита. Таким образом, если прочитать буквы на кольцах от начала к концу жезла, то получится строка s$s$. Перед использованием своего нового сокровища на батле всех колдунов Азазель решил изучить его магические свойства.\n\nПрочитав прилагавшуюся к Жезлу Всевластия инструкцию, Азазель узнал, что магические свойства жезла раскрываются только если в строке s$s$ не встречается в качестве подпоследовательности заклинание, определяемое строкой t$t$. Строка t$t$ встречается в строке s$s$ в качестве подпоследовательности, если из строки s$s$ можно получить строку t$t$, выкинув некоторые буквы (возможно, пустое множество). Обратите внимание, что оставшиеся буквы не обязаны следовать подряд в исходной строке s$s$.\n\nТеперь Азазель хочет снять с жезла некоторые кольца, так чтобы строка t$t$ не встречалась в нём в качестве подпоследовательности. Поскольку он не додумался прочитать инструкцию до конца, то оставшиеся кольца он разместит на жезле в том же самом порядке, в котором они шли исходно. Чтобы сохранить у жезла как можно больше магической силы, Азазаль планирует снять как можно меньшее количество колец.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30773","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tОбратите внимание на нестандартное ограничение по памяти в данной задаче.\n\nВася очень любит участвовать в олимпиадах по информатике. Он уже давно понял, что больше всего ему нравится решать задачи, связанные со строками. Особенное впечатление на него произвела недавно изобретенная структура данных --- дерево палиндромов. Оказалось, что практически любую задачу на строки можно решить с помощью этой поистине всесильной структуры, ведь она умеет находить палиндромы даже там, где их нет и в помине!\n\nВасе никак не удается заставить дерево палиндромов не искать, а создавать палиндромы из строк. А ведь так хочется! При этом, так как Вася очень ценит встречающиеся ему строки, он хочет лишь добавлять в них символы в произвольных местах, но не удалять и не изменять их. Помогите ему найти способ превращать обычные строки в палиндромы!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30757","content":"문제\n\nStarting from year \n20xx\n$20xx$ organizers of all Olympiads in Informatics for high school students decided to conduct their competitions online. An Organization of Online Olympiads (OOO) was created to control and monitor that no one thinks of announcing an onsite competition. Of course, such a powerful and respectful organization needs its own contest managing system. Efficient managers were already hired, sticks and blue tape bought.\n\nIn order to increase the efficiency of solutions evaluation a new architecture was introduced. Initially, there are \nm\n$m$ tests located in the testing queue in order from test \n1\n$1$ to test \nm\n$m$. Scheduling module consequently performs \nn\n$n$ moves. On the \ni\n$i$-th move it picks a segment of elements of the queue consisting of elements on positions from \nli\n$l_i$ to \nri\n$r_i$ inclusive (positions are numbered starting with \n1\n$1$) and runs the solution on tests on the positions of \nli,li+2,li+4,…,ri\n$l_i, l_i + 2, l_i + 4, \\ldots, r_i$ (its guaranteed that \nli\n$l_i$ and \nri\n$r_i$ are of the same parity). After this is done, all the tests that solution have already been run on are removed from the testing queue and the remaining tests are shifted such that no empty space is left between them. For example, if the testing queue contains tests with initial indices \n2,3,4,5,10,12,13,20\n$2, 3, 4, 5, 10, 12, 13, 20$ and scheduling module applies operation \nli=3\n$l_i = 3$, \nri=7\n$r_i = 7$, the solution will run on tests at position \n3\n$3$, \n5\n$5$ and \n7\n$7$, that have initial indices \n4\n$4$, \n10\n$10$ and \n13\n$13$. After this the testing queue will look like \n2,3,5,12,20\n$2, 3, 5, 12, 20$.\n\nYour goal is to implement the part of this module that for each of the \nn\n$n$ moves determines the minimum and the maximum initial index of the test that solution was run on at this move."},{"problemId":"30774","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tКосмические захватчики в очередной раз отправили экспедицию на Землю. Для устрашения местного населения ими было решено рисовать круги на полях.\n\nКосмические захватчики выбрали на поле точку (x1,y1)$(x_1, y_1)$ и нарисовали c центром в этой точке n$n$ окружностей с радиусами a1,a2,…,an$a_1, a_2, \\dots, a_n$, после чего с центром в другой точке (x2,y2)$(x_2, y_2)$ они нарисовали m$m$ окружностей с радиусами b1,b2,…,bm$b_1, b_2, \\dots, b_m$.\n\nНе то что бы жители Земли хоть сколько-нибудь настороженно относятся ко всяким пришельцам из Космоса, но на всякий случай они хотят знать, сколько на поле образовалось областей, ограниченных линиями нарисованных захватчиками окружностей.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30758","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tVanya attempted to change his life once again and decided to create a schedule of jackets he is going to wear during the next n$n$ days.\n\nHe read several manuals on jackets operation and found out that different jackets are designed for different temperature ranges. For each of his m$m$ jackets he determined values of li$l_i$ and ri$r_i$, the minimum and maximum temperature value that admits wearing the i$i$-th jacket.\n\nVanya knows the weather forecast for the next n$n$ days, namely there will be the temperature of aj$a_j$ during the j$j$-th day. Since Vanya is sane enough, he will choose the appropriate jacket for each temperature, that is, on the j$j$-th day he will wear any jacket i$i$ such that li≤aj≤ri$l_i \\leq a_j \\leq r_i$. Also, Vanya tries to be really fashionable, so he never wears the same jacket for two consecutive days. \n\nGiven the fact that Vanya's mother does not allow him leaving home without the jacket or wearing several jackets, create a schedule of which jackets he should wear during the next n$n$ days satisfying all the requirements of Vanya.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30732","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tМаленький Дима увлекается физикой и обожает эксперименты. Сегодня он решил поставить очередной познавательный опыт.\n\nУ Димы есть бесконечно высокая труба, на дне которой находится клапан, позволяющий при активации уменьшить уровень воды в трубе ровно на один сантиметр. Внутри трубы расположены n$n$ датчиков. Датчик с номером i$i$ находится на высоте hi$h_i$ сантиметров от дна трубы, при этом датчик с б\\'{о}льшим номером находится на большей высоте. Все датчики подключены к цепи управления клапаном, которая опрашивает датчики по очереди, начиная c датчика с номером n$n$ и заканчивая датчиком с номером 1$1$, при этом датчик с номером i$i$ опрашивается vi$v_i$ раз подряд. Во время опроса датчика с номером i$i$, если уровень воды не ниже высоты, на которой находится датчик, открывается клапан, и уровень воды понижается на один сантиметр.\n\nДима решил проводить эксперимент следующим образом.\n\n\n\tДима выбирает некоторое целое число x$x$.\n\tВ начале каждой секунды Дима заливает в трубу воду так, чтобы уровень воды в трубе повысился на x$x$ сантиметров.\n\tЗатем в эту же секунду Дима запускает цепь управления, в результате чего уровень воды понижается.\n\tЕсли в конце секунды уровень воды не меньше, чем H$H$ сантиметров, то Дима заканчивает эксперимент. В противном случае Дима продолжает эксперимент, заливая в трубу ещё воды в начале следующей секунды.\n\n\nСчитайте, что процесс добавления воды и работы цепи управления занимает пренебрежимо малое время. Также считайте, что труба достаточно высокая, чтобы вместить любое количество воды. В начале эксперимента воды в трубе нет.\n\nЧерез T$T$ секунд Димина мама вернётся домой и будет очень недовольна, если увидит, как Дима занимается переливанием воды вместо решения задач заочного тура Открытой олимпиады по программированию. Поэтому Дима решил выбрать x$x$ так, чтобы эксперимент закончился не позже, чем через T$T$ секунд. Кроме того, Дима не хочет носить много воды и хочет выбрать минимальное подходящее x$x$. Помогите Диме успеть провести эксперимент до возвращения мамы домой.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30759","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tNowadays, many of the people who prepare programming competitions are the former participants. This is good because former competitors not only know many competition details, but are also able to prepare the statements, admin the judgement system and do a lot of other interesting (or not so interesting) stuff. How would the things look like if the competition will be prepared by designers?\n\nIn one imaginary world the Open Olympiad in Design takes place. There are n$n$ problem, which are prepared by n$n$ statements designers (one for each problem), one designer of problem names and one font designer. Each of the n$n$ designers who prepare statements has already finished his job and left some fixed space for the problem name. In particular, the lengths of the name of the i$i$-th problem should be equal to exactly li$l_i$ characters.\n\nAccording to competition rules problem names should be made of Unicode characters, be distinct and be located in lexicographical order (check the notes section). Font designer asked the problem names designer to pick such names that all conditions are satisfied and least possible number of distinct letters is used, so the amount of job he has to do is minimized.\n\nFind out the minimum possible amount of distinct letters, required to obtain n$n$ words of given lengths such that they are distinct and go in lexicographical order. Please, not that you are not allowed to change the order of the problems.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30775","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tОлимпиада всегда приносит много хлопот для жюри и оргкомитета, и очный тур Открытой олимпиады не является исключением из этого правила. Пока пишутся условия, готовятся тесты, создаются разборы и настраиваются компьютеры, очень легко забыть правильно рассадить участников олимпиады по аудиториям.\n\nВ этот раз, в целях рационального использования рабочих мест, оргкомитет олимпиады поставил перед собой задачу — создать компактную рассадку школьников по M имеющимся аудиториям. Рассадка называется компактной, если для любых двух различных аудиторий количества детей в них отличаются не более чем на один.\n\nВ жюри олимпиады имеется человек с экстрасенсорными способностями, который может очень точно предсказывать результаты будущих соревнований по программированию. Хотя результаты заочного тура ещё не известны, он без труда определил, что на очный тур пройдут ученики из K школ. Кроме того, было предсказано, что из i-й школы (1 ⩽ i ⩽ K) пройдёт в точности ni учеников. Хотя отношение большей части оргкомитета к подобным прогнозам зачастую скептическое, они имеют странное свойство сбываться, поэтому вам предлагается на всякий случай вычислить максимально возможное количество участников, которые попадут в одну аудиторию при компактной рассадке, если предсказание окажется верным.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30733","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tАлёна отправляется в долгожданный заслуженный отпуск. Алёна очень боится опоздать на самолёт, поэтому она приехала в аэропорт в момент времени 0$0$. На табло отправления отображается n$n$ рейсов, рейс номер i$i$ (в нумерации с единицы) должен вылететь в момент времени ti$t_i$, при этом ti>ti−1$t_i > t_{i - 1}$ для всех i≥2$i \\geq 2$.\n\nК сожалению, погода в городе N очень непредсказуемая, и именно сейчас в районе аэропорта начался сильный снегопад. Для обеспечения безопасности, службы аэропорта должны после отправления каждого рейса снова очищать взлётно-посадочную полосу от снега, поэтому времена отправления двух последовательных рейсов должны отличаться хотя бы на k$k$.\n\nАлёна знает, что рейсы будут отправляться в порядке возрастания своих номеров, при этом каждый рейс будет вылетать настолько рано, насколько это возможно, но не менее чем через k$k$ после вылета предыдущего рейса и не ранее изначально запланированного времени отправления ti$t_i$. \n\nПоскольку мысли Алёны уже целиком посвящены отпуску, то написать программу, которая определит реальное время отправления каждого из рейсов, предстоит вам. Считайте, что для рейса с номером 1$1$ нет предыдущего и для него не требуется чистить взлётно-посадочную полосу.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30776","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tКак же Илье надоело учиться! Сначала школа, потом университет... Вот, наконец, наступил тот долгожданный день, когда Илье утром не надо ехать на учебу. Но, к несчастью для Ильи, оказалось, что после окончания университета начинается самое трудное — надо устраиваться на работу.\n\nВо всемирно известной фирме «Goondex», в которую устроился Илья, принято очень много работать, в частности, для сотрудников установлена шестидневная рабочая неделя. Но, в качестве бонуса, «Goondex» каждый год предлагает своим сотрудникам выбрать любой день недели в качестве выходного. В свою очередь, оставшиеся шесть дней недели будут рабочими.\n\nИлья сообразил, что с учётом государственных праздников (которые всегда являются выходными) с помощью правильного выбора выходного дня недели можно варьировать количество рабочих дней в году. Теперь он хочет знать, какой день недели ему следует выбрать в качестве выходного, чтобы отдыхать как можно больше дней в году, или, наоборот, демонстрировать чудеса трудолюбия, работая по максимуму.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30734","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tВернувшись домой из школы, Иван долго думал о сегодняшнем занятии кружка по математике, на котором учитель рассказывал о бесконечных числовых последовательностях. В качестве одного из примеров рассматривалась следующая интересная последовательность целых положительных чисел: ,1⏟,1,2,1⏟,1,2,3,2,1⏟,1,2,3,4,3,2,1⏟,...$$ \\underbrace{\\vphantom{,}1}, \\underbrace{1, 2, 1}, \\underbrace{1, 2, 3, 2, 1}, \\underbrace{1, 2, 3, 4, 3, 2, 1}, ... $$ \n\nУчитель пояснил, что в этой последовательности каждое целое положительное число встречается бесконечное число раз. Однако Ивана заинтересовал ещё и другой вопрос: как определить, какое число находится в последовательности на месте под номером n$n$? На вопрос Ивана учитель ответил, что это очень просто, и предложил Ивану подумать над этой задачей самостоятельно.\n\nИван увлекается не только математикой, но и программированием, поэтому ему хочется реализовать алгоритм, который позволит быстро отвечать на поставленный вопрос для очень большого диапазона возможных n$n$. Помогите ему в этом.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30777","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tВася играет в «Dance Dance Revolution». Задача игрока состоит в том, чтобы нажимать ногами расположенные на игровом полу стрелочки в порядке их появления на экране. Игровой процесс сопровождается энергичной музыкой, и невнимательному зрителю может показаться, что Вася просто танцует. На самом же деле он очень сосредоточен на том, чтобы минимизировать суммарное перемещение своих ног, не допустив при этом ни одной ошибки.\n\nУточним описание игры:\n\n\n\tИгровое поле состоит из пяти одинаковых по размеру квадратных платформ: центральная без стрелки, а также четыре платформы с различными стрелками, находящиеся по разные стороны от центральной. Будем называть их левой, правой, верхней и нижней стрелками, и обозначим заглавными буквами латинского алфавита ‘L’, ‘R’, ‘U’ и ‘D’ соответственно. Для лучшего понимания рекомендуется посмотреть на картинку.\n\n\n\n\n\n\tПесня состоит из N позиций. Для каждой позиции известно, какие стрелки должны быть нажаты. Поскольку Вася всего лишь человек, то это либо одна, либо две одновременно нажатых стрелки.\n\tВася уже достаточно опытный игрок, чтобы стоять на игровом поле как угодно: любая нога Васи может находиться на любом из пяти элементов поля вне зависимости от положения другой ноги (в том числе он может поставить обе ноги на одну и ту же клетку).\n\tВася любит наблюдать за осьминогами, поэтому для него не проблема переместить ноги из любого исходного положения в любое другое.\n\n\nЦель Васи — нажать на все стрелки в требуемой последовательности. При этом он имеет право стоять на стрелке даже тогда, когда она не должна быть нажата: например, если в данный момент требуется нажать только на стрелку ‘L’, то он может поставить одну ногу на ‘L’, а другую — куда угодно. Также Вася в любой момент может поставить одну или обе ноги на центральный элемент без стрелки. Изначально Вася стоит обеими ногами на центральном элементе, а в конце песни его ноги могут находится где угодно.\n\nВ рамках данной задачи будем считать, что ноги Васи являются точками. Для нажатия на платформу Васе нужно поставить ногу в центр соответствующей платформы. Обратите внимание, что это относится и к случаю, когда Вася пользуется своим правом поставить какую-либо ногу на центральную платформу. Таким образом, возможные координаты точек, в которых могут находиться ноги Васи, это (0, 0), (1, 0), (0, 1), (−1, 0) и (0, −1) для центральной, правой, верхней, левой и нижней платформ соответственно.\n\nПомогите Васе найти минимальное расстояние, которое в сумме придётся пройти его ногам во время песни. Здесь под расстоянием подрузмевается евклидово расстояние для точек на плоскости. Например, расстояние между центром центральной платформы и центром любой другой равно 1, а расстояние между центрами верхней и правой платформ равно √2.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30780","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tС незапамятных времен Берляндией правили добрые и справедливые цари, а власть передавалась по наследству. Но вот настали тяжёлые времена, по воле рока династия прервалась, и страна погрузилась в хаос. Некоторые города были захвачены враждующими друг с другом бандами головорезов, в других же городах какая-либо власть исчезла вовсе.\n\nВсё началось с того, что в некоторых городах установилась власть преступных банд, причём под властью каждой из банд изначально оказалось ровно по одному городу. Каждая банда избрала в качестве столицы город своего первоначального зарождения. Начиная с того времени, каждый год ровно одна из банд решала расширить свои владения, захватывая некоторый город, до этого не бывший ни в чьём подчинении или находящийся под властью другой банды.\n\nДля осуществления захвата вооружённый отряд данной банды выходил из своей столицы и двигался к выбранному городу, захватывая все города на своём пути. Также известно, что столицы всех банд были так серьёзно защищены, что через них невозможно было проехать (и уж тем более не могло идти речи об их захвате). Поэтому на пути от столицы банды-захватчика до выбранного города не могло быть столиц других банд.\n\nКак уже неоднократно отмечалось различными историками, в описываемые времена в Берляндии было N городов, соединённых между собой N −1 дорогой с двусторонним движением, при этом от каждого города можно было доехать до любого другого. Подобное устройство транспортной системы естественным образом налагало ограничения на возможные маршруты путешествия.\n\nСобытия эти происходили уже очень давно, а хроники тех лет были утрачены в вихре смутного времени. Теперь же к вам в руки попала карта Берляндии тех времён. Вы обнаружили, что на карте отмечены столицы каждой из банд, а также для каждого города указано, какая банда им владела на определённый момент времени (свободных городов к тому году уже не осталось).\n\nВычислите, при какой возможной последовательности захватов могло возникнуть описанное этой картой распределение контроля банд над городами, или же определите, что карта содержит ошибку, так как указанное на карте распределение власти банд над городами не могло быть получено с помощью последовательности описанных выше захватов. Более того, среди возможных ответов вам необходимо найти последовательность, состоящую из не более чем N захватов.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30781","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n— Это называется столовластием.\n\n— Столовластием?\n\n— Ну да. Все вопросы решаются заполнением бумажек, которые рассматривает специальная порода людей — чиновники.\n\n\nС. Лукьяненко «Недотёпа»\n\n\nПосле разработки закона о введении налога на постройку зданий выше двух этажей у N чиновников короля Маркеля Весёлого осталось K бюджетных золотых монет. Эти деньги они решили частично поделить между собой. Поскольку на службе у Короля состоят лишь честные чиновники, делить их они решили справедливо. Они знают, какой вклад wi внес в законопроект i-й чиновник. Деньги должны быть распределены так, что если i-й чиновник получил ci монет, а j-й — cj монет, то числа ci и cj должны иметь такой же результат сравнения, как числа wi и wj. Это значит, что ci < cj должно быть верно тогда и только тогда, когда wi < wj. В частности, из этого следует, что при равенстве вкладов чиновники должны получить одинаковое количество монет.\n\nСреди чиновников у короля Маркеля Весёлого есть некоторое количество фаворитов. Он хочет, чтобы фаворит с минимальным вкладом в законопроект получил в итоге как можно больше денег. Помогите честным госслужащим разделить деньги по справедливости, соблюдая требование короля Маркеля. Заметьте, что в задачу не входит максимизация прибыли чиновников, не являющихся фаворитами Маркеля Весёлого.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30778","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tКомпания Konia, специализирующаяся на выпуске бюджетных мобильных устройств, в последнее время теряет свои позиции на рынке. Ради спасения компании совет директоров пошел на отчаянный шаг: было решено внести изменения в самую известную игру, которая доступна на всех устройствах от Konia — «Змейку».\n\nПравила этой игры очень просты. На клетчатом поле, состоящем из N строк и M столбцов, находится змейка, изначально имеющая длину 1 (т. е. представляющая собой квадратик 1 × 1). На каждом ходу змейка перемещается на одну клетку в одном из четырёх направлений: вверх, вниз, влево или вправо. Если при этом змейка пересекает какую-либо границу экрана, то она появляется с противоположной стороны. Например, сделав шаг влево из первой клетки четвёртой строки (будем говорить, что такая клетка имеет координаты (4, 1)) на поле размером 10 строк на 8 столбцов, змейка окажется в клетке с координатами (4, 8). Иногда на поле появляется еда, которая может увеличить длину змейки, но это не имеет отношения к данной задаче.\n\nПо предложению совета директоров в Змейку было решено добавить режим парной игры. Изначально змейки двух игроков появляются в разных клетках и имеют длину 1, то есть состоят только из клеток, в которых они появились. Каждый ход состоит из того, что сначала перемещается змейка первого игрока, а затем змейка второго игрока. Правила перемещения аналогичны описанным выше для одиночной игры, но, в отличие от одиночного режима, змейки имеют возможность столкнуться друг с другом, после чего игра заканчивается. Маркетинговые исследования показали, что пользователи предпочитают как можно более длинные игры, поэтому перед разработчиками стоит задача исследовать, как зависит длительность игры от начальных координат змеек (a1, b1) и (a2, b2). Так как в режиме парной игры пока реализована только возможность передвигаться, еда на поле не появляется, и фактически игра сводится к управлению двумя одноклеточными змейками.\n\nВам, как ведущему инженеру компании, поручено контролировать деятельность коллег. Для это необходимо написать программу, которая по заданным размерам поля N и M и координатам двух различных клеток (a1, b1) и (a2, b2) вычисляет, на каком по счёту ходу впервые может возникнуть ситуация, что змейки столкнутся, то есть одна змейка совершит ход в клетку, в которой находится другая.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30779","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tАбсолему ещё далеко до превращения в бабочку, и он вкушает все прелести молодой жизни. К сожалению, во время мероприятия, связанного с неудачным выступлением на соревнованиях по программированию, Абсолем несколько потерял связь с реальностью и где-то забыл свой любимый плащ. Алиса предложила сшить опечаленному Абсолему такой же плащ, и тот на радостях поведал Алисе тайну волшебного узора.\n\nПлащ представляет из себя прямоугольник N ×M с внутренней сеткой, узлы которой покрашены в K цветов особым образом:\n\n\n\tПлащ размещается так, чтобы два его противоположных угла лежали в точках с координатами (0, 0) и (N, M).\n\tРассматриваются все прямые с угловым коэффициентом 1 (лежащие под углом 45◦ к оси абсцисс и направленные вверх и вправо), которые проходят хотя бы через один узел плаща. Эти прямые упорядочиваются слева направо (по тому, какая из них раньше (левее) пересекает ось абсцисс); самая левая прямая имеет номер ноль, а самая правая — N + M.\n\n\n\n\nПлащ размером 7 × 4.\n\nТочки, лежащие на i-й прямой, красятся в цвет номер (i mod K)+1, то есть один плюс остаток от целочисленного деления i на K.\n\n\n\nПлащ размером 7 × 4, покрашенный в три цвета (цвет 1 — красный, цвет 2 — зелёный, цвет 3 — синий).\n\nШляпник, подслушав тайну узора плаща Абсолема, задумался, узлов какого цвета на плаще больше всего, а какого меньше всего. Помогите ему выяснить это!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30735","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tУспешно решив все задачи отборочного этапа, Миша получил приглашение принять участие в очном туре Закрытой олимпиады школьников по информатике. Миша планирует добираться до места проведения олимпиады самолётами, при этом он хочет совершить не более одной пересадки, то есть использовать не более двух рейсов. Разумеется, среди всех таких вариантов его интересует самый дешёвый.\n\nЖюри Закрытой олимпиады держит место и дату проведения очного этапа олимпиады в строжайшем секрете, а Миша очень любит путешествовать, поэтому не может заранее знать, из какого города он будет начинать свой путь. Кроме того, периодически появляются новые регулярные рейсы, а некоторые старые наоборот исчезают из расписания, поэтому Миша просит вас написать программу, которая будет отвечать на следующие запросы:\n\n\n\tДобавить новый регулярный рейс.\n\tУдалить некоторый рейс.\n\tОпределить минимальную стоимость маршрута между двумя городами, если рассматривать только маршруты без пересадок и маршруты с одной пересадкой.\n\n\nКаждый рейс связывает некоторую пару городов ui$u_i$ и vi$v_i$, и имеет свою стоимость ci$c_i$. Все рейсы двусторонние, то есть позволяют добраться как из города ui$u_i$ в город vi$v_i$, так и наоборот, из города vi$v_i$ в город ui$u_i$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30782","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tИз офиса вашей энергетической корпорации были выкрадены чертежи инновационной электростанции. Будучи построенной, она решила бы большинство проблем современной энергетики, а вас сделала бы невероятно богатым. Не торопитесь отчаиваться: службе безопасности удалось выследить похитителя и выяснить, что сейчас чертежи хранятся в принадлежащем конкурентам подземном бункере. Лучший из ваших агентов уже отправился туда с целью выкрасть чертежи обратно, но миссия очень трудна!\n\nТак как в системе конкурентов до сих пор присутствует уязвимость Heartbleed, ваш IT-отдел получил ограниченный доступ к системе безопасности бункера и обнаружил план помещений. Оказалось, что бункер состоит из N комнат и M соединяющих их коридоров. По каждому коридору можно ходить в обоих направлениях. Никакой коридор не соединяет комнату саму с собой, никакая пара комнат не соединена более чем одним коридором (действительно, кому может прийти в голову организовать коридоры иначе?).\n\nВ некоторых комнатах расположены выходы из бункера. Как только ваш агент возьмёт чертежи, в комнате, где он находится, сработает сигнализация. После этого все выходы закроются, и агент окажется в ловушке.\n\nЗакалённая участием в CTF, ваша IT-команда смогла изменить настройки системы безопасности таким образом, что при срабатывании в комнате i сигнализации закроются не все выходы из бункера, а только K ближайших к данной комнате. Расстояние между двумя комнатами определяется как минимальное количество коридоров, по которым надо пройти, чтобы добраться из одной комнаты в другую. Расположенные на одинаковом расстоянии от комнаты i выходы система будет закрывать в порядке возрастания номеров содержащих их комнат.\n\nКогда сработает сигнализация и поднимется тревога, агенту необходимо как можно быстрее покинуть бункер. Поскольку расположение чертежей заранее неизвестно, то необходимо для каждой комнаты бункера вычислить, где будет расположен ближайший незапертый выход, если в этой комнате сработает сигнализация. Из незапертых выходов на одинаковом расстоянии от данной комнаты следует определить выход, расположенный в комнате с наименьшим номером.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30800","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n[그림 1] 바깥으로 쫓겨난 가희를 위한 집\n\n하도 부엌에 오줌을 싸서 바깥으로 쫓겨난 가희는 불쌍한 표정으로 낑낑대고 있었습니다. 그 모습을 본 아빠는 가희가 너무 추울까 봐 집을 만들어 주려고 합니다. 높이가 H+1$H+1$이고 너비가 W+1$W+1$인 판자가 있습니다. 이 판자의 네 꼭짓점은 각각 (0, 0)$(0,\\ 0)$, (W+1, 0)$(W+1,\\ 0)$, (0, H+1)$(0,\\ H+1)$, (W+1, H+1)$(W+1,\\ H+1)$입니다.\n\n아빠는 아래 조건에 맞게 판자에 직사각형 모양으로 구멍을 뚫어, 가희가 집에 들락날락할 수 있게 하려고 합니다.\n\n\n\t직사각형의 네 변 중 하나는 y = 1$y\\ =\\ 1$ 위에 있습니다.\n\t직사각형의 각 변은 x$x$축, 또는 y$y$축과 평행합니다.\n\t직사각형 꼭짓점의 x$x$좌표는 1$1$이상이고, W$W$이하인 정수입니다.\n\t직사각형 꼭짓점의 y$y$좌표는 1$1$이상이고, H$H$이하인 정수입니다.\n\t직사각형의 너비는 w1$w_1$이상 w2$w_2$이하입니다.\n\t직사각형의 높이는 h1$h_1$이상 h2$h_2$이하입니다.\n\t밑변은 x$x$축과 평행합니다.\n\n\n판자에 구멍을 뚫는 비용은 뚫고자 하는 직사각형의 변 위에 놓여 있는 격자점들의 비용의 합으로 정의합니다. 아빠는 판자에 구멍을 뚫는 데 드는 최소 비용이 얼마인지 알고 싶어합니다. 아빠를 도와주세요. 판자는 좌표평면 위에 있는 2차원 도형이라고 가정하고 풀이해 주세요.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30736","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tМакака Виктор решил испытать удачу и отправился в широко известное в узких кругах <<zino000>>, где он планирует опробовать новейший игровой автомат.\n\nАвтомат устроен очень просто: макака дергает за канат, чем приводит во вращение основной барабан (смотрите рисунок), внутри которого находятся n$n$ слоёв, расположенных перпендикулярно оси вращения барабана. В каждом слое находится жёстко закреплённый невырожденный треугольник. Таким образом, все треугольники вращаются вокруг оси барабана с одинаковой угловой скоростью. Внутри каждого треугольника расположен шарик пренебрежимо малого размера, который под действием гравитации скатывается в одну из вершин с минимальной текущей координатой y$y$.\n\nРовно одна из вершин каждого треугольника является выигрышной. Если после остановки барабана шарик попадает в выигрышную вершину, то макака получает одну монету. При этом, если в момент остановки барабана у треугольника оказалось несколько вершин с минимальной координатой y$y$, и одна из них является выигрышной, то Виктору обязательно повезёт и он получит монету.\n\n\n\nПосле нескольких игр Виктор научился останавливать вращение автомата в произвольный момент времени с помощью ловкого пинка. Теперь он хочет знать, какое максимальное количество монет он может выиграть, если правильно выберет момент, когда прекратить вращение конструкции.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30783","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tСпустя тридцать сезонов Мэгги Симпсон наконец поступила в первый класс. В целях тренировки чистописания учительница задала детям выписать в строку N цифр от ‘0’ до ‘9’ в некотором порядке.\n\nПосле нескольких часов страданий Мэгги всё-таки справилась с домашним заданием и убежала играть с друзьями, оставив свою работу лежащей на письменном столе. В это время в комнату зашла Лиза Симпсон. Игра на саксофоне уже успела её порядком утомить, и она находилась в поисках какого-нибудь нового увлекательного занятия, когда её взгляд остановился на исписанной тетрадке Мэгги.\n\nЛиза быстро справилась с тем, чтобы посчитать сумму всех написанных Мэгги цифр, но тут в комнату ворвался Барт и предложил ей задачу поинтереснее — произвести M операций с данной строкой цифр. Фантазия Барта довольно скудна, поэтому операции бывают только двух типов. Пусть позиции в строке занумерованы числами от 1 до N слева направо. Тогда операции имеют следующий вид:\n\n\n\tБарт называет два числа li и ri, а также цифру ci, после чего Лиза должна заменить все цифры на позициях с li-й по ri-ю включительно на цифру ci.\n\tБарт называет два числа li и ri, после чего Лиза должна посчитать сумму всех чисел, десятичные записи которых встречаются как подстроки отрезка исходной строки с li-й по ri-ю позицию включительно. При этом каждое число должно быть просуммировано с учётом кратности, то есть столько раз, сколько его запись встречается на отрезке с li-й по ri-ю. Также требуется учитывать только корректные десятичные записи чисел, то есть подстроки, начинающиеся на ‘0’, не должны входить в сумму.\n\n\nБарт сегодня добрый, поэтому на операцию второго типа он просит от Лизы только остаток от деления ответа на 109 + 7.\n\nЖелая доказать своё превосходство над братом, Лиза немедленно согласилась. Поскольку Барт сам не знает правильных ответов, он никак не может проверить вычисления Лизы, поэтому ему крайне необходима ваша помощь.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30801","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t가희는 클럽 오디션 모드 중 8키 일반 모드를 플레이하고 있습니다. 이 모드는 여러 레벨의 노트가 나옵니다. 레벨이 n$n$인 키 노트는 n$n$개의 키가 나옵니다. 표시된 순서대로 올바르게 친 후에, 타이밍에 맞게 Space 키를 누르면 판정에 따라 점수를 획득합니다.\n\n키는 2가지 종류 중 하나입니다.\n\n\n\t정방향 키\n\t\n\t\t주어지는 노트와 같은 방향을 의미하는 키를 쳐야 일치한다고 판정합니다.\n\t\n\t\n\t역방향 키\n\t\n\t\t주어지는 노트와 반대 방향을 의미하는 키를 쳐야 일치한다고 판정합니다.\n\t\n\t\n\n\n\n\n[그림 1] 역방향 키가 있는 레벨 6의 키 노트\n\n[그림 1]의 키 노트에서 2번째, 5번째, 6번째 키는 주황색으로 표시되어 있습니다. 이들은 역방향 키를 의미합니다. 군청색으로 표시된 1번째, 3번째, 4번째 키는 정방향 키를 의미합니다. 따라서, 이 키 노트의 방향은 왼쪽에서부터 우, 좌상, 좌하, 우, 좌하, 상이 됩니다. 플레이 하는 유저가 어떤 순서로 키를 쳤는지에 따라, 앞에서부터 몇 개의 키가 일치하는지가 결정됩니다. 즉, 레벨이 lv$lv$인 키 노트가 나왔을 때, 아래와 같은 알고리즘으로 상태가 결정됩니다.\n\n\n\t처음 키 노트가 등장하고, 유저가 아무런 키도 입력하지 않았다면 앞에서부터 0$0$개의 키와 일치한 상태입니다.\n\t앞에서부터 i$i$개의 키와 일치한 상태일 때\n\t\n\t\t i=lv$i=lv$인 경우, 임의의 키가 입력되면 앞에서부터 0$0$개의 키가 일치한 상태로 전환됩니다.\n\t\t i≠lv$i \\ne lv$인 경우\n\t\t\n\t\t\t유저가 입력한 키와 키 노트의 i+1$i+1$번째 키가 일치하다고 판정되면, 앞에서부터 i+1$i+1$개의 키와 일치한 상태가 됩니다.\n\t\t\t그렇지 않으면 앞에서부터 0$0$개의 키가 일치한 상태로 전환됩니다.\n\t\t\n\t\t\n\t\n\t\n\n\n정방향 키 우, 우하, 좌하, 우, 우상, 하 순서대로 나온 레벨 6의 키 노트가 있습니다. [그림 2]부터 [그림 4]에서 키에 채워진 색깔의 의미는 아래와 같습니다.\n\n\n\t노란색\n\t\n\t\t앞에서부터 일치하는 키\n\t\n\t\n\t파란색\n\t\n\t\t남은 키.  lv$lv$개의 키가 일치한 상태로 되기 위해 순서대로 쳐야 하는 키.\n\t\n\t\n\n\n\n\n[그림 2] 키 노트의 상태 #1\n\n[그림 2]의 위는 앞에서부터 2개의 키가 일치한 상태를 의미합니다. 이 상태에서 우 키를 입력하면 [그림 2]의 아래와 같은 상태가 됩니다. 키 노트의 3번째 키인 좌하와 입력한 방향 우가 일치하지 않기 때문입니다.\n\n\n\n[그림 3] 키 노트의 상태 #2\n\n앞에서부터 2개의 키가 일치한 상태에서 좌하를 의미하는 키를 입력하면, 앞에서부터 3개의 키가 일치하는 상태(그림 3의 아래)가 됩니다. 키 노트의 3번째 키인 좌하와 입력한 방향 좌하가 일치하기 때문입니다.\n\n레벨이 lv$lv$인 키 노트에 대해, 앞에서부터 lv$lv$개의 키와 일치한 상태에서 임의의 키를 입력하면, 앞에서부터 0$0$개의 키와 일치하는 상태로 바뀌게 됩니다. [그림 4]는 이를 보여줍니다.\n\n\n\n[그림 4] 키 노트의 상태 #3\n\nSpace 키는 레벨이 lv$lv$인 키 노트에 대해 판정을 받을 때 누르게 됩니다. 최종 판정은 아래와 같습니다.\n\n\n\t타이밍에 맞추어서 Space 키를 눌렀을 때\n\n\t\n\t\t앞에서부터 lv$lv$개의 키가 일치한 상태이면 성공입니다.\n\t\t그렇지 않으면 실패합니다.\n\t\n\t\n\t타이밍에 맞지 않게 Space 키를 누른 경우 실패합니다.\n\n\n가희가 쳐야 하는 노트가 주어지고, 해당 노트의 타이밍이 올 때까지 가희가 누른 키가 순서대로 주어집니다. 가희가 해당 노트의 타이밍에 맞추어 Space 키를 눌렀을 때, 최종 판정이 성공인지, 실패인지 출력해 주세요.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30737","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tТолько что завершился очный этап Открытой олимпиады школьников по программированию. В очном этапе принимало участие n$n$ школьников, для решения было предложено m$m$ задач (разумеется, интересных), за каждую задачу можно было получить любое количество баллов от 0$0$ до k$k$ включительно. В некоторых задачах есть тесты с offline-проверкой, это означает, что результаты тестирования решения на данных тестах станут доступны только после окончания соревнования. В этот раз правила тестирования всех задач таковы, что решения будут выполняться на тестах с offline-проверкой только при прохождении всех обычных тестов (что, вообще говоря, не всегда верно для задач Открытой олимпиады).\n\nСейчас все школьники собрались в одном зале и ожидают начала церемонии закрытия. Публично доступна предварительная таблица результатов, в которой баллы всех школьников по всем задачам указаны без учёта баллов за тесты с offline-проверкой. При этом каждый из участников олимпиады знает свои итоговые баллы по всем задачам, то есть баллы с учётом тестов с offline-проверкой. Время от времени кто-либо из участников сообщает всем присутствующим свои баллы по какой-либо задаче, а некоторые из участников задаются вопросом, какое максимальное и какое минимальное место они могли занять с учётом предварительной таблицы и всей информации, сообщённой к данному моменту другими участниками.\n\nМестом участника называется количество участников, набравших строго большее количество баллов чем он, увеличенное на один. Когда кто-либо из участников хочет выяснить своё максимальное и минимальное возможное итоговое место, он рассматривает все возможные итоговые таблицы, которые могли получиться с учётом 1) имеющейся предварительной таблицы, 2) информации, сообщённой другими участниками, и 3) правилами тестирования задач. Последнее означает, что баллы за offline-проверку можно получить, только набра полный балл по обычным тестам.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30802","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t2024년 2월 3일 개최 예정인 온사이트 그랜드 아레나에서는 참가자들에게 티셔츠 한 장과 펜 한 자루가 포함된 웰컴 키트를 나눠줄 예정입니다. 키트를 제작하는 업체는 다음과 같은 조건으로만 주문이 가능합니다.\n\n\n\t티셔츠는 S, M, L, XL, XXL, 그리고 XXXL의 6가지 사이즈가 있습니다. 티셔츠는 같은 사이즈의 T$T$장 묶음으로만 주문할 수 있습니다.\n\t펜은 한 종류로, P$P$자루씩 묶음으로 주문하거나 한 자루씩 주문할 수 있습니다.\n\n\n총 N$N$명의 참가자 중 S, M, L, XL, XXL, XXXL 사이즈의 티셔츠를 신청한 사람은 각각 S,M,L,XL,XXL,XXXL$S, M, L, XL, XXL, XXXL$명입니다. 티셔츠는 남아도 되지만 부족해서는 안 되고 신청한 사이즈대로 나눠주어야 합니다. 펜은 남거나 부족해서는 안 되고 정확히 참가자 수만큼 준비되어야 합니다.\n\n티셔츠를 T$T$장씩 최소 몇 묶음 주문해야 하는지, 그리고 펜을 P$P$자루씩 최대 몇 묶음 주문할 수 있고, 그 때 펜을 한 자루씩 몇 개 주문하는지 구하세요.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30784","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n\n\nЗапрещается обгон всех транспортных средств, кроме тихоходных транспортных средств, гужевых повозок, мопедов и двухколесных мотоциклов без коляски.\n\n\nСегодня вечером супергерой Ватман планирует навестить свою любимую бабушку. Так как он вовремя не продлил лицензию на полёты, ему придётся ехать на ватмобиле сквозь Готэмские пробки. Необходимо закончить дела и добраться до бабушки как можно быстрее, ведь пирожки уже остывают!\n\nЧасть пути Ватману предстоит проехать по дороге, имеющей лишь одну полосу в каждом из двух возможных направлений движения. В рамках данной задачи дорогу можно считать бесконечной прямой. На обеих полосах движения в совокупности находятся N автомобилей, про каждый из которых известно его начальное положение pi и его постоянная скорость vi. Таким образом, координата i-го автомобиля в момент времени t будет равняться xi(t) = pi +vi · t. Однако, данная формула справедлива только до тех пор, пока этот автомобиль не догонит другой, движущийся в том же направлении (а значит, и по той же полосе), но медленнее. Так как обгон на данном участке дороги запрещён, то, догнав более медленный автомобиль, более быстрый вынужден снизить скорость и двигаться сразу за ним всё оставшееся время.\n\nВатман эгоистично полагает, что достаточно часто думает о судьбах простых людей, чтобы позволить себе пренебречь некоторыми правилами дорожного движения. Сегодня вечером он планирует обгонять другие автомобили по встречной полосе, но, как и любой нормальный супергерой, Ватман стремится избегать аварийных ситуаций. В связи с этим он совершает обгон, только если ближайший двигающийся навстречу автомобиль находится на безопасном расстоянии, обозначаемом в данной задаче как d.\n\nПланы Ватмана постоянно меняются, он пока не знает, когда именно поедет в гости к бабушке, какой маршрут выберет, на каком из многочисленных ватмобилей поедет и какую дистанцию для обгона будет считать безопасной. Поэтому он попросил вас рассчитать минимальное время поездки по данной дороге для Q различных значений параметров задачи.\n\nДлиной автомобилей следует пренебречь, то есть можно считать их точками на прямой. Также следует считать, что как только более быстрая машина догоняет более медленную, она двигается за ней на расстоянии 0. Ватман может совершить обгон, если на встречной полосе в направлении движения ватмобиля отсутствуют встречные машины на расстоянии как минимум d. Машины, находящиеся на встречной полосе и имеющие такую же координату как и ватмобиль, помехой для обгона не являются. Начав обгон, Ватман совершает его мгновенно и тут же возвращается на исходную полосу.\n\nПоскольку любые вычисления, связанные с вещественными числами, сопряжены с неизбежной погрешностью, жюри гарантирует вам, что Ватману никогда не придётся принимать решение об обгоне, основываясь на сравнении очень близких друг к другу чисел. Это значит следующее: изменение d на 0 ⩽ eps ⩽ 0.001 в любую сторону не повлияет на правильный ответ к задаче.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30738","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tСтрана N состоит из n$n$ городов, пронумерованных от 1$1$ до n$n$, однако в ней совсем нет дорог! Президентом страны было принято решение построить m$m$ дорог в течение m$m$ дней, при этом каждый день будет строиться ровно одна новая дорога. Дополнительно, в целях поддержки миграции населения было принято решение сделать все дороги односторонними, и планировать дорожную сеть таким образом, что если существует путь из города i$i$ в город j$j$, то пути из города j$j$ в город i$i$ не существует.\n\nДля популяризации новых дорог среди населения страны N было решено ежедневно проводить серию автопробегов по городам страны. Каждая машина автопробега стартует в некотором городе, после чего совершает перемещения по уже построенным к данному дню дорогам и заканчивает свой маршрут также в каком-нибудь городе. При этом разрешается, чтобы город старта совпадал с городом финиша, то есть чтобы машина не совершала ни одного переезда по дорогам. Преследуя одновременно цели порадовать жителей страны и цели экономии топлива водителей, организаторы решили каждый день выбирать набор маршрутов согласно следующим правилам:\n\n\n\tКаждый город должен быть посещён машиной автопробега. Посещёнными считаются начальный, конечный и все промежуточные города на пути любой из машин.\n\tНикакой город не должен быть посещён машинами автопробега более одного раза.\n\tОбщее количество используемых машин должно быть минимальным.\n\n\nМинистерство транспорта страны N уже запланировало постройку ровно одной дороги для каждого из ближайших m$m$ дней. Теперь представители министерства просят вас для каждого из дней определить, какое минимальное количество машин потребуется для автопробега. Считайте, что в день i$i$ доступны дороги, построенные в дни 1,2,…,i$1, 2, \\ldots, i$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30739","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tOleg writes down the history of the days he lived. For each day he decides if it was good or bad. Oleg calls a non-empty sequence of days a zebra, if it starts with a bad day, ends with a bad day, and good and bad days are alternating in it. Let us denote bad days as 0 and good days as 1. Then, for example, sequences of days 0, 010, 01010 are zebras, while sequences 1, 0110, 0101 are not.\n\nOleg tells you the story of days he lived in chronological order in form of string consisting of 0 and 1. Now you are interested if it is possible to divide Oleg's life history into several subsequences, each of which is a zebra, and the way it can be done. Each day must belong to exactly one of the subsequences. For each of the subsequences, days forming it must be ordered chronologically. Note that subsequence does not have to be a group of consecutive days.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30803","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t물탱크와 연결된 N$N$개의 수도꼭지가 있습니다. 이 수도꼭지는 나사와 토글 버튼으로 이루어져 있습니다. 나사를 돌려서 나오는 물의 양을 조절할 수 있고, 토글 버튼을 눌러서 수도꼭지를 열거나 잠글 수 있습니다. 물탱크에 담기는 물의 양은 열려있는 수도꼭지들에서 내보내는 물의 양의 합입니다.\n\n구체적으로는 수도꼭지에 다음 조작을 할 수 있습니다.\n\n\n\t나사를 돌려서 수도꼭지가 열려 있을 때 1$1$분에 x$x$리터의 물을 내보내도록 합니다.\n\t토글 버튼을 누릅니다. 수도꼭지가 열려 있으면 잠그고, 잠겨있으면 엽니다.\n\n\n가장 처음에 모든 수도꼭지는 열려있으며, i$i$번째 수도꼭지는 1$1$분에 Ai$A_i$리터의 물을 내보내고 있습니다. 이 수도꼭지들을 Q$Q$번 조작할 것입니다. 가장 처음에, 그리고 매 조작 이후에 1$1$분 동안 탱크에 담기는 물의 양을 계산하세요.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30820","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tDima is an architect. He is also a photographer. He spends his time on travelling around the world and making photos of cool buildings like Big Ben etc.\n\nThis time Dima went to Berland famous with its subway system. It consists of n$n$ lines, each of which is represented with a line on the map of the city. For any two lines there is a subway station in their intersection point, those station entrances are considered to be the notable pieces of architecture. Dima decided to take a photo of them.\n\nIn order to take the panoramic photo, he is going to use a helicopter flight. Helicopter may use one of the t$t$ routes. Each route is also represented with a line on the map of the city. Dima is able to make a photo from an arbitrary point of the route, though the smaller distance from his location to the station means the better photo and the larger number of likes he is going to receive in social networks. That's why Dima needs your help.\n\nYou are given n$n$ descriptions of the subway lines and t$t$ lines defining the helicopter routes. For each of the helicopter routes Dima asks you to find the distance to the closest subway station.\n\nIt is guaranteed that no two subway lines coincide, any two subway lines have a common point, any two routes have a common point and each route has exactly one common point with each subway line.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30804","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t은하는 긴 막대에 N$N$개의 과일이 꽂혀있는 과일 탕후루를 만들었습니다. 과일의 각 종류에는 1$1$부터 9$9$까지의 번호가 붙어있고, 앞쪽부터 차례로 S1,S2,⋯,SN$S_1, S_2, \\cdots, S_N$번 과일이 꽂혀있습니다. 과일 탕후루를 다 만든 은하가 주문을 다시 확인해보니 과일을 두 종류 이하로 사용해달라는 요청이 있었습니다.\n\n탕후루를 다시 만들 시간이 없었던 은하는, 막대의 앞쪽과 뒤쪽에서 몇 개의 과일을 빼서 두 종류 이하의 과일만 남기기로 했습니다. 앞에서 a$a$개, 뒤에서 b$b$개의 과일을 빼면 Sa+1,Sa+2,⋯,SN−b−1,SN−b$S_{a+1}, S_{a+2}, \\cdots, S_{N-b-1}, S_{N-b}$번 과일, 총 N−(a+b)$N-(a+b)$개가 꽂혀있는 탕후루가 됩니다. (0≤a,b;$(0 \\le a, b;$ a+b<N)$a+b < N)$ \n\n이렇게 만들 수 있는 과일을 두 종류 이하로 사용한 탕후루 중에서, 과일의 개수가 가장 많은 탕후루의 과일 개수를 구하세요.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30785","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tКомпания Konia, специализирующаяся на выпуске бюджетных мобильных устройств, в последнее время теряет свои позиции на рынке. Ради спасения компании совет директоров пошёл на отчаянный шаг: было решено внести изменения в самую известную игру, которая доступна на всех устройствах от Konia — «Змейку». Да, снова.\n\nИгра происходит на клетчатом поле, состоящем из H строк и W столбцов. Будем нумеровать строки сверху вниз от 1 до H, а столбцы слева направо от 1 до W. Таким образом, каждая клетка A поля однозначно задаётся парой чисел (Ar, Ac), где Ar — номер строки, а Ac — номер столбца. Две клетки A и B называются соседними, если они соседние по стороне, то есть |Ar − Br| + |Ac − Bc| = 1. Помимо этого, соседними являются клетки верхней и нижней строки, а также крайнего левого и крайнего правого столбца, то есть все пары клеток вида (1, i)–(H, i), где i пробегает от 1 до W, и все пары вида (i, 1)–(i, W), где i пробегает от 1 до H.\n\nНа поле находится змейка, представляющая собой последовательность клеток A1, A2, . . . , AL, где L — целое положительное число, означающее её длину. Каждая клетка должна встречаться в данной последовательности не более одного раза, при этом любые две клетки, соседние в последовательности, должны являться соседними клетками поля. Несложно заметить, что максимально допустимая длина змейки равняется H · W. Клетка A1 называется головой змейки.\n\nИгрок управляет только перемещением головы змейки. Для этого он может использовать четыре команды:\n\n\n\t‘L’ — перемещает голову змейки влево, то есть уменьшает на единицу номер столбца, в котором она находится. Если перед использованием команды голова находится в крайнем левом столбце, то она переносится в крайний правый столбец, оставаясь при этом в той же строке.\n\t‘R’ — перемещает голову змейки вправо, то есть увеличивает на единицу номер столбца. Аналогично предыдущей команде, из крайнего правого столбца голова переносится в крайний левый.\n\tU’ — перемещает голову змейки вверх, то есть уменьшает на единицу номер строки, в которой она находится. Граница обрабатывается так же, как и в предыдущих командах, то есть применение в верхней строке переносит голову змейки в нижнюю строку, не меняя столбец.\n\t‘D’ — перемещает голову змейки вниз, то есть увеличивает на единицу номер строки. Соответственно, из нижней строки голова змейки переносится в верхнюю.\n\n\nКак только игрок использует команду, все клетки, образующие змейку, перемещаются одновременно, при этом голова сдвигается по описанным выше правилам, а все остальные клетки «подтягиваются» за ней, то есть для всех i от 2 до L клетка Ai заменяется на бывшее значение клетки Ai−1. Например, вторая клетка змейки (если она существует, то есть L ⩾ 2) перемещается туда, где находилась голова, третья клетка (если L ⩾ 3) перемещается туда, где находилась вторая, и так далее.\n\nИгра заканчивается, как только змейка врежется сама в себя, то есть на очередном шаге перестанет выполнятся условие уникальности всех клеток. Это может произойти из-за того, что голова переместится в клетку, занимаемую какой-то другой частью змейки. В частности, если змейка состоит хотя бы из трёх клеток, то команда перемещения головы в сторону клетки A2 приведёт к столкновению, так как в новом положении змейки совпадут клетки A1 и A3.\n\nТакже в классическом варианте игры присутствует возможность кушать яблоки и увеличивать длину своей змейки, но в рамках данной задачи эта особенность игры не рассматривается.\n\nВ новой модификации данной игры от компании Konia игроку больше не требуется регулярно нажимать на кнопки, он должен лишь изначально разместить свою змейку на игровом поле и написать программу действий длины K, то есть задать последовательность из K команд перемещения головы змейки. После запуска змейка будет последовательно выполнять команды, пока не врежется сама в себя. Если змейка успешно выполнит все K команд, то она начинает выполнять их заново в той же последовательности, и так до тех пор, пока не произойдет столкновение или игроку не надоест следить за процессом.\n\nВам, как ведущему инженеру компании Konia по программированию змеек, поручено решить следующую задачу: для данных различных простых чисел H и W, определяющих размеры поля, а также данной программы игры, определить, змейку какой максимальной длины можно разместить на игровом поле так, что она никогда не врежется сама в себя после запуска игры. Руководство так и не смогло объяснить вам, почему H и W являются простыми числами, но напомнило, что число является простым, если у него ровно два различных целых положительных делителя.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30821","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t곧 시계는 6시, 벌써 첫 번째 별이 보인다. 정N$N$각형 모양의 하늘에는 몇 개의 별이 뜰 수 있을까?\n\n정N$N$각형의 꼭짓점의 개수 N$N$이 주어졌을 때, 정N$N$각형의 꼭짓점을 이어 만들 수 있는 서로 다른 별의 개수를 출력하여라.\n\n별은 정N$N$각형의 다섯 꼭짓점에 시계 방향으로 번호를 붙였을 때, 그 꼭짓점들을 1-3-5-2-4-1 순으로 연결한 것을 의미한다. 뒤집거나 돌려서 같은 모양이 나오는 별도 정N$N$각형의 다른 꼭짓점을 이어 만든 별이라면 서로 다른 별이다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30805","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t어떤 수열이 다른 수열의 부분 수열이라는 것은 다음을 의미합니다.\n\n\n\t해당 수열의 원소들이 다른 수열 내에서 순서대로 등장합니다.\n\t예를 들어, {1,1,5}$\\{1,1,5\\}$는 {3,1―,4,1―,5―,9}$\\{3,\\underline{\\color{blue} 1} ,4,\\underline{\\color{blue} 1} ,\\underline{\\color{blue} 5} ,9\\}$의 부분 수열이지만, {1,5,1}$\\{1,5,1\\}$의 부분 수열은 아닙니다.\n\n\n또한, 어떤 수열이 다른 수열보다 사전 순으로 나중이라는 것은 다음을 의미합니다.\n\n\n\t두 수열 중 첫 번째 수가 큰 쪽은 사전 순으로 나중입니다.\n\t두 수열의 첫 번째 수가 같다면, 첫 번째 수를 빼고 두 수열을 다시 비교했을 때 사전 순으로 나중인 쪽이 사전 순으로 나중입니다.\n\t길이가 0$0$인 수열과 다른 수열을 비교하면, 다른 수열이 사전 순으로 나중입니다.\n\n\n양의 정수로 이루어진 길이가 N$N$인 수열 {A1,⋯,AN}$\\{A_1,\\cdots ,A_N\\}$이 주어집니다. 마찬가지로 양의 정수로 이루어진 길이가 M$M$인 수열 {B1,⋯,BM}$\\{B_1,\\cdots ,B_M\\}$이 주어집니다.\n\n수열 A$A$와 수열 B$B$가 공통으로 갖는 부분 수열들 중 사전 순으로 가장 나중인 것을 구하세요.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30786","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t홀수를 좋아하는 홀스는 홀수를 찾아 여행을 떠나고 싶다. 2$2$차원 좌표평면 위에 1$1$번부터 N$N$번까지 번호가 부여된 여행지 N$N$개가 존재하고, i$i$번 여행지는 (xi,yi)$(x_{i}, y_{i})$에 위치한다.\n\n홀스는 원하는 여행지에서 시작하여 N$N$개의 여행지를 모두 한 번씩 방문하고 끝나는 여행 계획을 세우려고 한다. 이때, 홀스가 여행 계획에 따라 이동해야 할 거리의 합이 홀수가 되도록 여행 계획을 세울 수 있을지 찾아보고, 만약 가능하다면 여행 계획을 출력해 보자.\n\n임의의 두 여행지 A$A$, B$B$ 사이의 거리는 |xA−xB|+|yA−yB|$|x_{A}-x_{B}|+|y_{A}-y_{B}|$로 정의된다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30822","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t배봉산에 살고 있는 여우는 문자열을 가지고 노는 것을 좋아한다. 여우는 특히 그중에서도 'uospc'라는 모양을 가장 좋아한다!\n\n여우는 자신이 가진 문자열의 순서를 재배열하여 'uospc' 모양을 최대한 많이 만들려고 한다. 예를 들어 'suspicion'이라는 문자열을 재배열하면 'uospcsiin'라는 문자열을 얻을 수 있고. 'processyourpurchase'라는 문자열을 재배열하면 'uospcuospcreyrrhase'라는 문자열을 얻을 수 있다.\n\n알파벳 소문자로만 이루어진 임의의 문자열 S$S$가 주어졌을 때. 똑똑한 여우가 이 문자열을 적절히 재배열하여 얻을 수 있는 'uospc'의 최대 개수를 구하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30806","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t N$N$개의 집합 S1,S2,⋯,SN$S_1, S_2, \\cdots, S_N$이 주어집니다.\n\n S1,S2,⋯,SN$S_1, S_2, \\cdots, S_N$ 중 k$k$개를 고른 이후, 고른 집합들의 교집합의 크기를 생각합시다. ak$a_k$는 집합을 고르는 가능한 모든 (Nk)${N \\choose k}$가지의 선택 방법 모두에 대해 교집합의 크기를 더한 값입니다. 수식으로는 다음과 같이 표현할 수 있습니다:\n\n ak:=∑τ⊆{1,2,⋯,N}|τ|=k|⋂i∈τSi|.$$a_{k} := \\sum_{\\substack{\\tau \\subseteq \\{1, 2, \\cdots, N\\} \\\\|\\tau|=k}} \\left|\\bigcap_{i \\in \\tau} S_{i}\\right|.$$ \n\n모든 k=1,2,⋯,N$k=1, 2, \\cdots, N$에 대해, ak$a_{k}$를 998244353$998\\,244\\,353$ (=119×223+1)$(=119 \\times 2^{23}+1)$으로 나눈 나머지를 구하세요. 998244353$998\\,244\\,353$은 소수입니다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30807","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t가중치 있는 그래프가 주어졌을 때, 최소 스패닝 트리(MST)의 비용을 구하는 문제는 잘 알려져 있습니다. 최소 스패닝 트리의 비용이 주어졌을 때, 그래프의 간선에 가중치를 부여하는 문제를 해결하세요.\n\n자세한 설명은 아래와 같습니다.\n\n\n\t최소 스패닝 트리란, 주어진 그래프의 모든 정점들을 연결하는 부분 그래프 중에서 비용이 최소인 트리를 뜻합니다. 스패닝 트리의 비용은 트리에 포함된 간선의 가중치 합으로 정의합니다.\n\t주어지는 그래프는 N$N$개의 정점과 M$M$개의 간선을 가진 무방향 연결 그래프입니다. 각 정점과 각 간선에는 1$1$번부터 순서대로 번호가 붙어 있습니다. i$i$번 간선은 ui$u_i$번 정점과 vi$v_i$번 정점을 이으며, i$i$번 간선에는 li$l_i$ 이상 ri$r_i$ 이하의 정수 가중치를 부여할 수 있습니다.\n\t각 간선에 적절한 가중치를 부여해서 최소 스패닝 트리의 비용이 K$K$가 되도록 만드세요.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30840","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tЕще только начался март, а студент первого курса НУОП (Неизвестного университета олимпиадного программирования) Вениамин уже закрыл сессию — чем не повод устроить вечеринку?\n\nВениамин назначил день и час, пригласил всех своих друзей и заказал огромное количество пиццы. Он выбирал какую-нибудь новую настольную игру, которую никто из его друзей еще не видел, когда произошло неприятное событие — пиццу доставили гораздо раньше, чем планировалось. Так как к приходу друзей пицца уже гарантированно остынет, необходимо заранее продумать организацию процесса ее разогрева. Теория расписаний изучается в НУОП только на третьем курсе, так что Вениамин обращается к вам за помощью, разумеется, предварительно строго сформулировав задачу:\n\n\n\tВсего у Вениамина имеется N пицц.\n\tЕго цель — выбрать такой порядок разогревания пицц в микроволновке, чтобы в некоторый момент времени как можно больше пицц оказались горячими.\n\tКаждая пицца характеризуется ровно двумя параметрами ai и bi:\n\t\n\t\tai обозначает время в секундах, необходимое для разогрева i-й пиццы в микроволновой печи;\n\t\tbi обозначает время в секундах, в течение которого пицца остается горячей.\n\t\n\t\n\tДля разогревания пицц можно использовать только микроволновку, которая у Вениамина ровно одна. Чтобы пицца стала горячей, она должна находится в микроволновке непрерывный отрезок времени длительностью ровно ai секунд.\n\tВ каждый момент времени в микроволновке может находиться не более одной пиццы.\n\tМожно считать, что все действия по управлению микроволновкой Веня совершает мгновенно (включить или выключить микроволновку, достать или убрать пиццу).\n\tТакже можно считать, что поедание пицц происходит моментально. Иными словами, нужно добиться того, чтобы максимальное количество пицц было горячими в какойто момент времени, не обязательно в некий промежуток ненулевой длины.\n\n\n \n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30823","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t양의 정수 N$N$, K$K$와 영어 알파벳 소문자로 구성된 길이가 N$N$인 문자열 S$S$가 주어진다.\n\nreverse(i)를 S$S$의 i,i+1,...,i+k−1$i, i+1, ... , i+k-1$번째 문자로 이루어진 부분 문자열을 뒤집는 연산이라고 정의하자.\n\n i=1,2,⋯,N−K+1$i = 1, 2, \\cdots , N-K+1$ 의 순서대로 reverse(i)을 수행하였을 때 나오는 최종 결과를 건공문자열이라고 할 때, 건공문자열을 출력하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30841","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tПрибыв в Кострому, великий комбинатор Остап Бендер решил возродить древнюю традицию производства резных ложек. Побродив по городу, он нашел Петю — бравого молодца, готового начать работать под управлением сына турецкого подданного. Остап решил, что провернет свою махинацию за один день: сначала Петя будет целый день делать ложки, а затем Остап их продаст и на вырученные деньги уедет в Рио-де-Жанейро.\n\nПетя раньше уже вырезал ложки, и известно, что за день он может вырезать A ложек. Но настоящие резные ложки должны быть еще и правильно покрашены! Путем нехитрых прикидок и пары не вполне легальных экспериментов Остап установил, что если Пете выдать ящик уже вырезанных ложек, за день он успеет покрасить ровно B ложек. Скорость вырезания и окрашивания ложек не меняется в течение дня. Пользуясь этими данными, помогите О. Бендеру составить план работы Пети на день, позволяющий к концу дня изготовить максимальное количество раскрашенных ложек.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30808","content":"문제\n\n \nN\n$N$개의 집합 \nS1,S2,⋯,SN\n$S_1, S_2, \\cdots, S_N$이 주어집니다. \nSi\n$S_i$는 \nli\n$l_i$ 이상 \nri\n$r_i$ 이하의 모든 정수를 모은 집합입니다.\n\n \nS1,S2,⋯,SN\n$S_1, S_2, \\cdots, S_N$ 중 \nk\n$k$개를 고른 이후, 고른 집합들의 교집합의 크기를 생각합시다. \nak\n$a_k$는 집합을 고르는 가능한 모든 \n(Nk)\n${N \\choose k}$가지의 선택 방법 모두에 대해 교집합의 크기를 더한 값입니다. 수식으로는 다음과 같이 표현할 수 있습니다:\n\n \n\n\n\n\nak:=∑τ⊆{1,2,⋯,N}|τ|=k|⋂i∈τSi|.\n$$a_{k} := \\sum_{\\substack{\\tau \\subseteq \\{1, 2, \\cdots, N\\} \\\\|\\tau|=k}} \\left|\\bigcap_{i \\in \\tau} S_{i}\\right|.$$ \n\n모든 \nk=1,2,⋯,N\n$k=1, 2, \\cdots, N$에 대해, \nak\n$a_{k}$를 \n998244353\n$998\\,244\\,353$ \n(=119×223+1)\n$(=119 \\times 2^{23}+1)$로 나눈 나머지를 구하세요. \n998244353\n$998\\,244\\,353$은 소수입니다."},{"problemId":"30787","content":"문제\n\n무방향 그래프인 높이 \nt\n$t$의 포화 이진 트리 \nTt\n$T_t$는 \n1\n$1$부터 \n2t+1−1\n$2^{t+1}-1$까지의 정점을 가지고, \n1\n$1$ 이상 \n2t−1\n$2^t-1$ 이하의 모든 정수 \ni\n$i$에 대해 정점 \ni\n$i$와 정점 \n2i\n$2i$, 정점 \ni\n$i$와 정점 \n2i+1\n$2i+1$을 연결하는 간선이 있는 그래프이다.\n\n두 그래프 \nG,H\n$G,H$가 동형이라는 것은 \nG\n$G$의 임의의 두 정점 \nu\n$u$, \nv\n$v$가 주어졌을 때 \nu\n$u$와 \nv\n$v$가 \nG\n$G$에서 인접한 것과 \nf(u)\n$f(u)$와 \nf(v)\n$f(v)$가 \nH\n$H$에서 인접한 것이 필요충분조건인 일대일 함수 \nf:V(G)→V(H)\n$f:V(G)\\rightarrow V(H)$가 존재한다는 것이다. 여기에서 \nV(G)\n$V(G)$와 \nV(H)\n$V(H)$는 각각 \nG\n$G$와 \nH\n$H$의 정점 집합을 의미한다.\n\n \nTN\n$T_N$에서 \n0\n$0$개 이상의 정점과 간선을 제거해서 \nTK\n$T_K$와 동형인 그래프를 만드는 방법의 가짓수를 구하자."},{"problemId":"30824","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t두 양의 정수 k$k$, x$x$가 주어질 때, 피보나치 수열의 항들 중 정확히 k$k$개를 더하여 x$x$를 만들 수 있는지 판별하여라. 이때 피보나치 수열의 항을 중복하여 선택할 수 있다.\n\n피보나치 수열이란, F1=F2=1,Fn=Fn−1+Fn−2,(n≥3)$F_1 = F_2 =1, F_n = F_{n-1} + F_{n-2}, (n \\geq3)$로 정의되는 수열이다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30842","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tВасе на день рождения подарили два числа.\n\nПервое число состоит из цифры D, записанной N раз. Второе состоит из той же цифры D, записанной M раз.\n\nВасе числа очень понравилась, и он захотел с ними поиграть. Он решил найти наибольший общий делитель этих двух чисел (как известно, наибольший общий делитель двух чисел равен наибольшему натуральному числу, на которое оба данных числа делятся без остатка). Однако ему не удалось это сделать — числа оказались слишком большими для него. Поэтому он попросил вас помочь ему.\n\nПомогите Васе! Найдите наибольший общий делитель подаренных ему чисел.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30809","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t동전이 N$N$종류가 있습니다. i$i$번째 종류의 동전은 Ci$C_i$개가 있고, 동전 한 개는 Vi$V_i$원의 가치를 가집니다. (1≤i≤N)$(1 \\le i \\le N)$ 동전을 적당히 골라서 가치의 합이 X$X$원이 되도록 할 수 있나요? 가능하다면 방법을 하나 출력하세요.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30825","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t서울시립대학교의 마스코트와도 같은 존재인 건공이는 어떤 수열을 주더라도 공차가 K$K$인 등차수열로 만들어 버리는 버릇이 있다.\n\n건공이는 주어진 수열을 등차수열로 만들기 위해, 건공펀치를 1회 사용하여 수열의 한 원소의 값을 1 증가시킬 수 있다.\n\n건공이는 건공펀치를 최소로 사용하고 싶어하지만, 수열의 길이가 너무 길어 건공펀치의 최소 사용 횟수를 구하는 데 어려움을 겪고 있다.\n\n건공이를 대신하여 주어진 수열을 등차수열로 만드는 데 필요한 건공펀치의 최소 사용 횟수를 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30810","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t건물 N$N$개와 도로 M$M$개로 이루어진 도시가 있습니다. i$i$번 도로는 ui$u_i$번 건물과 vi$v_i$번 건물을 양방향으로 잇습니다. 두 개 이상의 도로가 같은 건물 쌍을 서로 잇는 경우는 없습니다. 각 도로는 K$K$가지 색의 유성 페인트 중 하나로 칠해져 있는데, i$i$번 도로는 ci$c_i$번 색의 페인트로 칠해져 있습니다. 이 페인트는 아직 다 마르지 않았기 때문에, i$i$번 도로를 거친 직후 방문한 건물은 ci$c_i$번 색으로 덮여 칠해질 것입니다. (1≤i≤M)$(1\\le i\\le M)$처음에 모든 건물의 색은 0$0$번 색입니다.\n\n행위예술가 은하는 다음과 같은 방법으로 건물에 색을 칠하려고 합니다.\n\n\n\t은하가 처음에 시작할 건물을 골라서 해당 건물로 갑니다.\n\t모든 건물에 원하는 색이 칠해질 때까지 다음 단계를 반복합니다.\n\t\n\t\t현재 있는 a$a$번 건물에서, p$p$번 색으로 칠해진 도로를 통해 인접한 b$b$번 건물로 이동합니다. 같은 건물을 여러 번 방문해도 됩니다.\n\t\t\n\t\t\t (a,b,p)=(ui,vi,ci)$(a,b,p) =(u_i,v_i,c_i)$ 혹은 (vi,ui,ci)$(v_i,u_i,c_i)$인 i$i$가 존재해야 합니다.\n\t\t\n\t\t\n\t\t b$b$번 건물의 색을 이전에 칠해진 색과 관계없이 p$p$번 색으로 덧칠합니다.\n\t\n\t\n\n\n은하는 1≤j≤N$1\\le j\\le N$인 모든 j$j$에 대해 j$j$번째 건물의 색을 rj$r_j$로 칠하려 합니다. 이것이 가능한지 판단하고, 가능하면 방법을 하나 출력하세요.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30788","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\nRyu☆ - Sakura Reflection의 앨범아트\n\nSakura Reflection은 Ryu☆가 작곡해 REFLEC BEAT에 수록된 곡이다. 이제, 제목이 말하는 대로 앨범아트를 Reflection하자. 앨범아트의 중심을 지나는 N$N$개의 축이 주어지며, i$i$번째 축이 수평선과 이루는 각도는 시계 반대 방향으로 Ai∘$A_i^{\\circ}$이다. 이제 각 축을 기준으로 앨범아트를 대칭이동할 수 있다. 앨범아트를 360∘$360^{\\circ}$의 배수가 아닌 각도로 회전하거나, 특정한 축을 기준으로 한 번 대칭이동하는 것으로는 앨범아트가 원래 상태가 되지 않는 점에 유의하여라.\n\nRyu☆는 N$N$개의 축을 각각 한 번씩 사용해서 앨범아트를 N$N$번 대칭이동하려고 한다. 혹독한 대칭이동의 세계에서는 대칭이동하는 순서에 따라 결과가 다르게 나올 수 있다. (a)는 60∘$60^{\\circ}$ 축으로 대칭이동한 후 120∘$120^{\\circ}$ 축으로 대칭이동한 그림이며, (b)는 120∘$120^{\\circ}$ 축으로 대칭이동한 후 60∘$60^{\\circ}$ 축으로 대칭이동한 그림이다.\n\n\n\n두 가지 대칭이동 순서. 순서에 따라 다른 결과가 나올 수 있다.\n\n N$N$개의 축을 각각 정확히 한 번 사용해서 대칭이동해서 앨범아트를 원래 상태로 만들 수 있는가? 가능하다면, 그 순서를 하나 찾아보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30843","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tПятиклассник Вася живет в доме, в котором всего N квартир. Квартиры нумеруются с 1 по N, и около каждой квартиры на табличке написан ее номер. Вася хочет заменить часть табличек так, чтобы сумма номеров квартир стала равна S.\n\nВ магазине Вася может купить таблички с любыми натуральными числами. Помогите Васе определить минимальное количество табличек, которые ему придется купить, чтобы осуществить свой коварный план.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30811","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t 1018$10^{18}$개의 정점으로 이루어진 트리가 있습니다. 이 트리에는 2≤i≤1018$2 \\le i \\le 10^{18}$인 i$i$에 대해, i$i$번째 정점과 ⌊i2⌋$\\left\\lfloor \\frac{i}{2} \\right \\rfloor$번째 정점을 잇는 간선이 있습니다.\n\n이 트리에서 K$K$개의 정점 v1,v2,⋯,vK$v_1, v_2, \\cdots, v_K$가 주어집니다. 임의의 정점에서 시작해서 주어진 K$K$개의 정점을 각각 한 번 이상 방문하는 경로 중, 가장 짧은 경로의 길이를 구하세요.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30826","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t팰린드롬 수는 앞에서 읽어도, 뒤에서 읽어도 같은 수를 말한다. 예를 들어, 7$7$, 88$88$, 14641$14641$은 팰린드롬 수지만 201$201$, 329$329$, 4700$4700$ 등은 팰린드롬 수가 아니다.\n\n상윤이는 팰린드롬 수 중 양의 정수면서 첫 자리가 0$0$이 아닌 팰린드롬 수들을 1$1$부터 차례대로 이어 붙여 아주 긴 수를 새로 만들고 '그 긴 수'라 명명하였다. 하지만 '그 긴 수'가 너무 긴 나머지 상윤이는 '그 긴 수'의 앞에서 k$k$번째 숫자가 몇인지 알아내는 데 어려움을 겪고 있다.\n\n'그 긴 수'의 앞에서 30자리는 다음과 같다.\n\n\n\t 123456789112233445566778899101⋯$123456789112233445566778899101 \\cdots $ \n\n\n상윤이의 궁금증을 해결해 주기 위해, 양의 정수 k$k$가 주어질 때 '그 긴 수'의 앞에서 k$k$번째 숫자를 구해 주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30812","content":"문제\n\n은하는 평생 에메랄드를 모으는 데 힘썼고 이제 이것을 \nN\n$N$명의 자식들에게 물려줄 때가 되었습니다. 은하는 가지고 있는 에메랄드를 \nN\n$N$명의 자식들에게 각각 \nK\n$K$개씩 나누어주고, 꼭 필요할 때 사용하라고 신신당부했습니다. 애프터눈 티타임을 즐기고 있던 어느 날, 자식 중 정확히 한 명이 에메랄드를 모두 팔아 버렸다는 사실이 은하의 귀에 들어가게 되었습니다.\n\n은하는 에메랄드를 모두 팔아버린 불효자가 누군지 찾기 위해 자식들에게 준 에메랄드를 다음과 같은 방법으로 돌려달라고 했습니다.\n\n에메랄드를 돌려받을 일수 \nX\n$X$와 \ni\n$i$번째 날에 \nj\n$j$번째 자식에게서 돌려받을 에메랄드의 수 \n{aij}\n$\\{a_{ij}\\}$를 정합니다. 단, \naij\n$a_{ij}$는 음이 아닌 정수이고, \nj\n$j$번째 자식이 내야 하는 에메랄드 총수 \n∑i=1Xaij\n$\\sum_{i=1}^{X}a_{ij}$는 \nK\n$K$ 이하여야 합니다. \n(1≤i≤X;\n$(1\\le i\\le X;$ \n1≤j≤N)\n$1\\le j\\le N)$ \n \ni=1,⋯,X\n$i=1,\\cdots ,X$에 대해 다음을 반복합니다.\n \ni\n$i$번째 날 오전, \nj\n$j$번째 자식이 에메랄드 \naij\n$a_{ij}$개를 금고에 담습니다. 단, \nj\n$j$번째 자식이 에메랄드를 모두 팔아버렸다면 에메랄드를 금고에 담을 수 없으므로 아무것도 하지 않습니다.\n \ni\n$i$번째 날 오후, 은하는 금고에 에메랄드가 총 몇 개 있는지 확인하고, 모든 에메랄드를 가져갑니다.\n\n은하는 적절한 \nX\n$X$와 \n{aij}\n$\\{a_{ij}\\}$를 정하면 불효자를 찾을 수 있다는 것을 깨달았습니다.\n\n이 방법의 큰 문제는 \nX\n$X$일이라는 긴 시간이 걸린다는 것입니다. 아니나 다를까, 자식들은 다른 일로 바쁘다며 \nX\n$X$를 최대한 줄여 달라고 요청했습니다. 여러분은 은하를 도와 \nN\n$N$과 \nK\n$K$가 주어지면 불효자를 한 명으로 특정할 수 있는 최소의 \nX\n$X$를 찾아야 합니다."},{"problemId":"30789","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t 2N$2N$개의 크기와 넓이가 같은 부채꼴 모양 조각으로 이루어진 원형 케이크가 있다. 각 조각은 시계 방향으로 1$1$번부터 2N$2N$번까지 순서대로 번호가 붙어 있으며, 처음에 i$i$번 조각의 맛은 Ai$A_i$이다.\n\n채완이는 희원이와 케이크를 절반으로 잘라서 나눠 먹으려고 한다. 케이크를 자를 때는 1$1$ 이상 N$N$ 이하의 정수 k$k$를 하나 고른 뒤, 케이크를 k$k$, k+1$k + 1$, ⋯$\\cdots$, k+N−1$k + N - 1$번 조각이 포함된 부분과 그렇지 않은 부분으로 나눈다. 이렇게 나눠진 부분의 맛은 그 부분에 포함되는 케이크 조각 맛의 합으로 정의한다.\n\n채완이는 희원이보다 더 맛있는 케이크 부분을 잘라 먹고 싶기 때문에, 케이크를 자르는 N$N$가지의 방법 중 두 부분의 맛 차이가 최대가 되는 방법으로 케이크를 자를 것이다.\n\n희원이는 채완이의 계략을 간파하고, 채완이가 케이크를 잘랐을 때 나눠진 두 부분의 맛 차이가 최소가 되도록 케이크 조각 위에 초콜릿 토핑을 몇 개 올려두려고 한다. 어떤 조각에 초콜릿 토핑을 하나 올려두게 되면 그 조각의 맛은 M$M$만큼 상승한다. 한 조각에 여러 개의 토핑을 올려놓을 수 있고, 여러 조각에 동시에 초콜릿 토핑을 올려놓을 수도 있다. 그러나 하나의 조각에 최대로 올려놓을 수 있는 초콜릿의 개수는 1012$10^{12}$ 개이다.\n\n희원이가 최대한 평등하게 케이크를 나눠 먹을 수 있도록, 각 조각에 초콜릿 토핑을 올려두는 방법을 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30827","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t서울시립대학교 정보기술관에는 K$K$개의 회의실이 있고, 이 회의실을 사용하려는 회의 N$N$개가 있다. \n\n서울시립대학교 정보기술관 회의실의 규칙은 다음과 같다.\n\n\n\t두 개 이상의 회의를 한 회의실에서 동시에 진행할 수 없다.\n\t회의실을 치우는 시간이 필요하기 때문에 회의가 끝난 즉시 같은 회의실에서 다른 회의를 시작할 수 없다. \n\n\n다시 말해, 어떤 두 회의 A$A$, B$B$에 대해 두 회의의 시작 시간을 각각 As$A_s$, Bs$B_s$, 두 회의의 종료 시간을 각각 Ae$A_e$, Be$B_e$라고 할 때 Ae<Bs$A_e < B_s$ 또는 Be<As$B_e < A_s$를 만족해야 두 회의를 같은 회의실에서 진행할 수 있다.\n\n회의실을 사용하려는 회의 N$N$개의 회의 시작 시간 (is)$(i_s)$와 종료 시간(ie)$(i_e)$가 주어질 때, 회의실을 사용할 수 있는 회의의 최대 개수를 찾아보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30813","content":"문제\n\nVasya has decided to build a zip-line on trees of a nearby forest. He wants the line to be as long as possible but he doesn't remember exactly the heights of all trees in the forest. He is sure that he remembers correct heights of all trees except, possibly, one of them.\n\nIt is known that the forest consists of \nn\n$n$ trees staying in a row numbered from left to right with integers from \n1\n$1$ to \nn\n$n$. According to Vasya, the height of the \ni\n$i$-th tree is equal to \nhi\n$h_i$. The zip-line of length \nk\n$k$ should hang over \nk\n$k$ (\n1≤k≤n\n$1 \\le k \\le n$) trees \ni1,i2,…,ik\n$i_1, i_2, \\ldots, i_k$ (\ni1<i2<…<ik\n$i_1 < i_2 < \\ldots < i_k$) such that their heights form an increasing sequence, that is \nhi1<hi2<…<hik\n$h_{i_1} < h_{i_2} < \\ldots < h_{i_k}$.\n\nPetya had been in this forest together with Vasya, and he now has \nq\n$q$ assumptions about the mistake in Vasya's sequence \nh\n$h$. His \ni\n$i$-th assumption consists of two integers \nai\n$a_i$ and \nbi\n$b_i$ indicating that, according to Petya, the height of the tree numbered \nai\n$a_i$ is actually equal to \nbi\n$b_i$. Note that Petya's assumptions are independent from each other.\n\nYour task is to find the maximum length of a zip-line that can be built over the trees under each of the \nq\n$q$ assumptions.\n\nIn this problem the length of a zip line is considered equal to the number of trees that form this zip-line."},{"problemId":"30844","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tОчень странно устроена жизнь в одном Очень Известном Университете. Вместо того, чтобы помогать друг другу и жить сладкой жизнью, студенты постоянно ругаются, вставляют друг другу палки в колеса и всячески отказываются сотрудничать.\n\nНо Миша и Володя — не такие! На очередной лекции по Невероятно Интересному Предмету Миша выписал в строчку все числа от 1 до N. Миша очень старательно выписывает каждую цифру так, как показано на рисунке:\n\n\n\nПри этом в тетради тут же образовались замкнутые области (например, если N = 6, то образовалась одна замкнутая область внутри цифры 6). Володя решил помочь скоротать время своему другу Мише — он решил раскрасить каждую замкнутую область. Но для этого ему стало интересно, а успеет ли он раскрасить все области до конца лекции? Сколько же областей ему придется закрасить?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30814","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tWatchmen are in a danger and Doctor Manhattan together with his friend Daniel Dreiberg should warn them as soon as possible. There are n$n$ watchmen on a plane, the i$i$-th watchman is located at point (xi,yi)$(x_i, y_i)$.\n\nThey need to arrange a plan, but there are some difficulties on their way. As you know, Doctor Manhattan considers the distance between watchmen i$i$ and j$j$ to be |xi−xj|+|yi−yj|$|x_i - x_j| + |y_i - y_j|$. Daniel, as an ordinary person, calculates the distance using the formula (xi−xj)2+(yi−yj)2$\\sqrt{(x_i - x_j)^2 + (y_i - y_j)^2}$.\n\nThe success of the operation relies on the number of pairs (i,j)$(i, j)$ (1≤i<j≤n$1 \\leq i < j \\leq n$), such that the distance between watchman i$i$ and watchmen j$j$ calculated by Doctor Manhattan is equal to the distance between them calculated by Daniel. You were asked to compute the number of such pairs.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30828","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t알고 있었는가, 사실 건공이는 굉장히 유능한 요리사라는 사실을. 건공이는 어떤 재료들을 받아도 가장 맛있는 음식을 만들어 낼 수 있는 엄청난 능력이 있다.\n\n건공이는 1$1$번 재료부터 N$N$번 재료까지 총 N$N$개의 재료를 가지고 있다. 각 재료는 Ti$T_i$의 맛 수치를 가진다. 건공이가 만드는 음식의 맛은 (사용한 모든 재료의 맛들을 XOR한 값 + 사용한 모든 재료의 개수)로 나타낼 수 있다.\n\n Q$Q$개의 쿼리가 주어지고 각 쿼리마다 l$l$과 r$r$이 주어질 때, 각 쿼리에 대하여 l$l$번째 재료부터 r$r$번째 재료까지 (r−l+1$r - l + 1$)개의 재료 중 0$0$개 이상을 적절히 사용하여 만들 수 있는 요리의 맛 중 최댓값을 구하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30790","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t키위는 가지 농사를 위해 새로운 땅을 찾고 있다. 이 소식을 들은 키위의 친구 유틸은 키위에게 평지에 N$N$개의 표지판을 세운 뒤, 여기서 농사를 시작하면 어떻겠냐고 제안했다. 단, 주어진 표지판들을 모두 포함하는 가장 넓이가 작은 볼록 다각형에서만 농사를 지을 수 있다고 했다.\n\n그렇게 키위는 가지 농사를 시작했다. 농사를 잘 짓고 있는지 확인하러 온 유틸은 키위가 열심히 가지를 키우고 있는 모습을 보고는 감동을 받아 키위에게 이렇게 말했다.\n\n\"앞으로 Q$Q$일 동안 매일 새로운 표지판을 하나 세울 거야. 기존에 세웠던 표지판들과 새로 세운 표지판을 모두 포함하는 가장 넓이가 작은 볼록 다각형이 너의 새 농지야. 축하해! 근데 나도 주민 센터에 농지를 새로 보고해야 되서 말인데, 새 농지의 둘레와 면적을 알려주지 않을래?\"\n\n더 넓은 땅에서 가지를 수확할 수 있다는 사실에 키위는 기뻤다. 하지만 표지판이 너무 많아서 매일 변화하는 땅의 둘레와 면적을 계산하기 쉽지 않았다. 키위를 도와주자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30845","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tОднажды Василий проголодался и пошел на кухню подкрепиться. Но каково было его удивление, когда, открыв холодильник, он обнаружил там не привычные продукты, а строку! Причем не просто строку, а зацикленную, прямо как бублик (ассоциации с едой часто приходят Васе в голову, когда он голоден). Загадочная строка заинтересовала любопытного, но все еще голодного Василия, и он начал ее вертеть в руках. Например, если вертеть строку abacaba, то можно получить следующие строки:\n\n\n\tabacaba\n\tbacabaa\n\tacabaab\n\tcabaaba\n\tabaabac\n\tbaabaca\n\taabacab\n\n\nИ тут Василия осенило: если он сможет посчитать, сколько раз в процессе кручения строки получается лексикографически минимальная строка, то еда магическим образом появится в холодильнике (странные идеи часто приходят Васе в голову, когда он голоден). Помогите Васе, иначе он так и будет сидеть голодным.\n\nБолее формально, вам дана строка. Циклическим сдвигом строки s длины n называется строка, полученнная из исходной путем отбрасывания первых 0 ⩽ k < n символов и приписывания их в конец. Необходимо посчитать, сколько раз среди всех циклических сдвигов строки встречается лексикографически минимальный циклический сдвиг.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30815","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMy name is James diGriz, I'm the most clever robber and treasure hunter in the whole galaxy. There are books written about my adventures and songs about my operations, though you were able to catch me up in a pretty awkward moment.\n\nI was able to hide from cameras, outsmart all the guards and pass numerous traps, but when I finally reached the treasure box and opened it, I have accidentally started the clockwork bomb! Luckily, I have met such kind of bombs before and I know that the clockwork mechanism can be stopped by connecting contacts with wires on the control panel of the bomb in a certain manner.\n\nI see n$n$ contacts connected by n−1$n - 1$ wires. Contacts are numbered with integers from 1$1$ to n$n$. Bomb has a security mechanism that ensures the following condition: if there exist k≥2$k \\geq 2$ contacts c1,c2,…,ck$c_1, c_2, \\ldots, c_k$ forming a circuit, i. e. there exist k$k$ distinct wires between contacts c1$c_1$ and c2$c_2$, c2$c_2$ and c3$c_3$, …$\\ldots$, ck$c_k$ and c1$c_1$, then the bomb immediately explodes and my story ends here. In particular, if two contacts are connected by more than one wire they form a circuit of length 2$2$. It is also prohibited to connect a contact with itself.\n\nOn the other hand, if I disconnect more than one wire (i. e. at some moment there will be no more than n−2$n - 2$ wires in the scheme) then the other security check fails and the bomb also explodes. So, the only thing I can do is to unplug some wire and plug it into a new place ensuring the fact that no circuits appear.\n\nI know how I should put the wires in order to stop the clockwork. But my time is running out! Help me get out of this alive: find the sequence of operations each of which consists of unplugging some wire and putting it into another place so that the bomb is defused.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30829","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t어떤 양의 정수 n$n$에 대해 n$n$에서 숫자 몇 개를 지워 만들 수 있는 모든 수들의 집합을 An$A_n$이라고 하자. 예를 들어, 양의 정수 1234$1234$에서 1$1$번째 숫자와 3$3$번째 숫자를 지우면 24$24$가 되므로 24$24$는 A1234$A_{1234}$에 포함된다. 단, 0$0$으로 시작하는 수는 없다고 가정한다.\n\n양의 정수 n$n$이 주어질 때 An$A_n$에 포함되지 않은 양의 정수 중 가장 작은 수를 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30791","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tGahui is watching the annual character election. After the election, The top 16 characters receive enormous benefits for one year because they belong to the Tier 1 (ranked 1st - 16th) section. For that reason, fans vote passionately to get their favorite characters into the top 16. Remarkably, at least one Cinderella appears in every election, achieving an outstanding outcome.\n\nThe competition rate of election is defined as the number of characters that satisfy the conditions below:\n\n\n\tThe character does not belong to the Tier 1 section.\n\tThe difference in votes between the character and the 16th-ranked character is 1000$1\\,000$ or less.\n\n\nFind the competition rate of the election.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30816","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tLittle Petya is now fond of data compression algorithms. He has already studied gz, bz, zip algorithms and many others. Inspired by the new knowledge, Petya is now developing the new compression algorithm which he wants to name dis.\n\nPetya decided to compress tables. He is given a table a$a$ consisting of n$n$ rows and m$m$ columns that is filled with positive integers. He wants to build the table a′$a'$ consisting of positive integers such that the relative order of the elements in each row and each column remains the same. That is, if in some row i$i$ of the initial table ai,j<ai,k$a_{i,j} < a_{i,k}$, then in the resulting table ai,j′<ai,k′$a'_{i,j} < a'_{i,k}$, and if ai,j=ai,k$a_{i,j} = a_{i,k}$ then ai,j′=ai,k′$a'_{i,j} = a'_{i,k}$. Similarly, if in some column j$j$ of the initial table ai,j<ap,j$a_{i,j} < a_{p,j}$ then in compressed table ai,j′<ap,j′$a'_{i,j} < a'_{p,j}$ and if ai,j=ap,j$a_{i,j} = a_{p,j}$ then ai,j′=ap,j′$a'_{i,j} = a'_{p,j}$.\n\nBecause large values require more space to store them, the maximum value in a′$a'$ should be as small as possible.\n\nPetya is good in theory, however, he needs your help to implement the algorithm.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30846","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tВосьмое марта только началось, а перед входом в цветочный магазин «Аделина» уже выстроилась огромная очередь желающих приобрести букеты красивейших свежих алых роз. Хозяин магазина Александр понимал, что день сегодня предстоит нелегкий. Поэтому он решил предварительно узнать у каждого из ожидающих покупателей, сколько всего роз тот хотел бы приобрести. Полученные числа Александр аккуратно выписал на листок и понял, что в одиночку ему не справиться.\n\nЧтобы ускорить процесс формирования букетов, хозяин магазина позвал на помощь своего коллегу Михаила. Александр показал ему полученный только что список и предложил выписать подпоследовательность размеров букетов, формированием которых Михаил готов заняться.\n\nМихаила не интересует оптимальное распределение работы. Не интересуют его также максимальный, минимальный и даже средний размеры формируемых им букетов. Все, что он хочет знать, — количество различных непустых подпоследовательностей в списке Александра по модулю 109 + 7.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30817","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAs you probably know, in June Flatland will host the Jupiter's football championship. There will be n$n$ teams participating in the competition, and each team is going to play with each other team exactly once.\n\nThere are m$m$ different colors of football t-shirts produced on Jupiter. Each team will bring t-shirts of two different colors. Of course, during the single match all members of one team must wear t-shirts of the same colors, and this color should be different from the color of t-shirts opposite team is using in this game.\n\nThe president of the Fantastic Interplanet Football Association Joseph was invited to referee such an important tournament. At the beginning of each game Joseph can specify for each of the opposing teams the particular color of the t-shirts they should use during this game. He is able to choose colors only among the two colors this team has brought to the tournament. After this, Joseph chooses the color he is going to wear during the match. As you can guess, this color should differ from colors teams are using, so they are able to distinguish the referee and each team on the field. Any t-shirts may be used multiple times.\n\nJoseph is going to buy the necessary t-shirts right before the start of the tournament, when he already knows for each team the colors of t-shirts this team has. Joseph cares a lot about the money of the federation, so he wants to buy the minimum number of t-shirts that is necessary to referee all the games. This problem is quite complicated for the common football referee, so he asks you to help.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30830","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t N×N$N \\times N$ 크기의 체스판 두 개에 룩이 각각 N$N$개씩 올라가 있다. 룩은 같은 체스판의 같은 열이나 같은 행에 있는 다른 룩을 공격할 수 있다.\n\n두 체스판의 룩을 적절히 교환하여 두 체스판 위의 어떠한 룩도 다른 룩을 공격하지 못하게 만들려고 한다.\n\n룩을 교환하는 행위는 정확히 다음과 같다. 체스판의 r$r$행 c$c$열을 (r,c)$(r, c)$와 같이 나타낼 때 1$1$번 체스판의 (a,b)$(a,b)$에 있는 룩과 2$2$번 체스판의 (c,d)$(c,d)$에 있는 룩을 교환하면 1$1$번 체스판의 (c,d)$(c,d)$와 2$2$번 체스판의 (a,b)$(a,b)$에 각각 룩이 생기고 기존 위치에 있던 두 룩은 사라진다.\n\n체스판의 한 칸에는 룩이 최대 한 개만 올라가 있을 수 있다. 따라서, 룩이 생길 위치에 이미 다른 룩이 존재한다면 그 룩은 교환할 수 없다. 예를 들어, 1번 체스판의 (a,b)$(a,b)$에 룩이 있다면 2번 체스판의 (a,b)$(a,b)$에 있는 룩은 1번 체스판의 (a,b)$(a,b)$를 제외한 모든 1번 체스판 위의 룩과 교환할 수 없게 되는 것이다.\n\n최소 몇 번의 교환으로 두 체스판 위의 어떠한 룩도 다른 룩을 공격하지 못하게 만들 수 있을까?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30847","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tМиша и Глеб очень любят знаменитую игру ним. Напомним вкратце её правила:\n\n\n\tНа столе лежат N кучек камней, в кучке с номером i содержится ai камней.\n\tИграют два игрока, игроки ходят по очереди, на каждом ходу игрок обязан выбрать любую непустую кучку и убрать из неё любое ненулевое количество камней.\n\tПроигрывает тот, кто не может сделать ход.\n\n\nНаши герои играют в эту игру уже так давно, что обнаружили выигрышную стратегию, и теперь могут определить победителя просто взглянув на стол. Поняв, что данная игра утратила свою новизну, они переключились на ним в поддавки, который отличается от оригинального только тем, что игрок, который не может сделать ход, объявляется победителем.\n\nДрузья весело проводили долгие вечера за этой новой забавой, пока не пришел Витя и не рассказал им, что исход данной игры так же можно предсказать лишь взглянув на стол.\n\nТогда было принято решение еще усложнить правила — теперь разрешается брать только любое нечетное количество камней. На этот раз Витя не смог обнаружить стратегию и помешать двум друзьям, поэтому он обратился за помощью к вам. Напишите программу, определяющую победителя в игре ним, если разрешается брать из кучки только нечетное количество камней. На всякий случай научитесь также определять победителя для нима в поддавки, в котором также можно брать только нечетное количество камней — Витя подозревает что именно эта игра станет для Глеба и Миши следующей.\n\nМиша всегда ходит первым.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30818","content":"문제\n\nGotham City consists of a single street, and there are \nn\n$n$ skyscrapers located along it. They are numbered from west to east with integers from \n1\n$1$ to \nn\n$n$, the height of the \ni\n$i$-th skyscraper is equal to \nhi\n$h_i$ meters.\n\nEvery night Batman performs an observation flight over the city. He climbs on the roof of some skyscraper and glides down to the roof of some other skyscraper. Due to the strong permanent wind he is only able to flight westward, but his altitude remains almost the same. Thus, he is able to glide down from skyscraper \nq\n$q$ to skyscraper \np\n$p$ if and only if \np<q\n$p < q$ and \nhp<hq\n$h_p < h_q$. Moreover, Batman is very manoeuvrable, so the height of the buildings between \np\n$p$ and \nq\n$q$ don't matter. Batman cares a lot about the crime level in the city so he chooses such pair of valid \np\n$p$ and \nq\n$q$ that \nq−p\n$q - p$ is maximum possible.\n\nCity authorities have developed \nm\n$m$ plans of city renewal. According to the \ni\n$i$-th plan only skyscrapers from \nli\n$l_i$ to \nri\n$r_i$, inclusive will remain on this street, while others will be destroyed. For each plan \ni\n$i$ Batman wants to know the optimal plan to observe the city, namely such \npi\n$p_i$ and \nqi\n$q_i$ that \nli≤pi<qi≤ri\n$l_i \\leq p_i < q_i \\leq r_i$, \nhpi<hqi\n$h_{p_i} < h_{q_i}$ and \nqi−pi\n$q_i - p_i$ is maximum possible."},{"problemId":"30819","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBad Horse is recruiting to The Evil League of Evil! He used his hoof to write down a long string s$s$, consisting of letters \"'texttt{(}\", \"'texttt{)}\" and \"?\", and sent it to all applicants. Each person willing to join Evil League has to replace all characters \"?\" with either opening bracket or closing bracket. The invitation to join The Evil League of Evil will be send to the person who's resulting string contains the longest possible subsequence, that is correct bracket sequence.\n\nSubsequence of the string s$s$ is the string that can be obtained by removing some characters (possibly none) from s$s$. For example, strings \"'texttt{abc}\", \"ac\", \"bcc\" and \"abbcc\" are subsequences of \"abbcc\", while \"cb\" and \"ba\" are not. Note, that the empty string is a subsequence of any string.\n\nThe sequence of brackets is called correct if:\n\n\n\tit's empty;\n\tit's a correct sequence of brackets, enclosed in a pair of opening and closing brackets;\n\tit's a concatenation of two correct sequences of brackets.\n\n\nFor example, the sequences \"()()\" and \"((()))()\" are correct, while \")(()\", \"(((((\" and \"())\" are not.\n\nDr. Horrible was dreaming of joining Evil League of Evil for year, but his pacifism blocks him from doing bad things. He is also bad in solving problems and asks you to deal with the Horse's puzzle.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30792","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tGahui is watching the annual character election. After the election, The top 16 characters receive enormous benefits for one year. For that reason, fans vote passionately to get their favorite characters into the top 16. Remarkably, at least one Cinderella appears in every election, achieving an outstanding outcome.\n\nOf course, the ranking is high if the number of votes is high. Gahui supports only one character. Find the ranking of the character she supports.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30831","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t서울시립대학교에는 숨겨진 특수 학과가 존재한다. 바로 이루매를 위한 비행학과다.\n\n비행학과의 과목 이수 체계도는 과목들을 두 가지 관계를 이용해 표현한다.\n\n\n\t권장 선후수 관계: 두 과목 사이에 권장되는 선수-후수 관계를 표현한다. 즉, 후수 과목을 수강하기 위해서 선수 과목을 반드시 수강할 필요가 없다.\n\t필수 선후수 관계: 두 과목 사이에 필수적인 선수-후수 관계를 표현한다. 즉, 후수 과목을 수강하기 위해서 선수 과목을 반드시 수강해야 한다.\n\n\n주어지는 과목 이수 체계도는 다음과 같은 규칙을 갖는다.\n\n\n\t모든 과목은 0 또는 1개의 후수 과목을 갖는다.\n\t모든 과목은 0 또는 1개의 필수 선수 과목을 갖는다.\n\t두 과목 사이에는 권장 선후수 관계, 필수 선후수 관계 중 한 가지 관계가 있거나, 아무런 관계도 없다.\n\t임의의 과목에 대하여, 후수 과목을 거쳐 계속 과목을 선택하였을 때 같은 과목을 두 번 이상 선택할 수 없다.\n\n\n이 학과는 특수한 학과라 한 학기에 최대 한 과목만 수강할 수 있다. 이루매는 똑똑해서 각 학기마다 수강하고 싶은 과목을 미리 선택한 후 다음과 같은 규칙을 적용해 최종적으로 수강할 과목을 선택하고자 한다.\n\n\n\t이미 수강한 과목은 다시 수강할 수 없어서 선택할 수 없다. 대신 이루매는 그 과목의 후수 과목을 선택한다. 만약 후수 과목이 없다면 해당 학기는 아무 과목도 수강하지 않기로 하고 과목 선택을 멈춘다.\n\t선택한 과목의 수강하지 않은 필수 선수 과목이 있다면 그 과목은 아직 수강할 수 없다. 대신 선택한 과목의 필수 선수 과목을 선택한다.\n\t위 규칙을 수강이 가능한 과목이 선택되거나 아무 과목도 수강하지 않기로 할 때까지 반복한다.\n\n\n이루매는 위 과정 끝에 선택된 과목을 수강한다. 단, 수강할 수 있는 과목이 없는 경우 이루매는 아무런 과목도 수강하지 않는다.\n\n이루매가 각 학기마다 수강하고자 하는 과목이 주어질 때, 이루매가 실제로 수강하게 되는 과목을 알려주고 수강하게 해 주자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30832","content":"문제\n\n정점의 개수가 \nN\n$N$인 두 트리 \nA\n$A$, \nB\n$B$가 주어진다. 다음의 시행을 \n2N\n$2N$번 이하로 하여 \nA\n$A$를 \nB\n$B$와 똑같이 만들어 보자.\n\n \nA\n$A$의 서로 다른 세 정점 \na\n$a$, \nb\n$b$, \nc\n$c$를 고른다. \na\n$a$와 \nb\n$b$, \nb\n$b$와 \nc\n$c$는 각각 간선으로 연결되어 있어야 한다.\n \na\n$a$와 \nb\n$b$ 사이의 간선을 제거하고 \na\n$a$와 \nc\n$c$ 사이에 간선을 추가한다.\n\n \n2N\n$2N$번 이하의 시행으로 \nA\n$A$와 \nB\n$B$를 똑같이 만드는 것이 항상 가능함을 증명할 수 있다. 시행의 횟수를 최소화할 필요가 없음에 유의하라."},{"problemId":"30848","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tДавным-давно в далекой, далекой галактике на одной очень отдаленной планете стало слишком много людей, и они решили начать колонизацию. Не долго думая, они выбрали своей первой жертвой самый ближайший для них спутник — Луну.\n\nНа Луну на огромных шаттлах завезли N автономных модулей, чтобы поселить в них людей. Каждый модуль представляет собой купол из бионического стекла, имеющий форму круга радиуса Ri. Но вдруг оказалось, что эти модули не совсем автономные: пришлось соединить их переходами, причем переходы можно построить только в случае, если купола стоят вплотную друг к другу (т.е. ограничивающие их окружности касаются внешним образом).\n\nИтак, нашим космонавтам требуется построить лунную базу, то есть расставить модули так, чтобы между любыми двумя куполами был переход, и вычислить площадь получившейся базы. Но важно заметить, что площадью базы считается не только площадь под самими модулями, но и та область, в которую нельзя попасть, не проходя через купол.\n\nЭто заселение продолжалось многие годы, и затем, как и на старой планете, на Луне стало слишком мало места, поэтому люди решили достраивать базы. Они придумали в базу из трёх модулей добавлять четвёртый, если он достаточно мал, чтобы уместиться между тремя другими куполами. И естественно им необходимо построить новые переходы, для этого новый модуль должен стоять вплотную к трём другим. Но нужно знать радиус этого четвертого купола, чтобы потом построить его на специальной М-фабрике.\n\n\n\nНа рисунке окружностями схематично показаны модули, серым обозначена площадь базы, синими черточками — переходы между модулями, красным — искомый новый модуль для достройки.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30833","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tВера очень много работала в этом году, подавая своим коллегам пример настоящего труженика. На восьмое марта за прекрасное исполнение служебных обязанностей Вера получила подарок — долгожданный отпуск в Теплой Стране! Тяжелые трудовые будни закончились, и Вера уже нежится на пляже на берегу Теплого Моря.\n\nЛюбимое хобби Веры — пляжный волейбол, и как же Вера ждала момента, когда она сможет испытать невероятный азарт этой игры! Вера уже познакомилась с несколькими симпатичными волейболистами, но она пока не решила, какая же команда достойна иметь в своем составе такого замечательного игрока.\n\nКаждый из N капитанов команд мечтает заполучить Веру в состав своей команды, поэтому они хотят максимально проявить себя. Так как поиграть хотят все, они решили действовать следующим образом: все N команд выстроились в очередь. Первый матч играется между двумя командами, которые стоят в очереди раньше остальных. Победитель игры остается на площадке, а проигравший отправляется в конец очереди. В каждом из следующих матчей победитель предыдущего играет с первой командой из очереди, а проигравший в очередной встрече опять становится в конец очереди. Каждая команда имеет некоторую силу, причем для простоты будем предполагать, что силы всех команд различны, а победителем в матче является команда, сила которой больше. Матчей может быть как угодно много.\n\nВера решила для себя, что она будет действовать по самому справедливому принципу «считалочки»: она будет играть с одной из двух команд, играющих матч с соответствующем считалке номером K. Но затем Вера поняла, что уже выбрала себе команду, в которой хотела бы играть, причем ориентируясь не только на ее силу. Ей известны Q считалок, соответствующих различным значениям K. Для каждого из этих чисел Ki необходимо узнать, а кто же именно будет сражаться за столь ценный приз, то есть какие две команды будут играть в матче с номером Ki.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30793","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tGahui is watching the annual character election. After the election, The top 16 characters receive enormous benefits for one year. For that reason, fans vote passionately to get their favorite characters into the top 16. Remarkably, at least one Cinderella appears in every election, achieving an outstanding outcome.\n\nElection results are announced twice: preliminary and final results. The vote count information for character x is as follows:\n\n\n\tCharacter x obtained px$p_x$ votes when announcing the preliminary result.\n\tCharacter x obtained rx$r_x$ votes when announcing the final result.\n\n\n vx$v_x$ is defined as px$p_x$ divided by rx$r_x$. The type of character x is determined by the value vx$v_x$.\n\n\n\tIf vx<0.2$v_x \\lt 0.2$, the type of character x is weak.\n\tIf 0.2≤vx<0.4$0.2 \\le v_x \\lt 0.4$, the type of character x is normal.\n\tIf 0.4≤vx<0.6$0.4 \\le v_x \\lt 0.6$, the type of character x is strong.\n\tIf 0.6≤vx$0.6 \\le v_x$, the type of character x is very strong.\n\n\nPreliminary and final results of character x are given. Print the type of character x.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30834","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tНа отдыхе в Теплой Стране Вера познакомилась с симпатичным волейболистомтрактористом Петром. Турист Петр, кстати, собирается после отличного отдыха в Теплой Стране отправиться в путешествие по городам Европы. Как известно, Европа обладает развитой транспортной системой: в Европе есть V интересующих Петра городов и E маршрутов ночных поездов. Каждый маршрут соединяет два различных города, время в пути составляет одну ночь. Поезда по маршруту ходят в обоих направлениях.\n\nОсновной целью поездки Петра является осмотр местных достопримечательностей. Поскольку Петр — невероятно занятой человек, то он решил, что все путешествие должно занимать не более четырех дней. Петр уже многое повидал, поэтому на осмотр достопримечательностей в каждом городе Петр тратит ровно один день. Он хочет составить наиболее практичный тур: каждый день он будет тратить на осмотр города, а каждую ночь — на переезд ночным поездом между городами. Разумеется, Петр не имеет ни малейшего желания посещать один город несколько раз.\n\nНо на этом прагматичность Петра не заканчивается: Петр, как настоящий турист, хочет посмотреть на самые красивые европейские достопримечательности. Он долго изучал справочники и для каждого города оценил свою ожидаемую радость от его посещения pi. Теперь он хочет найти маршрут, при котором его радость будет наибольшей. Помогите Петру найти такой маршрут.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30849","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tКаждый день летних каникул Миша рисовал в блокнотике аккуратное прямоугольное поле размером N × M клеточек и закрашивал на нём некоторые клеточки. Отметим, что каждый день у Миши получалась новая картинка, непохожая на другие, таким образом, всего у Миши получилось 2NM картинок (на рисунке ниже закрашенные клетки обозначены серым).\n\n\n\nКаждый день его друг Володя помогал Мише скрасить тяжелые будни: он брал очередной Мишин рисунок и пытался покрыть незакрашенные клетки этого рисунка прямоугольниками размера 1 × 2 (при этом каждая незакрашенная клеточка рисунка должна быть покрыта, прямоугольник не может накрывать закрашенную клеточку, прямоугольники не могут вылезать за пределы поля или перекрываться).\n\n\n\nКонечно, Володе не всегда удавалось это сделать (те случаи, в которых ему удалось это сделать при N = 2 и M = 2 изображены на рисунке выше). Но в те немногие дни, когда это происходило, мама Миши очень радовалась за ребят и пекла им тортик. Сколько же тортиков пришлось ей испечь?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30835","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tПафнутий и его друзья — большие любители разнообразных настольных игр. Особенно им нравятся игры, требующие как можно быстрее производить в уме непростые вычисления, поэтому абсолютным хитом их вечерних посиделок в аудиториях НУОП (Неизвестного университета олимпиадного программирования) стала игра «Шустрая черепашка». В комплект игры входят:\n\n\n\tКлетчатое поле из N рядов по M клеток. Каждая клетка поля либо свободна, либо блокирована для перемещения.\n\tQ игровых карточек. Каждая карточка содержит описание множества стартовых клеток A, множества дополнительно блокируемых клеток B и множества конечных клеток C. Множества A, B и C непусты, попарно не пересекаются и состоят из свободных клеток.\n\tМаленькая фишка в форме черепашки.\n\n\nПравила игры очень просты. Игроки последовательно разыгрывают игровые карточки. Как только открывается очередная карточка, игрокам необходимо вычислить, сколько существует хороших троек клеток (ai, bj, ck), где ai ∈ A, bj ∈ B, ck ∈ C. Тройка клеток называется хорошей, если можно провести черепашку из стартовой клетки ai в конечную клетку ck, не посещая при этом клетку bj. На перемещение черепашки наложено три условия:\n\n\n\tЧерепашка имеет право перемещаться только вниз и вправо в пределах поля.\n\tНаходиться на блокированных клетках запрещено.\n\tКлетка bj также блокируется для перемещения.\n\n\nТак как таблицу с правильными ответами создатели не включили в комплект, в пылу игры постоянно возникают споры о правильности того или иного значения. Для установления истины ребята попросили вас посчитать ответы для данного комплекта.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30794","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t게임 클럽 오디션의 scoring system과 문제에서의 scoring system이 다름에 주의하세요.\n\n가희는 클럽 오디션을 하고 있습니다. 이 게임에는 여러 모드가 있는데 가희는 8키 모드를 하고 있습니다. 8키 모드에서는 레벨이 6 이상인 키 노트가 등장합니다. 레벨이 lv$lv$인 키 노트 안에는 lv$lv$개의 키가 있습니다.  키의 방향은 8 방향 중 (상, 하, 좌, 우, 좌상, 좌하, 우상, 우하) 하나입니다.\n\n\n\n[그림 1] 레벨 6의 키 노트\n\n[그림 1]은 4개의 그림으로 구성되어 있습니다. 노란색으로 칠해져 있는 것은 이미 친 키를, 파란색으로 칠해진 것은 쳐야 하는 키를 의미합니다. 예를 들어, 그림 1의 오른쪽 위의 경우 좌하, 우, 우상, 하 순서대로 쳐야 함을 의미합니다.\n\n1번째 줄의 왼쪽 위는 레벨 6의 키 노트가 나타난 직후입니다. 오른쪽 위 그림은 키 노트가 나오고 나서 1/4 타이밍만큼 지났을 때를 나타냅니다. 왼쪽 아래 그림은 레벨 6의 키 노트가 나오고 1/2 타이밍만큼 지났을 때를 나타냅니다. 이 때 6개의 키를 모두 친 상태입니다. 오른쪽 아래 그림은 타이밍에 맞게 Space키를 눌러서 perfect 판정을 획득한 것을 나타냅니다.\n\n각 키 노트는 판정이 있습니다. 이 때 아래 2가지 경우는 miss 판정이 발생합니다.\n\n\n\tlv개의 방향을 올바르게 입력하지 않은 경우\n\tSpace를 누르지 않았거나 Space를 눌렀을 때 타이밍을 맞추지 못한 경우\n\n\n그렇지 않으면 bad, cool, great, perfect 판정 중 하나가 발생합니다. 또한 perfect는 한 가지 상태가 더 있습니다. 바로 n$n$연팩. n$n$번 연속 perfect 판정이 난 상태를 n$n$연팩이라 합니다. 발생한 키 노트의 판정이 perfect일 때\n\n\n\t이전 판정이 perfect가 아닌 경우 1$1$연팩입니다.\n\t이전 판정이 perfect이고 k$k$연팩 상태였다면 k+1$k+1$연팩이 됩니다.\n\n\n레벨이 lv$lv$인 키 노트의 판정에 따른 점수 획득은 아래와 같습니다.\n\n\n\tmiss일 때 0$0$점을 받습니다.\n\tbad일 때 200$200$에 lv$lv$을 곱한 점수를 받습니다.\n\tcool일 때 400$400$에 lv$lv$을 곱한 점수를 받습니다.\n\tgreat일 때 600$600$에 lv$lv$을 곱한 점수를 받습니다.\n\tperfect\n\t\n\t\t n$n$연팩일 때 n⋅lv$n \\cdot lv$에 1000$1\\,000$을 곱한 점수를 받습니다.\n\t\n\t\n\n\n가희가 친 키 노트의 레벨 lv$lv$과 판정이 주어집니다. 가희가 이전에 받은 판정과 다른 판정을 받았을 때 획득한 점수를 구해주세요.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30836","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tВова и Марина любят играть в игры, а особенно — придумывать к ним свои правила. Недавно они открыли для себя веселую игру «Чапаев», в которой игроки должны сбивать щелчками шашки вражеского цвета с шахматной доски (также эта игра известна под названием «Щелкунчики»). Вдоволь наигравшись, они решили модифицировать правила, добавив игре математическую сложность.\n\nТеперь они играют в «Чапаева» не на шахматной доске, а на доске в форме дерева! Их дерево состоит из N вершин. Вершина 1 является корнем дерева, а из каждой из оставшихся вершин проведено ребро в некоторую вершину с меньшим номером — ее непосредственного предка.\n\nВ игре участвуют шашки одного цвета, изначально расположенные в некоторых вершинах дерева. За один ход игрок выбирает некоторую шашку и щелчком отправляет ее к корню по ребрам дерева, сбивая при этом с доски все встреченные на пути шашки. Сама шашка, по которой производился удар, после попадания в корень дерева также слетает с доски.\n\nИгроки делают ходы по очереди. Проигрывает тот игрок, к ходу которого на доске не остается шашек.\n\nПридуманная ими игра замечательна также тем, что на одной и той же доске можно играть, начиная с разных начальных позиций шашек. Практика показала, что самые интересные партии получаются, если исходно расставить фишки во все вершины, являющиеся потомками (непосредственными или косвенными) некоторой вершины Root, при этом в саму вершину Root фишка не ставится.\n\nДети решили сыграть N партий, перебрав в качестве вершины Root каждую вершину дерева по одному разу. Если у очередной вершины Root нет потомков, и на доске исходно не оказывается ни одной фишки, то игры не происходит, и дети переходят к следующей расстановке. В каждой партии Марина ходит первой.\n\nВова интересуется у вас, в скольких партиях Марина сможет одержать победу, если игроки будут действовать оптимально.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30837","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tВера очень любит сочинять сказки. С детства она обладала очень богатой фантазией, ее работы были высоко оценены на многочисленных творческих конкурсах, а ее выразительная речь способна невероятно точно передавать эмоции и чувства. Однако, Вера не смогла придумать красивую историю для следующей задачи по программированию:\n\n\nДан массив из целых чисел a1, a2, . . . , aN , каждый элемент которого по абсолютной величине не превосходит 2. Найдите такой непустой подотрезок al, al+1, . . . , ar этого массива (1 ≤ l ≤ r ≤ N), что произведение чисел al · al+1 · . . . · ar является максимально возможным.\n\n\nВы, разумеется, можете посостязаться с Верой в креативности, однако мы рекомендуем вам заняться решением задачи.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30850","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tВ одном очень известном университете часто важные люди приходят читать интересные лекции. Лекция обычно состоит из последовательности дедуктивных следствий «из A следует Б». При этом почти все люди обладают способностью к логическому мышлению: если они знают, что из A следует Б, и из Б следует В, то они вполне вправе считать, что из А следует В. Поскольку лектор не любит совсем бессмысленные следствия, то он никогда не выводит одно и то же утверждение дважды (т.е. не существует двух следствий вида «из А следует Б» и «из В следует Б»).\n\nНа очередную лекцию пришло несколько студентов. Каждый из них уже обладает некоторыми знаниями о мире (а именно, он знает, что некоторые утверждения — ложны, а некоторые — истинны). В ходе лекции лектор сообщает им некоторые дедуктивные следствия, которые, однако, в какой-то момент могут прийти в противоречие со знаниями студента (к примеру, если студент знал, что A ложно, а Б — истинно, а лектор сообщает, что «из Б следует А»). Вам необходимо для каждого студента узнать первый момент, когда рассуждения лектора приводят к противоречию с его знаниями. Противоречием называется момент, когда из набора истинных для студента утверждений с помощью дедутивных следствий лектора студент может логически вывести утверждение, которое он считает ложным.\n\nРазберем пример типичной лекции. Предположим, что на лекции лектор сообщает следствия «из А следует Б», «из В следует Г», «из Б следует В», а студент считает, что А — истинно, а Г — ложно. Студент слушает следствия по одному, после добавления первого следствия «из А следует Б» студент думает, что Б — истинно. После добавления второго следствия противоречия также не происходит. После добавления третьего следствия «из Б следует В» студент думает, что В — истинно, и он (используя второе следствие лектора) может вывести, что Г — истинно, что противоречит его знаниям (ведь изначально он считал, что Г — ложно).\n\nЕсли же в разобранном примере другой студент считал, что А — ложно, а Г — истинно, то для него противоречия не происходит ни в какой момент (даже зная все следствия лектора, он не может вывести из истинного утверждения вывести ложное).\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30795","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t선거할 때마다 반드시 나타나는 신데렐라를 아시나요? 신데렐라는 예상과 다르게 경악할 정도로 뛰어난 결과를 보여준 캐릭터를 의미합니다. 신데렐라 수치는 티어와 예상 결과, 최종 결과와 같은 요소로 계산됩니다. 해당 수치에 따라 신데렐라가 결정됩니다.\n\n선거가 시작되기 3주 전에 한 언론이 캐릭터 예상 순위를 발표합니다. 개표가 끝난 후 나오는 순위가 최종 결과가 됩니다. 예상 결과와 최종 결과 모두 티어가 있으며, 결과에 따른 티어는 아래 [표 1]과 같습니다.\n\n\n\t\n\t\t\n\t\t\t티어\n\t\t\t순위 범위\n\t\t\n\t\t\n\t\t\t1\n\t\t\t1 ~ 16\n\t\t\n\t\t\n\t\t\t2\n\t\t\t17 ~ 32\n\t\t\n\t\t\n\t\t\t3\n\t\t\t33 ~ 48\n\t\t\n\t\t\n\t\t\t4\n\t\t\t49 ~ 64\n\t\t\n\t\t\n\t\t\t5\n\t\t\t65 ~ 80\n\t\t\n\t\t\n\t\t\t6\n\t\t\t그 외\n\t\t\n\t\n\n\n[표 1] 티어와 순위\n\n결과에 나타나지 않은 캐릭터들은 순위 범위가 그 외에 속합니다. 티어 6을 제외하고 각 티어에서 순위가 가장 높으면 해당 티어에서 센터가 됩니다. 예를 들어, 17위를 획득한 캐릭터는 티어 2에서 순위가 가장 높습니다. 따라서 이 캐릭터는 티어 2에서의 센터가 됩니다.\n\n캐릭터 c의 신데렐라 수치는 최종 티어가 6인 경우 0이고, 그렇지 않으면 아래와 같이 계산됩니다. 캐릭터 c의 예상 결과가 티어 x에 속하고, 최종 결과가 티어 y에 속할 때\n\n\n\t x>y$x > y$ 경우\n\t\n\t\t 10000⋅(x−y)$10\\,000 \\cdot (x-y)$입니다.\n\t\n\t\n\t최종 결과가 각 티어에서의 센터인 경우\n\t\n\t\t조건 1을 만족하는 경우 20000$20\\,000$입니다.\n\t\t그렇지 않은 경우 10000$10\\,000$입니다.\n\t\n\t\n\tx가 1이 아니지만, y가 1인 경우\n\t\n\t\t아래 조건을 모두 만족하는 캐릭터의 수를 p$p$라고 할 때 30000⋅p$30\\,000 \\cdot p$입니다.\n\t\t\n\t\t\t예상 결과가 캐릭터 c보다 좋았지만 최종 결과가 c보다 좋지 않습니다.\n\t\t\t예상 결과가 티어 1에 속했지만 최종 결과가 티어 1에 속하지 않습니다.\n\t\t\n\t\t\n\t\n\t\n\n\n조건 1, 2, 3 중 만족하는 조건만 합산하여 계산됩니다. 예를 들어, 캐릭터 c의 예상 결과가 63위였지만 최종 결과가 20위였다면, 캐릭터 c의 신데렐라 수치는 아래와 같이 계산할 수 있습니다.\n\n\n\t예상 결과가 티어 4에 속하지만 최종 결과는 티어 2에 속합니다.\n\t최종 결과가 센터가 아닙니다.\n\t최종 결과가 티어 1에 속하지 않습니다.\n\n\n따라서, 캐릭터 c의 신데렐라 수치는 조건 1만 합산되어 20000$20\\,000$이 됩니다. 최종 결과가 80위 이내에 든 캐릭터 중 신데렐라 수치가 가장 높은 캐릭터들을 '신데렐라 후보'라고 하겠습니다. 이 후보들 중 순위가 가장 높은 캐릭터가 신데렐라가 됩니다. 신데렐라를 구해주세요.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30838","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t08.03.2014, Париж, Франция. Дерзкое ограбление совершено в Парижском музее современного искусства. Похищено множество экспонатов, наиболее известный из которых — картина «Пиксели торжествуют» киберкубиста Этьена Бурсье-Мужено.\n\n«Это большая потеря для нас, — заявил директор музея Фабрис Эрготт. — Полиция уже разыскивает преступников, но мы вынуждены признать, что, судя по тому, как легко злоумышленники справились с охранной системой, мы имеем дело с профессионалами экстра-класса и не питаем надежд на возвращение шедевра в нашу коллекцию. Кроме того, уничтожена вся база данных музея, поэтому реставраторы не обладают достаточным количеством информации для восстановления картины. Безусловно, каждый образованный француз знает, что она представляет собой прямоугольник из H ×W черных и белых квадратных пикселей (H — высота, а W — ширина картины в пикселях). Но информацию о цвете самих пикселей придется добывать по крупицам».\n\nВ свою очередь, представитель Национального архива Франции Армель Ле Гофф поспешила успокоить культурную общественность: «К счастью, архив располагает снимками отдельных фрагментов картины. А именно, в нашем распоряжении имеется информация о N прямоугольных фрагментах (со сторонами, параллельными соответствующим сторонам картины), для каждого из которых известны его координаты r1, c1, r2, c2, а также цвета входящих в него пикселей. Строки картины пронумерованы от 1 до H сверху вниз, столбцы — от 1 до W слева направо, (r1, c1) — номера строки и столбца левого верхнего пикселя фрагмента, (r2, c2) — номера строки и столбца правого нижнего пикселя фрагмента, r1 ≤ r2, c1 ≤ c2. Однако, в силу ряда причин некоторые фрагменты могут храниться в инвертированном виде, то есть все белые пиксели в них заменены на черные, а все черные — на белые, при этом достоверно не известно, какие фрагменты инвертированы. Это серьезно усложняет задачу по восстановлению утерянного шедевра величайшего киберкубиста, поэтому мы обращаемся за помощью ко всему программистскому сообществу. Национальный архив, со своей стороны, готов предоставить все имеющиеся данные о фрагментах картины. Мы отдаем себе отчет в том, что, возможно, картину не удастся восстановить однозначно, поэтому просим найти максимально светлую из всех возможных подходящих картин, то есть содержащую как можно больше белых пикселей: широко известно, что „Пиксели“ являются одним из самых оптимистичных творений Этьена Бурсье-Мужено».\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30839","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tНа улице уже неделю лил беспросветный дождь, а Игорь все сидел дома и играл в свои любимые игрушки. Но играть так долго в одно и то же ему быстро надоело, и он пошел к родителям выпрашивать новые. Родители быстро сдались, поэтому на следующий день вся семья собралась, и они поехали в магазин игрушек.\n\nПри входе в магазин у Игоря сразу разбежались глаза. Ему хотелось и гоночную машинку, и кораблик с белыми парусами, и саблю, которая так и манила его своим блестящим лезвием. Всего в магазине продается N новых игрушек, причем так получилось, что все они плоские и имеют форму выпуклых многоугольников (действительно, на что еще можно было надеяться в магазине «Сто тысяч и один выпуклый многоугольник для детей младшего школьного возраста»?). Но строгий отец сказал, что купит Игорю только две игрушки. Игорь сразу же начал перебирать в голове варианты, но их оказалось слишком много, а если быть более конкретным, то его интересовало ровно Q вариантов выбора пары игрушек.\n\nЛюбознательный Игорь сразу же задумался о тонкостях упаковки игрушек. А именно, для каждой интересующей его пары игрушек i, j он хочет проделать следующие операции.\n\nИзначально каждая игрушка лежит в своей плоской прямоугольной коробке, которая плотно прилегает к игрушке. Далее Игорь ставит эти две коробки на стол рядом друг с другом (i-ю игрушку можно поставить как левее j-й, так и правее), убирает коробки, потом придвигает игрушки друг к другу, насколько это возможно, и кладет то, что получилось, обратно в коробку (обратите внимание на рисунок). Так как Игорь очень экономный, ему нужно знать размеры получившейся коробки. Повлиять на высоту итоговой коробки, двигая игрушки параллельно плоскости стола, нельзя, так что вам нужно помочь Игорю лишь с определением минимально возможной ширины получившейся коробки.\n\nОбратите внимание, что игрушки можно лишь двигать параллельно плоскости стола, поворачивать их каким-либо образом запрещено. Таким образом, задачу можно считать двумерной: ось Ox совпадает с плоскостью стола, а ось Oy, по которой измеряется высота игрушек и коробок, перпендикулярна плоскости стола. Стороны коробок параллельны соответствующим осям координат. Диковинных игрушек в магазине предостаточно, так что они могут «стоять» на столе, в том числе и балансируя на одной вершине самым непостижимым образом.\n\nДля лучшего понимания условия ознакомьтесь с примером и иллюстрациями к нему.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30796","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tGahui is watching the annual character election. After the election, The top 16 characters receive enormous benefits for one year. For that reason, fans vote passionately to get their favorite characters into the top 16. Remarkably, at least one Cinderella appears in every election, achieving an outstanding outcome.\n\nWhile watching the character's election, Gahui suddenly think about the following problem. There are the following four facts in the election:\n\n\n\tThere are no two characters with a difference in k$k$ votes count.\n\tEvery character has a different number of votes.\n\tAll character have at least one vote count.\n\tThe character that ranked 1st has v$v$ votes count.\n\n\nShe wants to know the maximum number of characters participating in the election. Help Gahui. \n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30851","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tОднажды группа спелеологов отправилась покорять африканские пещеры. Углубившись достаточно далеко, они обнаружили что-то странное — пахло дымом. «Неужели мы подобрались к вулкану?» — удивленно спросил новичок. «Нет. Около вулкана пахнет серой», — ответил капитан. «Кто у нас занимался тушением костров?». Все неуверенно пожали плечами. «Итак, друзья, мы в ловушке».\n\nПеред капитаном команды спелеологов возникла непосильная задача: как же вывести свою группу из пещеры, не сгорев? Пещера в терминах спелеологов состоит из множества «тоннелей» и «станций». Каждый тоннель соединяет какую-нибудь пару различных станций и имеет свою длину. У капитана имеется карта пещеры, и он знает, где они разводили костры, и где находится выход из пещеры.\n\nКаждую секунду дым распространяется на 1 метр. Таким образом, тоннель длины k, смежный с уже задымленной станцией, заполнится дымом за k секунд, а также заполнится дымом и соответствующая станция. Если спелеологи находятся на станции, где есть дым, они задыхаются. Спелеологи бегут со скоростью 1 метр в секунду. Изначально дым есть только в тех станциях, где спелеологи разводили костры.\n\nПеремещаться по тоннелям можно в обе стороны. Если спелеологи прибывают на станцию одновременно с дымом, то они задыхаются (это верно и для той станции, где расположен выход). Гарантируется, что сейчас спелеологи находятся на станции, где нет дыма.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30860","content":"문제\n\nThere is only one railway line connecting \n(n+1)\n$(n + 1)$ cities developed along the coastline. When cities along the coast are sequentially identified by numbers between \n0\n$0$ and \nn\n$n$, city \n(i−1)\n$(i - 1)$ and city \ni\n$i$ (\n1≤i≤n\n$1 ≤ i ≤ n$) are connected by rail, but other cities are not connected by rail.\n\nSince every city except city \n0\n$0$ is famous as a tourist destination, every city \ni\n$i$ (\n1≤i≤n\n$1 ≤ i ≤ n$) excluding city \n0\n$0$ is preparing a variety of goods to welcome travelers ahead of the tourist season. Worldwide famous goods BFB is the most popular item in every city. However, the supplier of this product is located in city \n0\n$0$.\n\nThere is only one store that sells BFB in each city \ni\n$i$ (\n1≤i≤n\n$1 ≤ i ≤ n$). Let \nSi\n$S_i$ be the BFB specialty store in city \ni\n$i$. In each \nSi\n$S_i$, the number of BFBs expected to be sold in the tourist season is analyzed and reported to the supplier in the form of \n[li,mi]\n$[l_i, m_i]$. Here, \nli\n$l_i$ and \nmi\n$m_i$ represent the minimum and the maximum number of expected required products, respectively.\n\nThe BFB supply company in city \n0\n$0$ collects request information from stores in every city and supplies products according to the rules described below.\n\nSelect a city, say city \nk\n$k$ (\n1≤k≤n\n$1 ≤ k ≤ n$). Then, take a train departing from city \n0\n$0$, travel to city \nk\n$k$, and supply BFBs only to the stores along the route. In other words, the BFB supplier supplies products to \nS1,S2,…,Sk\n$S_1, S_2, \\dots , S_k$.\nLet \nci\n$c_i$ be the number of BFBs supplied to \nSi\n$S_i$ (\n1≤i≤k\n$1 ≤ i ≤ k$) while moving along the route, the condition \nci≤ci+1\n$c_i ≤ c_{i+1}$ (\n1≤i≤k−1\n$1 ≤ i ≤ k - 1$) must be satisfied.\n\nIf the supplier supplies products according to the supply rules described above, it may be impossible for every store to supply the desired number of items with a single supply procedure. Therefore, the supplier must go through several supply procedures to deliver the products but must comply with the supply rules described above each time. After completing all supply procedures, each \nSi\n$S_i$ will have at least \nli\n$l_i$ and at most \nmi\n$m_i$ items.\n\nFor example, suppose \nn=4\n$n = 4$ and the number of items required by each store \nSi\n$S_i$ (\n1≤i≤4\n$1 ≤ i ≤ 4$) are \n[13,15]\n$[13,15]$, \n[5,8]\n$[5,8]$, \n[6,14]\n$[6,14]$, and \n[3,7]\n$[3,7]$, respectively. In order for each store to supply the desired quantity of goods, there must be at least two delivery procedures. In the first delivery procedure, \n6\n$6$ items can be supplied to each of the \n4\n$4$ stores. Once delivery is completed in this first procedure, all stores' requests except \nS1\n$S_1$ are satisfied. Since \n6\n$6$ items have already been delivered to \nS1\n$S_1$, \nr\n$r$ (\n7≤r≤9\n$7 ≤ r ≤ 9$) additional products will be delivered to \nS1\n$S_1$ in the second delivery procedure. Of course, there may be other delivery methods. However, at least two delivery procedures are required.\n\nWrite a program to calculate the minimum number of supply procedures in order to supply the number of BFBs required by each store according to the above rules."},{"problemId":"30797","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t가희는 도시 시뮬레이션 게임을 하고 있습니다. 이 게임은 나의 도시와 다른 도시들을 연합하여, 나의 도시를 키우는 게임입니다. 가희의 도시에 사는 사람들은 철도만 이용하여 이동합니다. 건설된 철도 노선들을 적절히 이용하여 가희의 도시에서 도시 a$a$로 이동하지 못하면, 사람들은 도시 a$a$와 교류를 하지 못하게 되고, 가희의 도시는 도시 a$a$와 연합할 수 없습니다.\n\n가희는 월드에 있는 도시 n−1$n-1$개와 가희의 도시를 연합하여 세력을 확장하려고 합니다. 이 게임은 철도 노선 Q$Q$개를 구매할 수 있습니다. 가희는 이 철도 노선들을 적절하게 구매하여 총 건설 비용을 최소로 하려고 합니다. 그러면서 가희의 도시와 n−1$n-1$개의 도시들을 빠르게 연합하려고 합니다. 가희가 건설할 수 있는 철도 노선들에 대한 정보가 주어졌을 때, 총 건설 비용과 언제 n−1$n-1$개의 도시들과 가희의 도시가 연합하는지 구해주세요. 목표를 달성하는 것이 불가능하다면 첫 줄에 -1을 출력해 주세요.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30852","content":"문제\n\nSam has some apricot seeds, and he wants to sort them in non-decreasing order based on size. He uses a unique method to sort the apricot seeds, described as follows:\n\nGiven \nn\n$n$ apricot seeds, Sam performs a total of \nn−1\n$n - 1$ steps to sort them. For each step \nk\n$k$ from \n1\n$1$ to \nn−1\n$n - 1$:\n\nHe compares the first seed with the second seed. If the second seed is smaller, he swaps their positions.\nHe then compares the second seed with the third seed. If the third seed is smaller, he swaps their positions.\nHe continues this process until he compares the \n(n−k)\n$(n - k)$-th seed with the \n(n−k+1)\n$(n - k + 1)$-th seed and swaps their positions if the \n(n−k+1)\n$(n - k + 1)$-th seed is smaller.\n\nSam's friend Tom quickly realizes that this is the famous bubble sorting algorithm. To illustrate the inefficiency of this algorithm to Sam, Tom decides to ask Sam \nq\n$q$ questions. A question is represented as a tuple \n[s,e,m,l,r]\n$[s, e, m, l, r]$. For given a sequence of \nn\n$n$ seeds, each question \n[s,e,m,l,r]\n$[s, e, m, l, r]$ asks for the sum of the sizes of seeds from position \nl\n$l$ to \nr\n$r$ of the (partially) sorted subsequence after applying the first \nm\n$m$ steps of Sam's method to the subsequence of seeds from position \ns\n$s$ to \ne\n$e$ of the initial sequence.\n\nFor instance, consider four (\nn=4\n$n = 4$) seeds with sizes of \n(1,3,4,2)\n$(1,3,4,2)$ and two (\nq=2\n$q = 2$) questions \n[2,4,1,2,2]\n$[2,4,1,2,2]$ and \n[1,4,2,3,4]\n$[1,4,2,3,4]$. For the first question, the subsequence of the sizes from the second (\ns=2\n$s = 2$) seed to the fourth (\ne=4\n$e = 4$) seed is \n(3,4,2)\n$(3,4,2)$. After applying one step (\nm=1\n$m = 1$) of Sam’s method, it becomes \n(3,2,4)\n$(3,2,4)$. The sum of the sizes of seeds from the second position (\nl=2\n$l = 2$) to the second position (\nr=2\n$r = 2$) in this (partially) sorted subsequence is \n2\n$2$. For the second question, the subsequence is \n(1,3,4,2)\n$(1,3,4,2)$. After applying two steps, it becomes \n(1,2,3,4)\n$(1,2,3,4)$. The sum of the sizes of seeds from position \n3\n$3$ to \n4\n$4$ in this (partially) sorted sequence is \n3+4=7\n$3 + 4 = 7$.\n\nGiven a sequence of \nn\n$n$ seeds and \nq\n$q$ questions, write a program that computes the answer for each question."},{"problemId":"30861","content":"문제\n\nNumber theorist Dr. J is attracted by the beauty of numbers. When we are given a natural number \na=a1a2⋯an\n$a = a_1a_2 \\cdots a_n$ of \nn\n$n$ digits and a natural number \nk\n$k$, \na\n$a$ is called \nk\n$k$-special if the product of all the digits of \na\n$a$, i.e. \na1⋅a2⋅a3⋯an\n$a_1 \\cdot a_2 \\cdot a_3 \\cdots a_n$ is divisible by \nk\n$k$. Note that the number \n0\n$0$ is always divisible by a natural number.\n\nFor example, if \na=2349\n$a = 2349$ and \nk=12\n$k = 12$, then the product of all the digits of \na\n$a$, \n2⋅3⋅4⋅9=216\n$2 \\cdot 3 \\cdot 4 \\cdot 9 = 216$ is divisible by \nk=12\n$k = 12$, so the number \n2349\n$2349$ is \n12\n$12$-special. If \na=2349\n$a = 2349$ and \nk=16\n$k = 16$, then the product of all the digits of \na\n$a$, \n2⋅3⋅4⋅9=216\n$2 \\cdot 3 \\cdot 4 \\cdot 9 = 216$ is not divisible by \nk=16\n$k = 16$, so the number \n2349\n$2349$ is not \n16\n$16$-special.\n\nGiven three natural numbers \nk\n$k$, \nL\n$L$, and \nR\n$R$, write a program to output \nzmod(109+7)\n$z \\bmod (10^9 + 7)$ where \nz\n$z$ is the number of \nk\n$k$- special numbers among numbers in the range \n[L,R]\n$[L, R]$."},{"problemId":"30798","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tGahui is watching the annual character election. After the election, The top 16 characters receive enormous benefits for one year. For that reason, fans vote passionately to get their favorite characters into the top 16. Remarkably, at least one Cinderella appears in every election, achieving an outstanding outcome.\n\nGahui missed the broadcast of the fascinating character election. On the Internet, there was only the following information:\n\n\n\tThe number of characters participating in the election is n$n$.\n\tNo two characters have the same number of votes, and each character has received at least one vote.\n\tWhen the bitwise-xor operation is applied to the votes of all characters, the result is x$x$.\n\tThe number of votes for every character is less than 263$2^{63}$.\n\n\nFind character election results.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30799","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t가희의 오빠는 터널 모양의 노즈 워크 장난감을 사 왔습니다. 가희는 이 장난감 안에 들어가 오빠가 숨겨 놓은 고구마 간식을 찾아서 먹으려고 합니다. 이 장난감 안에는 간식을 숨길 수 있는 위치가 s$s$개 있습니다. 각 위치마다 번호가 순서대로 1$1$번부터 s$s$번까지 적혀 있습니다.\n\n이 장난감에는 특별한 규칙이 있습니다.\n\n\n\t 1$1$번 위치부터 방문합니다.\n\t i$i$번 위치를 방문한 후에 i+1$i+1$번 위치를 방문합니다.\n\t\n\t\t즉 간식을 숨길 수 있는 위치가 s$s$개 있을 때 가희는 1$1$번, 2$2$번, 3$3$번, ... , s$s$번 순서대로 방문합니다.\n\t\n\t\n\t간식이 숨겨져 있는 위치에 방문하면 가희는 고구마 간식을 먹거나 그냥 갈 수 있습니다.\n\t같은 위치를 다시 방문할 수 없습니다.\n\t많아야 7$7$개의 간식을 먹을 수 있습니다.\n\n\n고구마 간식은 빨간색, 주황색, 노란색, 초록색, 파란색, 남색, 보라색 이렇게 7$7$가지 종류가 있습니다. 아래 조건을 만족하도록 s$s$개의 위치에 고구마 간식을 넣는 방법은 몇 가지인가요? s$s$개의 위치 중에 어느 하나라도 넣어진 고구마 간식의 종류가 다르면 다른 가짓수로 취급합니다.\n\n\n\t각 위치에는 7$7$가지 종류 중 하나를 선택하여 고구마 간식을 반드시 한 개 넣어야 합니다.\n\t가희가 특별한 규칙을 만족하면서 빨간색, 주황색, 노란색, 초록색, 파란색, 남색, 보라색 종류 순서대로 먹어야 하며, 그 방법은 하나 이상 있습니다.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30853","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe following Python-like pseudo code for function BlackBox() takes a list of positive integers and shuffles the integers in the list in a specific way, and returns the result as a list.\n\nThree list methods are used below; For a list L, len(L) returns the number of items in L. L.append(x) adds the item x to the end of L. L.pop(idx) removes the item at the specified index idx from the list L and returns the removed item.\n\nGiven a list Z of positive integers, write a program to reconstruct a list I such that Z = BlackBox(I).\n\nfunction BlackBox( Banana ):\n    if len( Banana ) ≤ 4 :\n        exit(\"Too small Banana\")\n    Apple = [] # [] is an empty list\n    Mango = 0\n    Papaya = len( Banana )\n\n    while( Papaya >= 2 ) :\n        Kiwi = Banana[ Mango ]\n        Apple.append( Kiwi )\n        Banana.pop( Mango )\n        Papaya = Papaya - 1\n        Mango = ( Kiwi + Mango - 1 ) % Papaya\n    # end of while\n\n    Apple.append( Banana[ 0 ] )\n    Pear = len( Apple ) - 1\n    Orange = Apple[ Pear ]\n    Lime = Apple[ 0 ]\n    Coconut = Orange % Pear\n    Melon = Apple[ Coconut ]\n    Apple[ 0 ] = Melon\n    Apple[ Coconut ] = Lime\n\n    return ( Apple )\n# end of function BlackBox\n\n\n \n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30862","content":"문제\n\nTandem copy is an operation on a DNA where a consecutive sequence of one or more nucleotides is repeated, and the repetitions are directly adjacent to each other; in other words, the tandem copy operation makes a copy of a consecutive sequence of nucleotides and pastes the copy right after the copied sequence. For example, ATCATCG is resulted from the tandem copy of ATC in ATCG. Furthermore, we can continue another tandem copy on the resulted sequence ATCATCG and obtain ATCATTCG. The following example illustrates a series of tandem copies from ATCG, where the underlined sequence is copied at each step.\n\nATCG \n⇒\n$\\Rightarrow$ ATCATCG \n⇒\n$\\Rightarrow$ ATCATTCG \n⇒\n$\\Rightarrow$ ATATCATTCG ⇒ \n⋯\n$\\cdots$ \n\nWe say that ATCG produces all these sequences by tandem copy. It is easy to see that ATCG can produce different sequences by selecting a different portion of the sequence to tandem copy at each step. Furthermore, in principle, ATCG can produce infinitely many sequences by continuing tandem copies as many as it needs.\n\nUsually, it is more expensive to tandem copy a longer portion. For instance,\n\nATCG \n⇒\n$\\Rightarrow$ ATCATCG\n\nis a tandem copy of three nucleotides and thus is more expensive than\n\nATCATCG \n⇒\n$\\Rightarrow$ ATCATTCG,\n\nwhich is a tandem copy of one nucleotide. In other words, the length of a copied portion at each step is crucial to determine the tandem copy cost.\n\nSince it is easy to tandem copy a single nucleotide, it is practical for the ICPC lab to store sequences such that two consecutive nucleotides in a sequence is always different; this helps the lab to reduce the storage space. For instance, since ATTTG can be produced by tandem copying T twice from ATG, it is better for the lab to only store the shorter sequence ATG instead of ATTTG.\n\nBecause of a recent budget cut, the ICPC lab can only perform the tandem copy on at most two nucleotides at one time; namely, the length of a copied portion is at most two at each step. On the other hand, the lab can continue to repeat the tandem copy as many as it desires. For example, given a sequence ABCD, we can apply the tandem copy operation on B and obtain ABBCD, or apply it on the sequence BC and obtain ABCBCD. But we cannot tandem copy the consecutive sequence ABC because its length is longer than two.\n\nGiven a source string \ns\n$s$ and a target string \nt\n$t$, your task is to count the number of all valid substrings \ns′\n$s'$ of \ns\n$s$, where one can obtain a string \nx\n$x$ from \ns′\n$s'$ by applying an appropriate number of the tandem copy operations such that \nx\n$x$ contains \nt\n$t$ as a substring. Please note that no two consecutive nucleotides in the source string are the same, whereas two consecutive nucleotides in the target string can be the same. For example, CCA or ATTGC cannot be source strings, but they can be target strings.\n\nNow, given \ns=\n$s =$ ACATGCAT and \nt=\n$t =$ CCACATTT, we take a substring \ns′=\n$s' =$ CATGC of \ns\n$s$ and run a series of tandem copies as follows:\n\n \ns′=\n$s' =$ CATGC \n⇒\n$\\Rightarrow$ CCATGC \n⇒\n$\\Rightarrow$ CCACATGC \n⇒\n$\\Rightarrow$ CCACATTGC \n⇒\n$\\Rightarrow$ CCACATTTGC,\n\nwhich contains \nt\n$t$ as its substring.\n\nHere is another substring example. For \ns′=\n$s' =$ CAT,\n\n \ns′=\n$s' =$ CAT \n⇒\n$\\Rightarrow$ CACAT \n⇒\n$\\Rightarrow$ CCACAT \n⇒\n$\\Rightarrow$ CCACATT \n⇒\n$\\Rightarrow$ CCACATTT \n=t\n$= t$,\n\nwhich shows that we can produce the target string from by a series of tandem copies.\n\nIt is easy to verify that the total number of valid substrings of \ns\n$s$ is \n14\n$14$. Note that both the first and the second CAT in \ns\n$s$ are counted as different valid substrings. Thus, you need to consider all substrings of \ns\n$s$ and count all valid substrings individually.\n\nHere is another example. When \ns=\n$s =$ AB and \nt=\n$t =$ BA, you can take the substring AB and tandem copy AB. Then, the resulting string is ABAB, which contains BA as its substring. All other substrings of \ns\n$s$ are unable to produce BA as a substring, and therefore the number of valid substrings is one.\n\nGiven a source string \ns\n$s$ and a target string \nt\n$t$, where no two consecutive characters in \ns\n$s$ are the same character, write a program that outputs the number of valid substrings \ns′\n$s'$ of \ns\n$s$. \ns′\n$s'$ is a valid substring of \ns\n$s$ if a series of tandem copies on \ns′\n$s'$ can produce a string that contains \nt\n$t$ as its substring, where a tandem copy is restricted to at most two consecutive characters at each step"},{"problemId":"30880","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n나락도 락이고, 부모님께 온 연락도 락이고, 오락가락?도 락?이지만?, 아쉽게도 쿼리는 락이 아니다.\n\n\n알파벳 대문자로 이루어진 길이 N$N$의 문자열 S=s1s2…sN$S=s_{1} s_{2} \\ldots s_{N}$가 주어진다. 이때, 다음과 같은 쿼리를 Q$Q$번 처리해야 한다.\n\n\n\t 1$1$ idx$idx$ c$c$: sidx$s_{idx}$를 c$c$로 변경한다. (1≤idx≤N, c$(1 \\leq idx \\leq N,\\ c$는 알파벳 대문자)$)$ \n\t 2$2$ l$l$ r$r$: slsl+1…sr$s_{l} s_{l+1} \\ldots s_{r}$의 부분열 중 ROCK으로 끝나는 문자열의 개수를 출력한다. 단, 수가 매우 클 수 있으니 109+7$10^9+7$로 나눈 나머지를 출력한다. (1≤l≤r≤N)$(1 \\leq l \\leq r \\leq N)$ \n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30854","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThere is a farm that borders a straight road. Suppose the road is on the x$x$-axis. Each boundary edge of the farm field is either horizontal or vertical. The leftmost and the rightmost edges are vertical and adjacent to the base edge which lies on the road. The length of the base edge is equal to the sum of the lengths of all other horizontal edges. See Figure C.1 (a).\n\n\n\t\n\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\t\n\t\t\t(a)\n\t\t\t(b)\n\t\t\n\t\n\n\nFigure C.1. A farm field and the pest infestation locations\n\nIn Figure C.1, the dots on the boundary or in the interior of the farm field represent the locations where the pests have infested. To effectively eradicate the infestation, a farmer tries to divide the infested area into several rectangular areas that satisfy the following conditions\n\n\n\tEach rectangular area must be contained within the farm. It is allowed for the edges of a rectangle to overlap the boundary of the farm.\n\tEach edge of a rectangular area is either horizontal or vertical.\n\tRectangular areas are completely separated from each other, including their boundaries.\n\tEach pest infestation location must be contained within one of the rectangular areas. It is allowed for a pest infestation location to lie on an edge of a rectangle.\n\n\nFigure C.1 (b) shows four rectangular areas covering all pest infestation locations. The farmer wants to minimize the number of rectangular areas for efficient pest management.\n\nGiven the boundary of a farm and the pest infestation locations, write a program to compute the minimum number of rectangular areas that satisfy the above conditions.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30863","content":"문제\n\nA cycle \nC\n$C$ with \nn\n$n$ vertices is a graph such that the vertices \ni\n$i$ and \ni+1\n$i + 1$, for \ni=1,…,n−1\n$i = 1, \\dots , n - 1$, are connected by an edge and also the vertices \nn\n$n$ and \n1\n$1$ are connected by an edge, where the vertices of \nC\n$C$ are numbered \n1\n$1$ to \nn\n$n$.\n\nThere are \nn\n$n$ coins each of which is numbered as one of \n{1,2,…,n}\n$\\{1, 2, \\dots , n\\}$ and the numbers of two coins can be same. Initially, each vertex of \nC\n$C$ has a coin among those coins. Then two vertices can swap their coins with each other. For a walk \nw=(v1,v2,…,vk)\n$w = (v_1, v_2, \\dots , v_k)$ in \nC\n$C$, a walk swapping is to swap two coins on \nvi\n$v_i$ and \nvi+1\n$v_{i+1}$ in the order of \ni=1,2,…,k−1\n$i = 1, 2, \\dots , k - 1$. Here, a walk \nw\n$w$ is a sequence of \nk\n$k$ (\n≥1\n$≥ 1$) vertices whose consecutive two vertices are different and adjacent in \nC\n$C$, and it can be considered as the vertices visited when you traverse \nC\n$C$. Also, \nk\n$k$ is called the length of \nw\n$w$. For a walk of length \nk≥2\n$k ≥ 2$, \nk−1\n$k - 1$ swaps in its walk swapping occur, and for a walk of length one, there is no swap. The figure below shows the progress of the walk swapping for the walk \n(2,1,4,1)\n$(2, 1, 4, 1)$ in the cycle with \n4\n$4$ vertices.\n\nThere are given the initial configuration of coins that the vertices of \nC\n$C$ have in the first time and the final configuration of coins that the vertices should have in the end. You have to find a walk swapping that results in the final configuration of coins from the initial one, minimizing the total number of swaps of coins in the walk swapping.\n\nFor example, in the above figure, the number of swaps of coins in the walk swapping of the walk \n(2,1,4,1)\n$(2, 1, 4, 1)$ is \n3\n$3$, however, the final configuration of coins is also achieved by the walk swapping of the walk \n(1,2)\n$(1, 2)$ with only one swap.\n\nGiven the number of vertices of a cycle \nC\n$C$ and the initial and final configurations of coins on the vertices, write a program to output the minimum number of swaps of coins in a walk swapping resulting in the final configuration of coins from the initial one."},{"problemId":"30881","content":"문제\n\n고려 시대의 학자 하의비는 금속 활자를 사용해서 그래프를 찍어 내는 작업을 하고 있었다. 그러던 중, 하의비는 활자로 찍어내던, 일명 활자 그래프에서의 최단 경로가 궁금해졌다.\n\n하의비는 현재 \nT\n$T$개의 활자 그래프를 가지고 있으며, 만든 순서대로 \n1\n$1$번부터 \nT\n$T$번까지의 번호가 매겨져 있다.\n\n \nt\n$t$번 활자 그래프는 \nNt\n$N_t$개의 번호가 붙은 정점으로 이루어져 있으며, 각각의 정점에는 \n1\n$1$ 이상 \nNt\n$N_t$ 이하의 번호가 붙어있다. 이후, 다음과 같이 번호가 붙은 정점들 사이에 간선이나 이전에 만들었던 활자 그래프를 찍어내는 방식으로 \nt\n$t$번 활자 그래프가 완성된다.\n\n간선을 찍는 경우, \nv\n$v$번 정점에서 \nw\n$w$번 정점으로 가는 가중치가 있는 단방향 간선을 추가한다.\n \ni\n$i$번째 활자 그래프를 찍는 경우, \ni\n$i$번째 활자 그래프의 시작점과 끝점이 \nt\n$t$번 활자 그래프의 \nv\n$v$번 정점과 \nw\n$w$번 정점이 되도록 \ni\n$i$번째 활자 그래프의 정점과 간선을 추가한다. 이 과정에서 생기는 \ni\n$i$번째 활자 그래프의 정점들에는 번호가 붙지 않는다. \n(1≤i<t)\n$(1\\le i<t)$ \n\n모든 활자 그래프의 시작점은 \n1\n$1$번 정점이고, 끝점은 \n2\n$2$번 정점이다.\n\n이때, \nT\n$T$번 활자 그래프의 \n1\n$1$번 정점에서 \n2\n$2$번 정점으로 가는 최단 경로를 구해 보자."},{"problemId":"30864","content":"문제\n\n \nN×N\n$N \\times N$ 행렬 \nUN=(uij)\n$U_N = (u_{ij})$을 다음과 같이 정의합니다. \nuij\n$u_{ij}$는 \ni\n$i$행 \nj\n$j$열의 값입니다.\n\n \t\n\t\nuij={1if i≤j0if i>j\n$$ u_{ij} = \\begin{cases} 1 & \\text{if } i \\le j\\\\ 0 & \\text{if } i > j \\end{cases} $$ \n\n즉, \nUN\n$U_N$은 주대각선과 그 위쪽의 값들이 모두 \n1\n$1$이고, 나머지 값들이 모두 \n0\n$0$인 행렬입니다. 예를 들어\n\n \t\n\t\n\t\t\n\t\t\n\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\nU1=(1),U2=(1101),U3=(111011001),U4=(1111011100110001)\n$$ U_1 = \\begin{pmatrix} 1 \\end{pmatrix},\\, U_2 = \\begin{pmatrix} 1 & 1\\\\ 0 & 1 \\end{pmatrix},\\, U_3 = \\begin{pmatrix} 1 & 1 & 1\\\\ 0 & 1 & 1\\\\ 0 & 0 & 1 \\end{pmatrix},\\, U_4 = \\begin{pmatrix} 1 & 1 & 1 & 1\\\\ 0 & 1 & 1 & 1\\\\ 0 & 0 & 1 & 1\\\\ 0 & 0 & 0 & 1 \\end{pmatrix} $$ \n\n입니다.\n\n이 행렬에 다음과 같은 연산을 할 수 있습니다.\n\n \n1\n$1$ \nr\n$r$ \np\n$p$ \nq\n$q$: 정수 \nr\n$r$, \np\n$p$, \nq\n$q$를 정합니다. \nr\n$r$번째 행의 모든 원소에 \npq\n$\\frac{p}{q}$를 더합니다. (\n1≤r≤N\n$1 \\le r \\le N$, \n−1012≤p≤1012\n$-10^{12} \\le p \\le 10^{12}$, \n1≤q≤106\n$1 \\le q \\le 10^6$)\n \n2\n$2$ \nc\n$c$ \np\n$p$ \nq\n$q$: 정수 \nc\n$c$, \np\n$p$, \nq\n$q$를 정합니다. \nc\n$c$번째 열의 모든 원소에 \npq\n$\\frac{p}{q}$를 더합니다. (\n1≤c≤N\n$1 \\le c \\le N$, \n−1012≤p≤1012\n$-10^{12} \\le p \\le 10^{12}$, \n1≤q≤106\n$1 \\le q \\le 10^6$)\n\n또한, 각 행과 각 열의 원소의 절댓값의 합이 모두 \nN4\n$\\frac{N}{4}$ 이하인 행렬을 아름다운 행렬이라고 합니다. 즉, \nN\n$N$행 \nN\n$N$열로 이루어진 \n2\n$2$차원 행렬 \nA=(aij)\n$A = (a_{ij})$가 \n1≤r≤N\n$1 \\le r \\le N$, \n1≤c≤N\n$1 \\le c \\le N$인 모든 \nr\n$r$, \nc\n$c$에 대해\n\n\n\n\n∑j=1N|arj|≤N4,∑i=1N|aic|≤N4\n$$ \\sum_{j=1}^{N} \\left|a_{rj}\\right| \\le \\frac{N}{4},\\quad \\sum_{i=1}^{N} \\left|a_{ic}\\right| \\le \\frac{N}{4} $$\n를 만족하면 행렬 \nA\n$A$를 아름다운 행렬이라고 합니다.\n\n당신은 \nUN\n$U_N$으로 초기화되어 있는 행렬에 연산을 최대 \n2N\n$2N$번 진행하여 아름다운 행렬로 만들려고 합니다. 그 방법을 하나 찾아서 출력하세요."},{"problemId":"30855","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA basic fraction can be represented by three integers (abc)$(a\\, b\\, c)$ which denotes a+bc$a + \\frac{b}{c}$ where 1≤a,b,c≤9$1 ≤ a, b, c ≤ 9$. An extended fraction has the form of (a′b′c′)$(a'\\, b'\\, c')$ where a′$a'$, b′$b'$ and c′$c'$ may be integers between one and nine or other extended fractions. Note that a basic fraction is also an extended fraction, and the length of the fraction is finite.\n\nGiven an extended fraction, we want to express its value as irreducible fraction. For example, the irreducible fraction of ((124)(523)(43(273)))$\\left((1\\, 2\\, 4)(5\\, 2\\, 3)\\left(4\\, 3 (2\\, 7\\, 3) \\right)\\right)$ is as follows.\n\n (1+24)+5+234+32+73=991366$$\\left(1 + \\frac{2}{4}\\right) + \\displaystyle\\frac{5 + \\displaystyle\\frac{2}{3}}{4 + \\displaystyle\\frac{3}{2 + \\displaystyle\\frac{7}{3}}} = \\displaystyle\\frac{991}{366}$$ \n\nGiven a string form of an extended fraction, write a program that converts the extended fraction into the irreducible fraction.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30882","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t하이비는 최근 새로운 게임을 만들었다. 이 게임은 현찰을 사용해야 하는, 일명 Pay2Win 게임이다.\n\n게임 개발의 마무리에 들어가는 하이비는 이제 보스전만을 남겨놓았으며, 보스전의 패턴까지는 미리 계획을 해놓았다. 하이비가 계획한 보스전의 패턴은 다음과 같다.\n\n\n\t보스 스테이지는 N$N$개의 구역으로 나뉘어 있으며, 플레이어는 하이비가 선택한 시작 위치에서 시작한다.\n\t보스는 K$K$개의 패턴을 사용하며, 각 패턴의 번호는 K$K$ 이하의 서로 다른 양의 정수이다.\n\t보스는 모든 패턴을 번호순으로 하나씩 사용한다. 각각의 패턴은 (i,j,x)$(i,j,x)$로 표현할 수 있으며, 이는 i$i$번 위치와 j$j$번 위치를 바꾸는 패턴이다. 즉, 플레이어가 i$i$번 위치에 있었다면 j$j$번 위치로, j$j$번 위치에 있었다면 i$i$번 위치로 이동한다. 플레이어는 이 패턴을 x$x$원을 지불해 건너뛸 수 있다.\n\t보스의 체력은 H$H$로 시작하며, 보스의 체력이 0$0$이 되면 플레이어의 승리로 게임이 끝난다.\n\t K$K$개의 패턴이 모두 지난 뒤, 플레이어가 N$N$번 구역에 있으면 플레이어가 보스의 체력을 1$1$ 깎으며, 그렇지 않은 경우 플레이어의 패배로 게임이 끝난다.\n\t게임이 끝나지 않은 경우, K$K$개의 패턴을 다시 차례로 거친 뒤 플레이어가 N$N$번 구역에 있는지 확인하는 작업을 반복한다. 이때 플레이어가 시작 위치로 돌아가지는 않지만, 이미 건너뛴 패턴을 다시 건너뛰려면 비용을 다시 지불해야 한다.\n\n\n하이비는 최대한 많은 수익을 내고 싶기 때문에, 플레이어가 승리하기 위해 지불해야 하는 최소 비용을 최대화하는 시작 위치를 선정하기로 했다. 단, 공정한 게임을 위해, 시작 위치에서 승리할 수 있는 방법이 있어야 한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30865","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t길이가 N$N$인 정수 수열 a=[a1,a2,…,aN]$a=[a_1,a_2,\\ldots ,a_N]$이 주어질 때, 다음 쿼리를 처리하는 프로그램을 작성하시오.\n\n\n\t 1$1$ i$i$ x$x$: ai$a_i$의 값을 x$x$로 변경한다.\n\t 2$2$ i$i$ x$x$: 수열 [a1⊕x,a2⊕x,…,aN⊕x]$[a_1\\oplus x,a_2\\oplus x,\\ldots ,a_N\\oplus x]$에서 중복을 포함하여 i$i$번째로 큰 값을 출력한다.\n\n\n여기서 a⊕b$a\\oplus b$는 a$a$와 b$b$의 비트간 논리적 배타합(bitwise xor) 연산을 의미한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30856","content":"문제\n\n \nK\n$K$-Lottery awards only one winner in each round. For each round, \nK!\n$K!$ tickets are produced and each ticket contains \nK\n$K$ different numbers from \n1\n$1$ to \nK\n$K$, and no two tickets are identical. Among the tickets produced each round, \nM\n$M$ tickets are sold. The draw is conducted as follows each round. While randomly generating \nN\n$N$ (\nN≥K\n$N ≥ K$) distinct numbers one by one, if the relative order of the last \nK\n$K$ consecutive numbers matches the numbers on any of the sold tickets, the draw ends immediately, and the corresponding ticket wins. Some rounds may not have any winning tickets.\n\nFor instance, let's consider a round where 6 tickets are produced (\nK=3\n$K = 3$). The ticket sequences produced are \n(1,2,3)\n$(1, 2, 3)$, \n(1,3,2)\n$(1, 3, 2)$, \n(2,1,3)\n$(2, 1, 3)$, \n(2,3,1)\n$(2, 3, 1)$, \n(3,1,2)\n$(3, 1, 2)$, and \n(3,2,1)\n$(3, 2, 1)$. Among them, let's say \n(1,2,3)\n$(1, 2, 3)$ and \n(1,3,2)\n$(1, 3, 2)$ are sold (\nM=2\n$M = 2$). Let's assume that the following \n10\n$10$ random numbers \n(20,35,10,7,99,53,72,33,88,16)\n$(20, 35, 10, 7, 99, 53, 72, 33, 88, 16)$ are scheduled to be generated (\nN=10\n$N = 10$). Then the relative order of \n(7,99,53)\n$(7, 99, 53)$, say \n(1,3,2)\n$(1, 3, 2)$ matches the sold ticket \n(1,3,2)\n$(1, 3, 2)$, so that ticket wins.\n\nIn another scenario, let's consider a round where \n24\n$24$ tickets are produced (\nK=4\n$K = 4$). The ticket sequences produced are \n(1,2,3,4)\n$(1, 2, 3, 4)$, \n(1,2,4,3)\n$(1, 2, 4, 3)$, \n(1,3,2,4)\n$(1, 3, 2, 4)$, \n…\n$\\dots$, and \n(4,3,2,1)\n$(4, 3, 2, 1)$. Among them, let's assume \n(1,2,3,4)\n$(1, 2, 3, 4)$, \n(1,2,4,3)\n$(1, 2, 4, 3)$, \n(3,4,1,2)\n$(3, 4, 1, 2)$, \n(4,1,2,3)\n$(4, 1, 2, 3)$, and \n(4,2,3,1)\n$(4, 2, 3, 1)$ are sold (\nM=5\n$M = 5$). Let's assume that the following \n10\n$10$ random numbers \n(19,31,9,1,89,48,63,30,78,12)\n$(19, 31, 9, 1, 89, 48, 63, 30, 78, 12)$ are scheduled to be generated (\nN=10\n$N = 10$). Then the relative order of \n(89,48,63,30)\n$(89, 48, 63, 30)$, say \n(4,2,3,1)\n$(4, 2, 3, 1)$ matches the sold ticket \n(4,2,3,1)\n$(4, 2, 3, 1)$, so that ticket wins.\n\nGiven information about a round of the \nK\n$K$-Lottery, including the number of produced tickets, the number sequences of the sold tickets, and the sequence scheduled to be randomly generated for the winning ticket, write a program to output the number sequence of the winning ticket."},{"problemId":"30866","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tSAT 문제는 아래와 같이 정의된다.\n\n\n\tCNF가 주어졌을 때, 이 CNF가 참이 되도록 논리 변수들에 참과 거짓을 적절히 배정할 수 있는지 판별하는 문제를 SAT 문제라고 한다.\n\n\n이때, CNF는 아래와 같이 정의된다.\n\n\n\t하나 이상의 절이 ∧$\\wedge$ (Logical AND)로 연결된 논리식을 CNF라고 한다.\n\n\n이때, 절은 아래와 같이 정의된다.\n\n\n\t하나 이상의, 논리 변수 또는 논리 변수의 ¬$\\neg$ (Logical NOT)이 ∨$\\vee$ (Logical OR)로 연결된 논리식을 절이라고 한다.\n\n\n예를 들면, (x1∨x2∨¬x3)$(x_1\\vee x_2\\vee\\neg x_3)$와 (x2∨¬x4∨¬x2∨¬x4)$(x_2\\vee\\neg x_4\\vee\\neg x_2\\vee\\neg x_4)$은 절이다.\n\n그리고, 위 두 절을 이은 (x1∨x2∨¬x3)∧(x2∨¬x4∨¬x2∨¬x4)$(x_1\\vee x_2\\vee\\neg x_3)\\wedge(x_2\\vee\\neg x_4\\vee\\neg x_2\\vee\\neg x_4)$는 CNF이다.\n\n마지막으로, 이 CNF에 사용된 논리 변수 x1,x2,x3,x4$x_1,x_2,x_3,x_4$에 참과 거짓을 적절히 배정해서 CNF의 결과를 참으로 만드는 문제는 SAT 문제가 된다.\n\n하지만 이 문제는 SAT 문제가 아니다. 그러니, 이 문제에서는 CNF의 결과를 참으로 만드는 대신, CNF의 결과를 거짓으로 만들어야 한다!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30857","content":"문제\n\nThe ICPC committee is planning a surprise event to cheer on the participating teams. The committee provides each team with a pair of two numbers, \nA\n$A$ and \nB\n$B$ (\nA≤B\n$A ≤ B$), before the competition, which will be used for the lucky draws after the competition. The committee wants to hold \nK\n$K$ draws. In each draw, a single number \nC\n$C$ is chosen by the committee, and all teams with a pair \n(A,B)\n$(A, B)$ such that \nA≤C≤B\n$A ≤ C ≤ B$ win in this draw. To make more teams happy, the committee wants to choose the \nK\n$K$ numbers used in the \nK\n$K$ draws in advance so that the most teams win. A team can win multiple times but is considered to have won once.\n\nFor example, five teams are participating in ICPC and their pairs are \n(1,2)\n$(1, 2)$, \n(1,4)\n$(1, 4)$, \n(3,6)\n$(3, 6)$, \n(4,7)\n$(4, 7)$, \n(5,6)\n$(5, 6)$, and \nK=2\n$K = 2$. When the committee chooses two numbers \n2\n$2$ and \n4\n$4$, four teams with \n(1,2)\n$(1, 2)$, \n(1,4)\n$(1, 4)$, \n(3,6)\n$(3, 6)$ and \n(4,7)\n$(4, 7)$ win. The team with \n(1,4)\n$(1, 4)$ wins twice because the pair contains both chosen numbers. In fact, all five teams can win if \n2\n$2$ and \n5\n$5$ are chosen. The maximum number of winning teams is five.\n\nGiven \nn\n$n$ pairs of two integers for teams and the number of lucky draws \nK\n$K$, write a program to output the maximum number of winning teams."},{"problemId":"30883","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tPS 문제에는 항상 XOR만 사용된다는 점에 분노한 XNOR이 음이 아닌 정수 N$N$개를 모아 반란을 일으키기로 했다!\n\nXNOR은 체계적이기 때문에, 반란을 일으키기 전 반란의 강도를 계산해 보기로 했다. XNOR이 일으키는 반란이기 때문에, 반란의 강도는 주어진 수를 앞에서부터 차례로 XNOR한 결과가 된다. XNOR이 모은 정수들은 모두 부호 없는 B$B$비트 정수로 표현할 수 있기 때문에, B$B$비트 정수 간의 XNOR을 사용한다.\n\n반란의 강도가 높을수록 성공할 확률이 높아지기 때문에, XNOR은 N$N$개의 수 중 하나 이상의 수를 선택해서 반란의 강도를 최대화하기로 했다. 이때 선택된 수의 순서를 바꿀 수는 없다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30884","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t(와 )로만 이루어진 문자열 S$S$가 아래 조건을 충족하면, 이를 균형 잡힌 괄호 문자열이라고 한다.\n\n\n\t S$S$에 1과 +를 원하는 위치에 적절히 추가해서 제대로 된 수식을 만들 수 있다.\n\n\t\n\t\t예로, (()())는 ((1+1)+(1)+1)$((1+1)+(1)+1)$ 등의 수식을 만들 수 있으므로 균형 잡힌 괄호 문자열이다.\n\t\t하지만, ())(는 1과 +를 어떻게 넣어도 제대로 된 수식을 만들어 낼 수 없으므로 균형 잡힌 괄호 문자열이 아니다.\n\t\n\t\n\n\n여기서, 제대로 된 수식은 다음과 같이 정의된다.\n\n\n\t 1$1$은 제대로 된 수식이다.\n\t T1$T_1$과 T2$T_2$가 제대로 된 수식이라면, 두 수식을 더하는 T1+T2$T_1+T_2$도 제대로 된 수식이다.\n\t T$T$가 제대로 된 수식이라면, 수식에 괄호를 씌운 (T)$(T)$도 제대로 된 수식이다.\n\n\n세훈이는 이 정의에 궁금증을 가지고, 균형 잡힌 괄호 문자열이 주어질 때 수식을 직접 만들어 보기로 했다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30867","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t과제가 너무 많은 로하는 과도한 두통에 시달리며 영어 단어에 있는 모든 wh를 hw로 보게 되었다! 두통이 한번 올 때마다, 문자열 S$S$는 다음의 시행에 따라 변화한다. 문자열 S$S$는 1$1$번째 글자부터 L$L$번째 글자까지 있는 길이 L$L$의 문자열이다.\n\n\n\t문자열 S$S$의 i=1$i=1$번째 글자부터 L−1$L-1$번째 글자까지, 다음 과정을 반복한다.\n\t\n\t\t만약 i$i$번째 글자와 i+1$i+1$번째 글자가 차례로 w와 h라면, i$i$번째 글자와 i+1$i+1$번째 글자를 각각 h와 w로 바꾼다.\n\t\n\t\n\n\n로하가 N$N$번의 두통을 겪고 나서 주어진 문자열을 어떤 문자열로 보게 될지 출력하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30858","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tChansu and Junsu are friends in International College of Programming Convergence. One day, Chansu met Junsu and said that “I’ll do a magic trick for you. Pick any number between 1$1$ and 12$12$, and don’t tell me your number. Just keep it in your mind.” Junsu chose 11$11$ in mind. Chansu then showed Junsu the following four cards one by one, asking “Is there your number in this card?” at each time.\n\n\n\nSo, Junsu answered “Yes, yes, no, yes” in this order. After Chansu did some magically looking gestures with his arms and legs for a while, he finally shouted, “I’ve got your number. It is 11$11$.” And Junsu was quite surprised because it was exactly the number he kept in mind.\n\nChansu didn’t tell Junsu the secret of the trick, but only “These cards have a great magic power, so they can read your mind and tell me something only in a magical language, which only I can understand.”\n\nHow does this work? Can you figure out the secret?\n\nNow, you are to write a program that answers the number in your friends’ minds. We can generalize the magic trick as follows: You have K$K$ magic cards in each of which exactly M$M$ integers between 1$1$ and N$N$, possibly with some redundancy, are written, and you perform the magic trick to F$F$ friends. From the yes/no-sequences from the F$F$ friends, you will be able to pick out the correct numbers.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30859","content":"문제\n\nWe are given a \n2×n\n$2 \\times n$ matrix \nM\n$M$ of positive integers, and each row of \nM\n$M$ does not contain duplicate numbers. For \ni\n$i$-th row \nri\n$r_i$ of \nM\n$M$, \ni=1,2\n$i = 1, 2$, we find the maximum sum \nsi\n$s_i$ of increasing subsequence contained in \nri\n$r_i$. For example, if \nM\n$M$ is given as the figure below, \ns1\n$s_1$ is \n1+2+3+4+5+6\n$1 + 2 + 3 + 4 + 5 + 6$ and \ns2\n$s_2$ is \n2+3+5\n$2 + 3 + 5$. We call \ns1+s2\n$s_1 + s_2$ the maximum sum of increasing subsequences, MSIS.\n\n \t\t\t\t\t\n\t\t\t\t\t\n[123456623541]\n$$\\begin{bmatrix} \\color{red}{1} & \\color{red}{2} & \\color{red}{3} & \\color{red}{4} & \\color{red}{5} & \\color{red}{6}\\\\ 6 & \\color{red}{2} & \\color{red}{3} & \\color{red}{5} & 4 & 1 \\end{bmatrix}$$ \n\nOnce we permute the columns of \nM\n$M$, MSIS can change. For example, if we permute the columns of the above matrix \nM=[c1c2c3c4c5c6]\n$M = [c_1\\, c_2\\, c_3\\, c_4\\, c_5\\, c_6]$ to \n[c2c3c4c5c6c1]\n$[c_2\\, c_3\\, c_4\\, c_5\\, c_6\\, c_1]$ as the figure below, MSIS becomes \n36\n$36$.\n\n \t\t\t\t\t\n\t\t\t\t\t\n[234561235416]\n$$\\begin{bmatrix} \\color{red}{2} & \\color{red}{3} & \\color{red}{4} & \\color{red}{5} & \\color{red}{6} & 1 \\\\ \\color{red}{2} & \\color{red}{3} & \\color{red}{5} & 4 & 1 & \\color{red}{6} \\end{bmatrix}$$ \n\nGiven a \n2×n\n$2 \\times n$ matrix \nM\n$M$, write a program to output the maximum of MSIS among all possible permutations of the columns of \nM\n$M$."},{"problemId":"30885","content":"문제\n\n선아는 최근에 어떤 미생물을 연구하고 있다. 선아는 연구 과정에서 이 미생물 여러 마리를 한 줄로 나열하면 미생물이 한 마리만 남을 때까지 다음 규칙들에 따라 미생물들이 서로 흡수한다는 사실을 알아냈다.\n\n하루에 한 번 줄의 맨 앞에 있는 미생물부터 각 미생물은 차례대로 인접한 미생물 중 자신보다 크기가 작거나 같은 것들을 전부 흡수한다. 다른 미생물을 흡수한 경우, 미생물의 크기는 흡수한 미생물의 크기의 합만큼 커진다.\n흡수당한 미생물은 사라지며 행동할 수 없다. 즉, \n3\n$3$, \n2\n$2$, \n1\n$1$의 크기를 가지는 세 마리의 미생물들이 있는 경우 \n2\n$2$는 자신의 차례가 오기 전에 \n3\n$3$에게 흡수당하기 때문에 하루가 지난 후 남아있는 미생물들의 크기는 \n5\n$5$, \n1\n$1$이 된다.\n흡수하는 미생물은 하루에 흡수할 모든 미생물을 한 번에 흡수한다. 즉, \n3\n$3$, \n4\n$4$, \n5\n$5$의 크기를 가지는 세 마리의 미생물들이 있고 \n4\n$4$의 차례인 경우 \n4\n$4$는 \n3\n$3$만 흡수한다. \n4\n$4$가 \n3\n$3$을 흡수해서 \n7\n$7$이 된 후 같은 날 \n5\n$5$를 흡수하는 행동은 불가능하다. 따라서 하루가 지난 후 남아있는 미생물들의 크기는 \n7\n$7$, \n5\n$5$가 된다.\n\n선아에게는 이 미생물이 \nN\n$N$마리 있다. 이 \nN\n$N$마리의 미생물들이 한 줄로 나열되었을 때 마지막에 남는 미생물의 최종 크기와 초기 위치를 찾는 프로그램을 작성해 보자."},{"problemId":"30868","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t투표가 끝난 뒤에는 개표를 해야 한다. 일반적으로 개표는 칠판을 사용하며, 한 표가 나올 때마다 한 획을 추가로 긋는 방식을 사용한다.\n\n이 문제에서는 다음과 같은 방식으로 개표를 진행한다.\n\n\n\t모든 후보자는 0$0$표, 즉 아무것도 그려져 있지 않는 상태로 시작한다.\n\t어떤 후보자가 한 표를 받을 때마다, |를 맨 뒤에 그린다.\n\t단, 그 후보자가 5$5$표를 받을 때마다, |를 그리는 대신 이미 있던 4$4$개의 |에 가로줄을 그어 ++++를 만든다. 이후 1$1$칸의 공백을 뒤에 추가한다.\n\n\n예를 들면, 12$12$표를 받은 후보의 경우 칠판에는 ++++ ++++ ||가 적히게 된다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30886","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\nA typical circular design on a square Delft tile.\n\nDelft is world-famous for its blue and white pottery (also known as Delfts blauw), and the earliest pieces date back to the 16th century.\n\nDuring a stroll in Delft, Christiaan sees a lot of beautifully painted pottery objects like plates, tiles, and vases in the souvenir shops. Inspired by those, he decides to hand paint such a square tile himself. He has already picked a circular design he wants to place in the middle of the tile. He would like to leave a margin of at least 1cm$1 \\text{cm}$ around the design. Now, Christiaan just needs to buy a square tile of a suitable size.\n\nGiven the area of the circular design, what is the minimum area of the square tile?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30869","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t재원이의 마을에는 N$N$개의 버스 정류장과 M$M$개의 버스 노선이 있다.\n\n i$i$번 노선은 si$s_i$번 정류장에서 출발해 ti$t_i$시간 후 ei$e_i$번 정류장에 도착하며, si$s_i$번 정류장과 ei$e_i$번 정류장을 제외한 다른 정류장에는 멈추지 않는다. 또한, 배차 간격 gi$g_i$가 있어 0$0$시에 si$s_i$번 정류장에서 버스가 운행을 시작한 뒤, 매 gi$g_i$시간마다 si$s_i$번 정류장에서 버스가 운행을 시작한다.\n\n빨리 도착해야 하는 재원이는, 빨리 기다리기를 사용하기로 했다. 빨리 기다리기를 사용하면, 현재 정류장에서 출발하는 노선 중 하나를 선택해 배차 간격과 무관하게 지금 당장 출발하도록 할 수 있다.\n\n빨리 기다리기를 최대 K$K$번 사용해 1$1$번 정류장에서 N$N$번 정류장까지 가는 데에 걸리는 최소 시간을 재원이에게 알려주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30887","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\nExample exam by Ellen.\n\nEllen is teaching elementary math to her students and the time for the final exam has come. The exam consists of n$n$ questions. In each question, the students have to add ('+'), subtract ('-') or multiply ('*') a pair of numbers.\n\nEllen has already chosen the n$n$ pairs of numbers. All that remains is to decide for each pair which of the three possible operations the students should perform. To avoid students getting bored, Ellen wants to make sure that the n$n$ correct answers to her exam are all different.\n\nPlease help Ellen finish constructing the exam by automating this task.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30870","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t N$N$개의 정점과 M$M$개의 간선을 가진 무향 그래프 G$G$가 주어진다. 시간 T=1$T=1$일 때, G$G$에서 정해진 K$K$개의 정점을 지운다. T=t (1<t)$T=t\\ (1 < t)$일 때는 T=t−1$T=t-1$에서 지워진 정점과 이웃하였던 정점들을 지운다. 이때 G$G$에 사이클이 존재하지 않는 최초의 시간 T=C$T=C$를 구하는 프로그램을 작성하여라.\n\n처음 주어지는 그래프 G$G$는 모든 정점이 연결된 연결 그래프이며, 사이클이 존재한다. 또한 정점이 삭제되면 해당 정점과 연결된 간선도 함께 없어진다. 자기 자신과 연결된 간선은 주어지지 않으며, 중복된 간선이 주어질 수 있다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30888","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tEvery Thursday, the big square in front of the New Church in Delft is filled with market stands. Today, you brought your formidable cheese wheels\\footnotemark{} to the market for the first time, and to optimize sales, you need to position your cheese wheels in an appealing way. From your experience of playing with blocks as a child, you know that the cheese wheels will look most appealing when they are ordered by weight, from small to large.1\n\nOrdering the cheese wheels would have been easy, if you had brought your highly accurate digital cheese-weighing scale. However, due to unfortunate planning at your cheese factory, you only have a balancing scale with you. The market is already starting to fill up with potential customers, so you hurriedly start comparing cheese wheels to order them from lightest to heaviest.\n\n\n1A cheese wheel is large, circular, typically yellow, has a crust on the outside to keep the cheese inside fresh, and can weigh several kilos.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30871","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t대회가 다가오는데도 문제를 만들지 못한 하이비는 결국 AI의 힘을 빌려 다음과 같은 문제를 만들었다.\n\n정수 x$x$, 길이 N$N$의 정수로 이루어진 수열 L$L$과 R$R$에 대해, 다음과 같은 함수 f$f$를 정의해 보자.\n\nf(x, L[1..N], R[1..N]):\n    value = x\n    for i = 1 to N\n        l = L[i]\n        r = R[i]\n        if l ≤ x ≤ r\n           value = value^(((x|l)+(x&r)*(l^r)) mod (2**64))\n    return (value >= 0x0123456789ABCDEF)\n\n코드에 적힌 |, &, ^, **, 0x, mod연산에 대해서는 노트를 참고하자.\n\n L$L$과 R$R$이 주어질 때, f(x,L,R)=False$f(x,L,R) =\\text{False}$이면서 f(x+1,L,R)=True$f(x+1,L,R) =\\text{True}$인 x$x$를 찾으면 된다.\n\n하지만 AI가 만들어 준 이 문제가 너무 어려웠던 하이비는 이 문제를 풀지도 못한 채로 내야 할 위기에 처하게 되었다! 하이비를 위해 위 문제의 답을 찾아주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30920","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t하이비는 길이 N$ N $의 순열 P$ P $를 선물로 받았다. 하지만 받았던 수열이 마음에 들지 않았던 하이비는 아래 연산을 ⌊3N2⌋$ \\left\\lfloor \\frac{3N}{2} \\right\\rfloor $회 이하로 사용해서 정렬된 순열, 즉 [1,2,3,…,N]$ [1, 2, 3, \\ldots, N] $을 만들기로 했다.\n\n\n\t i$ i $ l$ l $ r$ r $: Pi$ P_i $를 mex([Pl,Pl+1,…,Pr])$ \\text{mex}([P_l, P_{l+1}, \\ldots, P_r]) $로 변경한다. (1≤l≤i≤r≤N)$ (1 \\le l \\le i \\le r \\le N) $\n\t\n\t\t여기서 mex(A)$ \\text{mex}(A) $는 A$ A $에 존재하지 않는 가장 작은 음이 아닌 정수를 의미한다. 예를 들면 mex([0,3,1])=2$ \\text{mex}([0, 3, 1]) = 2 $, mex([0,1,2,3,4])=5$ \\text{mex}([0, 1, 2, 3, 4]) = 5 $, mex([1,3,2])=0$ \\text{mex}([1, 3, 2]) = 0 $이다.\n\t\t연산을 적용한 뒤에 P$ P $가 순열일 필요는 없다.\n\t\n\t\n\n\n하이비를 위해 순열 P$ P $를 정렬해 주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30889","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t희권이는 영화관에서 한 개의 상영관을 담당하고 있다. 상영관의 좌석은 10×20$10\\times 20$ 형태이고, 좌석 번호는 다음과 같다.\n\n\n\n스크린을 기준으로 맨 앞이 A열, 맨 뒤가 J열이다. 좌석은 가장 왼쪽이 1번, 오른쪽이 20번이다.\n\n갑자기 영화관의 컴퓨터가 고장이 나서 좌석 배치를 알 수 없게 되었다. 다행히 희권이에겐 손님들이 어떤 좌석을 예매했는지 정보가 남아있었다.\n\n어떤 손님의 예매 정보가 A10이라면 A열 10번 좌석을 예매했다는 뜻이다.\n\n희권이를 도와 영화관의 좌석 배치도를 만들어 보자. 단, 좌석이 중복되는 경우는 없다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30872","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t세훈이와 철민이는 제10회 HCPC (Hanyang Cherry Picking Contest)에 참가했다. 대회의 결승전에서 만난 둘은 우승을 두고 대결한다. HCPC의 규칙은 다음과 같다.\n\n\n\t정점 N$N$개로 이루어진 1$1$번 정점을 루트로 하는 트리가 주어진다. 각 정점에는 0$0$ 이상 1010$10^{10}$ 이하의 정수가 적혀있다.\n\t각 시합은 두 플레이어 사이에서 이루어진다. 한 명이 선공, 다른 한 명은 후공 플레이어가 된다.\n\t플레이어는 정점을 가져감으로써 그 정점의 점수를 얻는다. 정점의 점수는 그 정점에 적힌 수이다.\n\t현재 턴의 전 턴 플레이어가 마지막으로 가져간 정점을 체리 정점이라고 한다.\n\t첫 번째 턴에 선공 플레이어는 무조건 루트를 가져가고 턴을 후공 플레이어에게 넘긴다. 이로써 체리 정점의 초깃값은 루트가 된다.\n\t그 후 번갈아 가며 각 턴 플레이어는 체리 정점의 자식 정점 중 하나를 선택하여 가져간 후 턴을 넘긴다.\n\t어떤 플레이어가 이미 가져간 정점은 두 플레이어 모두 다시 가져갈 수 없다.\n\t만약에 체리 정점에 자식이 하나만 존재한다면 그 자식을 가져가야 한다.\n\t체리 정점에 자식이 존재하지 않는다면 가져갈 수 있는 자식이 남은 가장 가까운 정점을 체리 정점으로 취급하여 턴을 진행한다.\n\t시합은 가져갈 수 있는 정점이 더 이상 남지 않을 때까지 진행한다. 시합이 끝난 후 가져간 정점들의 점수의 합이 더 높은 플레이어가 승리한다. 점수가 같다면 무승부다.\n\n\n세훈이가 선공이고 철민이가 후공이다. 두 명 모두 최적의 전략으로 플레이할 때 HCPC의 우승자는 과연 누구일까?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30890","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이번에 새롭게 드럼을 배우고 있는 영현이에게 문제가 하나 생겼다. 그것은 바로 박자가 생명인 드럼이지만, 영현이는 심각한 박치라는 것이다.\n\n왼손과 오른손이 서로 다른 박자로 드럼을 연주하는 경우가 있다. 한 박자 동안 왼손이 X$X$번, 오른손이 Y$Y$번 연주를 해야 한다면 왼손은 1/X$1/X$박자마다, 오른손은 1/Y$1/Y$박자마다 연주한다. X=2$X=2$, Y=3$Y=3$이면 그림과 같이 (오른손) / (왼손) / (오른손) / (왼손 + 오른손) 순으로 연주해야 한다.\n\n\n\n영현이는 이러한 상황을 만나면 심각한 연주 불능 상태에 빠지고 만다. 불쌍한 영현이를 위해 어떤 순서로 드럼을 연주해야 하는지 알려주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30873","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t한양대학교는 2023년부터 Hanyang Popularity Exceeding Competition을 열게 되었다. 이 대회는 일정 기간 진행되며, 대회가 끝나는 시점에 인기도가 가장 높은 학생이 우승한다. 철민이는 Hanyang Popularity Exceeding Competition의 참가자이지만, 이제 막 학교에 다니기 시작한 철민이는 인기도가 0$0$밖에 되지 않는다.\n\n철민이는 한양대학교 내의 유명인 N$N$명과 만난다는 우승 계획을 세웠다. 이를 위해 철민이는 1$1$번 유명인부터 N$N$번 유명인까지 차례대로 만날 계획을 세웠다.\n\n하지만 현실은 생각보다 복잡해서, 유명인들과 만난다고 항상 인기도가 올라가지는 않는다. 한쪽의 유명도가 다른 한쪽에 비해 너무 높으면 한쪽의 인기에 다른 쪽이 묻혀버리기 때문이다. 엄밀히 말해서, 철민이의 현재 인기도를 X$X$라고 하고, i$i$번 유명인의 인기도를 Pi$P_i$, 친화력을 Ci$C_i$라고 하자. 이때, |Pi−X|≤Ci$|P_i-X|\\le C_i$여야 철민이의 인기도가 1$1$ 올라간다. |Pi−X|>Ci$|P_i-X|>C_i$라면 철민이의 인기도는 변하지 않는다.\n\n그래서 철민이는 모든 유명인을 다 만나는 대신, 일부 유명인만을 골라 만나서 인기도를 최대화하려고 한다. 이때, 철민이가 도달할 수 있는 최대 인기도는 얼마일까?\n\n유명인들은 바쁜 삶을 보내기 때문에, 유명인과 만나는 시간을 변경할 수는 없다. 즉, 번호가 더 높은 유명인을 먼저 만나도록 계획을 변경할 수는 없다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30874","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t현대자동차에서 근무하고 있는 로하는 주어진 작업 슬롯 하나로 N$N$개의 자동차를 생산하는 공정을 계획하려 한다. 각 i$i$번째 자동차는 생산하기 위해 si$s_i$단계의 생산 프로세스를 거쳐야 한다. 작업 슬롯은 수직선상에서 [0,1)$\\left[ 0,1 \\right)$로 표현할 수 있으며, i$i$번째 자동차 생산이 진행 중인 경우 이 중 1si$\\frac{1}{s_i}$ 크기의 반열린 구간을 차지한다. 0$0$초부터 시작해서 1$1$초마다 다음과 같은 일이 순서대로 일어난다.\n\n\n\t먼저 할당된 생산 프로세스부터, 작업 슬롯의 모든 생산 프로세스들은 자신의 크기만큼 뒤로 움직인다. 즉, 작업 슬롯의 전체 구간을 [0,1)$\\left[ 0,1 \\right)$로 표현했을 때, i$i$번째 생산 프로세스가 [j−1si,jsi)$\\left[ \\frac{j-1}{s_i} ,\\frac{j}{s_i} \\right)$의 구간을 차지하고 있었다면, 이동 후 [jsi,j+1si)$\\left[ \\frac{j}{s_i} ,\\frac{j+1}{s_i} \\right)$의 구간을 차지하게 된다. 단, 이동 시 다른 생산 프로세스가 차지하는 구간과 겹치게 되는 경우에는 움직이지 않는다. 슬롯을 통과하여 [0,1)$[0,1)$ 밖으로 나온 경우 이 생산 프로세스는 완료된 것이며, 더 이상 공간을 차지하지 않는다.\n\t로하는 아직 할당하지 않은 생산 프로세스 중 하나를 골라 슬롯에 할당하거나 할당하지 않을 수 있다. i$i$번째 생산 프로세스를 할당할 경우 슬롯의 [0,1si)$\\left[ 0,\\frac{1}{s_i} \\right)$ 부분에 생산 프로세스를 할당한다. 단, 다른 생산 프로세스가 차지하고 있는 구간과 겹치는 경우 할당할 수 없다.\n\n\n모든 자동차가 작업 슬롯을 거쳐 생산될 때까지 걸리는 최소 시간이 몇 초인지 구하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30891","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t매일 배달 음식만 시켜 먹다 질려버린 영재는 직접 볶음밥을 해 먹기로 결심했습니다. 오랜만에 느껴지는 맛있는 냄새에 신이 난 영재는 난데없이 힘찬 웍질을 시도했고, 지금 N$N$개의 밥알이 흩날리고 있습니다. 밥알이 떨어지는 방향은 모두 −z$-z$축 방향입니다.\n\n흥이 다 깨져버리면 안 되기 때문에, 영재는 반지름 R$R$의 웍을 적절한 위치에 두어 최대한 많은 밥알을 지켜내야만 합니다. 웍의 중심 (X,Y)$(X, Y)$와 밥알의 좌표 (xi,yi)(1≤i≤N)$(x_i, y_i) \\, (1≤i≤N)$에 대해, (X−xi)2+(Y−yi)2≤R$\\sqrt{ (X-x_i)^2+(Y-y_i)^2 } \\le R$인 밥알들은 모두 지켜낸 것으로 가정합니다. 또한, 웍의 중심 좌표 X$X$와 Y$Y$는 정수여야 합니다.\n\n일촉즉발의 상황... 여러분이 영재의 기분을 지켜주세요!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30892","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n인천대학교의 앞바다에는 N$N$마리의 상어가 살고 있다고 한다. 각각의 상어는 서로 같거나 다른 크기의 몸집 Ai$A_i$를 가지고 있다. 상어의 세계는 완전한 약육강식의 세계로, 상어 자신의 크기보다 작은 상어는 전부 먹을 수 있다. 이때, 상어의 크기는 잡아먹힌 상어의 크기만큼 커지게 된다. 반면, 자신의 크기 이상인 상어는 전혀 잡아먹지 못한다.\n\n어느 날 크기가 T$T$인 샼이라는 이름의 아기 상어는 인천대학교 앞바다에 존재하는 N$N$마리 상어들의 크기 정보를 모두 입수했다. 똑똑한 아기 상어 샼은 인천대학교 앞바다에 있는 상어들을 최대 K$K$마리까지 적절한 순서로 잡아먹고, 자신의 몸집을 최대로 키울 계획을 하고 있다.\n\n샼이 최선의 선택으로 최대 K$K$마리의 상어를 적절한 순서로 잡아먹었을 때, 몸집이 최대 얼마까지 커질 수 있는지 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30875","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tJigsaw Sudoku는 다음 규칙에 맞도록 N×N$N\\times N$ 크기의 보드에 1$1$ 이상 N$N$ 이하의 정수를 적는 퍼즐이다.\n\n\n\t보드는 N$N$개의 구역으로 나누어져 있으며, 각각의 구역은 연결되어 있다. 또한, 서로 다른 두 구역은 겹치지 않는다.\n\t같은 가로줄에 있는 서로 다른 두 위치에 적힌 수는 달라야 한다.\n\t같은 세로줄에 있는 서로 다른 두 위치에 적힌 수는 달라야 한다.\n\t같은 구역에 있는 서로 다른 두 위치에 적힌 수는 달라야 한다.\n\n\n예로, 다음은 6×6$6\\times 6$ Jigsaw Sudoku를 제대로 풀어낸 경우이다.\n\n\n\n세훈이는 최근 극악의 난이도를 자랑하는 Jigsaw Sudoku를 풀었고, 이를 노트에 기록했다. 하지만, 실수로 보드에 적힌 수만 기록하고 보드가 어떻게 나뉘어져 있는지를 기록하지 않았다.\n\n세훈이를 위해, 보드에 적힌 수가 주어질 때 가능한 구역의 배치를 찾아주자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30893","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t트리 게임은 정점 N$N$개, 간선 N−1$N-1$개로 이루어진 트리 위에서 진행되는 게임입니다. 각 정점은 1$1$ 이상 N$N$ 이하의 번호를 하나씩 가집니다.\n\n트리 위에는 1$1$개의 말이 있는데, 각 플레이어는 자신의 턴에 간선으로 이어진 인접한 정점으로 말을 옮겨야 합니다. 단, 한 번 방문했던 정점으로는 이동할 수 없으며, 더는 말을 움직일 수 없게 되면 게임이 종료됩니다. 이때 게임 진행 과정에서 한 번이라도 말이 목표 정점 E$E$를 방문했다면 선공의 승리이고, 그렇지 못하면 후공의 승리입니다.\n\n기말고사 공부가 너무도 하기 싫었던 태호와 윤아는 트리 게임만 수천 판을 해버렸고, 결국 트리 게임의 최선의 전략을 터득해 버렸습니다. 더는 기말고사 공부를 미룰 수 없었던 태호와 윤아는 마지막 승부를 내기로 했고, 가위바위보를 이긴 윤아가 선/후공 결정권을 가져왔습니다.\n\n이때 윤아가 게임에서 승리하려면 선공, 후공 중 어느 것을 골라야 할까요?\n\n단, 태호와 윤아는 최선의 전략을 이미 알고 있고, 최적의 방법으로 게임에 임한다고 가정합니다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30876","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tSouthern Fuegian Railway는 세상에서 가장 남쪽에 있는 철도이다.\n\nSouthern Fuegian Railway는 x$x$축의 양의 방향을 동쪽으로 하는 2$2$차원 좌표평면으로 나타내어진다.\n\nSouthern Fuegian Railway는 N$N$개의 역과 역 사이를 잇는 N−1$N-1$개의 철로로 구성되어 있다. i$i$번째 역은 (xi,yi)$(x_i,y_i)$에 있으며, j$j$번째 철로는 j$j$번 역과 j+1$j+1$번 역 사이를 잇는 선분이다. (1≤i≤N;$(1 \\le i \\le N;$ 1≤j≤N−1)$1 \\le j \\le N-1)$ \n\nSouthern Fuegian Railway를 보러 간 선아는 세상에서 가장 남쪽에 있는 철도가 지나는 가장 남쪽 점이 어디일지 궁금해졌다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30894","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t오랜만에 놀이공원에 놀러 가기로 한 석준이는 친구들과 다음과 같은 대화를 나누었습니다.\n\n\n\t친구A: 유령의 집은 너무 무서울 것 같지 않아? 그냥 롤러코스터 타러 가자...\n\t석준: 에이~ 유령의 집이 뭐가 무서워? 줄도 없는데 빨리 들어갔다 나오자!\n\t친구B: 그래? 그러면 네가 앞장서서 가면 되겠다. 잘 부탁해~\n\t석준: .... \n\n\n사실 석준이는 누구보다도 유령을 무서워하지만, 이미 허세를 부려버려 돌이킬 방법이 없었습니다.\n\n세로 N$N$칸, 가로 M$M$칸 크기의 유령의 집은 다음과 같이 구성되어 있습니다.\n\n\n\t빈칸(.): 석준이가 움직일 수 있는 공간을 의미합니다.\n\t벽(#): 석준이가 움직일 수 없는 공간을 의미합니다.\n\t유령(0, 1, 2, 3): 각 숫자는 유령이 바라보는 초기 방향을 의미합니다. (0 : 오른쪽, 1 : 아래, 2 : 왼쪽, 3 : 위)\n\n\n어떤 유령이 바라보는 방향에 벽이나 다른 유령이 존재하는 경우, 시야가 가로막혀 그 뒤의 공간은 볼 수 없습니다. 단, 유령의 시야가 가로막히지 않았고 바라보는 방향에 석준이가 있다면, 유령은 거리에 상관없이 석준이를 발견할 수 있습니다. 각 유령은 매초 시계 방향으로 90$90$ °씩 회전하며, 회전하는 동안에는 석준이를 볼 수 없습니다.\n\n석준이는 매초 상하좌우로 인접한 빈칸으로 이동하거나 제자리에 머무를 수 있습니다.\n\n놀이공원 아르바이트 경험이 있던 석준이는 유령의 위치와 지도를 모두 알고 있었고, 어떤 유령에게도 발견되지 않고 최대한 빨리 탈출할 계획을 세우려 합니다.\n\n이미 긴장감에 휩싸여 머리가 새하얘진 석준이를 위해, 여러분이 그 방법을 대신 찾아주세요.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30877","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t퍼즐을 좋아하는 하이비는 작년에 이어 올해에도 퍼즐과 관련된 문제를 내기로 했다.\n\n이번에는 Indirect Indexing으로, 다음과 같은 방식을 따른다.\n\n\n\t N$N$개의 문자열 쌍 (S1,T1),(S2,T2),…,(SN,TN)$(S_1,T_1) ,(S_2,T_2) ,\\ldots ,(S_N,T_N)$이 주어진다. 각 쌍에 대해, Si$S_i$의 길이와 Ti$T_i$의 길이는 같다.\n\t Si$S_i$에서 글자 x 또는 X가 등장하는 위치를 Pi$P_i$라고 하자. 이 위치는 항상 유일하다.\n\t이때, Ti$T_i$의 Pi$P_i$번째 글자를 읽으면 된다. 단, 소문자는 대문자로 바꿔야 한다.\n\t예를 들어, Si$S_i$가 Indexing이고 Ti$T_i$가 Indirect라면 읽게 되는 글자는 R이 된다.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30895","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t전략적 팀 전투라는 게임에는 M$M$의 최대 마나를 가지는 챔피언이 있습니다. 초기에 챔피언의 마나는 0$0$이고, 기본 공격을 할 때마다 X$X$의 마나를 회복합니다. 챔피언이 M$M$의 마나를 모두 채우면 스킬을 사용합니다.\n\n또한 전략적 팀 전투에는 쇼진의 창이라는 아이템이 있습니다. 이 아이템은 챔피언이 기본 공격을 할 때마다 추가로 Y$Y$의 마나를 회복시켜 줍니다. 즉, 쇼진의 창 아이템을 장착 중인 챔피언은 매 기본 공격마다 X+Y$X+Y$의 마나를 회복합니다.\n\n전략적 팀 전투를 무척 좋아하는 동빈이는 평소처럼 게임을 하다가, 챔피언이 가진 최대 마나의 크기에 따라 아이템의 효율이 다르다는 사실을 발견했습니다. 이때 쇼진의 창의 효율이란 다음과 같이 정의됩니다.\n\n 쇼진의창없이스킬을사용하기위해가해야하는최소기본공격횟수쇼진의창을장착하고스킬을사용하기위해가해야하는최소기본공격횟수(쇼진의 창 없이 스킬을 사용하기 위해 가해야 하는 최소 기본 공격 횟수)(쇼진의 창을 장착하고 스킬을 사용하기 위해 가해야 하는 최소 기본 공격 횟수)$$ (쇼진의\\space창\\space없이\\space스킬을\\space사용하기\\space위해\\space가해야\\space하는\\space최소\\space기본\\space공격\\space횟수) \\over (쇼진의\\space창을\\space장착하고\\space스킬을\\space사용하기\\space위해\\space가해야\\space하는\\space최소\\space기본\\space공격\\space횟수) $$ \n\n예를 들어, X=10,Y=5,M=90$X=10, Y=5, M=90$인 경우, 쇼진의 창의 효율은 9/6=1.5$9/6 = 1.5$입니다. 하지만 M=50$M=50$인 경우, 쇼진의 창의 효율은 5/4=1.25$5/4 = 1.25$가 됩니다. 동빈이는 문득 K$K$ 이상의 최대 마나를 가지는 챔피언 중, 효율이 가장 낮은 챔피언의 최대 마나가 궁금해졌습니다. 하지만 동빈이는 게임을 한 판이라도 더 돌리러 가야 하기 때문에, 여러분이 동빈이를 대신해 문제를 해결해 주세요.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30896","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t N$N$명의 사람들이 모여서 경기를 하려고 한다. 각 사람은 팀워크 점수 Ai$A_i$ 와, 실력 점수 Bi$B_i$를 가지고 있다. 점수는 모두 정수이다.\n\n사람들을 적절히 두 팀으로 나누려고 한다. 이때, 팀 S$S$의 능력은 다음과 같이 정의된다.\n\n mini∈S(Ai)×∑i∈SBi$$\\min_{i\\in S}(A_i) \\times \\sum_{i\\in S}{B_i}$$ \n\n즉, 팀원 중 가장 낮은 팀워크 점수와 모든 팀원의 실력 점수 합을 곱한 것이 팀의 능력이 된다.\n\n고민하던 사람들은 세계적인 감독 광재에게 물어보기로 했다. 광재는 명성에 걸맞게 최적의 방법을 찾으려 한다. 광재를 도와 두 팀의 능력 차이가 최소가 되는 방법을 찾아보자.\n\n두 팀의 구성원의 수가 같을 필요는 없고, 각 팀에는 한 명 이상의 선수가 포함되어야 한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30878","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t철민이는 ALOHA 최대의 행사 HCPC의 출제와 검수를 위해 11$11$시 정각에 하이와 바이를 만나기로 하였다. 그런데 철민이와 하이, 바이는 약속 시간을 정확히 지키지 않아서 상대방을 기다리게 하고는 한다. 그래서 이들은 너무 오래 기다리지 않도록 다음과 같은 규칙을 정했다.\n\n\n\t세 명은 11$11$시와 12$12$시 사이의 균일하게 무작위로 고른 시간에 약속 장소에 도착한다.\n\t 12$12$시가 되었는데도 세 명이 모두 만나지 못했다면, 약속 장소에 도착한 사람들은 집으로 돌아간다.\n\t세 명은 약속 장소에 도착 후 M$M$분이 지나는 순간 집으로 돌아간다.\n\n\n M$M$이 주어질 때, 세 사람이 만날 확률을 구하는 프로그램을 작성하자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30879","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t선아와 친구들은 함께 저녁을 먹으러 가고 있다. 그때 친구 중 한 명이 금지된 질문을 해버리고 말았다.\n\n“저녁 뭐 먹지?”\n\n심각할 정도로 우유부단한 선아와 친구들은 저녁 메뉴 결정을 서로 떠넘기게 되었다. 이러다 다 같이 굶겠다는 생각이 든 선아는 다음 방법을 제안했다.\n\n선아를 포함한 N${N}$명의 친구들이 있다. 메뉴는 0${0}$개 이상의 특징을 가지며, 각 특징은 1${1}$ 이상 100000${100\\, 000}$ 이하인 정수로 표현된다. 또한 한양대학교 근처에는 식당이 굉장히 많아서 가능한 모든 특징의 조합에 대해 정확히 그 조합을 가진 메뉴가 존재한다. 이제 각 친구는 1${1}$번부터 N${N}$번까지 순서대로 다음 두 가지 행동 중 하나를 수행한다.\n\n\n\t1 a$a$ b$b$: 저녁 메뉴에 대한 의견을 나타내는 두 정수 a${a}$와 b${b}$를 제시한다. 각 의견은 절댓값이 1${1}$ 이상 100000${100\\, 000}$ 이하인 정수이며, 이 정수의 절댓값은 메뉴의 특징을 나타낸다. 이 정수가 양수인 경우 그 특징을 가져야 함을, 음수인 경우 그 특징을 가지면 안 됨을 의미한다.\n\t2: 현재까지 의견을 제시한 친구들을 모두 만족시키는 메뉴가 존재하는지 확인한 후 결과를 알려준다. 어떤 친구를 만족시키기 위해선 그 친구가 제시한 두 의견 중 최소 하나가 메뉴에 반영되어야 한다.\n\n\n선아와 친구들의 행동이 주어질 때 2${2}$번 행동의 결과를 출력하는 프로그램을 작성해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30897","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t N$N$개의 정수로 이루어진 수열 A1,A2,...,AN$A_1, A_2, ..., A_N$이 주어집니다. 여러분은 수와 수 사이에 연산자를 하나씩 끼워 넣어서 수식을 완성해야 합니다. 단, 수열의 순서는 바꿀 수 없습니다.\n\n연산자는 덧셈(+), 뺄셈(-), 곱셈(×)만 사용할 수 있으며, 연산자의 우선순위는 곱셈이 덧셈과 뺄셈보다 앞섭니다.\n\n또한 여러분은 완성된 수식에 최대 하나의 괄호를 사용할 수 있는데, 여는 괄호 뒤에는 반드시 숫자가 등장해야 하며, 마찬가지로 닫는 괄호 앞에는 반드시 숫자가 등장해야 합니다. 사칙연산의 규칙상, 괄호 안에 들어있는 식을 먼저 계산해야 합니다.\n\n다음은 올바른 수식과 그렇지 않은 수식의 예시입니다.\n\n\n\t −1+2×6+7+(2−4)×9$-1+2\\times 6+7+(2-4)\\times 9$: 맨 앞의 숫자에 연산자가 사용되었으므로, 올바르지 않은 수식입니다.\n\t 2×6(+3−5)−2×8+1$2\\times 6(+3-5)-2\\times 8+1$: 여는 괄호 뒤에 연산자가 등장하였으므로, 올바르지 않은 수식입니다.\n\t 3×62+5−9×0+1$3\\times 6\\quad 2+5-9\\times 0+1$: 숫자 사이에 연산자가 사용되지 않았으므로, 올바르지 않은 수식입니다.\n\t 2×(3)−5+4×2+1−9×3$2\\times (3)-5+4\\times 2+1-9\\times 3$: 올바른 수식입니다.\n\t 2023×12−2×(14−0)$2023\\times 12-2\\times (14-0)$: 올바른 수식입니다.\n\t 2023)×12−2×(17−0$2023)\\times 12-2\\times (17-0$: 괄호의 순서가 바뀌었으므로, 올바르지 않은 수식입니다.\n\t (12+34)×(56×78)−90$(12+34)\\times (56\\times 78)-90$: 두 쌍 이상의 괄호가 사용되었으므로, 올바르지 않은 수식입니다.\n\n\n연산자와 괄호를 적절히 추가하여 완성된 수식의 결괏값이 0$0$이 되도록 할 수 있다면 첫째 줄에 YES를 출력하고, 둘째 줄에 결괏값이 0$0$이 되도록 하는 완성된 수식을 출력해 주세요.\n\n만약 연산자와 괄호를 어떻게 사용해도 수식의 결괏값을 0$0$으로 만들 수 없다면 NO를 출력해 주세요.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30683","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t본 문제와 Easy 문제는 입력 제한만 다른 동일한 문제이다.\n\n스타는 밖에서 밤하늘 사진을 찍고 있다. 이 중 가장 잘 찍힌 사진을 액자에 담아 전시하려고 한다. 가장 잘 찍은 사진을 어떻게 고를지 고민하던 스타는 다음과 같은 방법으로 각 사진에 점수를 매기려고 한다.\n\n그 당시 밤하늘을 2차원 격자로 나타낼 수 있으며 각 칸은 (x,y)$(x, y)$로 표현한다. 그리고 스타가 찍은 사진에 담긴 밤하늘의 영역은 항상 직사각형이며 격자 칸 일부만 사진에 포함되는 경우는 없다.\n\n별 N$N$개에 대하여 각 별의 위치를 (xi,yi)$(x_i, y_i)$, 밝기를 pi$p_i$라고 하면 격자 칸 (x,y)$(x, y)$에서의 밝기 bx,y$b_{x, y}$는 다음과 같이 계산한다.\n\n bx,y=∑i=1Nmax(pi−(|x−xi|+|y−yi|),0)$b_{x, y} = \\sum_{i = 1}^N max(p_i-(|x-x_i|+|y-y_i|), 0)$ \n\n마지막으로 사진에 담긴 밤하늘의 격자 중 맨 왼쪽 아래가 (a,b)$(a, b)$, 맨 오른쪽 위가 (c,d)$(c, d)$일 때, 사진의 점수 score$score$는 다음과 같이 계산한다.\n\n score=∑y=bd∑x=acbx,y$score=\\sum_{y = b}^d \\sum_{x = a}^c b_{x, y}$ \n\n사진과 사진을 찍을 당시 밤하늘에 떠 있던 별 N$N$개에 대한 정보가 주어졌을 때, 사진의 점수를 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30701","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n유튜브에서 똥게임 광고를 지나치게 많이 본 근호는 본인이 직접 똥게임을 설치해서 하기로 했다.\n\n처음에 근호는 D$D$의 전투력을 가지고 시작한다. 근호 앞에는 N$N$개의 방이 있는데, 각 방에는 몬스터 또는 장비가 있으며 i(1≤i≤N)$i(1\\leq i\\leq N)$번째 방에 있는 몬스터 또는 장비는 전투력 Xi$X_i$를 가진다.\n\n근호는 매번 아직 돌파하지 않은 방 중 어떤 방에 먼저 들어갈지 자유롭게 정할 수 있으며, 들어간 방에 있는 내용물에 따라 다음과 같이 행동한다.\n\n\n\t몬스터가 있는 경우: 근호의 전투력이 몬스터의 전투력보다 크면 몬스터를 쓰러뜨릴 수 있으며, 이후 근호의 전투력에 몬스터의 전투력이 더해진다. 근호의 전투력이 몬스터의 전투력보다 작거나 같을 경우 근호는 패배한다.\n\t장비가 있는 경우: 근호의 현재 전투력에 상관없이 얻을 수 있으며, 근호의 전투력에 장비의 전투력이 곱해진다. 단, 현재 얻고자 하는 장비보다 전투력이 작은 모든 장비를 얻어야만 현 장비를 얻을 수 있다.\n\n\n방에 있는 몬스터를 쓰러뜨리거나 장비를 얻을 경우 해당 방을 돌파한 것이며, 근호가 모든 방을 돌파하거나 몬스터에게 패배했을 경우 게임이 끝난다.\n\n근호가 최선의 전략으로 게임을 진행할 때, 최대로 돌파할 수 있는 방의 수를 구하여라.\n\n근호가 게임 중 행동을 통해 올릴 수 있는 전투력에 상한이 없음에 유의하자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30703","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t학교 실험실에 비커가 총 N$N$개가 있고, 각 비커에는 1$1$번부터 N$N$번까지 번호가 붙어있다. i$i$ 번 비커의 초기 온도는 섭씨 Ai$A_i$도이다. (1≤i≤N)$(1\\leq i\\leq N)$ \n\n기현이는 화학 실험을 위해 실험실에 있는 모든 비커의 온도를 각각 정해진 값에 맞추어야 한다. 구체적으로, i$i$ 번 비커의 온도를 목표 온도인 섭씨 Bi$B_i$도로 맞춰야 한다. 비커의 온도를 일일이 맞추기 귀찮았던 기현이는 편하게 온도를 조절할 수 있는 온도 조절 장치를 개발하였다!\n\n온도 조절 장치는 버튼 하나로만 되어 있으며, 버튼을 한 번 누를 경우 아래와 같이 동작한다.\n\n\n\t모든 i$i$ (1≤i≤N)$(1\\leq i\\leq N)$ 에 대해, i$i$ 번 비커의 온도를 Xi$X_i$도 올리거나 내린다. 비커마다 온도를 올릴지 내릴지를 기현이가 선택할 수 있으나, 온도를 그대로 유지하는 것은 불가능하다. Xi$X_i$는 비커마다 사전에 정해진 온도 변화 수치이며, 이 값은 변하지 않는다.\n\n\n온도 조절 장치가 한 번 동작하는 데는 시간이 걸리므로, 기현이는 온도 조절 장치의 버튼을 최소 횟수로 눌러서 모든 비커의 온도를 목표 온도로 맞추고 싶다.\n\n비커의 개수와 각 비커의 초기 온도, 목표 온도, 온도 변화 수치가 주어졌을 때, 기현이가 비커들의 온도를 모두 맞추려면 버튼을 최소 몇 번 눌러야 하는지 구하여라.\n\n온도 조절 장치만으로 모든 비커의 온도를 원하는 값에 맞추는 것이 불가능할 수도 있으므로, 이런 경우 역시 구별하여야 한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30898","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIt is the day before the NWERC and you and your team are on the train towards Delft. The journey is long and boring but you came up with a good idea: \"Let's do some training\".\n\n\n-- silence --\n\n\nYou take your laptop out and try to plug it in when you notice that the only socket is already in use. Your friends smirk and reply: \"No socket for you, no training for us\". Their smirks quickly fade as you pull out a power strip, unplug the charger from the socket, and plug it back into the power strip. Now, there is enough space for your charger as well.\n\n\n\nFigure A.1: Illustration of Sample Input 2. The first six chargers can be plugged in as shown. Note that this is not the only possible solution. However, it can be shown that it is impossible to plug in all seven chargers.\n\nHowever, as soon as more sockets are available, your friends suddenly take out more devices that need to be charged. You realize that you will not get them to train like this, so you decide to trick them into solving a problem instead.\n\nYour power strip comprises a row of s$s$ sockets, and each socket is 3cm$3 \\text{cm}$ in diameter. Furthermore, as you examine the chargers, you notice that they all have integer lengths. The plug of each charger is always on one of the two ends, and each charger can only be used in two orientations. Chargers cannot overlap, but can touch, and can extend beyond the end of the power strip as long as they are plugged in to a socket. Now you challenge them to charge as many devices as possible. This is visualized in Figure A.1. Hoping that this allows them to avoid the training, your friends agree to write a program to solve this.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30899","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBob the Builder is tired of building tiny houses and paving narrow roads, and he strives for something bigger. The new job given to him by a very eccentric client is exactly what he needs: He is tasked with building a wall of a certain width that is infinitely high! His client assured him that he does not need to worry about the building material, and that an infinite supply of various kinds of bricks has already been ordered for him. Of course, building a stable wall takes very careful planning, especially if it is supposed to be infinitely high. In particular, a wall is only stable if no two gaps between bricks in consecutive rows end up directly above each other, as shown in Figure B.1. Bob knows from his long-time experience that if it is possible to build such a wall, then it can be done by alternating just two row configurations.\n\n \n\nFigure B.1: On the left, we see an unstable wall using the brick types of Sample Input 1. On the right, we see a stable wall using the same brick types. Note that even though only two rows of the wall are shown, it is possible to build an infinitely high wall by repeating these two row configurations.\n\nBob is terribly excited about the new job and quickly goes to work. Given the types of bricks available, is it possible to build a stable wall of width exactly w$w$ and infinite height? If yes, how should Bob build it using only two alternating row configurations?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30704","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t한 변의 길이가 1$1$인, 모양과 크기가 같은 정사각형 모양의 타일이 N$N$장 주어진다. 그리고 한 변의 길이가 1$1$인 정사각형들로 이루어진 격자가 그려진 바닥이 있다. 이 바닥에 타일들을 이어 붙여 하나의 도형을 만들자.\n\n타일은 격자판의 각 칸에 맞춰서만 붙일 수 있으며, 타일끼리 겹치거나 포갤 수 없다. 또 모든 타일은 서로 연결되어 있어야 한다.\n\n\n\n정사각형 타일의 장수가 주어지면, 이들을 위에서 설명한 규칙에 맞게 이어 붙여 만들 수 있는 도형 둘레의 최솟값을 구하여라. 하나의 입력에서 T$T$개의 테스트 케이스를 해결해야 한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30685","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t성현이는 바나나 푸딩을 만들기 위해 먼저 버터를 녹이려고 한다. 이를 위해 양쪽으로 무한히 뻗은 직선 모양의 프라이팬에 각각 홀수 높이의 버터 N$N$개를 올려놓고, 열을 가해서 버터를 녹인다. 위치가 x$x$인 곳에 올려진 버터는 처음에 구간 [x,x]$[x,x]$를 차지하고, 열을 가하면 처음 버터가 올려진 부분의 높이가 1이 될 때까지 1초에 좌우로 1씩 퍼지게 된다. 즉, [L,R]$[L,R]$이었던 버터는 1초 후 [L−1,R+1]$[L-1,R+1]$를 차지하게 된다. 다음 예시는 위치 x=5$x=5$, 높이 h=7$h=7$인 버터가 녹는 과정이다.\n\n\n\t\n\t\t\n\t\t\t \n\t\t\t0\n\t\t\t1\n\t\t\t2\n\t\t\t3\n\t\t\t4\n\t\t\t5\n\t\t\t6\n\t\t\t7\n\t\t\t8\n\t\t\t9\n\t\t\n\t\t\n\t\t\t0초\n\t\t\t0\n\t\t\t0\n\t\t\t0\n\t\t\t0\n\t\t\t0\n\t\t\t7\n\t\t\t0\n\t\t\t0\n\t\t\t0\n\t\t\t0\n\t\t\n\t\t\n\t\t\t1초\n\t\t\t0\n\t\t\t0\n\t\t\t0\n\t\t\t0\n\t\t\t1\n\t\t\t5\n\t\t\t1\n\t\t\t0\n\t\t\t0\n\t\t\t0\n\t\t\n\t\t\n\t\t\t2초\n\t\t\t0\n\t\t\t0\n\t\t\t0\n\t\t\t1\n\t\t\t1\n\t\t\t3\n\t\t\t1\n\t\t\t1\n\t\t\t0\n\t\t\t0\n\t\t\n\t\t\n\t\t\t3초\n\t\t\t0\n\t\t\t0\n\t\t\t1\n\t\t\t1\n\t\t\t1\n\t\t\t1\n\t\t\t1\n\t\t\t1\n\t\t\t1\n\t\t\t0\n\t\t\n\t\t\n\t\t\t4초\n\t\t\t0\n\t\t\t0\n\t\t\t1\n\t\t\t1\n\t\t\t1\n\t\t\t1\n\t\t\t1\n\t\t\t1\n\t\t\t1\n\t\t\t0\n\t\t\n\t\n\n\n이때 서로 다른 두 버터가 녹아서 섞이게 될 수 있다. 두 버터가 섞인다는 것은, 두 버터가 각각 [l1,r1]$[l_1,r_1]$와 [l2,r2]$[l_2,r_2]$에 놓였을 때 겹치는 구간이 생기는 것을 의미한다. 즉, [l1,r1]∩[l2,r2]≠∅$[l_1,r_1] \\cap [l_2,r_2] \\neq \\emptyset$ 인 경우이다. 다음은 예제 1번의 상황을 그림으로 나타낸 것이다.\n\n\n\n2초의 상황으로 두 버터가 섞이지 않는다.\n\n\n\n3초까지 가열하면 x=2$x=2$에서 섞이게 된다.\n\n성현이는 어떤 두 버터도 섞이지 않을 때까지만 버터를 녹이고 싶다. 그러나 성현이는 정수 시간만큼만 가열할 수 있다. 즉, 3초나 4초를 가열할 수는 있지만, 3.5초나 3.105초를 가열할 수는 없다. 직선 모양의 프라이팬에 처음 버터를 놓은 위치 x$x$와 버터의 높이 h$h$가 N$N$개 주어졌을 때, 성현이가 얼마나 오랜 시간 버터를 가열할 수 있는지 알아보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30686","content":"문제\n\n성현이가 배우는 과목은 \nN\n$N$개의 지식을 포함한다. 지식은 1부터 \nN\n$N$까지의 정수로 나타낼 수 있다.\n\n성현이는 \nM\n$M$개의 모든 문제를 풀어서 제출해야 한다. 한 문제를 푸는 데는 하루가 걸리고, 성현이는 문제를 푸는 순서를 마음대로 정할 수 있다. 따라서 성현이는 1일, 2일, \n⋯\n$\\cdots$, \nM\n$M$일에 문제를 각각 하나씩 풀어야 한다.\n\n각 문제를 풀기 위해서는 각 문제가 요구하는 지식이 필요하다. \ni\n$i$번째 문제를 해결하기 위해서는 \nai,1\n$a_{i,1}$번, \nai,2\n$a_{i,2}$번, \n⋯\n$\\cdots$, \nai,ki\n$a_{i,k_i}$번의 총 \nki\n$k_i$개의 지식이 필요하다.\n\n또한 지식은 배운 순간부터 어느 정도의 시간이 지나면 까먹게 되는데, \nn\n$n$번 지식은 공부한 날로부터 \ndn\n$d_n$일이 지나면 까먹게 된다. 즉, 성현이가 \nn\n$n$번 지식을 \nx\n$x$일에 공부하면, \n(x+dn)\n$(x+d_n)$일에 성현이는 \nn\n$n$번 지식을 까먹은 상태가 된다. 그래서 \n(x+dn)\n$(x+d_n)$일에 성현이는 지식을 다시 공부해야 할 수도 있다. 성현이는 하루에 여러 개의 지식을 동시에 배울 수도 있다.\n\n성현이는 최소 횟수로 지식을 공부하고 \nM\n$M$개의 문제를 해결하고 싶다. 성현이가 모든 문제를 해결하기 위해 지식을 공부해야 하는 최소 횟수를 구해보자."},{"problemId":"30705","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t고려대학교는 특이하게 매일 첫 번째 수업을 시작할 때부터 마지막 수업이 끝날 때까지 비가 온다고 한다. 비 맞는 것을 싫어하는 근호는 학교 건물을 연결하는 길목들에 거대한 파라솔을 설치하여 비를 피하려고 한다.\n\n고려대학교는 아래와 같이 N$N$개의 건물이 일렬로 배치된 형태이다. 왼쪽에 있는 건물부터 순서대로 1$1$번 건물, 2$2$번 건물, ⋯$\\cdots$, N$N$번 건물이고, 인접한 건물 사이에는 두 건물을 직접 연결하는 길목이 있다. 파라솔은 각 길목당 하나씩 설치할 수 있으며, 파라솔이 설치된 길목은 지나갈 때 비를 맞지 않는다.\n\n\n\n근호는 한 학기 동안 고려대학교에서 수업을 들을 것이다. 한 학기는 M$M$일이고, i(1≤i≤M)$i(1\\leq i\\leq M)$번째 날에는 Ai$A_i$번 건물부터 Bi$B_i$번 건물 사이에 있는 건물들에서 수업을 듣는다. 근호가 i$i$번째 날에 비를 맞지 않으려면 i$i$번째 날 수업을 듣기 전에 Ai$A_i$번 건물과 Bi$B_i$번 건물 사이에 있는 모든 길목에 파라솔이 설치되어 있어야 한다.\n\n그래서 근호는 학기 중 매일 아침, 등교해서 수업을 듣기 전에 원하는 길목에 파라솔을 설치하기로 했다. 파라솔을 설치하는 데는 시간이 걸리기 때문에, 매일 아침에 설치할 수 있는 파라솔의 개수는 최대 1$1$개이다.\n\n하지만 근호는 매일 아침에 파라솔을 설치하는 것만으로는 수업 시간표에 맞춰 파라솔을 모두 설치할 수 없을 것임을 깨닫고, 학기가 시작되기 전에 미리 파라솔을 몇 개 설치하려고 한다.\n\n근호가 한 학기 동안 비를 한 번도 맞지 않으려면 학기가 시작되기 전에 최소 몇 개의 길목에 파라솔을 미리 설치해야 하는가? 처음에는 모든 길목에 파라솔이 설치되어 있지 않고, 한 번 설치한 파라솔은 학기가 끝날 때까지 설치된 상태를 유지한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30960","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t조별 과제를 위해서 수강생 N$N$명의 사람의 조를 편성하려고 한다. 모든 사람은 정확히 한 개의 조에 속해야 한다. 원래 한 조는 2$2$명으로 이루어져야 하지만, N$N$이 홀수이기 때문에 단 하나의 조는 3$3$명으로 이루어진다. 다른 N−32$\\frac{N-3}{2}$개의 조는 2$2$명으로 이루어진다.\n\n성공적인 조별 과제를 위해서는 화기애애한 분위기가 중요하다. 각 학생에게는 고유한 학번이 있으며, 어떤 조의 어색함은 해당 조에 속한 사람의 학번 중 최댓값과 최솟값의 차이로 계산된다.\n\n조를 적절히 편성해서, 편성된 모든 조의 어색함의 합을 최소화하자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30706","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tKCPC는 고려대학교의 ALPS, AlKor, MatKor 세 동아리가 연합하여 개최한다.\n\n고려대학교는 이차원 평면으로 나타낼 수 있다. 이 평면 위의 격자점에 여러 건물이 있으며, 각 건물은 ALPS, AlKor, MatKor 중 한 동아리가 관리한다. 각 건물에는 서로 다른 모양의 도장이 있다.\n\nKCPC를 개최하기 위해서는 서류에 ALPS, AlKor, MatKor의 순서대로 도장을 받아야 한다. 따라서 MatKor 회장인 동우는 ALPS, AlKor, MatKor 순서대로 각각이 관리하는 건물 중 하나씩을 고른다. 고른 세 건물을 각각 A$A$, B$B$, C$C$라 하면, 동우는 건물 C$C$에서 출발하여 A$A$, B$B$를 거쳐 다시 C$C$로 돌아오며 도장을 받아 서류를 완성한다.\n\n동우는 서류를 완성하는 과정에서 에너지를 소모하게 되는데, 에너지 소모량은 다음과 같이 계산한다:\n\n기본적으로 두 건물 사이의 거리의 제곱의 합, 즉, AB―2+BC―2+CA―2$\\overline{AB}^2+\\overline{BC}^2+\\overline{CA}^2$ 만큼의 에너지를 소모한다.\n\n그리고 동우는 왼쪽 다리가 길기 때문에 시계방향으로 회전하는 것이 편하다. 이에 따라 에너지를 덜 소모하거나 더 소모하는데, 세 건물의 위치가 S△ABC$S_{\\triangle ABC}$의 넓이를 가진 삼각형을 이룬다고 할 때, A$A$, B$B$, C$C$가 순서대로 시계방향을 이룬다면 2S△ABC$2S_{\\triangle ABC}$만큼의 에너지를 덜 소모하며, 반시계방향을 이룬다면 2S△ABC$2S_{\\triangle ABC}$만큼의 에너지를 더 소모한다. 세 점이 한 직선 위에 있다면 덜 소모하거나 더 소모하는 에너지는 없다.\n\n동우는 세 건물을 선택할 수 있는 모든 경우마다 서류를 완성하고자 한다. 건물들의 위치가 주어졌을 때, 동우가 건물을 선택할 수 있는 모든 경우에 대해 서류를 완성하기 위해 필요한 동우가 소모하는 총 에너지를 구하여라. 총 에너지는 각각의 서류를 완성하기 위해 필요한 에너지 값의 합이다. 정답이 매우 클 수 있으므로 109+7$10^9+7$로 나눈 나머지를 출력하자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30687","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t크기가 1$1$, 2$2$, ⋯$\\cdots$, N$N$인 피자가 각각 a1$a_1$, a2$a_2$, ⋯$\\cdots$, aN$a_N$개씩 있다. 이 피자들을 중심이 서로 겹치도록 쌓으려고 한다.\n\n이때 가능한 모든 순서에 대해, 위에서 내려다봤을 때 보이는 피자의 개수의 합을 구해보자. 어떤 피자가 \"보인다\"는 것은, 그 피자 위에 쌓인 모든 피자들보다 크다는 것이다.\n\n크기가 같은 피자들은 구분되지 않는다. 즉 크기가 같은 피자들끼리의 순서는 고려하지 않는다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30961","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t수열의 힘은 수열의 최솟값과 최댓값을 곱한 값이다. 길이가 N$N$인 수열 A$A$가 주어질 때, 이 수열에서 길이가 1$1$ 이상인 모든 부분수열 각각의 힘을 구하여 모두 XOR한 값을 구하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30940","content":"문제\n\nZrakoplović the penguin wants to learn how to fly!\n\nThe space in which he will learn to fly can be imagined as a cube of dimensions \nn×n×n\n$n \\times n \\times n$, divided into \nn3\n$n^3$ unit cubes. Each unit cube can be described with three coordinates \n(x,y,z)\n$(x, y, z)$, where \nx\n$x$, \ny\n$y$ and \nz\n$z$ are integers between \n1\n$1$ and \nn\n$n$. The coordinate \nx\n$x$ denotes the distance from the left edge of the space, the coordinate \ny\n$y$ denotes the distance from the front edge of the space, and the coordinate \nz\n$z$ denotes the height.\n\nSome of these unit cubes contain clouds, and some do not.\n\nZrakoplović is afraid of clouds, so he will learn to fly only where there are no clouds. He initially finds himself at a position \n(xs,ys,zs)\n$(x_s, y_s, z_s)$, such that \nzs=1\n$z_s = 1$ (i.e. at height \n1\n$1$), and wants to get to position \n(xe,ye,ze)\n$(x_e, y_e, z_e)$.\n\nAt the moment, he is perfecting the skill of flying in directions that are parallel to one of the axes of space (i.e. in the direction of the \nx\n$x$-axis, \ny\n$y$-axis or \nz\n$z$-axis), and in one wing flap he can cross at most one unit cube.\n\nBefore he decides to fly, Zrakoplović wants to know how many wing flaps he needs to get to the desired position. While he is preparing for the flight, help him answer that question."},{"problemId":"30707","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t그래프의 스패닝 트리란, 그래프의 모든 정점이 서로 연결되어 있고 사이클이 없는 부분 그래프를 뜻한다. 그래프의 스패닝 트리들 중 간선들의 가중치의 합이 최소가 되는 것을 그 그래프의 최소 스패닝 트리라고 한다. 그래프에서 최소 스패닝 트리를 구하는 대표적인 알고리즘으로 크루스칼 알고리즘과 프림 알고리즘이 있다.\n\n이제 아래의 조건을 만족하는 그래프 G$G$를 하나 찾아서 출력해보자.\n\n\n\t그래프 G$G$는 N$N$개의 정점, M$M$개의 간선으로 이루어진 그래프이다.\n\t그래프 G$G$에는 자기 자신을 연결하는 간선(self-loop)이 없으며, 임의의 서로 다른 두 정점 사이를 잇는 간선은 최대 하나 존재한다.\n\t그래프 G$G$의 각 간선에는 가중치가 있으며, 1≤i≤M$1\\leq i\\leq M$을 만족하는 모든 정수 i$i$에 대해 가중치가 i$i$인 간선이 정확히 한 개 존재한다.\n\t그래프 G$G$의 최소 스패닝 트리의 간선 가중치 합이 S$S$이다.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30962","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t다음과 같은 형태의 쿼리 Q$Q$개가 주어질 때, 각 쿼리에 대해 조건을 만족하는 정수 좌표 점의 개수를 출력하라.\n\n\n\t x1,y1,x2,y2,w$x_1, y_1, x_2, y_2, w$: 센서가 존재하는 원점 (0,0)$(0, 0)$을 기준으로, 점 (x1,y1)$(x_1, y_1)$를 포함하는 각도부터 시계방향으로 점 (x2,y2)$(x_2, y_2)$를 포함하는 각도까지를 센서에서 스캔했을 때, 해당 각도에 포함된 점들 중 센서와의 거리가 w$\\sqrt{w}$여야 한다. (단, 세 점 (0,0),(x1,y1),(x2,y2)$(0, 0),(x_1, y_1),(x_2, y_2)$은 일직선상에 있지 않으며, 시계방향으로 배치되어있다.)\n\n\n센서의 크기는 무시해도 될 정도로 작다. 즉, 0$0$으로 생각해도 무방하다. 모든 입력은 정수이다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30963","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t인형 뽑기 기계를 실행시킬 때마다 랜덤하게 p=ab$p = \\frac{a}{b}$ 확률로 인형이 나온다. 단, 직전 c−1$c - 1$번의 실행 중 인형이 하나도 나오지 않았다면 확률과 관계없이 확정적으로 인형이 나온다.\n\n p$p$, c$c$, n$n$이 주어지면, n$n$ 이하의 모든 자연수 k$k$에 대하여, 기계를 정확히 k$k$번 실행시킨 시점에 얻는 인형 개수의 기댓값을 구하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30708","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t당신의 손에 카드가 N$N$장 있고, 각 카드에는 양의 정수가 하나씩 쓰여 있다. 각 i(1≤i≤N)$i(1\\leq i\\leq N)$에 대해 i$i$번째 카드에는 양의 정수 Xi$X_i$가 쓰여 있다. 같은 숫가 적힌 카드가 여러 장 있을 수도 있다.\n\n당신은 손에 있는 카드를 다음과 같은 규칙에 따라 탁자에 모두 놓아야 한다.\n\n탁자에는 카드를 한 번에 한 장씩만 놓을 수 있다. 첫 카드는 아무거나 놓을 수 있지만, 두 번째 카드부터는 바로 이전에 놓은 카드에 적힌 숫보다 수가 1$1$만큼 크거나 작은 카드만 놓을 수 있다. 가령, 처음에 3$3$이 적힌 카드를 놓았으면 그다음에는 2$2$ 또는 4$4$가 적힌 카드를 놓을 수 있고, 그 외의 카드는 놓지 못한다.\n\n당신이 손에 든 카드의 정보가 주어졌을 때, 이 카드들을 주어진 규칙을 지키면서 탁자에 모두 놓을 수 있는 방법을 찾아라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30688","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA, B, C는 님 게임을 하기로 했다. 님 게임에서는 N$N$개의 돌이 주어지고 각 사람이 차례대로 턴을 번갈아 가며 게임을 진행한다. 자신의 턴이 되면 1 이상 K$K$ 이하의 정수 중 원하는 정수를 골라 그만큼의 돌을 가져갈 수 있다. 마지막 돌을 가져가는 사람이 승리한다.\n\n세 명은 A, B, C 순서대로 게임을 진행한다.\n\nC는 워낙 게임을 잘하기 때문에, A, B는 둘이 팀을 맺고 C를 상대하기로 했다. 즉 A와 B 중 누가 이기더라도 둘은 동시에 이긴다. 하지만 이렇게 게임을 해 본 결과, C가 매우 불리하다는 사실을 알 수 있었다.\n\n따라서 규칙을 바꿔 A와 B는 각각 1 이상 K2$K\\over2$ 이하의 정수만을 골라 돌을 가져갈 수 있도록 규칙을 수정하였다. 각 플레이어들이 모두 최선의 전략으로 플레이하였을 때, 어느 팀이 이길지 출력하자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30964","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t mex$\\mathrm{mex}$는 주어진 수열에 없는 0$0$ 이상의 정수 중 가장 작은 것을 가리키는 함수이다. 준서는 mex$\\mathrm{mex}$를 좋아하는 시우를 위해 N$N$장의 카드로 하는 놀이를 만들었다. \n\n규칙은 다음과 같으며, 1$1$번 단계부터 N$N$번 단계까지 진행한다.\n\n\n\t i$i$번 단계에서, 준서가 i$i$번 카드를 테이블에 놓는다. 카드의 앞면과 뒷면에는 각각 0$0$ 이상의 정수 Ai$A_i$, Bi$B_i$가 적혀 있다.\n\t시우는 테이블에 있는 i$i$개의 카드를 뒤집는 2i$2^i$가지 경우 각각에 대해, 위를 향한 면에 적힌 수들을 수열로 보고 mex$\\mathrm{mex}$ 값을 계산한다. 이후, 가능한 mex$\\mathrm{mex}$ 값의 가짓수를 말한다.\n\t준서는 시우의 답을 확인하고 i+1$i + 1$번 단계로 넘어간다.\n\n\n시우를 도와, 각 단계에서 시우가 말해야 하는 답을 찾아주자. \n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30941","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn one city there is a tall skyscraper with n$n$ floors. There are n$n$ people waiting for an elevator on the ground floor. The i$i$-th person wants to go to the floor ai$a_i$. There is no pair of people who want to go to the same floor.\n\nThe skyscraper has one elevator that is large enough for all people to fit in, but it is so narrow that two people cannot stand side by side; they must be one behind the other.\n\nEverybody got in the elevator, but they had not thought about the order in which they have to exit it! Initially, the i$i$-th person is at position i$i$, looking from the elevator door. If a person wants to exit the elevator, everybody in front of them (closer to the door) must temporarily exit the elevator too. When returning back in the elevator, they can reorder themselves as they wish. People who are behind (further to the door) the person who wants to exit will not exit the elevator.\n\n\n\nThe illustration above shows the starting order of people in the elevator in the first example. The elevator is on floor 1$1$, and the person in position 3$3$ wants to exit. For them to exit, persons at positions 1$1$ and 2$2$ must exit too.\n\nMirko is viewing the situation they are in and contemplating. He wants to know how many exits from the elevator would there be be if the people returning to the elevator always returned optimally. If a person exits the elevator multiple times, each time is counted separately.\n\nMirko is an experienced coder, and he can solvee this problem quite easily. His happiness is short-lived, because next to him is his friend Slavko. Slavko came up with q$q$ questions: If the person at position xi$x_i$ were not in the elevator, how many exits would there be then?\n\nMirko is interested in an answer before Slavko’s first question and after every question. Note that for each question, all the people from previous questions are also not considered to be in the elevator. Mirko started solving the problem but soon realized that even for him, this would not be quite easy. Help him solve this problem!\n\nNote: The elevator will always move from the first floor to the n$n$-th floor and stop at every floor on which someone wants to exit.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30965","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t2033년, 시우는 10년의 고행 끝에 양손으로 동시에 서로 다른 도형 그리기의 달인이 되었다. 시우는 수련 10주년을 기념해 Q$Q$개의 장소로 순회공연을 돌려고 한다. 차별성을 주기 위하여, 시우는 길이 N$N$의 수열 A$A$를 두고 각 공연마다 정해진 구간 [l,r]$[l, r]$에서 l≤i<j≤r$l \\le i < j \\le r$인 i$i$, j$j$를 골라 다음처럼 공연을 진행한다.\n\n\n\t왼손으로는 완성하는 데에 a$a$초가 걸리는 원을 반복해 그린다.\n\t오른손으로는 처음에 1$1$초간 손인사를 한 뒤 완성에 Ai×Aj$A_i \\times A_j$초가 걸리는 삼각형을 반복해 그린다.\n\t완성과 반복 사이에는 조금의 멈춤도 없으며, 공연은 두 도형이 정확히 동일한 시점에 완성되는 순간 종료된다.\n\n\n삼각형을 그리는 것은 매우 힘들기 때문에, 시우는 최대한 적은 개수의 삼각형을 그리려고 한다. 단, 삼각형을 하나도 그리지 않고 공연을 마치는 것은 불가능하다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30709","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t N$N$개의 도시와 이들을 연결하는 단방향 도로들로 이루어진 국가가 있다. 외판원은 가방에 있는 로봇 한 대와 함께 도시들을 순회하려 한다.\n\n외판원과 로봇은 N$N$개의 도시 중 원하는 시작 도시에서 출발할 수 있으며, 모든 도시를 외판원 또는 로봇이 적어도 한 번은 방문해야 순회를 마칠 수 있다. 순회를 시작할 때 로봇은 외판원의 가방 안에 있으며, 순회를 마치려면 로봇이 외판원의 가방 안에 있어야 한다. 순회를 시작 도시가 아닌 곳에서 마쳐도 상관없다.\n\n외판원은 순회 중 본인의 가방에 있는 로봇을 꺼내 현 도시에 배치할 수 있다. 배치한 로봇은 외판원이 실시간으로 조종할 수 있으며, 로봇이 움직이는 동안 외판원 역시 자유롭게 움직일 수 있다. 외판원과 로봇 모두 매 순간 도로를 따라가거나 도시에서 멈추어 있을 수 있다. 어떤 도시에서 외판원과 로봇이 만났을 경우 외판원은 로봇을 다시 본인의 가방에 넣을 수 있다. 로봇을 가방에서 꺼내거나 넣는 것은 도시에서만 가능하며, 도로를 지나가는 중에는 할 수 없음에 유의하라.\n\n외판원은 가방에 로봇이 들어 있는지 여부와 상관없이 1$1$미터를 이동하는데 U$U$의 시간이 걸리며, 배치된 로봇은 1$1$미터를 이동하는데 V$V$의 시간이 걸린다. 외판원이 가방에서 로봇을 꺼내거나 로봇을 가방에 넣는 데는 시간이 걸리지 않는다.\n\n도로망과 외판원, 로봇의 속도에 대한 정보가 주어졌을 때, 외판원이 순회를 마치는 데 걸리는 최소 시간을 구하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30966","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t사람 N$N$명의 관심사가 주어질 때, 각자에게 가장 관심사가 많이 겹치는 사람을 추천해 주려고 한다. 이 때, 각 사람과 추천된 사람 간 공통 관심사 개수의 합을 출력하여라.\n\n관심사의 주제 종류는 24$24$가지이며, 각 사람은 각 주제에 관심이 있거나 없을 수 있다. 관심사가 완전히 동일한 사람이 둘 이상 존재할 수 있다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30689","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t각 칸에 '상', '하', '좌', '우' 중 하나가 표시되어 있고 세로로 N$N$칸, 가로로 M$M$칸인 N×M$N \\times M$ 크기의 미로가 있다. 해당 칸으로 도착한 모든 사람은 미로에 표시된 방향으로 한 칸 이동한다. 이를 반복해 미로 밖으로 벗어나면 미로에서 탈출할 수 있다.\n\n\n\n해당 그림의 파란색 경로는 미로에서 탈출하는 예시이다. 하지만 운이 나쁘다면 그림의 빨간색 경로와 같이 영원히 미로에서 탈출하지 못할 수도 있다! 영원히 탈출하지 못하는 상황을 막기 위해, 형진이는 미로를 보수하기로 했다.\n\n\n\n형진이는 미로에 원하는 만큼 점프대를 설치할 수 있다. 점프대를 설치하면 해당 위치에 도착한 사람들은 점프를 통해 바로 미로 밖으로 빠져나올 수 있다.\n\n점프대를 설치하기 위해서는 해당 칸의 지리적 조건 등을 고려해야 하므로, 어느 칸에 설치하냐에 따라 점프대의 비용이 달라진다. 정확하게는 i$i$행 j$j$열의 칸에 점프대를 설치하는 것은 Costi,j$Cost_{i,j}$ 만큼의 비용이 필요하다.\n\n주어진 미로에서 최소한의 비용을 사용해 점프대를 설치해, 미로의 어느 칸에서 시작하더라도 탈출할 수 있도록 만들고 싶다. 필요한 최소한의 비용을 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30967","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t길이가 N$N$인 순열 A$A$가 주어진다. 1≤i≤j<k≤l≤N$1 \\le i \\le j < k \\le l \\le N$인 모든 가능한 (i,j,k,l)$(i, j, k, l)$에 대해, A$A$에서 [i,j]$[i, j]$ 구간과 [k,l]$[k, l]$ 구간을 삭제했을 때의 최댓값의 합을 구하여라. 비어있는 배열의 최댓값은 0$0$으로 가정한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30942","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tChristmas time is approaching, the most beautiful time of the year. Our protagonists, Marin and Josip, have returned from Christmas shopping and have started decorating their Christmas tree.\n\nThey bought n$n$ Christmas ornaments arranged next to each other in an elongated box, and the i$i$-th ornament has the color ai$a_i$. The box is open on both sides, so the ornaments can be taken out from both the left and the right side of the box. The box is transparent, so Marin and Josip can see the color of each ornament.\n\n\n\nThe illustration shows the initial state of the box in the second example. On his first move, Marin can draw either an ornament of color 1$1$ from the left end of the box or an ornament of color 3$3$ from the right end of the box.\n\nJosip came up with a game that would make decorating the tree even more fun, although it’s already a lot of fun by itself. The game works as follows: Marin and Josip take turns, and Marin starts the game. The player in turn draws an ornament from the box (either from the left or the right end of the box) and places it on the tree. If they draw an ornament whose color has not been drawn yet, the player scores a point. The game ends when the last ornament is drawn from the box.\n\nThe winner of the game is the player who has scored more points, so both Marin and Josip want to maximize their number of points. Since both of them are excellent players, they will play optimally. Your task is to print the result at the end of the game.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30710","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t기현이는 카드 N$N$장을 가지고 있으며, 각 카드에는 양의 정수가 하나씩 쓰여 있다. 기현이는 카드 N$N$장을 보기 좋게 탁자에 일렬로 늘어놓았다.\n\n하지만 주원이는 카드 배열이 마음에 들지 않아, 기현이 몰래 카드 배열을 바꾸려고 한다. 주원이는 탁자에 놓인 카드들 중 두 장을 골라 교환하는 과정을 반복하여 원하는 순서로 카드를 재배열하려고 한다.\n\n그러나 아무 카드나 골라 교환하면 기현이에게 들킬 수 있기 때문에, 기현이가 눈치채지 못하게 카드를 교환해야 한다.\n\n기현이는 두 카드의 정수를 배타적 논리합(Bitwise XOR)한 결과와 두 카드의 정수의 합의 차이가 K$K$이하면 두 카드가 교환되어도 눈치채지 못한다.\n\n다시 말해, 카드 X$X$에 적힌 정수를 A$A$, 카드 Y$Y$에 적힌 정수를 B$B$라고 하자. |(A⊕B)−(A+B)|≤K$\\left\\vert (A\\oplus B) -(A+B) \\right\\vert\\leq K$를 만족한다면 두 카드 X$X$, Y$Y$를 들키지 않고 몰래 교환할 수 있다. 여기서 ⊕$\\oplus$는 Bitwise XOR을 나타내는 연산자이고, K$K$는 교환 전에 미리 정해진 상수이다.\n\n초기 카드의 배열이 주어졌을 때, 가능한 최종 배열의 가짓수를 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30968","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t리베 여학원의 정원에는 아름다운 백합이 핀다. 이 백합이 만개한다면 얼마나 좋을까? 시라사기 히메는 슈베스타인 아야노코지 미츠키에게 그저 백합이 활짝 핀 아름다운 광경을 보여주고 싶었다.\n\n리베 여학원에는 여러 개의 쉼터와 산책로로 이루어진 정원이 있다. 한 산책로는 서로 다른 두 쉼터를 양방향으로 잇는다. 서로 다른 두 산책로가 같은 쌍의 쉼터를 연결하는 경우는 없다. 시라사기 히메는 산책로를 산책하면서 백합을 가꾸기로 했다. 하루에 한 번 하는 산책에서는 한 쉼터에서 시작해서 여러 쉼터들을 방문한 후 처음 시작한 쉼터로 돌아온다. 단, 쉼터 사이를 이동할 때는 산책로를 사용해야 하고, 처음 방문한 쉼터로 돌아오기 전에는 같은 쉼터를 두 번 이상 방문할 수 없다. 또한, 한 번 산책을 할 때는 세 곳 이상의 쉼터를 방문해야한다.\n\n히메는 여러 날 동안 산책을 하며, 산책로를 방문할 때마다 산책로에 있는 백합에 물을 준다. 물을 너무 많이 주면 뿌리가 썩어버릴 것이고 너무 적게 주면 잎이 마를 것이기에, 히메는 모든 산책로에 있는 백합에게 정확히 4$4$번씩 물을 주려고 한다. 히메가 모든 산책로에 적절히 물을 줄 수 있도록 히메의 산책 계획을 정해주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30969","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이 문제는 \"진주로 가자! (Easy)\" 문제와 입력으로 주어지는 수의 범위를 제외하면 같은 문제이다. 그리고 언어 제한과 메모리 제한을 꼭 확인하자.\n\n서울살이에 지쳐버린 경상국립대 졸업생 보선이는 대학생이었던 시절이 그리워졌고, 오랜만에 경상국립대가 있는 진주에 가고 싶어졌다. 그래서 보선이는 진주로 당일치기 나들이를 가기 위해 무작정 서울 터미널에 도착했다.\n\n서울 터미널에는 N$N$개의 교통편이 있다. 각 교통편의 정보는 도착지와 요금으로 이루어져 있으며, 모든 도착지는 서로 다르다. 그리고 주어지는 도착지에는 진주로 가는 교통편을 의미하는 jinju가 반드시 존재한다.\n\n요즘 물가 인상이 걱정되는 보선이는 진주로 가는 교통편의 요금을 알아보면서 그보다 비싼 교통편의 개수 또한 같이 알아보려고 한다. 하지만 보선이는 이미 지쳐버린 상태라 N$N$개의 교통편을 살펴볼 힘이 없었다. 그래서 보선이는 자신이 알아보고자 한 정보를 우리에게 대신 알아봐달라고 부탁했다.\n\n자, 이제 보선이의 부탁을 들어주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30711","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tВсе олимпиады, упоминаемые в данном условии, являются вымышленными. Любое совпадение с какой-либо реально существующей олимпиадой является случайным и не умышленным.\n\nДлинный отборочный тур Открытой олимпиады школьников подошёл к концу, и настало время объявить список участников короткого тура.\n\nКак известно, отбор на заключительный этап Открытой олимпиады производится по сумме результатов длинного и короткого отборочных туров: участники сортируются по убыванию суммы баллов, полученных ими на длинном и коротком отборочных турах, и в заключительный этап олимпиады проходят участники, набравшие не меньше баллов, чем участник на p$p$-м месте по сумме результатов отборочных туров.\n\nМожно заметить, что не всех участников длинного отборочного тура следует приглашать на короткий: некоторые участники пройдут на заключительный этап даже если не будут участвовать в коротком туре (в этом случае их результат в коротком туре равен 0$0$ баллам), а некоторые участники не пройдут на заключительный этап даже если наберут на коротком туре полный балл. Остальные участники могут как пройти, так и не пройти на заключительный этап олимпиады в зависимости от своих результатов на коротком туре и результатов других участников на этом туре. Именно таких участников, для которых ещё не определён однозначно статус прохода или не прохода на заключительный этап, хочет пригласить на короткий тур жюри олимпиады.\n\nПомогите жюри олимпиады и сообщите, каких участников следует пригласить на короткий тур.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30690","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t모르고리즘 동방에는 기차 선로를 조립해 볼 수 있는 장난감이 있다. 민규는 1$1$부터 N$N$까지의 번호가 붙은 N$N$개의 기차역을 N−1$N-1$개의 선로들로 연결하였고, i$i$번째 선로는 ui$u_i$번 역과 vi$v_i$번 역을 연결한다. 어떤 기차역에서도 선로를 통해 다른 기차역으로 도달하는 길이 존재한다. 서로 다른 두 역 사이에는 최대 1$1$개의 선로가 존재한다.\n\n민규는 다음 작업을 Q$Q$번 반복한다.\n\n\n\t j$j$번째 작업에서, pj$p_j$번 역과 qj$q_j$번 역을 연결하는 선로를 뺀다.\n\t뺀 선로를 원하는 서로 다른 두 역 사이에 놓는다. 두 역이 이미 한 개 이상의 선로로 연결되어 있으면 선로를 놓을 수 없으며, 선로가 원래 있던 자리에 다시 놓을 수 있다.\n\t새롭게 완성된 선로에서 원하는 출발 역과 도착 역을 한 번 골라 기차를 출발 역에 놓고 도착 역까지 움직인다. 이때 한 번 지난 역을 다시 지날 수 없다.\n\t뺀 선로를 원래 자리로 되돌려 놓는다.\n\n\n민규는 오랫동안 장난감을 갖고 놀고 싶기 때문에, 각 작업에서 선로를 적절한 위치에 놓고 출발 및 도착 역을 적절히 골라 기차가 지나는 선로의 개수를 최대화하려고 한다. Q$Q$개의 작업에서 민규가 뺀 선로가 주어질 때, 기차가 지나는 선로의 개수를 최대화해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30970","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n[사진] 촉석루\n\n\n\n품질이냐 가격이냐, 그것이 문제로다..\n\n\n진주 나들이를 온 보선이는 기념품으로 촉석루 미니어처를 사기로 했다. 촉석루는 진주성에 있는 누각이며 경상남도 유형문화재 중 하나로, 진주성의 남쪽 지휘대로 사용됨과 동시에 논개가 촉석루 앞 의암에서 순국한 것으로 알려져 유명한 곳이다.\n\n촉석루 미니어처를 사기 위해 기념품 가게에 들른 보선이는 놀라움을 금치 못했다. 왜냐하면, 가게에는 각양각색의 촉석루 미니어처가 진열되어 있었기 때문이다. 그리고 모든 촉석루 미니어처는 장인이 한 땀 한 땀 심혈을 기울여서 만들어서 그런지 품질과 가격이 천차만별이었고, 품질과 가격이 전부 동일한 두 촉석루 미니어처는 없었다. 각양각색의 촉석루 미니어처를 본 보선이는 물욕이 폭발할 뻔했지만 가까스로 마음을 진정시키고, 촉석루 미니어처를 두 개만 사기로 했다. 보선이는 두 가지 방법으로 촉석루 미니어처를 골라보기로 했는데, 이는 다음과 같다.\n\n\n\t진열되어 있는 촉석루 미니어처 중에서 품질이 가장 높은 촉석루 미니어처를 골라 가져온다. 만약 그런 미니어처가 여러 개라면 가격이 가장 낮은 것을 골라 가져온다. 이 과정을 두 번 반복하는 것이 첫 번째 방법이다.\n\t진열되어 있는 촉석루 미니어처 중에서 가격이 가장 낮은 촉석루 미니어처를 골라 가져온다. 만약 그런 미니어처가 여러 개라면 품질이 가장 높은 것을 골라 가져온다. 이 과정을 두 번 반복하는 것이 두 번째 방법이다.\n\n\n보선이가 각 방법에 따라 촉석루 미니어처들을 고르게 될 때 어떤 촉석루 미니어처들을 고르게 되는지 알아보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30712","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tМакс очень любит ходить с друзьями в сауну. Сегодня он снова посетил сауну и взял с собой n$n$ своих друзей. Макс знает, что каждый друг посетит парилку ровно один раз, более того для каждого друга он знает отрезок времени, в которое он будет находится в парилке (предположим, что время измеряется в секундах с начала прихода в сауну). Макс хочет тоже сходить в парилку, причём тоже ровно один раз, однако он ещё не выбрал, когда именно ему это сделать.\n\nМакс заботится о своей репутации. С точки зрения людей в бане, человек A$A$ круче человека B$B$, если A$A$ пришёл в парилку строго раньше B$B$, а ушёл строго позже B$B$ (тем самым показав, что он более стойкий). Назовём репутацией Макса количество людей, которые окажутся менее крутыми, чем он, минус количество людей, которые окажутся более крутыми, чем он.\n\nВсему есть предел, в частности, Макс не может находиться в парилке больше чем t$t$ секунд. Помогите ему выбрать оптимальный отрезок времени для пребывания в парилке, чтобы значение его репутации было как можно больше.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30943","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIt’s winter, it has never been colder, and Mr. Malnar is looking at his photos from his last cruise on the Adriatic and recalls unforgettable moments. The TV is on in the background, broadcasting news about the latest proposals for measures to slow down sea level rise. Looking at his photos of the coast, Mr. Malnar asks himself what the photos would have looked like if sea level had risen a certain amount. There are so many pictures, and even more questions, so Mr. Malnar asks for your help.\n\nWe imagine the coast as a sequence of n$n$ numbers h1,h2,…,hn$h_1, h_2, \\dots , h_n$, where the i$i$-th number represents relief height at the i$i$-th point. Mr. Malnar has q$q$ queries, where the i$i$-th query is as following: How many islands would there be between the li$l_i$-th and ri$r_i$-th point if the sea level rose by xi$x_i$ meters?\n\n\n\nThe left image shows the first query of the first sample test case, and the right image shows the second query of the second sample test case.\n\nThe left islands correspond to intervals [2,2]$[2, 2]$ and [4,5]$[4, 5]$.\n\nThe right islands correspond to intervals [1,1]$[1, 1]$, [4,4]$[4, 4]$, [8,8]$[8, 8]$ and [10,10]$[10, 10]$.\n\nAn island is defined as the maximal interval where every hi$h_i$ is strictly greater than the sea level. A maximal interval is one that cannot be extended in either direction while keeping the mentioned condition true. Initially, the sea level is at 0$0$ meters.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30691","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t트리 문제만 공부하다 정신이 돌아버린 형진이는, 트리를 뽀개기로 결정하였다.\n\n\n\n여기 N$N$개의 정점으로 이루어진, 간선에 가중치가 있는 트리가 있다. 이 트리는 항상 1번 노드가 트리의 루트가 된다.\n\n형진이는 슈퍼 트리 뽀개기를 1회 사용하여 이 트리를 뽀갤 수 있다. 트리의 특정 노드를 하나 선택한 후, 그 노드부터 거리가 K$K$ 이하에 있는 손자 노드 모두를 뽀개버린다.\n\n노드 사이의 거리는 다음과 같이 정의된다.\n\n\n\t노드 u$u$와 v$v$ 사이의 거리는, 노드 u$u$에서 노드 v$v$까지의 단순 경로에 포함되는 간선의 가중치의 총합이다.\n\n\n손자 노드는 다음과 같이 정의된다.\n\n\n\t루트까지의 단순 경로에 v$v$가 포함되는 모든 노드는 노드 v$v$의 손자 노드이다.\n\n\n\n\n다음은 K$K$ = 2일 때 트리를 뽀개는 예시이다. 왼쪽의 경우 1번 노드를 선택해 슈퍼 트리 뽀개기를 진행했고, 오른쪽의 경우 3번 노드를 선택해 슈퍼 트리 뽀개기를 진행했다. 각각 4, 5개의 노드가 뽀개졌다.\n\n형진이는 최대한 많은 노드를 뽀개고 싶다. 형진이를 도와 최대한 많은 노드를 뽀갰을 때 몇 개의 노드를 뽀갤 수 있는지 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30971","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t진주 나들이를 온 보선이는 배가 너무 고파 육회비빔밥을 먹기 위해 진주 대안동에 갔다. 그런데 이게 웬 떡? 육회비빔밥 시식 행사가 진행 중이었다. 대식가이자 미식가인 보선이는 육회비빔밥을 감칠맛이 최대한 나게끔 전부 먹으려고 한다. 하지만 전부 먹으려고 하니 아무리 뻔뻔한 보선이라도 시식대 직원의 눈치가 조금 보이기 시작했다. 그래서 각 시식대의 정보를 파악해서 전략적으로 먹기로 했다.\n\n육회비빔밥 시식대는 총 N$N$개가 있다. 각 시식대에는 육회비빔밥 한 그릇과 직원 1명이 있으며, 육회비빔밥의 단맛과 짠맛 그리고 그곳에 있는 직원이 눈치 주는 정도는 수치로 나타낼 수 있다. 보선이는 육회비빔밥이 남아 있는 시식대 중 하나를 골라서 갈 수 있으며, 한 시식대에 갈 때마다 그곳에 있는 육회비빔밥은 무조건 다 먹어야 한다.\n\n보선이가 i$i$번째로 간 시식대에 있는 육회비빔밥의 단맛과 짠맛을 각각 Ai$A_i$, Bi$B_i$라고 하였을 때, 보선이가 느낄 수 있는 총 감칠맛은 다음과 같이 정해진다.∑i=2N(Ai−1×Bi)$$\\sum_{i=2}^{N} \\pmatrix{A_{i-1} \\times B_i}$$ \n\n또한, 보선이는 첫 번째로 간 시식대에서는 눈치를 받지 않으나 두 번째로 간 시식대부터는 눈치를 받게 된다. 구체적으로, i$i$번째로 간 시식대에 있는 직원이 눈치 주는 정도를 Ci$C_i$라고 하였을 때, i(i≥2)$i(i≥2)$번째로 간 시식대에서 보선이가 눈치 받는 정도는 Ci−1×Ci\\(C_{i-1} \\times C_i\\)가 된다. 하지만 보선이는 K$K$만큼의 뻔뻔함의 정도를 지니고 있어서, 눈치 받는 정도가 K$K$ 이하라면 아랑곳하지 않고 그곳에 있는 육회비빔밥을 먹는다. 그렇지만 눈치 받는 정도가 K를 넘게 되면 그곳에 있는 육회비빔밥을 먹지 못하고 시식을 중단하게 된다.\n\n위와 같은 조건들을 고려해서 보선이가 육회비빔밥 N$N$그릇을 다 먹었을 때 느낄 수 있는 총 감칠맛의 최댓값을 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30713","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tКороль Берляндии решил в очередной раз провести дорожную реформу.\n\nБерляндия состоит из n$n$ городов, соединённых m$m$ односторонними дорогами. По каждой из дорог разрешается двигаться только в одну сторону. Двигаться по дороге в противоположную сторону запрещается.\n\nВо время реформы король планирует изменить направление у некоторых дорог так, чтобы существовал путь из города 1$1$ в город n$n$, проходящий только по дорогам. Из-за сложностей законодательства король может проводить только операции двух типов.\n\n\n\tВыбрать некоторый город u$u$. Рассмотрим все города v$v$ такие, что существует дорога между городами u$u$ и v$v$ (направление не важно) и изменим её направление так, чтобы она вела из города v$v$ в город u$u$.\n\tВыбрать некоторый город u$u$. Рассмотрим все города v$v$ такие, что существует дорога между городами u$u$ и v$v$ (направление не важно) и изменим её направление так, чтобы она вела из города u$u$ в город v$v$.\n\n\nВыполнение каждой из этих операций крайне затратно, поэтому короля интересует, какое минимальное количество операций ему придётся произвести, чтобы достичь своей цели. Помогите королю, сообщив ему минимальное количество операций, или определите, что король не сможет достичь своей цели ни за какое количество операций.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30972","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t진주 가까이에 있는 창원에 사는 아림이는 보선이가 진주 나들이를 온 사실을 알고 오랜만에 만나서 맥주나 마시자고 보선이에게 연락했다. 보선이도 반가운 마음에 알겠다고 즉답했지만, 뒤늦게 한 가지 사실을 떠올렸다. 그 사실은 바로 아림이는 맥주를 아무리 마셔도 취하지 않는 '맥주 한정 주당'이라는 것이었다. '소주 한정 주당' 보선이는 아림이와 맥주를 마시면 술에 진탕 취할 것이 뻔하다는 생각이 들었고, 경상국립대에 대대로 내려오는 닭강정의 전설을 믿어보기로 하였다.\n\n닭강정의 전설은 '경상국립대 후문에서 파는 특별한 닭강정이 있는데, 그 닭강정은 취기를 막아주는 정도가 있다.'라는 전설이다. 이 전설을 믿고 보선이는 경상국립대 후문 쪽에 있는 특별한 닭강정을 파는 가게에 갔는데, 그 가게의 판매 시스템은 보통 닭강정 가게와 다르게 특이했다. 특이한 판매 시스템은 다음과 같다.\n\n\n\t N×N$N × N$ 크기의 격자가 있고, 칸마다 1g의 닭 순살이 있다.\n\t i$i$번째 줄의 j$j$번째 칸의 순살은 상수 ki,j$k_{i,j}$를 지닌다.\n\t구매자는 두 점 (r1,c1)$(r_1, c_1)$, (r2,c2)$(r_2, c_2)$를 고를 수 있다. 두 점을 고르면 r1≤r≤r2$r_1 ≤ r ≤ r_2$와 c1≤c≤c2$c_1 ≤ c ≤ c_2$를 동시에 만족하는 모든 (r,c)$(r, c)$ 칸의 순살들을 뭉쳐서 튀긴다.\n\t이때, 튀겨진 닭강정의, 취기를 막아주는 정도는 다음과 같이 계산된다.∑i=r1r2∑j=c1c2(ki,j×{1if r1<i<r2 and c1<j<c2−1otherwise)$$\\sum_{i={r_1}}^{r_2} \\sum_{j={c_1}}^{c_2} \\pmatrix{k_{i,j} \\times \\begin{cases} 1 & \\text{if } r_1 < i < r_2 \\text{ and } c_1 < j < c_2 \\\\ -1 & \\text{otherwise} \\end{cases}}$$ \n\n\n이러한 판매 시스템이 복잡하다 보니, 이 가게에는 구매자가 (r1,c1)$(r_1, c_1)$, (r2,c2)$(r_2, c_2)$를 고르면 고른 두 점에 따라 튀겨지는 닭강정의, 취기를 막아주는 정도를 자동으로 계산하는 기계가 있다. 그런데 이 기계가 하필 보선이가 방문한 날에 고장이 나버렸다! 그래서 보선이는 옆에 있던 우리한테 (r1,c1)$(r_1, c_1)$, (r2,c2)$(r_2, c_2)$를 고를 때마다 고른 두 점에 따라 튀겨지는 닭강정의, 취기를 막아주는 정도를 계산해 달라고 부탁했다.\n\n자, 이제 보선이의 부탁을 들어주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30944","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t길이가 N인 수열 A1, A2, ..., AN이 주어진다. 이때, 다음 쿼리를 수행하는 프로그램을 작성하시오.\n\n\n\tm k: A1, A2, ..., Am 의 부분수열 (subsequence) 중 최장 증가 부분수열의 길이가 k 이하인 것의 최대 길이를 출력하라. (1 ≤ k ≤ m ≤ N)\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30714","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tДекартово царство расположено на плоскости, на которой введены декартовы координаты (x,y)$(x, y)$. Можно считать, что Декартово бесконечно во все стороны.\n\nЦарь этого царства хочет построить себе новый дворец. Дворец будет представлять из себя квадрат со сторонами, параллельными осям координат. Дворец может быть сколь угодно большим, царь больше беспокоится о его безопасности. \n\nВсего в Декартово есть n$n$ охранных постов, причём i$i$-й из них находится в точке (xi,yi)$(x_i, y_i)$. Царь может поручить нескольким группам охранников патрулировать границы дворца. Охранники царя способны следовать только достаточно простым указаниям. Каждой группе нужно назначить ровно два различных поста, после чего эта группа будет патрулировать минимальный прямоугольник со сторонами параллельными осям координат, содержащий эти два поста. Этот прямоугольник может иметь нулевую площадь, в частности, если у двух постов группы совпала x$x$ или y$y$ координата. Чтобы избежать путаницы и конфликтов, каждый пост может быть назначен не более чем одной группе.\n\nЧтобы ощущаться достаточное количество безопасности вокруг себя, Царь хочет организовать ровно k$k$ охранных групп, при этом дворец должен быть внутри каждого из патрулируемых прямоугольников, то есть каждая точка дворца должна содержаться внутри или находиться на границе каждого из прямоугольников, патрулируемых какой-либо группой. Помогите Царю выяснить наибольшую возможную сторону дворца, который можно построить и затем чувствовать себя в нём в безопасности.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30945","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAn ambitious university student has enrolled in just about every possible course. Unfortunately, the courses require mandatory attendance. He has decided to visit the university campus where the lectures are held several times a day. He will join every lecture that is running at that moment, sign the attendance sheet, and immediately leave the campus due to other obligations. He will return later that day, when he will repeat this process to sign attendance sheets at other lectures and so on until his name is on attendance sheets of all lectures.\n\nAs if this was not problematic enough, the student faces another obstacle: the schedule of the lectures keeps changing. Some lectures are added and some are canceled. The student has to keep adjusting his visiting schedule of the university to sign attendance sheets at all lectures.\n\nWrite a program that will start with an empty schedule of lectures and read sequential modifications, which are either an addition or removal of a single lecture. For every modification, output the minimum number of visits that the student has to make to sign attendance sheets at all lectures that are currently on the schedule.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30973","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t진주 나들이를 온 보선이는 진주의 유명한 수목원인 경상남도수목원에 갔다. 이 수목원에는 스스로 빛을 내는 신비한 나무인 빛나무와 이들이 자라는 빛나무원이 있어서 관광객들에게 인기가 많다. 경상남도수목원에서는 관광객들을 위해 파노라마 포토 스팟이라는 특별한 지점을 정했는데, 이 지점에서 빛나무들을 파노라마로 찍으면 정말 예쁜 사진을 찍을 수 있다. 하지만 자기말고 아무도 믿지 못하는 보선이는 자기만의 파노라마 포토 스팟을 찾기로 하였다.\n\n보선이는 자기만의 파노라마 포토 스팟을 찾기 위해 일단 경상남도수목원을 좌표평면으로 생각하기로 했다. 그리고 빛나무는 좌표평면 위의 점으로, 빛나무원은 좌표평면 위의 두 점 (Xmin,Ymin)$(X_{min}, Y_{min})$, (Xmax,Ymax)$(X_{max}, Y_{max})$을 꼭짓점으로 갖는 직사각형으로 생각하기로 했다. 빛나무원의 네 변은 각각 x축 또는 y축과 평행하다.\n\n빛나무원에는 총 N$N$그루의 빛나무가 있다. 모든 빛나무는 빛나무원의 안이나 경계에 위치해 있으며, 빛나무는 매우 얇아 같은 자리에 여러 그루가 심어져 있을 수 있다.\n\n보선이는 x좌표와 y좌표가 모두 정수인 지점에서 모든 빛나무를 파노라마로 찍으려고 한다. 하지만 빛나무원의 안이나 경계에서는 사진을 찍을 수 없다. 또한, 보선이는 빛나무와의 거리가 멀수록 빛나무의 본래의 아름다움이 사진에 담기지 않아 불만족스럽다고 생각한다. 더 밝은 빛나무일수록 멀리서 찍었을 때 아쉬움이 크기 때문에, i$i$번째 빛나무의 좌표와 밝기를 각각 (Xi,Yi)$(X_i, Y_i)$, Li$L_i$라 할 때, 점 (Xc,Yc)$(X_c, Y_c)$에서 찍은 사진의 불만족도는 다음과 같이 표현될 수 있다.∑i=1N(((Xc−Xi)2+(Yc−Yi)2)×Li)$$\\sum_{i=1}^{N} \\pmatrix{\\left(\\left(X_c - X_i\\right)^2 + \\left(Y_c - Y_i\\right)^2\\right) \\times L_i}$$ \n\n보선이는 불만족도가 가장 낮은 사진을 찍을 수 있는 지점을 보선이만의 파노라마 포토 스팟으로 정할 것이다. 만약 그런 지점이 여럿이라면 그 중에서 아무 지점으로 정하기로 했다. 보선이만의 파노라마 포토 스팟에서 찍은 사진의 불만족도를 알아보자. 서로 다른 빛나무는 서로 내는 빛의 밝기에 영향을 주지 않으며, 여러 빛나무가 일직선 상에 있어도 가려서 비치지 않는 빛은 없다고 가정하자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30692","content":"문제\n\nBerland -- is a huge country with diverse geography. One of the most famous natural attractions of Berland is the \"Median mountain range\". This mountain range is \nn\n$n$ mountain peaks, located on one straight line and numbered in order of \n1\n$1$ to \nn\n$n$. The height of the \ni\n$i$-th mountain top is \nai\n$a_i$.\n\n\"Median mountain range' is famous for the so called alignment of mountain peaks happening to it every day. At the moment of alignment simultaneously for each mountain from \n2\n$2$ to \nn−1\n$n - 1$ its height becomes equal to the median height among it and two neighboring mountains. Formally, if before the alignment the heights were equal \nbi\n$b_i$, then after the alignment new heights \nai\n$a_i$ are as follows: \na1=b1\n$a_1 = b_1$, \nan=bn\n$a_n = b_n$ and for all \ni\n$i$ from \n2\n$2$ to \nn−1\n$n - 1$ \nai=\n$a_i = $ median \n(bi−1,bi,bi+1)\n$(b_{i-1}, b_i, b_{i+1})$. The median of three integers is the second largest number among them. For example, median \n(5,1,2)=2\n$(5,1,2) = 2$, and median \n(4,2,4)=4\n$(4,2,4) = 4$.\n\nRecently, Berland scientists have proved that whatever are the current heights of the mountains, the alignment process will stabilize sooner or later, i.e. at some point the altitude of the mountains won't changing after the alignment any more. The government of Berland wants to understand how soon it will happen, i.e. to find the value of \nc\n$c$ --- how many alignments will occur, which will change the height of at least one mountain. Help scientists solve this important problem!\n\nNote that in some test groups, in addition to the \nc\n$c$ value, you will need to determine the mountain heights after the \nc\n$c$ alignments, i.e. the heights of the mountains as they will stay forever."},{"problemId":"30946","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA group of students has just finished their math lesson and they're heading out for physical education. Their teacher has asked them to arrange themselves in a circle. After several minutes of busy moving around the court they have finally managed to position themselves so that they form a strictly convex polygon. They might not lie on the circle, but the teacher is happy to at least get some structure.\n\nThere is an even number of boys and an even number of girls in this group of N$N$ students. They will practice ball passing in pairs, therefore the teacher has to pair them up. The teacher will pair boys among themselves and the same for girls.\n\nThe school administration has decided to address the decline in physical performance of their students. Therefore, they have implemented a quality measure for ball passing practice, which is the total distance traveled by the balls in a single round of ball passes between each pair. Help the teacher pair up the students in a way that will maximize this measure.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30974","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t진주 나들이를 온 보선이는 버스를 타고 미리 예약해놓은 진양호 전망대에 가기 위해 가까운 버스 정류장에 도착했다. 그런데 이상하게 버스정보안내단말기에 단 한 대의 도착 정보도 표시되지 않았다. 당황한 보선이가 여기저기 알아보던 도중, 보선이의 대학 동기인 준희로부터 문자 한 통이 왔다.\n\n\n맛이 어때?\n\n\n알고 보니 이는 준희가 한 짓이었다. 대학생 때 국밥 마니아 보선이 때문에 매일 국밥만 먹게 되었던 리조또 마니아 준희는 지금까지 앙심을 품고 있었다. 마침 준희는 보선이가 진주에 놀러 왔다는 사실을 알게 되었고, 천재적인 해킹 실력을 발휘해 버스정보시스템을 해킹하여 시내버스가 다니지 못하게 만들었던 것이다.\n\n하지만, 진주에는 Super Bus라는 재난 대비 버스가 있었다. 진주시는 버스정보시스템이 해킹된 지금의 상황이 사실상 재난에 준한다고 판단하여 Super Bus의 운행을 시작했다. 또한, Super Bus가 원활하게 운행되기 위해서 다른 교통수단은 전부 이용할 수 없게 되었다.\n\n진주에는 버스 정류장이 N$N$개가 있고 1$1$번부터 차례대로 번호가 부여되어 있다. 그리고 서로 다른 두 버스 정류장 사이를 잇고 Super Bus를 타고 지나가는 데 소요되는 시간이 정해져 있는 M$M$개의 양방향 도로가 있으며, 임의의 두 버스 정류장 사이에 도로가 두 개 이상 존재할 수 있다. 또한, 각 버스 정류장에는 5000000$5\\,000\\,000$ 이하의 양의 정수인 재난 코드가 부여되어 있으며, Super Bus는 재난 코드의 합이 소수인 두 버스 정류장 사이를 잇는 도로에서만 운행된다. 이 문제에서 소수란 1$1$과 자기 자신 외의 약수를 갖지 않는 2$2$ 이상의 정수를 뜻한다.\n\n보선이는 진주에서 많은 시간을 보냈기 때문에 N$N$개의 버스 정류장의 재난 코드와 그 사이를 잇는 M$M$개의 양방향 도로를 전부 꿰고 있다. 이 지식을 활용해 보선이는 진양호 전망대에 도착하는 시간을 미리 계산해 보고 예약 시간에 늦을 것 같으면 진양호 전망대에 전화를 걸어 그 사실을 알리고자 한다. 보선이가 출발하는 곳은 1$1$번 버스 정류장이고 진양호 전망대가 있는 곳은 N$N$번 버스 정류장이다. 또한, 모든 버스 정류장은 서로 먼 거리에 있기 때문에 Super Bus로만 이동이 가능하다. 그리고 버스 정류장에 도착하면 원하는 Super Bus를 바로 탈 수 있으며, 승하차에 필요한 시간은 없다고 가정하자. 이러한 조건하에 보선이가 진양호 전망대가 있는 N$N$번 버스 정류장에 가장 빨리 도착할 때의 소요되는 시간을 알아보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30715","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tМаленький мальчик Гриша уже сам начал делать олимпиады, и ему как раз нужно подготовить Открытую Олимпиаду по Информатике. Для олимпиады нужно придумывать задачи, а Гриша как раз очень любит этим заниматься. Каждую задачу он характеризует ее сложностью, которая является неотрицательным целым числом. Сложность олимпиады Гриша оценивает как сумму сложностей всех задач в ней.\n\nНа Открытую Олимпиаду по Информатике Грише требуется придумать n$n$ задач. Конечно, Гриша еще не дорос до того, чтобы составлять олимпиаду самому, поэтому за его действиями следит многоуважаемое начальство. Начальство любит отвергать некоторые задачи, но Гриша знает, что оно не может отклонить больше, чем k$k$ из его задач. Также Гриша, исходя из своего большого опыта, считает, что давать олимпиаду со сложностью меньше чем x$x$ будет бессмысленно, поэтому он не допустит такого.\n\nКак мы уже говорили, Гриша --- настоящий специалист в придумывании задач и может придумать сколько угодно задач любой сложности. Он хочет придумать n$n$ задач, понимая, что часть из них могут отклонить, и, конечно, он хочет, чтобы независимо от того, какие задачи его начальство отвергнет, сложность олимпиады из оставшихся задач была не меньше x$x$. Конечно, Гриша является еще и лентяем, поэтому не хочет перетруждаться и планирует придумать n$n$ задач с минимальной суммарной сложностью. К сожалению, сейчас он занят учебой и не может расчитать минимальную суммарную сложность этих задач. Помогите Грише, ведь до олимпиады осталось не так много времени.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30975","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t진주 나들이를 온 보선이는 경상국립대 정문 쪽 연못 산책길을 걷다가 울고 있는 동기 원우를 발견했다. 반가움보다 안쓰러움이 앞선 보선이는 원우한테 다가가서 울고 있는 이유를 물어봤다. 원우는 울면서 \"교수님께서 경상국립대에서 출발해 경상국립대 주변에 있는 모든 동네에 가서 하늘 사진을 찍은 다음, 다시 경상국립대로 돌아오라는 심부름을 시키셨는데 거절을 못했어. 그런데 어떻게 심부름을 끝내야 할지 모르겠어.\"라고 대답했다. 약간 모자라지만 착한 원우를 위해 보선이가 대신 심부름을 맡기로 했다.\n\n경상국립대 주변에 있는 동네는 총 N$N$개이며, 각 동네는 1$1$번부터 차례대로 번호가 부여되어 있다. 또한, 보선이는 편의상 경상국립대가 N+1$N+1$번이라 생각하기로 했다. 모든 동네는 한 번씩만 방문이 가능하며, 하늘 사진을 찍으러 출발하고 나서는 필요한 모든 하늘 사진을 찍기 전까지 경상국립대로 돌아올 수 없다. 그리고 경상국립대와 동네 N$N$개 중 서로 다른 두 지점을 잇는 단방향 도로 M$M$개가 있다. 시작 지점과 도착 지점이 모두 동일한 도로가 두 개 이상 존재할 수 있다.\n\n추가적으로 교수님의 또 다른 부탁이자 당부가 있었다. 이는 임의의 두 하늘 사진의 시간적 차이가 필요함의 이유로, 어떤 동네의 하늘 사진은 그 동네에 정해진 다른 동네의 하늘 사진보다 늦게 찍어야 한다는 것이었다.\n\n보선이는 성공적인 진주 나들이를 위해 심부름을 최대한 빠르게 마치기로 결심했다. 심부름을 마치는 데 걸리는 시간의 최솟값을 구해보자. 하늘 사진을 찍는 데 걸리는 시간은 무시하자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30947","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYour local cake shop is making a business plan for the next few months. The bakers have C$C$ different recipes, each requiring their own set of ingredients and tools. During the baking, the ingredients are consumed, but the tools are not and can be reused for other recipes. Currently, the bakery has no ingredients or tools – they were all destroyed in the recent floods or taken away by the tax bureau.\n\nThe son of the main chef managed to convince everyone to only bake each type of cake once. Individuals on the internet are supposedly happy to pay extra to be the only owners of their own unique Nutty-Fudge Tart (NFT). In fact, the son has already gone ahead and estimated how much money they can earn for each type of cake. Now bakers are looking at each other, trying to figure out which types of cake to prepare for maximum profit. You are given the costs of all ingredients, tools, and prices of cakes. Your task is to determine how much profit the bakers can make.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30716","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tАлиса и Боб хотят пройти через турникет в метро. У них есть полоска, на которой в ряд написаны n$n$ строчных букв латинского алфавита. Для того, чтобы пройти через турникет, каждый должен приложить к нему бумажку с кодовым словом. Турникет сканирует слово, записанное на бумажке и открывается, позволяя пройти одному человеку. Чтобы запретить человеку ездить по одному билету несколько раз, турникет не откроется если приложить к нему бумажку со словом, которое турникет сканировал до этого.\n\nАлиса и Боб пришли в метро к открытию, поэтому через турникет еще никто не проходил, и он пропустит человека с любым текстом на билете. Детям разрешено вырезать ровно по одному непустому билету из полоски, причем билеты должны состоять из подряд идущих букв полоски и не должны пересекаться. Также, чтобы никто из детей не считал себя обделeнным, билеты, которые они вырежут, должны быть одинаковой длины. После вырезания билетов Алиса, а затем Боб попробуют пройти через турникет. Таким образом, Алиса сможет войти в метро всегда, а Боб сможет войти только если текст на его билете не совпадает с текстом на билете Алисы.\n\nТак как дети маленькие, нужно помочь им определить, можно ли вырезать два различных билета одинаковой длины из полоски, чтобы попасть в метро, и, если это возможно, объяснить им, как это сделать.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30976","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t진주 나들이를 온 보선이는 목이 너무 말라서 경상국립대 앞에 있는 한 카페에 들어갔다. 그 카페에서는 진주교육대 여학생 N$N$명과 연암공과대 남학생 M$M$명이 모여서 미팅을 하고 있었다.\n\n이 미팅에는 신기한 사실이 하나 있는데, 바로 미팅 중인 학생들의 상대에 대한 선호 여부는 키라는 요소 한 가지에만 영향을 받는다는 것이다. 구체적으로, 여학생들은 자신의 선호 기준보다 키가 작은 남학생만을 선호한다. 그리고 남학생들은 자신의 선호 기준보다 키가 큰 여학생만을 선호한다.\n\n마침 이 카페에는 자칭 사랑의 큐피드 재혁이도 있었다. 이 미팅에 관심이 생긴 재혁이는 미팅 중인 테이블에서 오가는 얘기를 열심히 엿들어 미팅 중인 모든 학생들의 선호 기준을 파악했다. 그리고 재혁이는 자칭 사랑의 큐피드인 만큼 이 미팅에서 많은 커플이 생겼으면 하는 마음에 학생들을 직접 이어 주기로 결정했다.\n\n이 모든 상황을 흥미롭게 바라보고 있던 보선이는 이 미팅에서 생길 수 있는 커플의 최대 수가 궁금해졌다. 이를 우리가 함께 알아보자. 이 문제에서의 커플은 서로 선호하는 여학생 1명과 남학생 1명으로 이루어진 집합을 의미하며, 한 학생이 둘 이상의 커플에 속할 수 없다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30693","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe teacher gave Dmitry's class a very strange task --- she asked every student to come up with a sequence of arbitrary length, consisting only of opening and closing brackets. After that all the students took turns naming the sequences they had invented. When the Dima's turn come, he suddenly realized that all his classmates got the right bracketed sequence, and whether he got the right bracketed sequence, he did not know.\n\nDima suspects now that he simply missed the word \"right\" in the task statement, so now he wants to save the situation by modifying his sequence slightly. More precisely, he can arbitrary amount of times (possibly zero) perform the reorder operation. The reorder operation consists of choosing an arbitrary subsegment of the sequence and then reordering all the characters in it in an arbitrary way. Such operation takes l$l$ nanoseconds, where l$l$ is the length of the subsegment being reordered. It's easy to see that reorder operation doesn't affect the number of opening and closing brackets doesn't change.\n\nSince Dima will soon have to answer, he wants to make his sequence right as fast as possible. Help him to do this, or determine that it's impossible.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30948","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tHarry the Beaver runs a hotel and has to wash bed sheets every Sunday night for the next Q$Q$ weeks until the tourist season ends. On week j$j$, he has N$N$ freshly washed bed sheets that he wants to dry by hanging them on two parallel clotheslines of length Lj$L_j$ each. The sheets can be hung next to each other but must not overlap. Each sheet is di$d_i$ units wide and rather long, therefore he will always orient it so that it will take up di$d_i$ units of the line when hung to dry. The sheets have different drying times that are not related to their sizes because of different materials. Thus, the i$i$-th sheet needs tislow$t^\\text{slow}_i$ minutes to dry. However, if it is hung over both lines at the same time, it dries quicker in tifast$t^\\text{fast}_i$ minutes, but also takes up space on the other line. To avoid smelly sheets, Harry the Beaver has to start drying all of them immediately after washing, i.e. all sheets have to be hung simultaneously.\n\nHarry the Beaver wants to go to sleep as soon as possible on Sundays, therefore, he asks you to help him determine the minimal required drying time for each week j$j$, or inform him that it is impossible to finish drying the sheets that week.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30949","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are one of the people on-call for a high-availability service that offers users to solve programming tasks. As an organized team, you have an on-call schedule specifying who is responsible for the service at which time. A colleague sends you a new schedule, and you want to make sure that everyone has the same amount of on-call time as before, or print any differences.\n\nThe on-call schedule is specified with lines of form sieiti$s_ie_it_i$, where si$s_i$ and ei$e_i$ represent the start and end offsets of the on-call shift for a teammate ti$t_i$ from some start hour.\n\nGiven a sample schedule\n\n0 7 jan\n7 14 tomaz\n14 20 jure\n20 24 jan\n24 25 tomaz\n25 26 jure\n\n\nwe can see that jan is on-call for the first 7 hours (hour 0, 1, 2, 3, 4, 5, and 6), tomaz for next 7, ... In total, jan is on-call for 11 hours, tomaz for 8 and jure for 7.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30717","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tПафнутий решил использовать метро, чтобы достичь своей цели.\n\nЧтобы пройти через турникет, надо использовать специальную карточку SLON (Subterranean Lowcost Orientational Network). У каждой карточки есть неотрицательный целый баланс --- количество бурлей, которые записаны на карточке. Если на карточке есть хотя бы k$k$ бурлей, то пройти через турникет возможно, после чего баланс карточки уменьшается на k$k$ бурлей. Если же на карточке меньше k$k$ бурлей, то Пафнутий не сможет ей воспользоваться, чтобы пройти через турникет.\n\nИзначально у Пафнутия есть n$n$ карточек, баланс карточки с номером i$i$ составляет ai$a_i$ бурлей. Также Пафнутий накопил p$p$ бурлей и может как угодно распределить эти деньги между карточками. Формально, пусть Пафнутий к балансу карточки с номером i$i$ добавил addi≥0$add_i \\ge 0$ бурлей, тогда должно выполняться условие add1+add2+…+addn≤p$add_1 + add_2 + \\ldots + add_n \\le p$. Возможности перераспределять деньги между карточками нет, то есть баланс карточки может увеличиваться только за счет какой-то части из этих p$p$ бурлей и уменьшаться только при проходе через турникет.\n\nПафнутий не очень любит математику. Помогите ему определить, какое максимальное количество раз он сможет поехать на метро, если распределит p$p$ бурлей по карточкам оптимально.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30977","content":"문제\n\n진주 나들이를 온 보선이는 남강유등축제에 갔다. 남강유등축제에는 화려하고 다채로운 조형물과 재미있는 공연이 많지만, '금강산도 식후경'이 좌우명인 보선이는 많은 먹거리가 있는 푸드트럭 존을 찾았다. 그런데 이상하게도 푸드트럭 존이 보이지 않았다. 알고 보니, 남강유등축제에는 푸드트럭 존이 아닌 쿠킹 존이 있었다.\n\n이 쿠킹 존에서는 재료 \nN\n$N$ 종류를 판다. 재료마다 자극도가 \nT1\n$T_1$, \n…\n$\\dots$, \nTN\n$T_N$으로 정해져 있고, 모든 재료는 요리에 아무리 많이 쓰여도 남을 만큼 충분히 많다. 이 재료들 중에서 재료의 종류와 각 재료의 개수를 마음대로 정해서 음식을 요리해 먹어야 한다. 완성된 음식의 자극도는 사용된 재료들의 자극도의 합이 된다. 이러한 방식으로 한 번 요리를 할 때마다 일정한 돈을 내야 한다. 그래서 쿠킹 존에서의 요리의 횟수는 딱히 제한이 없다. 그러나 하나의 음식에 들어가는 재료의 개수는 정해져 있다. 재료를 너무 많이 넣으면 시간도 오래 걸리고 맛도 없어지고, 재료를 너무 적게 넣으면 맛이 단조롭기 때문에 하나의 음식에 넣는 재료의 개수는 정확하게 \nM\n$M$개로 제한된다.\n\n보선이는 \nK\n$K$개의 음식을 먹을 계획이다. 그와 동시에 보선이는 미식가이기 때문에 먹게 되는 \nK\n$K$개의 음식의 자극도를 중요시한다. 이에 대한 자세한 설명은 다음과 같다. \ni\n$i$번째로 먹는 음식의 자극도를 \nFi\n$F_i$라 하고 \nDi=(Fi−F1)\n\\(D_i = \\left(F_i - F_1\\right)\\)이라 한다면, 보선이의 식사 계획은 증가하는 수열 \nD={D1,…,DK}\n$D = \\{D_1, \\dots, D_K\\}$로 나타낼 수 있다. 또한, \nD1\n$D_1$은 항상 0이다. 그리고 비슷한 자극도의 음식끼리는 헷갈릴 수 있기 때문에, \nF1\n$F_1$과의 자극도 차이가 \nD1\n$D_1$ 이상 \nDK\n$D_K$ 이하이면서 식사 계획 \nD\n$D$에 포함되지 않는 음식은 만들어질 수 없어야 한다.\n\n식사 계획 \nD\n$D$에 대한 설명을 돕기 위해 간단한 예를 하나 들어보겠다. 보선이의 식사 계획 \nD\n$D$가 수열 \n{0,2,3}\n$\\{0, 2, 3\\}$이라고 생각해보자. 만약 \nF1\n$F_1$을 3으로 골랐다면, \nF2\n$F_2$는 5가 되어야 하며, \nF3\n$F_3$은 6이 되어야 한다. 그리고 \nF1\n$F_1$과의 자극도 차이가 \nD1\n$D_1$ 이상 \nDK\n$D_K$ 이하이며 식사 계획 \nD\n$D$에 포함되지 않는 4를 자극도로 갖는 음식은 만들어질 수 없어야 한다. 만약 자극도가 4인 음식이 만들어질 수 있다면, \nF1\n$F_1$을 3으로 고를 수 없게 된다.\n\n보선이가 재료 \nM\n$M$개를 사용하여 만들 수 있는 모든 음식을 만들었을 때, 위 조건을 만족시킬 수 있는 \nF1\n$F_1$로 적합한 자극도의 개수를 구해보자."},{"problemId":"30694","content":"문제\n\nMayor of city M. decided to launch several new metro lines during 2020. Since the city has a very limited budget, it was decided not to dig new tunnels but to use the existing underground network.\n\nThe tunnel system of the city M. consists of \nn\n$n$ metro stations. The stations are connected with \nn−1\n$n - 1$ bidirectional tunnels. Between every two stations \nv\n$v$ and \nu\n$u$ there is exactly one simple path. Each metro line the mayor wants to create is a simple path between stations \nai\n$a_i$ and \nbi\n$b_i$. Metro lines can intersects freely, that is, they can share common stations or even common tunnels. However, it’s not yet decided which of two directions each line will go. More precisely, between the stations \nai\n$a_i$ and \nbi\n$b_i$ the trains will go either from \nai\n$a_i$ to \nbi\n$b_i$, or from \nbi\n$b_i$ to \nai\n$a_i$, but not simultaneously.\n\nThe city M uses complicated faring rules. Each station is assigned with a positive integer \nci\n$c_i$ — the fare zone of the station. The cost of travel from \nv\n$v$ to \nu\n$u$ is defined as \ncu−cv\n$c_u − c_v$ roubles. Of course, such travel only allowed in case there is a metro line, the trains on which go from \nv\n$v$ to \nu\n$u$. Mayor doesn’t want to have any travels with a negative cost, so it was decided to assign directions of metro lines and station fare zones in such a way, that fare zones are strictly increasing during any travel on any metro line.\n\nMayor wants firstly assign each station a fare zone and then choose a lines direction, such that all fare zones are increasing along any line. In connection with the approaching celebration of the day of the city, the mayor wants to assign fare zones so that the maximum \nci\n$c_i$ will be as low as possible. Please help mayor to design a new assignment or determine if it’s impossible to do. Please note that you only need to assign the fare zones optimally, you don’t need to print lines’ directions. This way, you solution will be considered correct if there will be a way to assign directions of every metro line, so that the fare zones will be strictly increasing along any movement of the trains.\n\nPlease note, that in some groups it’s not required to minimize the answer, you only need to determine whether it’s possible to assign fare zones in a valid way."},{"problemId":"30978","content":"문제\n\n진주 나들이를 온 보선이는 나들이를 끝내고 원래 살던 곳인 서울로 돌아가려고 진주 개양터미널에 도착했다. 그런데 이게 무슨 일인가? 장난꾸러기인 버스 기사분들이 전부 숨어버리거나 사라져버렸다. 숨은 장소 \nN\n$N$곳에 대한 힌트만 남겨 놓은 채….\n\n개양터미널 매표원 수현이는 난처해졌지만 잘생긴 얼굴 하나만 믿고, 보선이한테 버스 기사분들을 꼭 찾아서 각 버스에 배정해 달라고 부탁을 했다. 보선이는 '돌아가는 교통편을 무료로 이용할 수 있겠지?'라는 마음으로 수현이의 부탁을 들어주기로 했다. 그와 동시에 자기가 돌아가는 교통편의 버스에 가장 실력이 좋은 버스 기사를 배정해야겠다고 다짐했다.\n\n버스 기사의 운전 실력은 \n0\n$0$ 이상 \n50\n$50$ 이하의 정수로 표현할 수 있으며, 운전 실력의 수치가 높을수록 실력이 좋다. 또한 버스 기사분들이 숨은 곳을 버스 기사 집합지라고 부르며, 총 \nN\n$N$곳이 있다.\n\n어떠한 구간 \n[A,B]\n$[A, B]$가 주어지고 구간 내에서 우수한 버스 기사 집합지를 찾고자 할 때, 다음과 같이 찾을 수 있다.\n\n \nA\n$A$번째 버스 기사 집합지에서 \nB\n$B$번째 버스 기사 집합지까지 중 운전 실력이 \n50\n$50$인 버스 기사가 있는 버스 기사 집합지를 전부 선택한다. 만약 그러한 버스 기사 집합지가 없다면 \nA\n$A$번째 버스 기사 집합지에서 \nB\n$B$번째 버스 기사 집합지까지 전부를 선택한다.\n1번 과정에서 여러 곳이 선택되었다면 그중에서 운전 실력이 \n49\n$49$인 버스 기사가 있는 버스 기사 집합지를 선택한다. 만약 그러한 버스 기사 집합지가 없다면 직전 과정에서 선택된 곳 전체를 선택한다.\n2번 과정을 하나의 버스 기사 집합지가 선택될 때까지 찾는 운전 실력을 \n1\n$1$씩 줄여가며 반복한다. 만약 운전 실력이 음수가 되었다면, 직전 과정에서 선택된 곳 전체를 선택하고 중단한다. 따라서, 우수한 버스 기사 집합지는 여러 곳일 수 있다.\n\n또한, 어떠한 구간 \n[A,B]\n$[A, B]$가 주어지고 구간 내에서 저조한 버스 기사 집합지를 찾고자 할 때, 다음과 같이 찾을 수 있다.\n\n \nA\n$A$번째 버스 기사 집합지에서 \nB\n$B$번째 버스 기사 집합지까지 중 운전 실력이 \n50\n$50$인 버스 기사가 없는 버스 기사 집합지를 전부 선택한다. 만약 그러한 버스 기사 집합지가 없다면 \nA\n$A$번째 버스 기사 집합지에서 \nB\n$B$번째 버스 기사 집합지까지 전부를 선택한다.\n1번 과정에서 여러 곳이 선택되었다면 그중에서 운전 실력이 \n49\n$49$인 버스 기사가 없는 버스 기사 집합지를 선택한다. 만약 그러한 버스 기사 집합지가 없다면 직전 과정에서 선택된 곳 전체를 선택한다.\n2번 과정을 하나의 버스 기사 집합지가 선택될 때까지 찾는 운전 실력을 \n1\n$1$씩 줄여가며 반복한다. 만약 운전 실력이 음수가 되었다면, 직전 과정에서 선택된 곳 전체를 선택하고 중단한다. 따라서, 저조한 버스 기사 집합지는 여러 곳일 수 있다.\n\n따라서, 구간 \n[A,B]\n$[A, B]$ 내에서 우수한 버스 기사 집합지와 저조한 버스 기사 집합지는 동일할 수 있다.\n\n위와 같이 버스 기사와 버스 기사 집합지에 대한 정보를 얻은 보선이는 일이 수월할 것이라고 믿었지만, 장난꾸러기인 버스 기사분들은 한 곳에 가만히 있지 않는다. 갑자기 알 수 없는 곳으로 사라지기도 하고, 갑자기 나타날 수도 있으며, 다른 집합지로 이동할 수도 있다. 다행히 개양터미널에서 보낸 정보원 우근이 덕분에 버스 기사분들의 이동 정보를 쉽게 알 수 있었지만, 보선이는 점점 귀찮아져서 우리한테 대신 부탁을 해왔다.\n\n이동 정보의 개수나 우수한 버스 기사 집합지 및 저조한 버스 기사 집합지를 알아내야 하는 횟수, 즉 모든 쿼리의 개수는 총 \nQ\n$Q$개다. 이를 우리가 대신 처리해 보자."},{"problemId":"30979","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t유치원생 파댕이는 아직 어리기 때문에 단것을 매우 좋아한다.\n\n\n\n또한, 파댕이는 사탕을 주지 않으면 시도 때도 없이 울곤 한다.\n\n\n\n파댕이를 사랑하는 여러분은 일정 시간 동안 파댕이를 돌봐주기로 했다. 여러분은 파댕이를 돌보는 동안 파댕이가 우는 것을 보고 싶지 않기에, 파댕이가 울지 않도록 사탕을 챙겨왔다. 하지만 파댕이를 빨리 보고 싶은 마음에 급하게 사탕을 챙기느라, 돌보는 동안 파댕이가 울지 않게 만들 수 있는 충분한 사탕의 개수인지 확인하지 못했다. 여러분이 가지고 있는 사탕으로 파댕이를 돌보는 동안 파댕이를 울지 않게 만들 수 있는지 알아보자!\n\n여러분은 T$T$분 동안 파댕이를 돌봐야 하며, N$N$개의 사탕을 가지고 있다. 파댕이는 사탕의 맛에 따라 울음을 그치는 시간이 다르며, 사탕의 맛이 F$F$일 때 F$F$분 동안 울음을 멈춘다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30950","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA young biologist is studying evolutionary history and has come across phylogenetic trees. A phylogenetic tree shows evolutionary relationships among various biological species. It is presented in a planar embedding with its leaves arranged in a circular manner for a better visual presentation. We are dealing with an unrooted tree, where the leaves are nodes of degree 1. All nodes of the tree are colored, which makes distinguishing different species easier.\n\nOur biologist is using graph visualization software which needs some help to produce a desired layout. Therefore, she has decided to add edges between adjacent leaves in the planar embedding. The tree has at least 3 leaves, which she connects in a cycle. The illustration below shows an example of such (uncolored) tree with additional edges between adjacent leaves indicated by dashed lines.\n\n\n\nNow that the visualization is done, she is interested in the number of ways to color the nodes of this graph with K$K$ colors. Every pair of adjacent nodes should have a different color for easier visual recognition. Write a program that will read the description of her graph structure and compute the number of colorings.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30718","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tДиме не дарили массив a$a$, состоящий из n$n$ целых чисел на день рождения, он не покупал его, не находил на улице, а он у него просто есть и всегда был, и Диме не очень-то и интересно откуда.\n\nДима не играет с массивом, не дарит его Пете, не режет на кусочки и не стремится его уничтожить. Дима просто выполняет операции двух видов со своим массивом:\n\n\n\t? l r --- узнать MEX мультимножества {al,al+1,…,ar}$\\{a_l, a_{l+1}, \\ldots, a_r\\}$ \n\t! i x --- присвоить ai$a_i$ значение x$x$ (0≤x≤n)$(0 \\leq x \\leq n)$ \n\n\nMEX мультимножества чисел {a1,a2,…,ak}$\\{a_1, a_2, \\ldots, a_k\\}$ --- это минимальное целое t≥0$t \\ge 0$ такое, что t≠ai$t \\ne a_i$ для всех 1≤i≤k$1 \\leq i \\leq k$.\n\nНа самом деле, Диме не очень нравится выполнять операции двух видов со своим массивом. Диму волнуют лишь результаты операций первого типа. Помогите Диме и напишите программу, которая выполнит операции за него.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30719","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tФилателист Петя отправился в магазин, чтобы приобрести его заветную мечту --- настоящую медную монету XVII века. В магазине продавец показал Пете n$n$ монет XVII века, имеющихся в наличии, каждая из которых сделана из одного из трех материалов: железа, меди или бронзы. К сожалению, время не пощадило монеты, поэтому они покрылись ржавчиной, и невозможно определить, какая монета из какого материала сделана. Чтобы Пете было проще найти нужную монету, продавец показал ему m$m$ пар монет таких, что монеты из пары сделаны из различных материалов. Кроме того, продавец сказал Пете, что ровно одна из n$n$ монет сделана из меди. Чтобы заполучить заветную монету, Петя решил приобрести все монеты, которые могут быть медными, исходя из информации, полученной им от продавца.\n\nБолее формально, Петя купит монету с номером p$p$ если и только если могло оказаться так, что все монеты с номерами, отличиными от p$p$ сделаны из железа и бронзы, а монета с номером p$p$ сделана из меди и при этом в каждой из m$m$ пар номеров монет, озвученных продавцом, монеты с соответствующими номерами сделаны из разных материалов.\n\nОпределите, какие монеты купит Петя.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30951","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAlice and Bob are playing a game in the sand outside their mansion. A circle representing the Moon is drawn somewhere, and they each also pick a place to stand (inside, on the edge, or outside the Moon). The goal of the game is that one of the players runs to the other as fast as possible, while also touching the Moon during the run.\n\nGiven the positions of the Moon, Alice, and Bob, find the length of the shortest path that starts at one of the players, touches (or crosses) the edge or the interior of the Moon, and ends at the position of the other player.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30695","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tVanya works at the factory producing palindromes. The factory has a workpiece --- a string s$s$ line of length n$n$, consisting of lowercase English letters, from which Vanya can cut out any substring for sale. We remind you that palindrome --- is a string that reads in the same way from left to right and from right to left.\n\nA lot of people are fed up with a usual palindromes, so Vanya decided to produce double palindromes instead. Double palindrome is a string formed by a concatenation of two palindromes of equal length. For example, the strings \"aabb\", \"aaaa\" are double palindromes, while strings \"abba\" and \"aaaabb\" are not.\n\nVanya wonders how many ways are there to cut out double palindrome from s$s$. In other words, how many there are pairs (l,r)$(l, r)$, such that substring slsl+1…sr$s_l s_{l+1} \\ldots s_r$ is a double palindrome. Please help Vanya to find an answer to this question.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30696","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA popular reality show is recruiting a new cast for the third season! n$n$ candidates numbered from 1$1$ to n$n$ have been interviewed. The candidate i$i$ has aggressiveness level li$l_i$, and recruiting this candidate will cost the show si$s_i$ roubles.\n\nThe show host reviewes applications of all candidates from i=1$i=1$ to i=n$i=n$ by increasing of their indices, and for each of them she decides whether to recruit this candidate or not. If aggressiveness level of the candidate i$i$ is strictly higher than that of any already accepted candidates, then the candidate i$i$ will definitely be rejected. Otherwise the host may accept or reject this candidate at her own discretion. The host wants to choose the cast so that to maximize the total profit.\n\nThe show makes revenue as follows. For each aggressiveness level v$v$ a corresponding profitability value cv$c_v$ is specified, which can be positive as well as negative. All recruited participants enter the stage one by one by increasing of their indices. When the participant i$i$ enters the stage, events proceed as follows:\n\n\n\tThe show makes cli$c_{l_i}$ roubles, where li$l_i$ is initial aggressiveness level of the participant i$i$.\n\tIf there are two participants with the same aggressiveness level on stage, they immediately start a fight. The outcome of this is:\n\t\n\t\tthe defeated participant is hospitalized and leaves the show.\n\t\taggressiveness level of the victorious participant is increased by one, and the show makes ct$c_t$ roubles, where t$t$ is the new aggressiveness level.\n\t\n\t\n\tThe fights continue until all participants on stage have distinct aggressiveness levels.\n\n\nThe host wants to recruit the cast so that the total profit is maximized. The profit is calculated as the total revenue from the events on stage, less the total expenses to recruit all accepted participants (that is, their total si$s_i$). Help the host to make the show as profitable as possible.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30980","content":"문제\n\n여중생 파댕이는 할 것이 너무 많고 공부가 어려워 정신이 없다. 오늘도 여중생 파댕이는 선생님으로부터 덧셈 문제 풀기라는 끔찍한 과제를 받았다.\n\n파댕이는 어찌어찌 과제를 다 하는 데는 성공했지만, 과제를 채점하는 일이 매우 귀찮았다. 그래서 파댕이는 과제를 읽고 자동으로 채점해 주는 프로그램을 개발하려 한다. 파댕이를 도와주자!\n\n이하의 문단들은 문제의 요구 조건을 자세히 기술한 것이다. 직관적인 설명을 원한다면 입력 예시와 출력 예시를 참고하라.\n\n파댕이의 과제가 적힌 종이는 크기 \n3N×8M\n$3N \\times 8M$의 행렬로 나타낼 수 있다. 종이 위에는 여러 개의 문제가 적혀 있는데, 하나의 문제가 차지하는 공간은 세로 \n3\n$3$, 가로 \n8\n$8$이다. 이 문제들이 세로로 \nN\n$N$개, 가로로 \nM\n$M$개씩 배치되어 전체 \nN×M\n$N \\times M$개의 문제로 구성되어 있는 문제지를 이룬다. 각각의 \n3×8\n$3 \\times 8$ 공간은 본문과 여백으로 이루어져 있다. 본문은 길이 \n5\n$5$ 또는 \n6\n$6$의 문자열로, 항상 주어진 \n3×8\n$3 \\times 8$ 행렬의 \n2\n$2$행 \n2\n$2$열 위치가 본문의 시작점이고, 본문은 가로로 적혀 있다. 본문은 항상 수식 \na+b=c\n$a + b = c$ 형태로, \na,b\n$a, b$는 한 자릿수, \nc\n$c$는 한 자리 혹은 두 자릿수다. \na,b,c\n$a, b, c$ 중 어떤 수든지 \n0\n$0$이 될 수도 있다. 하지만 \nc\n$c$가 두 자릿수라면, 십의 자릿수는 \n0\n$0$으로 주어지지 않는다. 여백은 항상 문자 . 로 주어진다.\n\n파댕이의 과제를 채점하는 방법은 다음과 같다. 문제마다 다음과 같은 절차를 진행한다. 만약 본문에 주어진 수식이 옳다면, 여백 중 본문과 상하좌우로 인접한 모든 원소를 문자 * 로 채운다. 주어진 수식이 잘못되었다면, 문제를 포함하는 행렬의 \n3\n$3$행 \n2\n$2$열, \n2\n$2$행 \n3\n$3$열, \n1\n$1$행 \n4\n$4$열 원소를 문자 / 로 채운다."},{"problemId":"30697","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tCatherine received an array of integers as a gift for March 8. Eventually she grew bored with it, and she started calculated various useless characteristics for it. She succeeded to do it for each one she came up with. But when she came up with another one --- xor of all pairwise sums of elements in the array, she realized that she couldn't compute it for a very large array, thus she asked for your help. Can you do it? Formally, you need to compute\n\n (a1+a2)⊕(a1+a3)⊕…⊕(a1+an)⊕⊕(a2+a3)⊕…⊕(a2+an)⊕…⊕(an−1+an)$$\\begin{align*} (a_1 + a_2) \\oplus (a_1 + a_3) \\oplus \\ldots \\oplus (a_1 + a_n) \\oplus \\\\ \\oplus (a_2 + a_3) \\oplus \\ldots \\oplus (a_2 + a_n) \\oplus \\\\ \\ldots \\\\ \\oplus (a_{n-1} + a_n) \\\\ \\end{align*}$$ \n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30957","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t서울사이버대학교 빅데이터·정보보호학과는 빅데이터에 관심이 있는 학생들과 정보보호에 관심이 있는 학생들이 골고루 섞여 있는 학과이다. 2024학년도를 맞이하여 서울사이버대학교는 인공지능학과를 새로 만들게 되었다.\n\n빅데이터·정보보호학과와 인공지능학과의 교육과정을 함께 구상하던 노교수와 천교수는 학생들이 빅데이터, 정보보호, 인공지능 중 어느 분야에 더 관심이 많은지 궁금해졌다. 그래서 학생들을 만날 때마다 항상 이를 물어보고 답을 B, S, A로 구분하여 메모장에 적어두었다. (B는 빅데이터, S는 정보보호, A는 인공지능을 의미한다.)\n\n지금 상태로는 한눈에 들어오지 않아 학생들이 빅데이터, 정보보호, 인공지능 중 어느 분야에 더 관심이 많은지를 알아내기 어렵기 때문에, 당신에게 분석을 의뢰했다. 물어본 학생의 수와 답이 주어질 때, 결과를 출력하자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30958","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n서울사이버대학을 다니고 나의 성공 시대 시작됐다\n\n서울사이버대학을 다니고 나를 찾는 회사 많아졌다\n\n서울사이버대학을 다니고 내 인생이 달라졌다\n\n미래를 바꾸는 전략\n\n서울사이버대학교\n\n\n\n\n\n서울사이버대학교 로고송은 중독성 강한 멜로디로 매우 매우 유명하다. 빅데이터·AI센터에서 데이터 분석을 하던 노교수와 천교수는 어디선가 들려오는 로고송을 듣고 가장 많이 사용된 글자가 몇 번이나 등장하는지 궁금해졌다.\n\n멜로디에 중독된 두 교수를 대신해서 가장 많이 사용된 글자가 몇 번 등장하는지를 출력하자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30959","content":"문제\n\n서울사이버대학교 인공지능학과 개설을 기념하여, 노교수와 천교수는 학생들에게 이진 분류 인공지능 모델을 각자 하나씩 개발해 오라는 과제를 내줬다. 개발된 모델들의 성능을 평가하던 중, 두 교수는 모델들을 결합하여 앙상블 기법으로 성능을 향상시킬 수 있는지 궁금해졌다. 앙상블은 여러 모델의 결과를 조합하는 방법론으로, 이번에는 각 예측 항목마다 더 많은 모델이 출력한 값을 최종 결과로 채택하는 하드 보팅 앙상블을 사용해 보기로 했다. 이 문제에서는 앙상블 시 홀수 개의 모델만을 선택한다고 가정한다.\n\n예를 들어, 6개의 예측 항목에 대한 정답이 \n[0,1,0,1,1,0]\n$[0, 1, 0, 1, 1, 0]$이고, 네 학생의 모델 예측 결과가 아래와 같이 주어진다고 하자.\n\n1번 학생: \n[1,0,0,1,1,0]\n$[1, 0, 0, 1, 1, 0]$ \n2번 학생: \n[0,1,1,1,1,0]\n$[0, 1, 1, 1, 1, 0]$ \n3번 학생: \n[0,1,0,0,0,0]\n$[0, 1, 0, 0, 0, 0]$ \n4번 학생: \n[0,0,1,0,1,0]\n$[0, 0, 1, 0, 1, 0]$ \n\n이 모델들 중 1번 학생, 2번 학생, 4번 학생의 모델을 선택해 하드 보팅으로 앙상블했을 때의 결과는 \n[0,0,1,1,1,0]\n$[0, 0, 1, 1, 1, 0]$이며, 하나하나 살펴보면 다음과 같다.\n\n첫 번째 예측 항목: \n0\n$0$은 두 번, \n1\n$1$은 한 번 나왔으므로 최종 예측은 \n0\n$0$ \n두 번째 예측 항목: \n0\n$0$은 두 번, \n1\n$1$은 한 번 나왔으므로 최종 예측은 \n0\n$0$ \n세 번째 예측 항목: \n0\n$0$은 한 번, \n1\n$1$은 두 번 나왔으므로 최종 예측은 \n1\n$1$ \n네 번째 예측 항목: \n0\n$0$은 한 번, \n1\n$1$은 두 번 나왔으므로 최종 예측은 \n1\n$1$ \n다섯 번째 예측 항목: \n0\n$0$은 없고, \n1\n$1$은 세 번 나왔으므로 최종 예측은 \n1\n$1$ \n여섯 번째 예측 항목: \n0\n$0$은 세 번, \n1\n$1$은 없으므로 최종 예측은 \n0\n$0$ \n\n이렇게 앙상블한 결과를 정답과 비교하여 정확도를 계산한다. 이 경우 6개 항목 중 4개가 일치하므로 정확도는 \n46\n$\\frac{4}{6}$다.\n\n만약 정확도가 가장 뛰어난 하나의 모델만 선택했을 때보다 더 높은 정확도를 가지는 앙상블 조합이 존재할 경우, 앙상블로 성능을 향상시킬 수 있다고 판단한다. 그러한 조합이 있는지 확인하라."},{"problemId":"30981","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t고등학생이 되어 떡볶이와 튀김이 먹고 싶어진 파댕이는 점심시간에 학교에서 탈출해 분식점에 간다는 사악한 계획을 세웠다.\n\n\n\n학교를 나가려고 주변을 살펴본 파댕이는 선생님들이 주변을 감시하고 있어 학교를 쉽게 출입할 수 없다는 사실을 깨달았다. 파댕이가 선생님의 감시에 걸리지 않고 점심시간 내에 떡볶이를 먹고 교실로 돌아올 수 있는지 확인해 주자!\n\n탈출해야 하는 학교는 N×M$N \\times M$ 의 격자 구조이며, 파댕이는 다음과 같은 사실들을 알아내었다.\n\n\n\t파댕이가 탈출을 결심한 시점은 t=1$t = 1$이며, 파댕이가 교실로 돌아왔을 때에도 t≤T$t \\le T$를 만족해야 한다.\n\t파댕이는 현재 교실에 있으며, 교실은 (1,1)$(1 , 1)$ 칸에, 분식점은 (N,M)$(N, M)$ 칸에 존재한다.\n\t각 격자 칸에서 #은 장애물을, .은 빈 공간을 의미한다. 선생님과 파댕이는 장애물 위를 지나갈 수 없으며, 지도 밖으로도 나갈 수 없다.\n\t파댕이는 t≡5(mod10)$t \\equiv 5 \\pmod{10}$일 때마다 가만히 있거나 인접한 칸으로 이동할 수 있으며, 파댕이가 분식점에서 식사를 끝낸 시점 teat$t_{eat}$에 대해 teat≡5(mod10)$t_{eat} \\equiv 5 \\pmod{10}$라면 식사를 끝내자마자 바로 이동할 수 있다.\n\t선생님은 항상 주어진 경로를 따라 순서대로 이동하며, t≡0(mod10)$t \\equiv 0 \\pmod{10}$일 때 이동한다.\n\t선생님은 인접한 8개의 칸만을 감시하고 있으며. 한 칸 위에 선생님이 여러 명 있을 수도 있다. 또한 파댕이는 모든 시점에 선생님의 감시에 걸려서는 안 된다. 단, 인접한 칸으로 이동하는 도중에는 선생님의 감시에 걸리지 않는다.\n\t파댕이가 교실이나 분식점에 있는 경우에는 선생님의 감시에 걸리지 않는다.\n\n\n\n\n\n두 칸 (a,b)$(a , b)$와 (x,y)$(x , y)$가 서로 인접한다는 것은 max(|a−x|,|b−y|)=1$\\max (\\left\\vert a - x \\right\\vert, \\left\\vert b - y \\right\\vert) = 1$임을 의미한다.\n\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30982","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t파댕이는 그동안 학교 공부를 열심히 하여 무사히 댕댕대학교에 진학하였다! 파댕이는 MT 여행으로 이 기쁨을 만끽하려 했으나 술을 잘 마시지 못해서 걱정이 이만저만이 아니다.\n\n\n\n하지만, 이 사실을 알게 되면 댕댕이들이 파댕이만 빼고 친해질 것 같아 어쩔 수 없이 그 사실을 숨긴 채 술 게임에 참여하게 되었다.\n\n\n\n지금 하는 술 게임은 짝 만들기 게임으로 일렬로 나열된 N$N$개의 구역에 각 댕댕이들은 원하는 구역에 들어가 같은 구역에 있는 댕댕이끼리 서로 한 무리가 된 채로 시작하여 다른 무리와 팀을 이뤄 제한 시간 T$T$초 안에 M$M$마리로 뭉쳐야 한다. 다른 무리와 팀을 이룰 때 무리 중 일부가 빠질 수 없으며, 팀을 이루지 않은 상황일 때도 현재 무리 중 일부가 빠져나갈 수도 없다. 만약 제한 시간 내에 M$M$마리 무리에 속하지 않거나 규칙을 지키지 않은 댕댕이들은 벌칙으로 폭탄주를 마셔야 한다.\n\n파댕이를 제외한 나머지 댕댕이들은 그저 그 자리를 지키며 누군가 자신을 데려가기만 바라고 있어 폭탄주를 마실까 봐 무서운 파댕이는 직접 자신의 무리를 이끌어 M$M$마리를 만들려 한다. 파댕이가 현재 P$P$번째 구역에 있으면 1$1$초마다 P−1$P-1$번째 또는 P+1$P+1$번째 구역으로 이동할 수 있고, 그 구역에 있는 무리를 데려오거나 지나갈 수 있다. 다른 무리를 데려올 때는 시간 소요는 들지 않으며, 게임을 시작한 지 정확히 T$T$초가 지났을 때도 다른 무리를 데려올 수 있다.\n\n파댕이가 제한 시간 T$T$초 안에 무사히 M$M$마리 댕댕이들을 모을 수 있는지 알아보자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31000","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t최근 덧셈과 곱셈을 공부하던 즈티는 분배법칙이라는 것을 배웠다. 덧셈과 곱셈에 대한 분배법칙은 다음이 항상 성립함을 의미한다.\n\n\n\t임의의 세 실수 a$a$, b$b$, c$c$에 대해 a×(b+c)=(a×b)+(a×c)$a \\times (b + c) = (a \\times b) + (a \\times c)$.\n\n\n여기서 즈티는 덧셈과 곱셈 기호의 위치가 바뀐 다음과 같은 식도 성립하지는 않는지 의문이 생겼다.\n\n\n\t임의의 세 실수 a$a$, b$b$, c$c$에 대해 a+(b×c)=(a+b)×(a+c)$a + (b \\times c) = (a + b) \\times (a + c)$.\n\n\n즈티는 아직 어려서 큰 수를 다루지 못한다. 그래서 a$a$, b$b$, c$c$가 절댓값이 N$N$을 넘지 않는 정수인 경우에만 위 식을 계산할 수 있다. 아직 의문이 풀리지 않은 즈티를 위해, 주어진 조건에서 기호가 교환된 분배법칙을 만족하는 (a,b,c)$(a, b, c)$ 정수 쌍의 개수를 구해주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30698","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tWu got hungry after an intense training session, and came to a nearby store to buy his favourite instant noodles. After Wu paid for his purchase, the cashier gave him an interesting task.\n\n\nYou are given a bipartite graph with positive integers in all vertices of the right half. For a subset S$S$ of vertices of the left half we define N(S)$N(S)$ as the set of all vertices of the right half adjacent to at least one vertex in S$S$, and f(S)$f(S)$ as the sum of all numbers in vertices of N(S)$N(S)$. Find the greatest common divisor of f(S)$f(S)$ for all possible non-empty subsets S$S$.\n\n\nWu is too tired after his training to solve this problem. Help him!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30699","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tChris is a fan of puzzles. Recently he learned about Sudoku puzzles, that are based on Latin squares. A k×k$k \\times k$ table is called a Latin square if the number of distinct elements in the table is k$k$, and there are no two equal elements in the matrix that share the same row or the same column.\n\nFor example, ,  and  are Latin squares, while ,  and  are not.\n\nChris wants to make a new Latin square puzzle. However, he only has an old template, which is an n×m$n \\times m$ table. Chris wants to cut a contiguous Latin square fragment from the template. In how many ways can he do this? Two ways to cut a square are considered different if there is a cell that is present in one square, but not present in the other.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30983","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t파댕이의 즐거운 대학생활은 순식간에 지나가고, 입영일이 되어 파댕이는 입대를 하게 되었다. 파댕이는 너무 슬프다.\n\n\n\n힘든 훈련소 생활을 끝내고, 파댕이는 사단 본부에 배치받았다. \n\n파댕이의 부대에는 두 건물을 연결하는 도로가 있는데, 놀랍게도 세 건물을 연결하는 도로도 있었다. 하지만 파댕이는 훈련소 기간동안 사회의 맛을 보지 못해 세 건물을 연결하는 도로를 처음 봤다. 모든 것이 신기한 파댕이는 부대 곳곳을 돌아다니기 시작했다. 얼마나 시간이 지났을까, 파댕이가 사라진 사실을 알게 된 행정보급관은 무슨 일이 생기지는 않았을까 노심초사하고 있다. 파댕이가 걱정된 행정보급관은 파댕이를 찾기 위해 파댕이가 있을 가능성이 높은 곳부터 찾아보기로 결심했다. 파댕이는 어디에 있을까?\n\n사단에는 N$N$개의 건물이 있고, 각 건물에는 1$1$ 이상 N$N$ 이하의 자연수가 중복없이 건물 번호로 주어진다. 파댕이는 1$1$번 건물에서 출발해 다른 연결된 건물들을 자유롭게 이동한다. 파댕이는 건물에 멈춰서 머무르지 않고, 도로를 따라가다가 중간에 되돌아오지 않는다. 파댕이가 두 건물 사이를 이동하는 데 걸리는 시간은 1$1$분이며, 세 건물을 연결하는 도로를 이용할 때는 두 배의 시간이 소요된다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31020","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou're almost free. You've successfully fought your way out of the haunted mansion; now the only obstacle remaining is a square field. The field is completely flat, so it should be a breeze to cross it, right? Too bad the field is full of ghosts...\n\nWhen you start (time = 0 seconds), you and each of the ghosts are located at some set of integer coordinates (the center of the field is (0,0)). No ghost can start at the same position as you or another ghost.\n\nYou and the ghosts can only move in straight lines parallel to the sides of the field, and you and the ghosts will not necessarily all be going in the same direction. All ghosts are the same size as you, and neither the ghosts nor you can change direction once started.\n\nThe ghosts will start moving at the same time you do, and you and the ghosts will all be moving at the same constant rate (velocity = 1 unit per second).\n\nGhosts pass through each other, and doing so does not change their speed or direction. Similarly, if a ghost runs into what would have been the field's boundary, they pass beyond it and are no longer within the field's potential collision space.\n\nGiven the starting positions and direction for you and each of the ghosts, find the earliest time at which you will collide with a ghost. If you will have no collisions with any ghosts, you are SAFE.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30984","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t어릴 때부터 달달한 음식을 좋아했던 파댕이는 달달한 음식을 직접 만들고 싶어 했고, 식품 회사에서 인턴을 하게 되었다.\n\n\n\n파댕이가 첫 번째로 맡은 일은 N$N$개의 케이크 단을 쌓는 일이다. 파댕이는 매일 K$K$개의 케이크를 쌓아 완성해야 하며, 케이크는 가장 아랫단부터 가장 윗단까지 순서대로 쌓아야 한다. 즉, 1$1$번째 단은 바로 쌓을 수 있으며, 1$1$ 이상의 정수 i$i$에 대해서 i+1$i+1$번째 단을 받았을 때 그 단을 케이크 위에 올리기 위해서는 i$i$번째 단까지만 올라가 있는 케이크가 있어야만 한다. \n\n\n\n매일 출근하여 케이크를 만들던 파댕이는 작업 과정에서 올릴 수 없는 케이크 단을 받게 될 확률이 상당히 높다는 것을 깨달았다. 작업 중간에 올릴 수 없는 케이크 단을 받게 되는 것이 작업 능률에 있어 심각한 문제라고 생각한 파댕이는 문제 제기를 위해 \"임의의 순서로 케이크의 단이 주어질 때, 작업 중간에 올릴 수 없는 케이크 단이 주어지지 않을 확률\"을 계산해 보고하기로 마음먹었다. 파댕이를 대신해 확률을 계산해 주자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31021","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou've decided to make some cookies for your sweetheart when she comes home from a long day of work. Mom always told you that food was the way to a woman's heart. Hopefully your sweetie will enjoy these cookies while you find a way to discuss how fixing the car might set your budget back a little bit next month.\n\nWhilst preparing the sheet of cookie dough to cut shapes from, a presence can be sensed nearby. She thinks she's being sneaky, but you can hear your daughter giggling every time you turn your back!\n\nThe oven's alarm indicates it's preheated to the right temperature, but when you go to cut out the special shapes you wanted to make, you notice there are bites of cookie dough missing!\n\n\"Argh!!\" you shout as you hear your daughter laughing her cookie-filled face all the way down the street as she goes to play with her friends.\n\nWell it's time to put that computer science education to work. You'll need to know how many cookies you can get out of the remaining cookie dough so that you can figure out how much time you'll have to discuss money with your darling.\n\nGood thing you can rearrange the cookie dough as many times as necessary to maximize the number of cookies you can make (keeping the dough at a constant thickness). The bites your daughter took may overlap, but all are fully contained within the bounds of the dough.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31001","content":"문제\n\n하이비는 오늘도 주식 시장에 돈을 투자했다가 돈을 잃고 말았다. 매일 돈을 잃고만 있는 하이비를 보며 안타까워하던 유틸은 주식 시뮬레이션 프로그램이 담긴 USB를 전달하며 투자 연습을 해보라고 제안했다.\n\n하이비는 집에 도착해 컴퓨터에 USB를 꽂았다. 주식 시뮬레이션 프로그램을 실행해 보니 \n7\n$7$가지 메뉴가 나타났다. 각 메뉴는 다음과 같다.\n\n1 \nA\n$A$ \nB\n$B$: 회사 \nA\n$A$의 주식을 \nB\n$B$주 산다. 현재 보유하고 있는 현금으로 회사 \nA\n$A$의 주식을 \nB\n$B$주 살 수 없다면 한 주도 사지 않는다.\n2 \nA\n$A$ \nB\n$B$: 회사 \nA\n$A$의 주식을 \nB\n$B$주 판다. 현재 보유하고 있는 회사 \nA\n$A$의 주식이 \nSA\n$S_A$주일 때, \nSA=0\n$S_A = 0$이라면 아무 일도 일어나지 않는다. \nB≥SA\n$B \\ge S_A$라면 \nSA\n$S_A$주를 모두 판다.\n3 \nA\n$A$ \nC\n$C$: 회사 \nA\n$A$의 주가가 \nC\n$C$원 올랐다. \nC<0\n$C < 0$인 경우 주가가 \n|C|\n$|C|$원 떨어진 것이다.\n4 \nD\n$D$ \nC\n$C$: \nD\n$D$번 그룹에 속하는 회사들의 주가가 \nC\n$C$원 올랐다. \nC<0\n$C < 0$인 경우 주가가 \n|C|\n$|C|$원 떨어진 것이다.\n5 \nD\n$D$ \nE\n$E$: \nD\n$D$번 그룹에 속하는 회사들의 주가가 \nE\n$E$% 올랐다. \nE<0\n$E < 0$인 경우 주가가 \n|E|\n$|E|$% 떨어진 것이다.\n6: 현재 하이비가 보유하고 있는 현금을 출력한다.\n7: 현재 하이비가 보유하고 있는 주식들을 전부 팔았을 때, 보유하고 있는 현금의 총합을 출력한다.\n\n또한 프로그램 매뉴얼에 따르면 다음과 같은 특징이 있다.\n\n처음에 하이비가 보유하고 있는 주식은 없다.\n회사 이름은 대소문자를 구별한다.\n주식 시뮬레이션 프로그램에서 주식을 사거나 팔 때의 단위는 \n10\n$10$ 원이다. 5번 메뉴의 경우 변동률에 따라 회사들의 주가를 반영하고 난 뒤 일의 자리에서 버림한다.\n모든 시점에 대해 각 회사의 주가 \nPi\n$P_i$는 \n0≤Pi≤2×109\n$0 \\le P_i \\le 2 \\times 10^{9}$ \n(1≤i≤N)\n$(1 \\le i \\le N)$ 임이 보장된다.\n모든 시점에 대해 하이비가 보유하고 있는 주식들을 전부 팔았을 때, 보유하고 있는 현금의 총합이 \n2×1012\n$2 \\times 10^{12}$ 원을 초과하지 않음이 보장된다.\n1번, 2번, 3번 메뉴 입력에서 \nA\n$A$는 주식 시장에 상장한 회사임이 보장된다.\n4번 또는 5번 메뉴 입력에서 \nD\n$D$번 그룹에 속하는 회사가 하나 이상 존재한다.\n6번 또는 7번 메뉴 입력은 최소 한 번 이상 주어진다.\n\n하이비는 다양한 데이터를 넣어보면서 주식 시뮬레이션을 해보기 시작했다. 그런데 한 가지 문제가 있었다. 6번 또는 7번 메뉴를 선택하면 현금이 출력되어야 하는데, 프로그램을 잘못 구현했는지 전부 ???로만 뜨는 것이었다.\n\n하이비는 유틸에게 전화를 걸어 프로그램에 문제가 있다고 이야기했다. 그러자 유틸은 입력한 데이터를 전부 주면, 6번 또는 7번 메뉴를 선택했을 때의 결과를 알려주겠다고 했다. 하지만 유틸은 지금 다른 프로그램을 만들고 있느라 너무 바빠 여러분에게 이 일을 대신 처리해 줄 수 있겠냐고 부탁했다. 유틸을 도와주도록 하자!"},{"problemId":"31002","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t그래프의 변환(f:G↦G′)$(f:G \\mapsto G')$을 다음과 같이 정의한다. G$G$의 간선을 G′$G'$의 정점으로 보고 G$G$의 인접한 간선끼리 G′$G'$에서 간선으로 연결하여 G$G$에서 인접하였음을 나타낸다.\n\n서로 다른 두 간선이 같은 정점을 하나 이상 공유하면 두 간선이 인접한다고 표현한다.\n\n다음은 그래프 변환의 예시 중 하나이다.\n\n\n\n그리고 변환한 그래프를 다시 변환하는 것도 가능하다.\n\n N$N$-완전 그래프를 K$K$번 변환한 그래프의 정점이 몇 개인지 구하시오. N$N$-완전 그래프는 정점이 N$N$개인 그래프에서 서로 다른 두 정점에 대해 반드시 간선이 존재하는 그래프이다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31040","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn the game of chess, knights are underwhelming and unique. No other piece in chess moves like the knight in its 'L' shaped pattern. The Knight moves in an L shape in any direction. We can say that it either moves two squares sideways and then one square up or down, or two squares up or down, and then one square sideways.\n\n\n\nFigure 1: The highlighted squares show all possible moves for a knight.\n\nThe Knight changes the colour of the square it stands on with each move. Therefore, if it starts off on a light coloured square, when it has finished its move it will land on a dark coloured square. In the diagram the Knight can move to any of the red squares.\n\nThe formula for the maximum number of knights on a board are\n\n\n\n\t\n\t\t\n\t\t\tnumber of knights =\n\t\t\t(1/2)((n^2)+1) for n > 1 && n mod 2 == 1\n\t\t\n\t\t\n\t\t\t(1/2)(n^2) for n > 2 && n mod 2 == 0\n\t\t\n\t\n\n\n\nIn the nine knights puzzle, nine knights are positioned on a 5 by 5 board, even though you can fit a maximum of thirteen. The knights are placed so that they can coexist without attacking one another. The board below shows an invalid solution :\n\n...k.\n...k.\nk.k..\n.k.k.\nk.k.k\n\nA solution is valid if and only if there are exactly nine knights on the board and no two knights are attacking one another.\n\nGiven the description of a chess board, your job is to determine whether or not it represents a valid solution to the nine knights puzzle.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31022","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA gradebook has been corrupted so that the columns have been removed. Each student's record simply contains a single string of digits. Knowing that the string of digits must have come from G different assignments (each with a possible integer grade between 0 and 100, inclusive), parse the string so that the average of the G grades is maximized. No grade other than 0 will start with the digit 0 (i.e. there are no leading zeros in any grade). Print out the average for the given grades, rounded to the nearest integer.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30985","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t파댕이는 중견기업 회사에서 직장인으로 일하고 있다. 사장님이 직장인 파댕이를 무척 아끼기 때문에, 파댕이는 사장실에 찾아가 사장님께 인사를 하려고 한다.\n\n\n\n직장인 파댕이의 회사가 있는 건물은 K$K$층으로 구성되어 있는데 각 층은 방과 복도로 구성되어 있다. 복도를 통해 방과 방 사이를 양방향으로 이동할 수 있다. 모든 층은 같은 모습을 하고 있다. 파댕이는 현재 1$1$층의 1$1$번 방에 있고, 사장실은 K$K$층의 N$N$번 방이다. 파댕이는 현재 자신의 위치에서부터 사장실까지 최소 시간을 사용하여 도착할 방법을 찾아야 한다.\n\n파댕이는 각각의 복도를 지나가는 데 걸리는 시간이 얼마인지 알고 있다. 더불어 어떤 방에는 엘리베이터가 있어서 그 엘리베이터를 타고 위층으로 올라갈 수 있다. 한 층의 i$i$번 방에 설치된 엘리베이터는 다른 층에 있는 모든 i$i$번 방을 연결한다. 특정 엘리베이터에만 사람이 몰릴 수 있기 때문에 어떤 엘리베이터는 빠르고 어떤 엘리베이터는 느릴 수 있다. 파댕이는 각각의 엘리베이터가 한 층을 올라가는 데 걸리는 시간이 얼마인지도 알고 있다.\n\n건물의 모습과 엘리베이터의 속도가 주어지면, 파댕이가 사장실까지 가는 최소 시간을 계산하는 프로그램을 작성하시오.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31003","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t N$N$개의 양의 정수로 이루어진 수열 A=[A1,⋯,AN]$A = [A_1, \\cdots, A_N]$가 주어진다. 당신은 원하는 만큼 다음 조작을 할 수 있다. 조작을 하지 않는 것도 가능하다.\n\n\n\t수열에서 인접한 원소가 서로소일 때, 그 두 원소의 순서를 바꾼다.\n\n\n두 수의 최대공약수가 1$1$인 경우 두 수를 서로소라고 한다. 이때, 조작 이후 사전 순으로 최소인 수열 A$A$를 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31041","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\"Kooky Kenny\" (as the carnies call him) is setting up a park attraction at the state fair.\n\nHe has already set up the tent for the circus performance he wishes to put up. What he wants to know is how to construct the barrier around the tent.\n\nHe knows he wants an isoceles triangle, with the shorter side being the side where he'll set up the ticket booth. Therefore people will be deterred from going along the longer sides, since park patrons hate walking.\n\nWhile he knows how long he wants to make the shorter side, he wants to use the minimum amount of tape to make the other edges.\n\nPutting on a circus is a costly business! Expenses need to be minimized and profits need to be maximized! Therefore the shorter side will be just long enough to encompass the circus tent.\n\nBeing the park's problem solver, can you help figure out the other side lengths for Kenny? Assuming the tent is a perfect circle of course.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31004","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이 문제는 인터랙티브 문제다.\n\n 1$1$ 이상 1000$1\\,000$ 이하의 N$N$개의 정수로 이루어진 배열 A=[A1,A2,⋯,AN]$A = [A_{1}, A_{2}, \\cdots, A_{N}]$가 있다. 배열의 원소 중 자신과 같은 값을 가진 원소가 다른 위치에 존재하지 않는 경우 이를 고유한 원소라고 한다.\n\n당신은 이 배열의 원소들을 알지 못하는 상태이다. 당신은 다음과 같은 질문을 최대 2N$2N$번 할 수 있다.\n\n\n\t ?$?$ L$L$ R$R$: 배열 A$A$의 부분 배열 [AL,AL+1,⋯,AR−1,AR]$[A_{L}, A_{L+1}, \\cdots, A_{R-1}, A_{R}]$의 원소 중 고유한 원소의 개수를 질문한다.\n\n\n이 질문을 이용해 배열 A$A$에서 모든 고유한 원소의 위치를 찾아내야 한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30986","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t파댕이는 근무하던 중 자신의 예술성을 깨달았고, 사직서를 낸 후 예술가가 되었다!\n\n파댕이는 유명한 예술가가 되고 싶어 여러 작품을 만든다. 이번에는 4차원 구조물을 만들 예정이다.\n\n\n\n파댕이가 만들 작품은 정십육포체의 바깥을 둘러싸는 16개의 정사면체의 중심에 빛이 나는 전구를 장착해 빛나는 정십육포체이다. 파댕이가 사용할 전구는 한 개 또는 두 개의 정사면체를 동시에 빛나게 할 수 있다. 두 개의 정사면체를 동시에 빛나게 하기 위해서 두 정사면체가 만나는 교면의 중심에 구멍을 뚫었다. 이 구멍을 통해서 두 개의 정사면체가 동시에 빛나게 할 전구를 통과시킬 수 있다. 파댕이는 돈이 모자라 전구에 드는 돈을 최대한 아끼고자 한다.\n\n하지만 파댕이가 만든 정십육포체의 몇 개의 면에는 전구가 통과할 구멍이 없다! 파댕이를 도와 정십육포체의 정사면체를 모두 빛나게 하는 데 필요한 전구의 최소 개수를 구해주자.\n\n정십육포체를 둘러싸는 정사면체에 1$1$번 정사면체는 2$2$, 3$3$, 4$4$, 5$5$번 정사면체와 이웃하고, 2$2$번 정사면체는 6$6$, 7$7$, 8$8$번 정사면체와 이웃하고, 3$3$번 정사면체와 6$6$, 9$9$, 10$10$번, 4$4$번 정사면체와 7$7$, 9$9$번 정사면체가 이웃하도록 번호를 붙였다. 서로 반대편 정사면체와의 번호 합은 항상 17$17$이다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31042","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n L$L$ trominos,replicated.\n\nThe L$L$-tromino is composed of three unit squares arranged as shown in part A of the illustration to the right. The L$L$-tromino is also an example of a rep-tile because four L$L$-trominos can be arranged to make a replica of itself that is twice as tall and twice as wide, as shown in B. Rep-tiles are interesting because, once they can tile themselves, they can recursively tile as much of the plane as we want, as suggested in C and D. Part C is made from four copies of B, and D is made from four copies of C. Figure 1 shows the first quadrant of the plane completely tiled by L$L$-trominos by repeating the same procedure.\n\nFor this problem, you will be given a square in the first quadrant, and your task is to find the orientation of the L$L$-tromino covering that square. The unit squares of the first quadrant are numbered 0,1,2,…$0, 1, 2, \\ldots $ in the x$x$- and y$y$-directions, as shown. The dots, in order from left to right, correspond to the first four sample inputs.\n\n\n\nFigure 1: L$L$-trominos tiling the first quadrant.\n\n\n\nFigure 2: L$L$-tromino orientations.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31043","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are developing a smartphone app that converts audio recorded from an instrument into sheet music. You already have the code to record the audio and convert it into sequence of frequency values. What is left is to translate those frequencies into pitch names more easily recognizable to musicians.\n\nSome Music Theory\n\nMusical pitches are described by frequencies using a logarithmic scale. The frequency 440 Hz$440\\ \\textrm{Hz}$ corresponds to the pitch named A$\\textrm{A}$. Multiplying a pitch’s frequency by 212$\\sqrt [12]{2}$ produces the next higher pitch. Table 1 lists pitches used in Western music and their frequencies.\n\n\n\nTable 1: Frequencies and corresponding pitch names of various notes.\n\n\n\t\n\t\t\n\t\t\t\n\t\t\tfrequency (Hz)\n\t\t\t\n\t\t\t\n\t\t\tpitch name\n\t\t\t\n\t\t\t\n\t\t\tfrequency (Hz)\n\t\t\t\n\t\t\t\n\t\t\tpitch name\n\t\t\t\n\t\t\n\t\t\n\t\t\t\n\t\t\t 440$440$ \n\t\t\t\n\t\t\t\n\t\t\t A$\\textrm{A}$ \n\t\t\t\n\t\t\t\n\t\t\t 440⋅26/12≈622.25$440 \\cdot 2^{6/12} \\approx 622.25$ \n\t\t\t\n\t\t\t\n\t\t\t D♯$\\textrm{D}^{\\sharp }$, E♭$\\textrm{E}^{\\flat }$ \n\t\t\t\n\t\t\n\t\t\n\t\t\t\n\t\t\t 440⋅21/12≈466.16$440 \\cdot 2^{1/12} \\approx 466.16$ \n\t\t\t\n\t\t\t\n\t\t\t A♯$\\textrm{A}^{\\sharp }$, B♭$\\textrm{B}^{\\flat }$ \n\t\t\t\n\t\t\t\n\t\t\t 440⋅27/12≈659.26$440 \\cdot 2^{7/12} \\approx 659.26$ \n\t\t\t\n\t\t\t\n\t\t\t E$\\textrm{E}$ \n\t\t\t\n\t\t\n\t\t\n\t\t\t\n\t\t\t 440⋅22/12≈493.88$440 \\cdot 2^{2/12} \\approx 493.88$ \n\t\t\t\n\t\t\t\n\t\t\t B$\\textrm{B}$ \n\t\t\t\n\t\t\t\n\t\t\t 440⋅28/12≈698.46$440 \\cdot 2^{8/12} \\approx 698.46$ \n\t\t\t\n\t\t\t\n\t\t\t F$\\textrm{F}$ \n\t\t\t\n\t\t\n\t\t\n\t\t\t\n\t\t\t 440⋅23/12≈523.25$440 \\cdot 2^{3/12} \\approx 523.25$ \n\t\t\t\n\t\t\t\n\t\t\t C$\\textrm{C}$ \n\t\t\t\n\t\t\t\n\t\t\t 440⋅29/12≈739.99$440 \\cdot 2^{9/12} \\approx 739.99$ \n\t\t\t\n\t\t\t\n\t\t\t F♯$\\textrm{F}^{\\sharp }$, G♭$\\textrm{G}^{\\flat }$ \n\t\t\t\n\t\t\n\t\t\n\t\t\t\n\t\t\t 440⋅24/12≈554.37$440 \\cdot 2^{4/12} \\approx 554.37$ \n\t\t\t\n\t\t\t\n\t\t\t C♯$\\textrm{C}^{\\sharp }$, D♭$\\textrm{D}^{\\flat }$ \n\t\t\t\n\t\t\t\n\t\t\t 440⋅210/12≈783.99$440 \\cdot 2^{10/12} \\approx 783.99$ \n\t\t\t\n\t\t\t\n\t\t\t G$\\textrm{G}$ \n\t\t\t\n\t\t\n\t\t\n\t\t\t\n\t\t\t 440⋅25/12≈587.33$440 \\cdot 2^{5/12} \\approx 587.33$ \n\t\t\t\n\t\t\t\n\t\t\t D$\\textrm{D}$ \n\t\t\t\n\t\t\t\n\t\t\t 440⋅211/12≈830.61$440 \\cdot 2^{11/12} \\approx 830.61$ \n\t\t\t\n\t\t\t\n\t\t\t G♯$\\textrm{G}^{\\sharp }$, A♭$\\textrm{A}^{\\flat }$ \n\t\t\t\n\t\t\n\t\t\n\t\t\t \n\t\t\t \n\t\t\t\n\t\t\t 880$880$ \n\t\t\t\n\t\t\t\n\t\t\t A$\\textrm{A}$ \n\t\t\t\n\t\t\n\t\n\n\n\n\nDoubling any pitch’s frequency yields the same pitch, but one octave higher (note that both 440$440$ and 880 Hz$880\\ \\textrm{Hz}$ correspond to pitch A$\\textrm{A}$). This rule generalizes: multiplying 554.37 Hz$554.37\\ \\textrm{Hz}$ by a power of two yields another C♯$\\textrm{C}^{\\sharp }$. Some pitches have multiple names, as shown in the table.\n\nYour Task\n\nYou have a song, represented as a sequence of frequencies. Songs in a musical key typically contain only a subset of the possible pitches. Assume that the given song is in one of the common keys listed in Table 2. First, determine what key the song is in. Then, translate the song into a sequence of pitch names.\n\n\n\nTable 2: A few musical keys and the pitches they use.\n\n\n\t\n\t\t\n\t\t\t\n\t\t\tkey name\n\t\t\t\n\t\t\t\n\t\t\tallowed pitches\n\t\t\t\n\t\t\t\n\t\t\tkey name\n\t\t\t\n\t\t\t\n\t\t\tallowed pitches\n\t\t\t\n\t\t\n\t\t\n\t\t\t\n\t\t\t G$\\textrm{G}$ major\n\t\t\t\n\t\t\t\n\t\t\t G$\\textrm{G}$, A$\\textrm{A}$, B$\\textrm{B}$, C$\\textrm{C}$, D$\\textrm{D}$, E$\\textrm{E}$, and F♯$\\textrm{F}^{\\sharp }$ \n\t\t\t\n\t\t\t\n\t\t\t F♯$\\textrm{F}^{\\sharp }$ minor\n\t\t\t\n\t\t\t\n\t\t\t F♯$\\textrm{F}^{\\sharp }$, G♯$\\textrm{G}^{\\sharp }$, A$\\textrm{A}$, B$\\textrm{B}$, C♯$\\textrm{C}^{\\sharp }$, D$\\textrm{D}$, and E$\\textrm{E}$ \n\t\t\t\n\t\t\n\t\t\n\t\t\t\n\t\t\t C$\\textrm{C}$ major\n\t\t\t\n\t\t\t\n\t\t\t C$\\textrm{C}$, D$\\textrm{D}$, E$\\textrm{E}$, F$\\textrm{F}$, G$\\textrm{G}$, A$\\textrm{A}$, and B$\\textrm{B}$ \n\t\t\t\n\t\t\t\n\t\t\t G$\\textrm{G}$ minor\n\t\t\t\n\t\t\t\n\t\t\t G$\\textrm{G}$, A$\\textrm{A}$, B♭$\\textrm{B}^{\\flat }$, C$\\textrm{C}$, D$\\textrm{D}$, E♭$\\textrm{E}^{\\flat }$, and F$\\textrm{F}$ \n\t\t\t\n\t\t\n\t\t\n\t\t\t\n\t\t\t E♭$\\textrm{E}^{\\flat }$ major\n\t\t\t\n\t\t\t\n\t\t\t E♭$\\textrm{E}^{\\flat }$, F$\\textrm{F}$, G$\\textrm{G}$, A♭$\\textrm{A}^{\\flat }$, B♭$\\textrm{B}^{\\flat }$, C$\\textrm{C}$, and D$\\textrm{D}$ \n\t\t\t\n\t\t\n\t\n\n\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31023","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tEveryone can generally recognize when they hear a hit song. It's melodic, the words are easy to follow, and is auditorily pleasant.\n\nYour job is to determine if a song will be a hit song based on its lyrics. Because the general population has lost their ideals of quality due of oversaturation of media, the threshold for deciding if a song will be a hit or not will be if the song uses words that most people find appealing at least 75% of the time.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30987","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t2023년, 하루는 피부과를 개원해 여드름 전용 레이저인 HARU-LASER를 이용해 사람들의 여드름을 치료해 주고 있다. \n\n여드름의 모양을 나타내는 이차함수는 f(x)=ax2+bx+c$f(x) = ax^2+bx+c$로 정의되어 있고, 레이저에 설정되어 있는 일차함수를 g(x)=dx+e$g(x) = dx+e$로 정의할 때, 레이저의 세기는 ∫x1x2{f(x)−g(x)}dx$\\displaystyle{\\int_{x_1}^{x_2} \\{ f(x) - g(x) \\}\\mathrm{d}x}$로 정의된다.\n\n이때, x1$x_1$, x2$x_2$는 여드름의 양 끝의 x$x$좌표를 나타낸 것이며, f(x)$f(x)$와 g(x)$g(x)$의 정의역은 (−∞,∞)$(-\\infty, \\infty)$이다.\n\n피부과를 개원한 지 얼마 안 된 하루는 레이저의 세기를 잘 계산하지 못한다. 여러분이 하루를 대신해 레이저의 세기를 계산해 주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31005","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t서윤이네 뒷마당에는 M$M$개의 귤이 열려 있는 커다란 귤나무가 있다.\n\n이웃집에 사는 N$N$마리의 곰곰이들은 이 귤나무에 매일 귤을 따러 온다. 매일 1$1$번 곰곰이부터 시작해서 N$N$번 곰곰이까지 차례대로 귤을 따려고 시도하는데, i$i$번 곰곰이는 Ai$A_i$개의 귤을 따려고 시도하며 나무에 남은 귤이 Ai$A_i$개 미만이라면 아무 행동도 하지 않는다.\n\n 10100$10^{100}$ 일이 지났을 때, 귤나무에 남아있는 귤의 개수는 몇 개일지 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31044","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou and your young daughter have been playing a game to help teach her how to read. She of course loves learning her letters, rearranging them, and asking with each rearrangement, ‘what does this spell?’ Much of the time the letters are nonsense, but sometimes they form a real word.\n\nShe is interested in forming really long words, and as such, you have been constructing very long strings of run-together words. She then takes them and adds some letters, removes others, and generally rearranges the letters so that they form something that may be completely different.\n\nYou start writing down the strings before and after your daughter has changed them. The question is: what is the largest portion of the original string that was preserved after she edited it, allowing rearrangement of the letters?\n\nFor example, if the original string you wrote was fourscoreandsevenyearsago, she might have shuffled all of the letters to make ogasraeynevesdnaerocsruof. The second string is just a rearrangement of the first, so the entire original string was in some way preserved.\n\nHowever, if she removes the y and adds a z and rearranges the letters again, the string might become reedcuraanonzovresafoegss, and the longest substring of the original that is still a (rearranged) substring in the result is ears (which is rearranged to resa in her version).\n\nWrite a program that takes as input two strings: the original one you constructed A$A$, and your daughter’s edited version B$B$. Find and report the longest substring of A$A$ that is a permutation of some substring of B$B$. If there are multiple substrings of A$A$ that satisfy this criterion with the same length, output the one that appears first in A$A$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31024","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tGiven a series of file system commands and queries, output the contents of the file requested by each query (a query is a filename to be printed out). If the query is invalid (e.g. path does not exist), the text invalid! must be printed.\n\nThe following commands must be supported:\n\n\n\t\n\t\n\t\techo \"<content>\" > <path>\n\t\t\n\t\tWrites <content> to the file <path>. If <path> exists, it must be a file, and the contents will be replaced. If the path does not exist, its parent directory must exist, and the file will be created. <content> will only contain ASCII numbers, letters, *, ?, <, >, and space.\n\t\t\n\t\n\t\n\t\n\t\n\t\tcp <source> <destination>\n\t\t\n\t\tCopies file <source> to file or directory <destination>. If <destination> already exists and is a directory, the file will be copied to the <destination> directory, with a filename which is the final path component of <source>. Otherwise, <destination> is the new filename, and its parent directory must already exist. The new file replaces any existing content.\n\t\t\n\t\n\t\n\t\n\t\n\t\tmv <source> <destination>\n\t\t\n\t\tMoves file or directory <source> to the file or directory <destination>. Similarly to cp, if <destination> already exists and is a directory, the source file/directory will be moved to a path within the <destination> directory whose name matches the final path component of <source>. Otherwise, <destination> is the new filename, and its parent directory must already exist. The new file replaces any existing content, and <source> is removed.\n\t\t\n\t\n\t\n\t\n\t\n\t\trm <path>\n\t\t\n\t\tDeletes the file with the path <path>.\n\t\t\n\t\n\t\n\t\n\t\n\t\tmkdir <path>\n\t\t\n\t\tCreates a directory with the path <path>. The parent directory must already exist.\n\t\t\n\t\n\t\n\t\n\t\n\t\trmdir <path>\n\t\t\n\t\tRemoves an empty directory with the path <path>.\n\t\t\n\t\n\t\n\n\nAll filesystem paths will only contain numbers, letters, or / and will not exceed 31 characters or 7 path components. Paths components will be separated by a /. All commands in the input are valid and will not refer to non-existent/invalid paths unless behavior is specified above. All commands will be less than 1024 characters.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30988","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t모든 실수 x$x$에 대해 정의되고 계수가 모두 정수인 다항식 f(x)=anxn+an−1xn−1+⋯+a1x+a0$f(x) = a_n x^n + a_{n-1} x^{n-1} + \\cdots + a_1 x + a_0$가 주어진다.\n\n모든 x$x$에 대해 g(g(x))=f(x)$g(g(x)) = f(x)$를 만족하는 다항식 g(x)=bmxm+bm−1xm−1+⋯+b1x+b0$g(x) = b_m x^m + b_{m-1} x^{m-1} + \\cdots + b_1 x + b_0$가 존재한다면, g$g$를 f$f$의 제곱근이라고 한다.\n\n모든 계수 bi$b_i$가 −100$-100$ 이상 100$100$ 이하의 정수인, f$f$의 제곱근 g$g$가 존재하는지 판단하고, 존재한다면 그러한 g$g$를 아무거나 출력하라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31045","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tDoug James is an up-and-coming DJ from Graphland who’s had a tough time making it big. This all changed with the release of his latest EP Wiggly Waves, which is the first album in history to go both Platinum and Uranium. With his newfound popularity, Doug (a.k.a. DJ Polygon) needs help with a problem most artists would be lucky to face: deciding which of his many gig offers to take.\n\nThere are K$K$ venues in Graphland, connected by R$R$ roads. The venues are numbered 1$1$ to K$K$. Doug’s house is venue 1$1$, and he is ready to leave or perform at time t=0$t = 0$.\n\nDoug has G$G$ gig offers. The i$i$-th gig is at venue Vi$V_ i$, runs during the time interval [Si,Ei)$[S_ i,E_ i)$ (inclusive start, exclusive end), and pays out Mi$M_ i$ cryptocents. Doug can’t take multiple gigs at the same time, and he can’t take gigs while he’s traveling between venues.\n\nDoug is overwhelmed by his newfound fame and many gig requests, and wants your help making as much money as possible.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31006","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t무한한 크기의 2차원 좌표평면 위에 N$N$개의 점이 있다. 점은 1$1$번부터 N$N$번까지 번호가 붙어 있고, i$i$번 점의 좌표는 (xi,yi)$(x_i,y_i)$이다. 모든 점의 좌표는 서로 다르다.\n\n 1$1$ 이상 N$N$ 이하의 서로 다른 세 개의 번호 a$a$, b$b$, c$c$를 고른 뒤, 각 번호에 해당하는 점과 점 사이를 선분으로 이으면 삼각형을 만들 수 있다. 이때, 아래 조건을 모두 만족하는 삼각형을 역삼각형이라고 한다.\n\n\n\t xa<xb<xc$x_a<x_b<x_c$.\n\t yb<ya$y_b<y_a$.\n\t yb<yc$y_b<y_c$.\n\n\n세 점을 선택해서 만들 수 있는 모든 역삼각형 넓이의 합을 S$S$라고 했을 때, 2S$2S$를 1000000007(=109+7)$1\\,000\\,000\\,007(= 10^9 + 7)$로 나눈 나머지를 출력하라. 2S$2S$는 항상 정수임을 증명할 수 있다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30989","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t 6$6$개의 정수 n$n$, d$d$, m$m$, k$k$, a$a$, b$b$와 정수열 s=(s0,s1,⋯,sd)$s=(s_0, s_1, \\cdots, s_d)$가 주어진다.\n\n다음을 모두 만족하는 모든 정수열 c=(c0,c1,⋯,cn)$c=(c_0, c_1, \\cdots, c_n)$들의 집합을 A$A$라 하자.\n\n\n\t모든 정수 i$i$ (0≤i≤n$0 \\le i \\le n$)에 대해 a≤ci≤b$a \\le c_i \\le b$ \n\t다음을 모두 만족하는 함수 f:R→R$f \\colon \\mathbb R \\to \\mathbb R$와 정수열 r=(r0,r1,⋯,rd)$r=(r_0, r_1, \\cdots, r_d)$가 존재한다.\n\t\n\t\t모든 실수 t$t$에 대해 f(t)=∑i=0nciti$f(t) = \\sum_{i=0}^{n} c_i t^i$ \n\t\t모든 실수 t$t$에 대해 f(k)(t)=∑j=0drjtj$f^{(k)}(t) = \\sum_{j=0}^{d} r_j t^j$ \n\t\t모든 정수 j$j$ (0≤j≤d$0 \\le j \\le d$)에 대해 rjmodm=sj$r_j \\bmod m = s_j$ \n\t\n\t\n\n\n집합 A$A$의 크기와 A$A$의 원소 중 사전 순으로 가장 작은 원소를 구해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31046","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe Johnson Space Center has hired you to design NASA’s new communications satellite! The satellite, consisting of a set of dish antennas held together with titanium beams, must meet NASA’s exacting specifications, but a lot of the design is up to you.\n\nSpecifically, the design can be represented by a set of circles of various radii (representing the dish antennas) and line segments (the beams) in the 2D plane. A valid satellite design must meet all of the following criteria:\n\n\n\tThe necessary size and location of each dish on the xy$xy$ plane was computed by NASA, and you are not allowed to reposition any of the dishes.\n\tYou may add any number of titanium beams to the design, connecting one point on the circumference of one dish antenna to another point on the circumference of a different dish. Treat each beam as a straight line segment (of negligible width).\n\tBeams are not allowed to cross each other, or attach to each other. Beams are also not allowed to occlude (cover up) any part of the interior of any dish antenna.\n\tYour final design must consist of a single connected structure.\n\tTwo dishes might exactly touch (in which case they are already connected to each other); but NASA guarantees that no two dish antennas overlap.\n\n\nTitanium isn’t cheap these days, so you want to compute the cheapest possible compliant design: the one that minimizes the sum of the beam lengths.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31007","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t게임 마스터 amsminn은 유망주 bnb2011과 게임을 하려고 한다. 게임은 1$1$ 이상 N$N$ 이하의 정수 중 하나가 적혀있는 카드 M$M$개가 펼쳐져 있는 책상에서 진행되며, 게임의 규칙은 다음과 같다.\n\n\n\t게임은 교대로 진행되며, amsminn이 먼저 게임을 시작한다.\n\t각 사람은 자기 차례가 왔을 때, 책상에 남아 있는 카드 중 하나를 가져간다. 이때, 가져간 카드는 이전까지 서로가 가져간 카드 전부와 서로소여야 한다. 그리고 가져간 카드는 책상에서 사라지게 된다.\n\t자신의 차례가 되었을 때 더 이상 카드가 존재하지 않거나, 규칙에 위배되지 않는 카드를 가져갈 수 없는 사람이 지게 된다.\n\n\n두 수의 최대공약수가 1$1$인 경우 두 수를 서로소라고 한다. 서로가 최선을 다해 게임을 진행한다고 했을 때 누가 이기는지 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31047","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tElvira is processing shipments for the Christmas season! There are various shipments of toys coming into her warehouse throughout the day, and her boss wants a summary report at the end. Each shipment consists of some number of a single kind of toy.\n\nThe summary report is an aggregated list of all the toys that arrived at the warehouse over the day. The boss is most interested in the biggest sellers, so toys should be sorted in decreasing order of count. If the warehouse received the same number of two kinds of toys, sort them in alphabetical order1.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30990","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t실수 전체를 정의역으로 갖고 모든 계수가 실수인 다항함수 p(x)$p(x)$와 q(x)$q(x)$에 대해, p′(q(x))=q′(p(x))$p'(q(x))=q'(p(x))$일 경우 두 함수가 조화를 이룬다고 정의한다. 조건을 만족하지 않으면 두 함수는 조화를 이루지 않는다. 단, 다항함수 u(x)$u(x)$에 대하여 u′(x)$u'(x)$는 u(x)$u(x)$의 도함수를 의미한다.\n\n실수 전체를 정의역으로 갖는 다항함수 f(x)=anxn+an−1xn−1+⋯+a0$f(x)=a_{n}x^{n} + a_{n-1}x^{n-1} + \\cdots +a_{0}$와 g(x)=bmxm+bm−1xm−1+⋯+b0$g(x)=b_{m}x^{m} + b_{m-1}x^{m-1} + \\cdots + b_{0}$가 주어진다. f(x)$f(x)$와 g(x)$g(x)$의 모든 계수는 정수이다.\n\n한 번의 시행에서, f(x)$f(x)$와 조화를 이루고 모든 계수가 실수인 다항함수 h(x)$h(x)$를 선택하여, f(x)$f(x)$를 h(x)$h(x)$로 바꿀 수 있다. \n\n유한 번의 시행을 통하여 f(x)=g(x)$f(x)=g(x)$가 되게 할 수 있는지 판별하라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31008","content":"문제\n\n토니는 LegenD가 되기 위한 여정에 나섰다. 기나긴 여정 중에는 \n1\n$1$부터 \nN\n$N$까지 번호가 붙은 \nN\n$N$개의 마을을 거칠 수 있고, \nu\n$u$번 마을에는 마을의 격 \nhu\n$h_u$가 있다. 토니는 처음에 \n1\n$1$번 마을에 있다. 신이 정한 특정한 마을에 도달하면 토니는 LegenD가 될 수 있다.\n\n마을 사이를 잇는 길은 두 종류로 편한 길과 고행의 길이 있다.\n\n편한 길은 고대부터 존재하던 길로 총 \nM\n$M$개가 있으며 \ni\n$i$번째 편한 길을 통하면 \nui\n$u_i$번 마을에서 \nvi\n$v_i$번 마을로 시간 \nti\n$t_i$를 들여 이동할 수 있다. 같은 마을 번호 쌍 \n(ui,vi)\n$(u_i, v_i)$에 대해 \nui\n$u_i$번 마을에서 \nvi\n$v_i$번 마을로 이동 가능한 편한 길이 둘 이상 존재할 수 있다.\n\n고행의 길은 선대 LegenD에 의해 \n0\n$0$개 이상 설치되었다. \nu\n$u$번 마을과 \nu\n$u$번 마을로부터 편한 길 정확히 하나를 지나 도착할 수 있는 마을들 중 가장 격이 높은 마을의 격을 \nHu\n$H_u$라고 하자. \n1\n$1$ 이상 \nN\n$N$ 이하의 정수 \nu,v\n$u, v$에 대해 \nHu<hv\n$H_u \\lt h_v$라면 \nu\n$u$번 마을에서 \nv\n$v$번 마을로 가는 고행의 길이 설치되어 있다. \nu\n$u$번 마을에서 출발하는 고행의 길 하나를 통해 \nv\n$v$번 마을로 가는 데에는 시간 \npu\n$p_u$가 걸린다.\n\n신은 도착하면 LegenD가 되는 마을을 정할 때, 토니가 도달할 수 있는 마을 중 해당 마을에 도달하기까지 걸리는 최소시간이 가장 긴 마을을 정했다. 토니가 LegenD가 되는 데 성공했다면, 걸린 시간은 최소 얼마일까?"},{"problemId":"30991","content":"문제\n\n함수를 미분해 보자!\n\n어떤 미분가능한 함수 \nf(x)\n$f(x)$가 주어졌을 때, 미분한 결과를 \nf′(x)\n$f'(x)$라고 표현한다. 만약 \nf′(x)\n$f'(x)$도 미분가능하다면 미분하여 함수 \nf′′(x)\n$f{'}{'}(x)$를 얻을 수 있다. 만약 \nf(x)\n$f(x)$를 여러 번 미분할 수 있다면 \nf(n)(x)\n$f^{(n)}(x)$\n\t\t\t\t\n(=f′′⋯′⏞n(x))\n$(=f{\\overbrace {{'}{'}{}^{\\cdots }{'}} ^{n}}(x))$는 \nf(x)\n$f(x)$ 함수를 \nn\n$n$번 미분한 결과라고 정의할 수 있다. 예를 들어 다음 \n3\n$3$개의 함수를 미분해 보자.\n\n미분가능한 함수 \nE(x)=ex\n$E(x) = e^x$가 있을 때, \nex\n$e^x$를 미분한 결과는 \nex\n$e^x$이므로 \nE′(x)=ex\n$E'(x)=e^x$이다.\n미분가능한 함수 \nS(x)=sin⁡x\n$S(x) = \\sin x$가 있을 때, \nsin⁡x\n$\\sin x$를 미분한 결과는 \ncos⁡x\n$\\cos x$이므로 \nS′(x)=cos⁡x\n$S'(x)=\\cos x$이다.\n미분가능한 함수 \nC(x)=cos⁡x\n$C(x) = \\cos x$가 있을 때, \ncos⁡x\n$\\cos x$를 미분한 결과는 \n−sin⁡x\n$-\\sin x$이므로 \nC′(x)=−sin⁡x\n$C'(x)=-\\sin x$이다.\n\n신기하게도 위에서 소개한 \n3\n$3$개의 함수는 원하는 만큼 미분을 해도 항상 미분가능한 함수가 나타난다. 이 \n3\n$3$개의 함수를 모두 곱한 \nESC(x)=exsin⁡xcos⁡x\n$\\text{ESC}(x) = e^x \\sin x \\cos x$ 함수도 원하는 만큼 미분을 해도 계속 미분이 가능할까? 놀랍게도 계속 미분이 가능하다! 한 번 미분을 시도해 보자. 미분가능한 세 함수 \nf(x)\n$f(x)$, \ng(x)\n$g(x)$, \nh(x)\n$h(x)$가 있을 때 \nf(x)×g(x)×h(x)\n$f(x) \\times g(x) \\times h(x)$를 미분한 결과는 다음과 같다.\n\n \n[f(x)g(x)h(x)]′=f′(x)g(x)h(x)+f(x)g′(x)h(x)+f(x)g(x)h′(x)\n$[f(x)g(x)h(x)]'= f'(x)g(x)h(x)+f(x)g'(x)h(x)+f(x)g(x)h'(x)$ \n\n그러므로 \nESC′(x)=exsin⁡xcos⁡x+excos⁡xcos⁡x+exsin⁡x(−sin⁡x)\n$\\text{ESC}'(x) = e^x \\sin x \\cos x + e^x \\cos x \\cos x + e^x \\sin x (-\\sin x)$ 이다. 한편 \ncos⁡xcos⁡x\n$\\cos x \\cos x$는 \ncos2⁡x\n$\\cos^2 x$로, \nsin⁡x(−sin⁡x)\n$\\sin x (-\\sin x)$는 \n−sin2⁡x\n$-\\sin^2 x$로 표현할 수 있으므로 정리하면 \nESC′(x)=exsin⁡xcos⁡x+excos2⁡x−exsin2⁡x\n$\\text{ESC}'(x) = e^x \\sin x \\cos x + e^x \\cos^2 x - e^x \\sin^2 x$으로 표현할 수 있다. \nESC′(x)\n$\\text{ESC}'(x)$를 한 번 더 미분해 보자.\n\n \n[exsin⁡xcos⁡x]′=exsin⁡xcos⁡x+excos2⁡x−exsin2⁡x\n$[e^x \\sin x \\cos x]'= e^x \\sin x \\cos x + e^x \\cos^2 x - e^x \\sin^2 x$ \n \n[excos⁡xcos⁡x]′=excos⁡xcos⁡x+ex(−sin⁡x)cos⁡x+excos⁡x(−sin⁡x)=excos2⁡x−2exsin⁡xcos⁡x\n$[e^x \\cos x \\cos x]' = e^x \\cos x \\cos x + e^x (-\\sin x) \\cos x + e^x \\cos x (-\\sin x) = e^x \\cos^2 x - 2 e^x \\sin x \\cos x$ \n \n[exsin⁡xsin⁡x]′=exsin⁡xsin⁡x+excos⁡xsin⁡x+exsin⁡xcos⁡x=exsin2⁡x+2exsin⁡xcos⁡x\n$[e^x \\sin x \\sin x]'= e^x \\sin x \\sin x + e^x \\cos x \\sin x + e^x \\sin x \\cos x = e^x \\sin^2 x + 2 e^x \\sin x \\cos x$ \n\n이므로 \nESC′′(x)=−2exsin2⁡x+2excos2⁡x−3exsin⁡xcos⁡x\n$\\text{ESC}{'}{'}(x) = - 2 e^x \\sin^2 x + 2 e^x \\cos^2 x - 3 e^x \\sin x \\cos x$ 이다. 그러므로 \nESC(x)\n$\\text{ESC}(x)$ 함수는 계속 미분가능하고, 미분한 결과는 \nexsin⁡xcos⁡x\n$e^x \\sin x \\cos x$, \nexcos2⁡x\n$e^x \\cos^2 x$, \nexsin2⁡x\n$e^x \\sin^2 x$를 각각 상수배한 후 합쳐서 표현할 수 있다! 따라서 \nESC(n)(x)\n$\\text{ESC}^{(n)}(x)$를 다음과 같이 표현할 수 있다.\n\n \nESC(n)(x)=anexsin2⁡x+bnexcos2⁡x+cnexsin⁡xcos⁡x\n$\\text{ESC}^{(n)}(x)=a_n e^x \\sin ^2 x + b_n e^x \\cos ^2 x + c_n e^x \\sin x \\cos x$ (단, \nan\n$a_n$, \nbn\n$b_n$, \ncn\n$c_n$은 정수)\n\n \nn\n$n$이 주어지면 \nan+bn+cn\n$a_n + b_n + c_n$의 값을 구하는 프로그램을 작성해 보자."},{"problemId":"31009","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이 문제는 \"진주로 가자! (Hard)\" 문제와 입력으로 주어지는 수의 범위를 제외하면 같은 문제이다.\n\n서울살이에 지쳐버린 경상국립대 졸업생 보선이는 대학생이었던 시절이 그리워졌고, 오랜만에 경상국립대가 있는 진주에 가고 싶어졌다. 그래서 보선이는 진주로 당일치기 나들이를 가기 위해 무작정 서울 터미널에 도착했다.\n\n서울 터미널에는 N$N$개의 교통편이 있다. 각 교통편의 정보는 도착지와 요금으로 이루어져 있으며, 모든 도착지는 서로 다르다. 그리고 주어지는 도착지에는 진주로 가는 교통편을 의미하는 jinju가 반드시 존재한다.\n\n요즘 물가 인상이 걱정되는 보선이는 진주로 가는 교통편의 요금을 알아보면서 그보다 비싼 교통편의 개수 또한 같이 알아보려고 한다. 하지만 보선이는 이미 지쳐버린 상태라 N$N$개의 교통편을 살펴볼 힘이 없었다. 그래서 보선이는 자신이 알아보고자 한 정보를 우리에게 대신 알아봐달라고 부탁했다.\n\n자, 이제 보선이의 부탁을 들어주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31048","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe factorial of N$N$, written as N!$N!$, is defined as the product of all the integers from 1$1$ to N$N$. For example, 3!=1×2×3=6$3! = 1 \\times 2 \\times 3 = 6$.\n\nThis number can be very large, so instead of computing the entire product, just compute the last digit of N!$N!$ (when N!$N!$ is written in base 10$10$).\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31011","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAn excavation of some newly discovered buildings recently found on the lost continent of Atlantis have yielded a surplus of new hieroglyphs. The hieroglyphs are written on tablets and each symbol is a short sequence of 6 characters containing bars and/or circles (similar to the look of binary code). Your fellow archaeologists have recovered several sets of unblemished tablets and have deciphered their meaning. From these tablets a possible grammar and alphabet has been proposed. However there are many imperfect tablets with lost information. Your job is to determine how many different letter combinations in a tablet are possible given a sequence of symbols that have missing or undecipherable parts.\n\nYour fellow archeologists have noted that there are special \"vowel\" symbols that have special rules. For this problem these patterns are rules that can be applied to any tablet. So far no one has encountered a tablet with a vowel followed by another vowel, nor has anyone come across a tablet without a single vowel. From this you can safely deduce the format of a tablet.\n\nVowels:\n\n110101\n101101\n010101\n111011\n\n\nOther discovered symbols:\n\n110111\n110011\n110000\n101111\n101011\n101000\n010111\n010011\n010000\n111101\n111111\n111000\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30992","content":"문제\n\n설영이는 결혼식에 참석한 \nm\n$m$명의 하객들에게 케이크를 나누어 주려고 한다. 모든 하객은 케이크를 한 조각씩 받고, 모든 조각의 부피는 같아야 한다.\n\n처음에 케이크는 단 한 덩어리 존재하고, 그 모양은 함수 \ny=f(x)\n$y=f(x)$ \n(x1≤x≤xn)\n$(x_1 \\leq x \\leq x_n)$의 그래프와 두 직선 \nx=x1\n$x = x_1$, \nx=xn\n$x = x_n$, 그리고 \nx\n$x$축으로 둘러싸인 부분을 \nx\n$x$축에 대해 회전시켜 얻은 도형이다. 함수 \ny=f(x)\n$y=f(x)$의 그래프는 각 점 \n(x1,y1)\n$(x_1, y_1)$, \n(x2,y2)\n$(x_2, y_2)$, \n⋯\n$\\cdots$, \n(xn,yn)\n$(x_n, y_n)$을 이 순서대로 선분으로 이어 구할 수 있다. 이때 \nyi>0(1≤i≤n)\n$y_i > 0 (1 \\leq i \\leq n)$이다. 케이크를 최대한 예쁜 모양으로 자르기 위해, 설영이는 케이크를 항상 회전축에 수직인 평면을 따라 자른다. 또한 \nm\n$m$명의 하객에게 케이크를 나누어 주어야 하므로 자르는 횟수는 \nm−1\n$m-1$번이어야 한다. 이 조건을 만족하면서 케이크를 자르는 방법이 유일함을 증명할 수 있다.\n\n케이크를 자를 때 드는 힘은 잘린 부분의 단면적에 비례한다. 만약 케이크를 잘랐을 때 넓이가 \nAπ\n$A\\pi$인 단면적이 생겼다면, 이때 든 힘은 \nA\n$A$이다. 케이크를 \nm−1\n$m-1$번 자르면서 사용한 힘 \nF1,F2,⋯,Fm−1\n$F_1, F_2, \\cdots, F_{m-1}$의 평균 \n\n\n1m−1∑i=1m−1Fi\n$\\displaystyle{\\frac{1}{m-1} \\sum_{i=1}^{m-1} F_i}$의 값을 \nF―(m)\n$\\overline{F}(m)$이라 할 때,\n\n \n\nF=limm→∞F―(m)\n$$F = \\lim_{m\\rightarrow\\infty} \\overline{F}(m)$$ \n\n의 값을 구하라."},{"problemId":"31012","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tNow that the archeologists have found books on the lost continent of Atlantis they are looking to try and understand more about the people through its literature. To do this, they want to know what words were most commonly used and which authors used these words in an effort to grasp the Atlantean culture a bit better.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31049","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn a land far away, lost to time, a lone village fights to defend itself against hordes of invading orcs. There are N$N$ orcs scattered throughout the land. The i$i$-th orc is at position (xi,yi)$(x_ i, y_ i)$ on the Cartesian plane.\n\nThe heroic village is at position (0,0)$(0, 0)$. Fortunately a great and powerful magician lives in the village and is willing to defend it with a massive fireball. Like all great powers, this too comes with great limitations. The fireball must have the village on its circumference (but it does not damage the village). The larger the radius of the fireball, the more energy the wizard must expend.\n\nYou think the land would be safe if a fireball can remove at least K$K$ of the N$N$ orcs. The wizard needs to know what radius of fireball to create. Orcs are removed if they are within the fireball or just on its edge.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31013","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe scientists have also found several unknown machines on Atlantis. Unfortunately their circuitry has been altered over time and they no longer work. Before they can even figure out what these machines do they will need to fix the broken circuits as quickly and effectively as possible.\n\nThese circuit boards have knobs arranged in a square grid. Each knob has either one or two wires connected jutting out of it in different directions. The circuit will have two end-knobs consisting of a single wire and the remaining knobs with two wires each. Knobs will have to be rotated in order to complete the circuit between the two end knobs.\n\nEach wire of the two-wired knobs are oriented North, East, South, or West, but not both in the same direction. There are six different possible configurations. Assigning values to the directions so that N=1, E=2, S=4, and W=8, we can map the knobs to the Nth character in the alphabet. Two-wired knobs will be mapped as follows:\n\n      Directions   Dec Char\n      N  E  S  W    #  \n     |      \n     o-   1  1  0  0  = 3   C\n\n     |\n     o    1  0  1  0  = 5   E\n     |\n\n     |\n    -o    1  0  0  1  = 9   I\n\n     o-   0  1  1  0  = 6   F\n     |\n\t\t\t  \n    -o-   0  1  0  1  = 10  J\n\t\t\t    \n\n    -o    0  0  1  1  = 12  L\n     |\n\n\nThe end-knobs in each circuit will be similarly mapped:\n\n      Directions   Dec\n      N  E  S  W    #  Char\n     |\n     o    1  0  0  0  = 1   A\n     \n     o-   0  1  0  0  = 2   B\n\n     o    0  0  1  0  = 4   D\n     |\n\n    -o    0  0  0  1  = 8   H\n\n\nGiven an X by Y grid of circuit knobs, determine the fewest number of spins required to connect the two nodes. Any knob can spin, but only 90 degrees at a time.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31014","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe engineers are now trying to figure out how Atlantis sank based on some information they found in the buildings. What they discovered was amazing. Apparently the Atlantean scientists knew that there was going to be a problem. They collected ample data on rainfall and divided the entire continent into a grid of square cells in an effort to figure out which areas were going to flood and how badly. Each cell can hold a certain amount of water(in helenometers) before there is standing water.\n\nYou have found their simulations including the grid of cells with varying water retention capacity and rainfall events. During each rainfall event it rains X number of helenometers on some cell on the grid. All Saturated cells which are adjacent(Defined as all 8 cells surrounding the cell) are considered one large cell for the purpose of distributing water. When a cell fills up, the water is distributed equally to all adjacent unsaturated cells. If any of those cells fill up the water is distributed equally among the unsaturated cells adjacent to the one large cell it is now part of( i.e. the cells adjacent to the cell which overlowed into it and the cells adjacent to the cell which just filled up).\n\nThe simulation will run for several days and you will then output the water saturation levels of each cell at the end of the period. One thing to note is that you -must- flood all the adjacent cells around the flooded cell at the same time. The other thing that you need to be aware of is that the data found for each day is in order of the time that the rain fell so you will need to process each cell data completely before moving on to the next one as it apparently never rained in more than one place at once on Atlantis. All cells are devoid of water at the beginning of each case. After processing all the data for each case you will need to decide whether or not Atlantis sank based on that data. If all cells are filled and the water has nowhere to flood to, output \"Atlantis Sank\". However, if there was ample space for the water to flood to output the amount of water in each cell of the grid. If a cell on the edge of the grid fills up, then the ocean spaces are ignored, as all of Atlantis is surrouned by a giant levee not built by the US Corp of Engineers, so don't expect them to burst.\n\nThe grid is indexed starting from 0,0 being the top left square. Cells are calcluated from left to right and up to down. All overflow calculations should round to the nearest 1/100th.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31050","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are about to leave home for your weekly game of Pumpkins and Flagons (P&F) when a text comes in asking you to bring a large collection of identical P&F dice. They have asked the right person, for you have a very large collection of P&F dice which, unfortunately, is currently unsorted.\n\nThese dice are ordinary cubes with a number on each of the six faces. The numbers are in the range 1–6, but they do not need to be distinct. For example, {1,2,3,4,5,6}$\\{ 1, 2, 3, 4, 5, 6\\} $, {1,1,1,1,1,1}$\\{ 1, 1, 1, 1, 1, 1\\} $ and {2,2,2,4,4,5}$\\{ 2, 2, 2, 4, 4, 5\\} $ are all valid sets of numbers for the six faces. For this problem you want to find the size of the largest set of identical dice you can create from your very large collection. Two dice are considered identical to each other if it is possible to rotate one of the dice so that their top numbers are the same, their bottom numbers are the same, and so on for all six faces.\n\n\n\nFigure 1: The six faces of a die.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30993","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t같은 차종의 빨간색 자동차 A$A$대, 초록색 자동차 B$B$대, 파란색 자동차 C$C$대를 N$N$칸의 주차장에 1$1$대씩 주차하려고 한다.\n\n모든 자동차를 한 칸에 한 대씩 주차할 수 있는 경우의 수를 구하라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30994","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t한별이는 확통 수업을 듣다가, 우연히 어떤 문제를 보게 되었다.\n\n\n 50×50$50\\times 50$개의 칸으로 구성된 지도가 있다. 지도의 i$i$행 j$j$열에 있는 칸의 좌표를 (i,j)$(i,j)$라고 표기하자. (i,j)$(i,j)$에서 (i+1,j)$(i+1,j)$과 (i,j+1)$(i,j+1)$로 이동할 수 있을 때, (1,1)$(1,1)$에서 (50,50)$(50,50)$으로 가는 방법은 몇 가지인가?\n\n\n이 문제가 너무나 쉽다고 생각한 한별이는, 문득 칸들 중 일부에 얼룩과 잉크를 더해서, 이동할 수 없도록 하면 재미있겠다고 생각했다. 이에 한별이는 그녀의 친구 두별이에게 문제를 만들어달라고 하였다. 구체적으로, 두별이가 문제를 만들고 한별이가 이를 푸는 과정은 다음과 같다.\n\n\n\t두별이가 각각의 (i,j)(1≤i≤50,1≤j≤50)$(i,j)(1\\le i\\le 50,1\\le j\\le 50)$에 얼룩 혹은 잉크를 칠하거나, 혹은 칠하지 않는다. 얼룩 혹은 잉크가 칠해진 칸으로는 이동할 수 없을 때, 한별이가 (1,1)$(1,1)$에서 (50,50)$(50,50)$으로 이동하는 경우의 수를 구한다. (1,1)$(1,1)$ 혹은 (50,50)$(50,50)$이 얼룩 혹은 잉크로 칠해져 있는 경우, 경우의 수는 0이다.\n\n\n두별이는 한별이를 위해 문제를 몇 개 만들어 줬는데, 한별이가 계속해서 답을 틀린다는 사실을 알게 되었다. 두별이는 한별이가 답을 틀려서 속상해하는 걸 원치 않았기 때문에, 점성술을 사용해 어떤 답을 말할지 미리 알아내어 그에 알맞게 지도에 얼룩과 잉크를 칠하기로 마음먹었다. 그러나, 한별이가 말할 답에 알맞게 지도에 얼룩과 잉크를 칠하는 것은 결코 쉽지 않았다... 두별이를 대신해서 지도에 얼룩과 잉크를 대신 칠해 주자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31051","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tSally and her friends are trying to cross safely from one bank of a raging river to another. Boulders are scattered within the river, with log planks connecting the banks of the river to some of the boulders, and some pairs of boulders to each other.\n\nSally begins by trying to cross the river first. She starts at the left bank and crosses one plank at a time, with the goal of reaching the right bank. Walking across a plank takes Sally one second. Each time she crosses a plank, that plank becomes unstable and collapses into the river (so that neither Sally nor her friends can use that plank again). After Sally has safely reached the right bank, another friend tries to cross the river, and so on, until everyone who is able to make it has crossed the river.\n\nGiven the graph of banks/boulders and planks and the number of people who need the cross the river, what is the smallest amount of total time (in seconds) required for everyone to cross the river safely? If it is impossible for all people to cross, compute the minimum number of people n$n$ who must be left behind and print n people left behind.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31052","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn the faraway country of Lineland, tech companies are starting to take over! Every week, it seems that tech companies sprout from the ground, merge, get acquired, or go under. For software engineers looking for new jobs in Lineland, it can be difficult to even find the companies where they’re interviewing.\n\nTo solve this issue, you’re going to make a new tech company! The product is simple: using deep neural blockchains in the cloud, your app finds the distance between any two tech companies in Lineland. This is supremely useful, as companies change offices all the time and it’s difficult to stay completely up to date. By centralizing this information, your company is going to make the world a better place.\n\nSince Lineland is organized around a single line, the location of a company can be given by a single coordinate. The distance between any two companies is equal to the distance between their two coordinates.\n\nYour job is to handle two kinds of user requests to the company’s flagship app. One kind of request updates the address of a company, the other requests the shortest distance between two companies.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31017","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA Golomb Ruler is a set of integers in which all differences (e.g. |a-b|) are unique integers. The Atlantean game extends the Golomb Ruler to include sums, products, and quotients where all results are positive integers. The set {2,8,10,11} is an Atlantean Golomb Ruler that also satisfies the constraints of addition, multiplication, and division. E.g. the numbers 2 and 10 from this set produce the results 12, 8, 20, and 5 on the operations +, -, *, and /, respectively. No other pair of numbers from the set will produce these results.\n\nGiven an NxN puzzle grid subdivided into cages with a result for each cage, determine the positioning of the numbers from the set so that each row and column contain every number from the set exactly once, and each cage resolves to the result for that cage on one of the four operations of addition, subtraction, multiplication, or division. The operand will not be given.\n\nSample puzzle on the set {2, 8, 10, 11}\n\n Resolves to this: \n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30995","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t알파벳 대문자를 이용하여 길이 N$N$인 두 문자열 S1$S_1$과 S2$S_2$를 만들려고 한다.\n\n어떤 문자열 S$S$에서 0$0$개 이상의 문자를 지워서 만든 새로운 문자열을 S$S$의 부분수열이라고 한다. S1$S_1$과 S2$S_2$의 공통 부분수열이면서 A로만 이루어진 문자열을 공통 A-부분수열이라고 부를 때, 가장 긴 공통 A-부분수열의 길이가 M$M$인 경우의 수를 구해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31053","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe year is 2312, and Humanity’s Rush to the Stars is now 200$200$ years old. The problem of real-time communication between star systems remains, however, and the key is the unterwave.\n\nUnterwave (UW) communication works as follows: direct UW links have been set up between certain pairs of star systems, and two systems without a direct link communicate by hopping along existing links through intermediary systems. Although no system has more than 20$20$ direct links to other systems, any two systems can communicate, either directly or indirectly.\n\nYou have been asked to select two star systems for your company’s new home offices—one in a human system, and one in an alien system. (Oh yeah, there are aliens.) You are to select them so that the UW distance (a measure of communication latency) is minimized.\n\nEvery star system has a gravity value that affects UW communication. Just as no two snowflakes on earth have the same crystalline structure, no two star systems in the universe have the same gravity. If a communication path from from one system to another encounters the sequence G=g1,g2,…,gn$G = g_1, g_2, \\ldots , g_ n$ of gravity values, including the source and destination of the message, then three sequences of n−1$n-1$ terms each may be defined, relating to physical characteristics of UW communication:\n\n cap(G)=g2+g1, g3+g2, …, gn+gn−1(Capacitance)pot(G)=g2−g1, g3−g2, …, gn−gn−1(Potential)ind(G)=g2⋅g1, g3⋅g2, …, gn⋅gn−1(Inductance)$$\\begin{align*} \\operatorname {cap}(G) & = g_2+g_1,\\ g_3+g_2,\\ \\ldots ,\\ g_ n+g_{n-1} & \\textrm{(Capacitance)} \\\\ \\operatorname {pot}(G) & = g_2-g_1,\\ g_3-g_2,\\ \\ldots ,\\ g_ n-g_{n-1} & \\textrm{(Potential)} \\\\ \\operatorname {ind}(G) & = g_2\\cdot g_1,\\ g_3\\cdot g_2,\\ \\ldots ,\\ g_ n\\cdot g_{n-1} & \\textrm{(Inductance)} \\end{align*}$$ \n\nFor two sequences A=a1, a2, …, am$A=a_1,\\ a_2,\\ \\ldots ,\\ a_ m$ and B=b1, b2, …, bm$B=b_1,\\ b_2,\\ \\ldots ,\\ b_ m$ we define:\n\n A⋅B=a1⋅b1, a2⋅b2, …, am⋅bmA−B=a1−b1, a2−b2, …, am−bm$$\\begin{align*} A\\cdot B & = a_1\\cdot b_1,\\ a_2\\cdot b_2,\\ \\ldots ,\\ a_ m\\cdot b_ m & A-B & = a_1- b_1,\\ a_2- b_2,\\ \\ldots ,\\ a_ m- b_ m \\end{align*}$$ \n\nFinally, the UW distance is given by the absolute value of the sum of the values of the sequence\n\n pot(G)⋅([cap(G)⋅cap(G)]−ind(G)).\\[ \\operatorname {pot}(G)\\cdot \\left(\\left[\\operatorname {cap}(G)\\cdot \\operatorname {cap}(G)\\right]-\\operatorname {ind}(G)\\right). \\] \n\nThe UW distance can be quite large. Fortunately, your company has a gravity dispersal device, which may be placed in any single system (and remain there). It reduces by 1$1$ the gravity of that system, but increases by 1$1$ the gravities of all systems directly linked to it. Use of this device is optional.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31018","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn the beautiful industrial city of ACM, lies grandiose buildings and only the most gentrified neighborhoods. It's been said by scholars and street peddlers alike that it's the city of gold. They call the ACM city the one where dreams come true. If you're not here, you would wish you were. And if you were here, you'd never want to leave.\n\nWell, that's what your friends keep telling you anyway.\n\nIn light of your new promotion to becoming the technical director at your firm, they decided to throw you a party on the most luxurious parade float during the ACM city's yearly party Jour Régionaux.\n\nAnticipation made time go quickly and now that wonderful day of which you dreamed about has arrived! You make your arrangements, and follow your itinerary, staring out of the window of the limo your friends hired to begin your journey.\n\nDuring your continuous amazement at the sights around you, your limo suddenly stops short! Outside you hear people arguing and screaming. \"What could be going on??\" you wonder to yourself. You always had the issue of never being able to resist a problem. Luckily there was one right on the same street as you.\n\nYou notice that all the directors of each float in the parade are arguing amongst themselves! Listening in on the conversation, you overhear their disgruntled attitudes at how they ended up in such a predicament just before going out to perform for the awaiting crowd. Their carriages had somehow ended up out of order!\n\nYou say out loud, \"I know how to put things in order!\", and begin to take charge. Rallying the float drivers from the other floats in the parade, you reassure them that you will do your best to figure a way out. Looking around you notice there's a side alley. Unfortunately it's as narrow as the street you're on; neither the street nor the alley is wide enough for any float to pass another. Also, no float can can go backwards down the main street. The alley is a dead end, but you can store floats there temporarily. At any point in time, the float in the alley closest to the street may return to the street and continue down its route.\n\nThe parade director gave you a list of the floats in their correct order. Being the brainiac that you are, you swiftly realize the license plates are in sorted order on his list while the floats aren't.\n\nNeeding to get the show on the road, can you determine if you're able to get the parade back in working order?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31019","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are playing a game and have decided to write a program to help you determine how well you are doing.\n\nIn this game, there is a board with spaces in a rectangular grid. One or more of the spaces contain a ball. You can jump one ball over another into an empty spot on the board, removing the ball that was jumped over. Jumps may only be horizontal or vertical; diagonal jumps are not allowed. The goal is to have only a single ball remaining.\n\nFor example, in the following board, the top-middle ball can jump over the middle ball, leaving two on the bottom row. Afterwards, the bottom-right ball can jump over the bottom-middle ball, leaving only a single ball in the bottom-left position.\n\n. o .    . . .    . . .\n. o . -> . . . -> . . .\n. . o    . o o    o . .\n\n\nIn addition, you must also minimize the number of moves made. A move is a sequence of one or more jumps using the same ball for each jump. In the previous example, the two jumps consisted of two separate moves, since different balls were moved each time. In the following example, the game can be completed in 3 jumps, but 2 moves. The first move consists of a single jump: the top-middle ball jumping over the middle ball to the bottom-middle position. The second move consists of two jumps: the top-left ball jumping over the left-middle ball to the bottom-left position, then the bottom-left ball jumping over the bottom-middle ball to the bottom-right position.\n\no o .    o . .    . . .    . . .\no o . -> o . . -> . . . -> . . .\n. . .    . o .    o o .    . . o\n      1        2a       2b\n\n\nYou must determine if a given board can be solved (you can get to a single ball remaining), and if so, how many moves are required.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31054","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tFarmer John has N$N$ (2≤N≤105$2\\le N\\le 10^5$) cows labeled 1…N$1\\dots N$, where the connections between cows are described by a tree. Unfortunately, there is a sickness spreading throughout.\n\nInitially, some cows start off infected. Every night, an infected cow spreads the sickness to their neighbors. Once a cow is infected, she stays infected. After some amount of nights, Farmer John realizes that there is an issue so he tests his cows to determine who has the sickness.\n\nYou are given Q$Q$ (1≤Q≤20$1\\le Q\\le 20$) different values for the number of nights, each an integer in the range [0,N]$[0,N]$. For each number of nights, determine the minimum number of cows that could have started with the illness, or that the number of nights is inconsistent with the given information.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30996","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t N$N$면체 주사위가 있고 i$i$번째 면에는 수 i$i$가 적혀 있다. i$i$번째 면이 나올 확률은 Ai∑i=1NAi$\\displaystyle{\\frac{A_i}{\\sum_{i=1}^{N} A_i}}$ 이다. 이때 다음과 같은 쿼리에 Q$Q$회 답하라.\n\n\n\t x$x$: 주사위를 M$M$번 던졌을 때 나오는 눈의 합이 1$1$ 이상 x$x$ 이하일 확률을 출력하라.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31055","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tTo improve her mathematical knowledge, Bessie has been taking a graph theory course and finds herself stumped by the following problem. Please help her!\n\nYou are given a connected, undirected graph with vertices labeled 1…N$1\\dots N$ and edges labeled 1…M$1\\dots M$ (2≤N≤2⋅105$2\\le N\\le 2\\cdot 10^5$, N−1≤M≤4⋅105$N-1\\le M\\le 4\\cdot 10^5$). For each vertex v$v$ in the graph, the following process is conducted: ​\n\n\n\tLet S={v}$S=\\{v\\}$ and h=0$h=0$.\n\tWhile |S|<N$|S|<N$, ​\n\t\n\t\tOut of all edges with exactly one endpoint in S$S$, let e$e$ be the edge with the minimum label.\n\t\tAdd the endpoint of e$e$ not in S$S$ to S$S$.\n\t\tSet h=10h+e$h=10h+e$.\n\t\n\t\n\tReturn h(mod109+7)$h\\pmod{10^9+7}$.\n\n\n​ Determine all the return values of this process.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30997","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t 1$1$부터 N$N$까지의 숫자 중 중복 없이 3$3$개를 선택해야 하는 특이한 복권이 있다. 이 복권은 M$M$명의 사람이 모두 숫자를 고른 후, 다음과 같이 추첨이 진행된다.\n\n\n\t K$K$번에 걸쳐 N$N$개의 숫자 중 하나를 추첨한다.\n\t마지막으로 N$N$개의 숫자 중 하나를 보너스로 추첨한다.\n\t사람마다 골랐던 3$3$개의 숫자 중, K$K$번의 추첨 동안 나온 숫자가 포함되어 있지 않고, 보너스 추첨 때 나온 숫자가 포함되어 있으면 당첨이 된다.\n\t추첨에서 숫자 i$i$가 추첨될 확률은 Pi∑k=1NPk$\\displaystyle{\\frac{P_i}{\\sum_{k=1}^N P_k}}$이며, Pi$P_i$는 M$M$명의 사람들이 숫자 i$i$를 고른 횟수의 합이다.\n\t같은 숫자가 여러 번 추첨될 수 있다.\n\n\n하루를 포함한 M$M$명의 사람들은 이번에 이 특이한 복권의 추첨에 참여하려고 한다. 하루는 지금 나머지 M−1$M-1$명의 사람들이 고른 숫자를 모두 알고 있다. 하루가 복권에 당첨될 확률이 최대가 되도록 3$3$개의 숫자를 골라주는 프로그램을 작성하라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31056","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBessie has taken on a new job as a train dispatcher! There are two train stations: A$A$ and B$B$. Due to budget constraints, there is only a single track connecting the stations. If a train departs a station at time t$t$, then it will arrive at the other station at time t+T$t+T$ (1≤T≤1012$1\\le T\\le 10^{12}$).\n\nThere are N$N$ (1≤N≤5000$1\\le N\\le 5000$) trains whose departure times need to be scheduled. The i$i$th train must leave station si$s_i$ at time ti$t_i$ or later (si∈{A,B},0≤ti≤1012$s_i\\in \\{A, B\\}, 0\\le t_i\\le 10^{12}$). It is not permitted to have trains going in opposite directions along the track at the same time (since they would crash). However, it is permitted to have many trains on the track going in the same direction at the same time (assume trains have negligible size).\n\nHelp Bessie schedule the departure times of all trains such that there are no crashes and the total delay is minimized. If train i$i$ is scheduled to leave at time ai≥ti$a_i\\ge t_i$, the total delay is defined as ∑i=1N(ai−ti)$\\sum_{i=1}^N(a_i-t_i)$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30998","content":"문제\n\n현아는 크리스마스트리를 준비하고 있다. 현아는 자신이 준비한 트리가 세상에서 가장 예뻤으면 좋겠다.\n\n현아가 가진 트리 \nT\n$T$는 \nn\n$n$개의 정점과 \nn−1\n$n-1$개의 간선으로 구성되어 있고 루트 \nr\n$r$을 가진다. 또한 현아는 각 정점을 꾸밀 장식 \nn\n$n$개를 갖고 있다. 모든 장식은 저마다 고유한 예쁨의 값을 가져서, 첫 번째로 예쁜 장식, 두 번째로 예쁜 장식, \n⋯\n$\\cdots$, \nn\n$n$번째로 예쁜 장식이 존재한다. 어떤 두 장식도 예쁨의 값이 같지 않다. 트리의 각 정점에 달린 장식이 다음 조건을 만족시킬 때, \nT\n$T$는 예쁘다고 한다.\n\n \nr\n$r$을 기준으로 형성되는 모든 부모-자식 쌍에 대하여, 자식 정점에 달린 장식이 부모 정점에 달린 장식보다 예쁨의 값이 크다.\n\n이때 두 정점 \nu\n$u$, \nv\n$v$에 대하여 \nu\n$u$가 \nv\n$v$의 부모라는 것은 두 정점이 인접하고, 루트 \nr\n$r$에 대하여 \nr\n$r$과 \nu\n$u$ 사이의 거리가 \nr\n$r$과 \nv\n$v$ 사이의 거리보다 작다는 것이다. 트리에서 두 정점 \nu\n$u$, \nv\n$v$ 사이의 거리는 \nu\n$u$에서 \nv\n$v$까지 간선을 따라 이동할 때 사용한 간선의 최소 개수로 정의한다.\n\n \nT\n$T$가 예쁘도록 각 정점에 장식을 다는 경우의 수를 \n998244353\n$998\\,244\\,353$으로 나눈 나머지를 구하라. \n998244353\n$998\\,244\\,353$은 소수이다. 장식이 달리지 않은 정점은 없어야 한다. 한 번만 구하면 재미없으니, 트리의 루트를 바꾸어 가며 \nQ\n$Q$번 구하라."},{"problemId":"30999","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t월간 향유회에서는 민주주의적 다수결 투표 방식으로 문제의 출제 여부를 정한다. 즉, N$N$개의 문제 후보마다 M$M$명의 출제위원이 찬반 의견을 내고, 과반수의 찬성을 얻은 문제가 출제된다. 이때 M$M$은 항상 홀수이다.\n\n문제 후보에 대한 출제위원의 찬반 의견이 주어졌을 때, 출제될 문제의 수를 구하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31060","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tFarmer John has decided to make his cows do some acrobatics! First, FJ weighs his cows and finds that they have N$N$ (1≤N≤2⋅105$1\\le N\\le 2\\cdot 10^5$) distinct weights. In particular, for each i∈[1,N]$i\\in [1,N]$, ai$a_i$ of his cows have a weight of wi$w_i$ (1≤ai≤109,1≤wi≤109$1\\le a_i\\le 10^9, 1\\le w_i\\le 10^9$).\n\nHis most popular stunt involves the cows forming balanced towers. A tower is a sequence of cows where each cow is stacked on top of the next. A tower is balanced if every cow with a cow directly above it has weight at least K$K$ (1≤K≤109$1\\le K\\le 10^9$) greater than the weight of the cow directly above it. Any cow can be part of at most one balanced tower.\n\nIf FJ wants to create at most M$M$ (1≤M≤109$1 \\le M \\le 10^9$) balanced towers of cows, at most how many cows can be part of some tower?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31057","content":"문제\n\nBessie recently discovered that her favorite pop artist, Elsie Swift, is performing in her new Eras Tour! Unfortunately, tickets are selling out fast, so Bessie is thinking of flying to another city to attend the concert. The Eras tour is happening in \nN\n$N$ (\n2≤N≤750\n$2\\le N\\le 750$) cities labeled \n1…N\n$1\\dots N$, and for each pair of cities \n(i,j)\n$(i,j)$ with \ni<j\n$i<j$ there either exists a single direct flight from \ni\n$i$ to \nj\n$j$ or not.\n\nA flight route from city \na\n$a$ to city \nb\n$b$ (\na<b\n$a<b$) is a sequence of \nk≥2\n$k\\ge 2$ cities \na=c1<c2<⋯<ck=b\n$a=c_1<c_2<\\dots<c_k=b$ such that for each \n1≤i<k\n$1\\le i<k$, there is a direct flight from city \nci\n$c_i$ to city \nci+1\n$c_{i+1}$. For every pair of cities \n(i,j)\n$(i,j)$ with \ni<j\n$i<j$, you are given the parity of the number of flight routes between them (0 for even, 1 for odd).\n\nWhile planning her travel itinerary, Bessie got distracted and now wants to know how many pairs of cities have direct flights between them. It can be shown that the answer is uniquely determined."},{"problemId":"31061","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tFarmer John has N$N$ barns (3≤N≤5⋅105$3\\le N\\le 5\\cdot 10^5$), of which K$K$ (3≤K≤N$3\\le K\\le N$) distinct pairs of barns are connected.\n\nFirst, Annabelle assigns each barn a distinct integer label in the range [1,N]$[1,N]$, and observes that the barns with labels a1,…,aK$a_1,\\dots,a_K$ are connected in a cycle, in that order. That is, barns ai$a_i$ and ai+1$a_{i+1}$ are connected for all 1≤i<K$1\\le i<K$, and barns aK$a_K$ and a1$a_1$ are also connected. All ai$a_i$ are distinct.\n\nNext, Bessie also assigns each barn a distinct integer label in the range [1,N]$[1,N]$ and observes that the barns with labels b1,…,bK$b_1,\\dots,b_K$ are connected in a cycle, in that order. All bi$b_i$ are distinct.\n\nSome (possibly none or all) barns are assigned the same label by Annabelle and Bessie. Compute the maximum possible number of barns that are assigned the same label by Annabelle and Bessie.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31062","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBessie is a robovine, also known as a cowborg. She is on a number line trying to shoot a series of T$T$ (1≤T≤105)$(1 \\leq T \\leq 10^5)$ targets located at distinct positions. Bessie starts at position 0$0$ and follows a string of C$C$ (1≤C≤105)$(1 \\leq C \\leq 10^5)$ commands, each one of L, F, or R:\n\n\n\tL: Bessie moves one unit to the left.\n\tR: Bessie moves one unit to the right.\n\tF: Bessie fires. If there is a target at Bessie's current position, it is hit and destroyed, and cannot be hit again.\n\n\nIf you are allowed to change up to one command in the string to a different command before Bessie starts following it, what is the maximum number of targets that Bessie can hit?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31058","content":"문제\n\nBessie is going on a trip in Cowland, which has \nN\n$N$ (\n2≤N≤2⋅105\n$2\\le N\\le 2\\cdot 10^5$) towns numbered from \n1\n$1$ to \nN\n$N$ and \nM\n$M$ (\n1≤M≤4⋅105\n$1\\le M\\le 4\\cdot 10^5$) one-way roads. The \ni\n$i$th road runs from town \nai\n$a_i$ to town \nbi\n$b_i$ and has label \nli\n$l_i$ (\n1≤ai,bi≤N\n$1\\le a_i,b_i\\le N$, \n1≤li≤109\n$1\\le l_i\\le 10^9$).\n\nA trip of length \nk\n$k$ starting at town \nx0\n$x_0$ is a sequence of towns \nx0,x1,…,xk\n$x_0, x_1, \\ldots, x_k$, such that there is a road from town \nxi\n$x_i$ to town \nxi+1\n$x_{i+1}$ for all \n0≤i<k\n$0\\le i < k$. It is guaranteed that there are no trips of infinite length in Cowland, and that no two roads connect the same pair of towns.\n\nFor each town, Bessie wants to know the longest possible trip starting at it. For some starting towns, there are multiple longest trips - out of these, she prefers the trip with the lexicographically minimum sequence of road labels. A sequence is lexicographically smaller than another sequence of the same length if, at the first position in which they differ, the first sequence has a smaller element than the second sequence.\n\nOutput the length and sum of road labels of Bessie's preferred trip starting at each town."},{"problemId":"31059","content":"문제\n\nFarmer John is distributing haybales across the farm!\n\nFarmer John's farm has \nN\n$N$ \n(1≤N≤2⋅105)\n$(1\\le N\\le 2\\cdot 10^5)$ barns, located at integer points \nx1,…,xN\n$x_1,\\dots, x_N$ \n(0≤xi≤106)\n$(0 \\le x_i \\le 10^6)$ on the number line. Farmer John's plan is to first have \nN\n$N$ shipments of haybales delivered to some integer point \ny\n$y$ \n(0≤y≤106)\n$(0 \\le y \\le 10^6)$ and then distribute one shipment to each barn.\n\nUnfortunately, Farmer John's distribution service is very wasteful. In particular, for some \nai\n$a_i$ and \nbi\n$b_i$ \n(1≤ai,bi≤106)\n$(1\\le a_i, b_i\\le 10^6)$, \nai\n$a_i$ haybales are wasted per unit of distance left each shipment is transported, and \nbi\n$b_i$ haybales are wasted per unit of distance right each shipment is transported. Formally, for a shipment being transported from point \ny\n$y$ to a barn at point \nx\n$x$, the number of haybales wasted is given by\n\n \t\n\t\n{ai⋅(y−x)if y≥xbi⋅(x−y)if x>y.\n$$\\begin{cases} a_i\\cdot (y-x) & \\text{if } y \\ge x \\\\ b_i\\cdot (x-y) & \\text{if } x > y \\end{cases}.$$ \n\nGiven \nQ\n$Q$ \n(1≤Q≤2⋅105)\n$(1\\le Q\\le 2\\cdot 10^5)$ independent queries each consisting of possible values of \n(ai,bi)\n$(a_i,b_i)$, please help Farmer John determine the fewest amount of haybales that will be wasted if he chooses \ny\n$y$ optimally."},{"problemId":"31063","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tFarmer John's cows have quite the sweet tooth, and they especially enjoy eating candy canes! FJ has N$N$ total cows, each with a certain initial height and he wants to feed them M$M$ candy canes, each also of varying height (1≤N,M≤2⋅105$1\\le N,M\\le 2\\cdot 10^5$).\n\nFJ plans to feed the candy canes one by one to the cows, in the order they are given in the input. To feed a candy cane to his cows, he will hang the candy cane so that initially the candy cane is just touching the ground. The cows will then line up one by one, in the order given by the input, and go up to the candy cane, each eating up to their height (since they cannot reach any higher). The candy cane stays suspended in place where it is initially set up and is not lowered to the ground, even after cows eat the bottom of the candy cane. It is possible a cow may eat nothing during her turn, if the base of the candy cane is already above that cow's height. After every cow has had their turn, the cows grow in height by how many units of candy cane they ate, and Farmer John hangs the next candy cane and the cows repeat the process again (with cow 1 again being the first to start eating the next candy cane).\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31064","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tFarmer John has N$N$ cows in a line (1≤N≤3⋅105$1 \\leq N \\leq 3\\cdot 10^5$). Unfortunately, there is a sickness spreading throughout.\n\nInitially, some cows start off infected. Every night, an infected cow spreads the sickness to the cows on their left and right (if they exist). Once a cow is infected, she stays infected.\n\nAfter some amount of nights, Farmer John realizes that the issue has gotten out of control, so he tests his cows to determine who has the sickness. Find the minimum number of cows that could have started with the sickness.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30900","content":"문제\n\nIn a deterministic version of Musical Chairs1, there are \nn\n$n$ chairs placed in a circle. The chairs are numbered from \n1\n$1$ to \nn\n$n$ in clockwise order. Initially, the \ni\n$i$th player sits on the \ni\n$i$th chair. During the game, the game master gives commands to all players at once.\n\nThe first type of command tells each player to move \nx\n$x$ chairs farther in clockwise order, so they must move from chair \ni\n$i$ to chair \ni+x\n$i+x$.\n\nThe second type of command tells each player to move from chair \ni\n$i$ to chair \ni⋅x\n$i\\cdot{}x$. Both these calculations are done modulo \nn\n$n$, where a remainder of \n0\n$0$ corresponds to chair \nn\n$n$.\n\nIf two or more people want to move to the same chair, then the player needing to travel the least in clockwise direction to reach the chair gets to take the seat, and the other players trying to reach the same chair are out of the game. This is illustrated in Figure C.1, where the larger circles represent the chairs and their numbers are written on their inside. The smaller circles represent the players. The next command (* 10) tells player \n10\n$10$ (now on seat \n11\n$11$) and player \n4\n$4$ (now on seat \n5\n$5$) to move to chair \n2\n$2$. However, since player \n10\n$10$ needs to travel less, this player gets to take the seat. Note that the other \n10\n$10$ players will also move to some other chairs, but this is omitted from the figure for the sake of readability.\n\nFigure C.1: Illustration of Sample Input 1 at the fourth command, where players \n4\n$4$ and \n10\n$10$ need to move to chair \n2\n$2$. Because player \n10\n$10$ needs to travel less in clockwise direction, this player gets to take the seat.\n\nThe jury wasted most of their free time designing this game and now need to go back to work. Fortunately, the game is deterministic, so you can play the game without the help of the jury.\n\n1You do not need to know the original game, but you can try to play it after the contest is over."},{"problemId":"31065","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tFarmer John is growing N$N$ (1≤N≤2⋅105$1 \\leq N \\leq 2\\cdot 10^5$) plants of asparagus on his farm! However some of his plants have genetic differences, so some plants will grow faster than others. The initial height of the i$i$th plant is hi$h_i$ inches, and after each day, the i$i$th plant grows by ai$a_i$ inches.\n\nFJ likes some of his plants more than others, and he wants some specific plants to be taller than others. He gives you an array of distinct values t1,…,tN$t_1,\\dots,t_N$ containing all integers from 0$0$ to N−1$N-1$ and he wants the i$i$th plant to have exactly ti$t_i$ other plants that are taller than it. Find the minimum number of days so that FJ's request is satisfied, or determine that it is impossible.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31066","content":"문제\n\n비 오는 날 \nN\n$N$명의 학생이 창의인재관에서 융합인재관으로 건너가려고 한다. 창의인재관에는 \nM\n$M$개의 우산이 있고, 융합인재관에는 우산이 없다. 한 우산은 한 번에 최대 \nK\n$K$명까지 쓸 수 있다. 학생들은 다음 시행을 반복해 건너갈 수 있다.\n\n한 건물에 있는 학생 중 몇 명이 우산을 쓰고 다른 건물로 넘어간다. 이때, 모두가 같은 우산을 쓸 필요는 없다.\n아무도 쓰고 있지 않은 우산은 학생들이 제한 없이 들고 갈 수 있다. 예를 들어, 1명의 학생이 1개의 우산을 쓰고 3개의 우산을 들고 가는 것이 가능하다.\n\n모든 학생이 비를 맞지 않고 융합인재관으로 건너갈 수 있는지 판별하여라. 만약 건너갈 수 있다면, 모든 학생이 건너가기 위한 시행의 최소 횟수를 구하여라. 단, 모든 우산을 융합인재관으로 가지고 올 필요는 없다.\n\n엄밀히 말해, 4개의 정수로 이루어진 순서쌍 \n(a,b,c,d)\n$(a,b,c,d)$가 주어진다. 이는 현재 창의인재관에 있는 학생이 \na\n$a$명, 창의인재관에 있는 우산이 \nb\n$b$개, 융합인재관에 있는 학생이 \nc\n$c$명, 융합인재관에 있는 우산이 \nd\n$d$개라는 뜻이다. 초기에 \na=N\n$a=N$, \nb=M\n$b=M$, \nc=d=0\n$c=d=0$이며, 최소 횟수의 시행을 통해 \nc=N\n$c=N$으로 만들어야 한다. 시행은 다음 행동 중 하나를 하는 것으로 정의된다.\n\n두 양의 정수 \nx\n$x$, \ny\n$y$를 선택하여 순서쌍 \n(a,b,c,d)\n$(a,b,c,d)$를 \n(a−x,b−y,c+x,d+y)\n$(a-x,b-y,c+x,d+y)$로 바꾼다. 이는 창의인재관에서 \nx\n$x$명의 학생이 \ny\n$y$개의 우산을 이용하여 융합인재관으로 이동한다는 뜻이다. 이때, \n0<x≤a\n$0<x\\le a$와 \n0<y≤b\n$0<y\\le b$와 \nx≤Ky\n$x\\le Ky$이어야 한다.\n두 양의 정수 \nz\n$z$, \nw\n$w$를 선택하여 순서쌍 \n(a,b,c,d)\n$(a,b,c,d)$를 \n(a+z,b+w,c−z,d−w)\n$(a+z,b+w,c-z,d-w)$로 바꾼다. 이는 융합인재관에서 \nz\n$z$명의 학생이 \nw\n$w$개의 우산을 이용하여 창의인재관으로 이동한다는 뜻이다. 이때, \n0<z≤c\n$0<z\\le c$와 \n0<w≤d\n$0<w\\le d$와 \nz≤Kw\n$z\\le Kw$이어야 한다."},{"problemId":"31080","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tProf. Pang works for the City Brain program of Capital Grancel. The road network of Grancel can be represented by an undirected graph. Initially, the speed limit on each road is 1$1$m/s. Prof. Pang can increase the speed limit on a road by 1$1$m/s with the cost of 1$1$ dollar. Prof. Pang has k$k$ dollars. He can spend any nonnegative integral amount of money on each road. If the speed limit on some road is a$a$m/s, it takes 1/a$1/a$ seconds for anyone to go through the road in either direction.\n\nAfter Prof. Pang spent his money, Prof. Du starts to travel from city s1$s_1$ to city t1$t_1$ and Prof. Wo starts to travel from city s2$s_2$ to city t2$t_2$. Help Prof. Pang to spend his money wisely to minimize the sum of minimum time of Prof. Du's travel and Prof. Wo's travel. It is guaranteed that s1$s_1$ and t1$t_1$ are connected by at least one path and that s2$s_2$ and t2$t_2$ are connected by at least one path.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30902","content":"문제\n\nIn her spare time, Zoe develops an online calculator. Unfortunately, the calculator was targeted by a denial-of-service attack last week. The attacker created a lot of integer variables, exponentiated them with each other, and tried to do a bunch of comparisons. The huge integers were too much for the server to handle, so it crashed. Before Zoe fixes the issue, she decides to actually perform the calculations that the attacker requested.\n\nThere are \nn\n$n$ integer variables \nx1,x2,…,xn\n$x_1, x_2, \\dots, x_n$. At the start, each variable is set to \n2023\n$2023$. You have to perform \nm\n$m$ instructions of the following two types:\n\nOperations, of the form \"! \ni\n$i$ \nj\n$j$\", where \ni≠j\n$i \\neq j$. This means that \nxi\n$x_i$ gets set to \nxixj\n$x_i^{x_j}$.\nQueries, of the form \"? \ni\n$i$ \nj\n$j$\", where \ni≠j\n$i \\neq j$. This means that you should print '>' if \nxi\n$x_i$ is greater than \nxj\n$x_j$, '=' if \nxi\n$x_i$ is equal to \nxj\n$x_j$, and '<' if \nxi\n$x_i$ is smaller than \nxj\n$x_j$.\n\nConsider the first sample. After the \n5\n$5$ operations, the values of the variables are:\n\t\t\t\t\t\t\t\nx1=(20232023)20232023,x2=(202320232023)2023,x3=2023,x4=20232023.\n$$\\begin{align*} x_1&=\\left({2023}^{2023}\\right)^{{2023}^{2023}},& x_2&=\\left({2023}^{{2023}^{2023}}\\right)^{2023},& x_3&={2023},& x_4&={2023}^{2023}. \\end{align*}$$ "},{"problemId":"31100","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBikarp has a square of a positive integer n2$n^2$. He wants to split it into a sum of two cubes of positive integers. In other words, Bikarp wants to solve the following Diophantine equation\n\n n2=x3+y3$$n^2 = x^3 + y^3$$ \n\nin positive integers, where n$n$ is fixed.\n\nFind a solution of this equation or determine that it doesn't exist.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31067","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n경주 연습을 하는 다오\n\n다오는 경주 대회를 열기 위해 N$N$개의 트랙을 준비했다. i$i$번째로 경주하는 트랙의 길이는 Ai$A_i$이다.\n\n관중들은 트랙의 길이가 점점 길어져야 경주가 재미있다고 생각한다. 즉, A1<A2<⋯<AN$A_1<A_2<\\cdots <A_N$인 경우 경주가 재미있다고 생각한다. 이를 위해 다오는 다음과 같은 시행을 0회 이상 할 수 있다.\n\n\n\t 1≤i≤N$1\\le i\\le N$인 i$i$를 고른 뒤, i$i$번째 트랙의 길이를 K$K$만큼 늘린다. 즉, Ai$A_i$를 Ai+K$A_i+K$로 바꾼다.\n\t위 시행은 각 i$i$에 대해 최대 한 번만 할 수 있다.\n\n\n다오가 트랙의 길이를 점점 증가하도록 만들 수 있는지 판단하고, 만약 가능하다면 이를 위해 필요한 시행의 최소 횟수를 구하시오.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31081","content":"문제\n\nProf. Pang is playing \"Tube Master\". The game field is divided into \nn×m\n$n \\times m$ cells by \n(n+1)×m\n$(n + 1) \\times m$ horizontal tubes and \nn×(m+1)\n$n \\times (m + 1)$ vertical tubes. The product \nnm\n$n m$ is an even number. There are \n(n+1)(m+1)\n$(n + 1) (m + 1)$ crossings of the tubes. The 2D coordinate of the crossings are \n(i,j)\n$(i, j)$ (\n1≤i≤n+1\n$1\\le i\\le n+1$, \n1≤j≤m+1\n$1\\le j\\le m+1$). We name the crossing with coordinate \n(i,j)\n$(i, j)$ as \"crossing \n(i,j)\n$(i, j)$\". We name the cell whose corners are crossings \n(i,j),(i+1,j),(i,j+1),(i+1,j+1)\n$(i, j), (i+1, j), (i, j+1), (i+1, j+1)$ as \"cell \n(i,j)\n$(i, j)$\" for all \n1≤i≤n\n$1\\le i\\le n$, \n1≤j≤m\n$1\\le j\\le m$. Additionally, each cell \n(i,j)\n$(i, j)$ contains an integer \ncounti,j\n${count}_{i, j}$.\n\nThe above figure shows a game field with \nn=3,m=2\n$n = 3, m = 2$ (the third sample).\n\nProf. Pang decides to use some of the tubes. However, the game poses several weird restrictions.\n\nEither \n0\n$0$ or \n2\n$2$ tubes connected to each crossing are used.\nThere are exactly \ncounti,j\n${count}_{i, j}$ turning points adjacent to cell \n(i,j)\n$(i, j)$. A turning point is a crossing such that exactly \n1\n$1$ horizontal tube and exactly \n1\n$1$ vertical tube connected to it are used. A turning point \n(x,y)\n$(x, y)$ is adjacent to cell \n(i,j)\n$(i, j)$ if crossing \n(x,y)\n$(x, y)$ is a corner of cell \n(i,j)\n$(i, j)$.\n\nIt costs \nai,j\n$a_{i, j}$ to use the tube connecting crossings \n(i,j)\n$(i, j)$ and \n(i,j+1)\n$(i, j+1)$. It costs \nbi,j\n$b_{i, j}$ to use the tube connecting crossings \n(i,j)\n$(i, j)$ and \n(i+1,j)\n$(i+1, j)$. Please help Prof. Pang to find out which tubes he should use such that the restrictions are satisfied and the total cost is minimized."},{"problemId":"31101","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe great Emperor Emelyan I is building a palace for himself. To emphasize the greatness of the Emperor, the palace must be huge --- it must be visible from space. In addition, the palace must be in the shape of the letter E.\n\nMore formally, the palace should be a union of four rectangles: the main building of size a×1$a \\times 1$ and three wings of size 1×b$1 \\times b$, adjacent to the main building from the east, where a$a$ and b$b$ are positive integers numbers and a≥5$a \\ge 5$. The north wing should be adjacent to the upper right corner of the main building, and the south wing should be adjacent to the lower right. The middle wing should not adjoin either the north or south wing, but should adjoin with its upper left corner to the main building at an integer distance from the upper right corner of the main building.\n\nIn other words, the palace must completely occupy the following squares 1×1$1 \\times 1$ of some rectangle of size a×(b+1)$a \\times (b+1)$: all squares adjacent to the left, upper or lower side of the rectangle, plus some line inside the rectangle, which is not adjacent to the top and bottom line.\n\nThe palace covers an area of a+3b$a+3b$.\n\nThe area for the construction of the future palace is a rectangle of size h×w$h \\times w$, divided into cells of size 1×1$1 \\times 1$. Some cells are occupied by the Emperor's gardens, which cannot be built on. The rest of the cells are free and you can build on them.\n\nDetermine the largest area of the palace that can be built on empty spaces.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30903","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMaths is hard.[citation needed] But it could be easier! And the internet™ has found some excellent ways to make it easier. Take a look at the following true equations:\n\n\n\nFollowing the patterns, we come to the conclusion that the following equation should also be true:\\vspace{-0.75\\baselineskip}\n\n\n\nHowever, this is actually wrong in boring old standard maths. Therefore, we define a new kind of funky maths where it is allowed to cancel out digits on the left side of the equality sign. This surely will make everyone's life easier. Except yours, since you have to evaluate if two given fractions are equal in our new funky maths.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31068","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t서울과학고의 자료구조 수업은 N$N$명의 학생이 수강한다. 자료구조 수업은 중간고사와 기말고사가 존재하며, 각 시험의 점수는 0$0$ 이상 106$10^6$ 이하의 정수이다.\n\n선생님은 학생들의 시험 점수를 바탕으로 학생들에게 '상', '중', '하' 중 하나의 등급을 부여하려고 한다. 이때 부여하는 등급은 다음 두 조건에 맞아야 한다.\n\n\n\t각 등급은 적어도 한 명의 학생이 받아야 한다.\n\t더 높은 등급을 받은 학생은 더 낮은 등급을 받은 학생보다 중간고사, 기말고사 점수가 모두 더 높아야 한다.\n\n\n선생님은 불균형도를 최소화하도록 등급을 매기고자 한다. '상', '중', '하' 등급을 받은 사람의 수를 각각 a$a$, b$b$, c$c$라고 하자. 이때 불균형도는 max(a,b,c)−min(a,b,c)$\\max(a,b,c) -\\min(a,b,c)$로 정의된다.\n\n가능한 불균형도의 최솟값을 구하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31102","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tNowadays, the 5G mobile communication standard is being introduced everywhere. But progress does not stand still, and the researchers of the Lucifer Laboratory are working hard to develop a new communication standard. The development turns out to be so innovative that it was decided to call the new standard not 6G, but immediately 666G. Researchers claim that this technology will make it possible to call Satan himself.\n\n \n\nThe new technology can be described as follows. The k$k$ comminication towers, which can be considered points on the plane, are located at the vertices of a convex k$k$-gon. Any five pairwise different towers are the tops of a five-pointed star and allow serving subscribers inside a pentagon, which is bounded by edges of the five-pointed star.\n\nYou task is to test the load on communication towers using a model example. Let there be n$n$ subscribers who can be considered as points on the plane inside the convex k$k$-gon formed by the k$k$ communication towers. We will assume that subscribers do not change their location. For each subscriber it is known whether he is active or not.\n\nFurther, there are q$q$ events of two types, ordered chronologically:\n\n\n\tSubscriber numbered t$t$ changes its activity. That is, if the subscriber was active, then he becomes inactive and vice versa.\n\tFor some five pairwise different communication towers, it is necessary to determine the number of active subscribers who are served by these five towers.\n\n\nYou need to simulate all events and respond to all requests of type 2$2$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31082","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tProf. Pang plays chess against his rival Prof. Shou. They are the only two players in the game. The chessboard is very large and can be viewed as a 2D plane. Prof. Pang placed n1$n_1$ rooks and Prof. Shou placed n2$n_2$ rooks. Each rook is a point with integer coordinates on the chessboard. One rook is attacked by another rook if they satisfy all of the following conditions:\n\n\n\tThey are placed by different players.\n\tThey have the same x$x$-coordinate or y$y$-coordinate.\n\tThere is no other rook on the line segment between them.\n\n\nHelp Prof. Pang and Prof. Shou to decide which rooks are attacked.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30904","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are travelling through the galaxy in your spaceship. There are n$n$ planets in the galaxy, numbered from 1$1$ to n$n$ and modelled as points in 3$3$-dimensional space.\n\nYou can travel between these planets along m$m$ space highways, where each highway connects two planets along the straight line between them. Your engine can accelerate (or decelerate) at 1m/s2$1\\text{m/s}^2$, while using fuel at a rate of 1$1$ litre per second. There is no limit to how fast you can go, but you must always come to a complete standstill whenever you arrive at the planet at the end of a highway.\n\nIt is possible for a highway to pass through planets other than the ones it connects. However, as your spaceship is equipped with special hyperspace technology, it simply phases through these obstacles without any need of stopping. Another consequence of using this technology is that it is impossible to jump from one highway to another midway through: highways must always be travelled in full.\n\n\n\nFigure G.1: Illustration of Sample Input 1, showing highways in blue, and a route from planet 1$1$ to planet 3$3$. The green start of a highway indicates acceleration, and the red end indicates deceleration.\n\nYou need to fly several missions, in which you start at your home planet (with number 1$1$) and need to reach a given target planet within a given time limit. For each mission, determine whether it can be completed, and if so, find the least amount of fuel required to do so. As an example, Figure G.1 shows the optimal route for the second mission of the first sample.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31103","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAn Artifact that could turn the tide of the war was discovered in one of the distant Terran colonies. Meanwhile, the intelligence service reports that a Zerg swarm is moving towards the colony. It is necessary to protect the Artifact at all costs before the arrival of reinforcements.\n\nYou have m$m$ units of minerals and g$g$ units of Vespen gas. In addition, there are n$n$ types of defensive buildings available for construction. A building of type i$i$ requires ai$a_i$ units of minerals and bi$b_i$ units of gas to construct, and increases the defenses of the base by ci$c_i$ units. You can construct any number of buildings (including zero) of any type, provided that the total costs of minerals and gas for all buildings will not exceed m$m$ and g$g$, respectively.\n\nDetermine what the maximum total building defense capability can be achieved under the given constraints.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31083","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tProf. Pang is given a fixed sequence a1,…,an$a_1, \\ldots, a_n$ and m$m$ queries.\n\nEach query is specified by two integers l$l$ and r$r$ satisfying 1≤l≤r≤n$1\\le l\\le r\\le n$. For each query, you should answer the number of pairs of integers (i,j)$(i, j)$ such that l≤i≤j≤r$l\\le i\\le j\\le r$ and the number of distinct integers in ai,…,aj$a_i, \\ldots, a_j$ is odd.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31104","content":"문제\n\nA hash function \nhn\n$h_n$ is given, which encrypts the number \nA\n$A$, consisting of \n2n\n$2n$ bits, as follows:\n\nLet \nA=(a2n−1a2n−2⋯a1a0)2\n$A = (a_{2n-1}a_{2n-2} \\cdots a_1a_0)_2$, that is, \nai\n$a_i$ is the \ni\n$i$-th bit of the number \nA\n$A$.\n\nThe number \nB=(b2n−1b2n−2⋯b1b0)2\n$B = (b_{2n-1}b_{2n-2} \\cdots b_1b_0)_2$, also consisting of \n2n\n$2n$ bits, is calculated as follows:\nbi=ai⊕a2i+1, for 0≤i<n,\n$$b_i = a_i \\oplus a_{2i+1},\\text{ for } 0 \\le i < n,$$\nbi=ai⊕a4n−2i−2, for n≤i<2n,\n$$b_i = a_i \\oplus a_{4n-2i-2},\\text{ for } n \\le i < 2n,$$\nwhere \n⊕\n$\\oplus$ is bitwise exclusive OR (XOR). In other words,\nB=A⊕(a0a2⋯a2n−4a2n−2a2n−1a2n−3⋯a3a1)2.\n$$B = A \\oplus (a_0a_2 \\cdots a_{2n-4}a_{2n-2}a_{2n-1}a_{2n-3} \\cdots a_3a_1)_2.$$ \n\nNext, the number \nC=B⊕RSH(B)\n$C = B \\oplus \\text{RSH}( B )$ is calculated, also consisting of \n2n\n$2n$ bits, where \nRSH(B)\n$\\text{RSH}(B)$ is a cyclic right shift by \n1\n$1$ bit. In other words,\nC=B⊕(b0b2n−1b2n−2⋯b2b1)2.\n$$C = B \\oplus (b_0b_{2n-1}b_{2n-2} \\cdots b_2b_1)_2.$$ \n\nFinally, the hash value is calculated as \nhn(A)=239A+153Cmod(22n−1−1)\n$h_n(A) = 239 A + 153 C \\bmod (2^{2n-1}-1)$.\n\nFor example, let \nn=4\n$n=4$ and \nA=000011012=13\n$A = 00001101_2 = 13$.\n\nThen, \nB=000011012⊕110000102=110011112=207\n$B = 00001101_2 \\oplus 11000010_2 = 11001111_2 = 207$.\n\nFurther, \nC=110011112⊕111001112=001010002=40\n$C = 11001111_2 \\oplus 11100111_2 = 00101000_2 = 40$.\n\nFinally, \nh4(A)=239×13+153×40mod(27−1)=9227mod127=83\n$h_4(A) = 239 \\times 13 + 153 \\times 40 \\bmod (2^7-1) = 9\\,227 \\bmod 127 = 83$.\n\nYour goal is to invert this hash function, that is, for given \nn\n$n$ and \nH\n$H$, find \nA\n$A$ such that \nhn(A)=H\n$h_n(A)=H$."},{"problemId":"31069","content":"문제\n\n정점 \nN\n$N$개, 간선 \nM\n$M$개로 이루어진 단순 무방향 그래프 \nG=(V,E)\n$G=(V,E)$가 주어진다. 그래프의 정점은 \n1\n$1$ 이상 \nN\n$N$ 이하의 번호를 가지며, 간선 역시 \n1\n$1$ 이상 \nM\n$M$ 이하의 번호를 가진다. 이때 다음 조건에 맞는 \n{1,2,⋯,N}\n$\\{1,2,\\cdots ,N\\}$의 순열 \nπ\n$\\pi$를 찾자.\n\n \n1<i≤N\n$1<i\\le N$인 \ni\n$i$에 대해 \n1≤j<i\n$1\\le j<i$, \n{πi,πj}∈E\n$\\{\\pi_i,\\pi_j\\}\\in E$인 \nj\n$j$가 존재한다.\n \n1≤i<N\n$1\\le i<N$인 \ni\n$i$에 대해 \ni<j≤N\n$i<j\\le N$, \n{πi,πj}∈E\n$\\{\\pi_i,\\pi_j\\}\\in E$인 \nj\n$j$가 존재한다."},{"problemId":"30905","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tCaptchas are getting more and more elaborate. It started with doing simple calculations like 7+2$7 + 2$, and now, it has evolved into having to distinguish chihuahuas from double chocolate chip muffins.\n\nTo combat the rise of smarter bots, the Internet Captcha Production Company (ICPC) has outdone itself this time: given a distorted image containing many integers, find the maximum value that can be expressed using each of the given integers exactly once, using addition, multiplication, and arbitrary parentheses.\n\nAfter unsuccessfully trying to solve such a captcha for an hour straight, Katrijn is terribly frustrated. She decides to write a program that outputs a valid arithmetic expression with maximal value.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31084","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tProf. Pang has only 1$1$ Au in his pocket. (Yes, Prof. Pang is from Austan and he uses the currency Au there.)\n\nHe will make use of a balloon store and a candy store to make money: In the balloon store, Prof. Pang can buy kab$k_{ab}$ balloons for the price of 1$1$ Au or buy kcb$k_{cb}$ balloons for the price of 1$1$ candy. In the candy store, Prof. Pang can buy kac$k_{ac}$ candies for the price of 1$1$ Au or buy kbc$k_{bc}$ candies for the price of 1$1$ balloon. Prof. Pang can also sell one balloon and get kba$k_{ba}$ Aus. He can sell one candy and get kca$k_{ca}$ Aus. The only constraint to him is that there are only nb$n_b$ balloons in the balloon store and only nc$n_c$ candies in the candy store. He can buy balloons and candies only when supplies last. Even if he sells some of his balloons or candies, the number of balloons and candies in the stores will not increase.\n\nEach of the six transactions can be performed in any order for any times (0$0$ or more) but they are not separable (for example, Prof. Pang can not buy kab/2$k_{ab}/2$ balloons for the price of 1/2$1/2$ Au).\n\nPlease find out how many Aus he can make at most.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31070","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t서울과학고의 기숙사는 N$N$개의 방과 서로 다른 두 방을 연결하는 N−1$N-1$개의 복도로 이루어진 트리 형태로 표현할 수 있다. 모든 복도는 양방향으로 이동할 수 있고, 복도를 이용해 모든 방 사이를 이동할 수 있다. 하나의 복도를 통과하는 데 걸리는 시간은 1$1$이다.\n\n민규는 K$K$명의 친구에게 컵라면을 끓여주려고 한다. 현재 민규는 1$1$번 방에 있으며, 민규를 포함한 모든 친구들은 서로 다른 방에 있다.\n\n이를 위해 민규는 모든 친구들에게 뜨거운 물을 전달할 것이다. 뜨거운 물은 민규가 있는 1$1$번 방의 정수기에서만 얻을 수 있다. 또한, 민규는 매우 큰 보온병을 가지고 있어 물을 한 번만 받아도 모든 친구에게 줄 수 있는 충분한 양의 물을 받을 수 있다.\n\n라면을 끓이는 행동은 위험한 행동이다. 사감 선생님께 걸리면 벌점을 받을 수 있기 때문이다. 민규는 위험을 최대한 줄이기 위해 가장 마지막으로 뜨거운 물을 배달한 시각이 최대한 빠른 방법으로 K$K$개의 방을 방문할 것이다.\n\n민규가 K$K$개의 방을 방문하는 방법을 더 자세히 설명하면 다음과 같다.\n\n\n\t민규는 물을 받기 전, K$K$명의 친구들이 있는 방을 미리 확인한다.\n\t민규는 시각 0$0$에 1$1$번 방에서 물을 받고 출발해, 가장 마지막으로 뜨거운 물을 배달하는 친구에게 걸리는 시간을 최소화하는 방법으로 K$K$개의 방을 방문할 것이다.\n\t시간을 계산할 때는 민규가 복도를 이동하는 시간만 고려한다. 친구에게 물을 주는 시간이나 정수기에서 물을 뜨는 시간 등은 무시한다. 민규가 물을 다 주고 자신의 방으로 돌아가는 시간 역시 무시한다.\n\n\n민규는 친구들이 있는 방을 확인하기 전에, 친구들에게 물을 배달하는 데 시간이 얼마나 걸릴지 예측하려고 한다. K$K$명의 친구들이 있는 방을 고르는 (N−1K)$\\binom{N-1}{K}$가지 경우에 대해, 마지막으로 물을 배달하는 시각의 합을 구해 주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31105","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAn emergency happened in one secret organization. In the middle of the working day, one of the employees was hospitalized with symptoms of an extremely dangerous colonavirus infection. In this regard, the management of the organization wants to establish which employees can still be infected, but the symptoms of the disease have not yet shown themselves.\n\nThere are n$n$ employees in the organization, who can be numbered with integers from 1$1$ to n$n$. From the recordings of CCTV cameras, the organization's management established when which employees contacted each other. In addition, management took into account the following assumptions:\n\n\n\tAt the beginning of the working day, exactly one of the employees was infected, and each of the initial states could happen with a probability of 1/n$1/n$.\n\tIf two employees come into contact with each other, and one of them is infected and the other is not, then a healthy employee becomes infected with a probability of 1/2$1/2$. If both employees are healthy, or both are infected, nothing happens.\n\tIf an employee is infected, he cannot suddenly recover, that is, he remains infected until the end.\n\tIt is known that the employee numbered k$k$ was eventually infected.\n\n\nA chronological list of employees' contacts is given. Determine for each employee the probability of being infected according to the assumptions described above.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31071","content":"문제\n\n서울과학고는 \nN\n$N$개의 방과 서로 다른 두 방을 연결하는 \nN−1\n$N-1$개의 복도로 이루어진 트리 형태로 표현할 수 있다. 모든 복도는 양방향으로 이동할 수 있고, 복도를 이용해 모든 방 사이를 이동할 수 있다. 하나의 복도를 통과하는 데 걸리는 시간은 \n1\n$1$이다.\n\n브루는 졸업을 앞두고 서울과학고에서 함께 추억을 쌓았던 \nK\n$K$명의 친구들과 사진을 찍으려고 한다.\n\n브루는 \nK\n$K$명의 친구들 각각과 함께 두 장의 커플 사진을 찍을 것이다. 이때 \ni\n$i$번 친구와는 각각 \nAi\n$A_i$번 방과 \nBi\n$B_i$번 방에서 사진을 찍을 것이다.  \n1\n$1$번 방에서 \nBi\n$B_i$번 방까지 이동하기 위해 반드시 \nAi\n$A_i$번 방을 지나야 함이 보장된다.\n\n총 \n2K\n$2K$장의 사진을 찍으려면 학교 내에서 이동해야 하지만, 모든 친구와 함께 이동하게 되면 혼잡해진다. 따라서 브루와 친구들은 다음과 같은 방식으로 이동하기로 했다.\n\n먼저 브루는 서울과학고를 순회하는 계획을 세운다. 순회 계획은 다음 조건에 맞아야 한다.\n\n순회 계획은 시간 \n0\n$0$에 방 \n1\n$1$에서 출발하는 것으로 시작되며, 시간 \n2N−2\n$2N-2$에 방 \n1\n$1$에 도착하는 것으로 끝난다.\n모든 복도를 정확히 두 번 통과하며, 두 방향은 서로 반대이다.\n시간을 계산할 때는 복도를 통과하는 시간만 고려한다. 사진을 찍는 시간 등은 무시한다.\n\n편의상 순회 계획을 수열 \nS0,S1,⋯,S2N−2\n$S_0,S_1,\\cdots ,S_{2N-2}$로 나타내자. 이때 \nSi\n$S_i$는 시간 \ni\n$i$에 브루가 막 도착한 방의 번호이다.\n\n다음으로, \nK\n$K$명의 친구들은 브루의 순회에 함께할 시간을 정한다. \ni\n$i$번째 친구는 자신이 브루의 순회에 합류할 시각 \nLi\n$L_i$와 순회에서 빠져나올 시각 \nRi\n$R_i$를 정한다. 이때, \ni\n$i$번 친구는 \nAi\n$A_i$번 방과 \nBi\n$B_i$번 방에서 브루와 함께 사진을 찍어야 하므로, 이 시간 간격 동안 브루가 \nAi\n$A_i$번 방과 \nBi\n$B_i$번 방을 모두 방문해야 한다. 즉, \nLi≤e,f≤Ri;\n$L_i\\le e,f\\le R_i;$ \nSe=Ai;\n$S_e=A_i;$ \nSf=Bi\n$S_f=B_i$인 정수 \ne\n$e$와 \nf\n$f$가 존재해야 한다.\n\n \ni\n$i$번 친구의 이동 시간은 \nRi−Li\n$R_i-L_i$로 정의된다. 브루는 모든 친구의 이동 시간 합을 최소화하고자 한다. 브루를 위해 가능한 최소 이동 시간 합을 구해 주자."},{"problemId":"31106","content":"문제\n\nPopeye the Sailor loves to eat spinach. He also loves to smoke his corn-made pipe. And which he constantly smokes.\n\nPopeye lives in the Sweethaven village. On the main street of Sweethaven, which can be represented as a straight line, there are \nn\n$n$ public places, which can be considered as points on a straight line located at coordinates \nx1,x2,⋯,xn\n$x_1, x_2, \\cdots , x_n$, respectively.\n\nPopeye needs to get from the \nA\n$A$ point on the main street to the \nB\n$B$ point. Everything would have been simple, if not for the law that passed Sweethaven's authority: now smoking nearer than \nr\n$r$ from a public place is prohibited. Fortunately, Popeye has a pole length \nR≥r\n$R \\ge r$,, with which he can jump over forbidden zones.\n\nPopeye is initially located at point \nA\n$A$. He can move from \nx\n$x$ to \ny\n$y$ on foot in \n|x−y|\n$|x-y|$ time. Also, at any time, he can use the pole and move from point \nx\n$x$ to point \nx+2R\n$x+2R$ or \nx−2R\n$ x-2R$, moving along a semicircle of radius \nR\n$R$, while he spends \nπR\n$\\pi R$ time. At the end of the path, Popeye must be at point \nB\n$B$, and at no point on the trajectory of Popeye can be closer than \nr\n$r$ to any public place.\n\nDetermine the shortest time it takes Popeye to get from \nA\n$A$ to \nB\n$B$. Or determine that it is impossible to get from \nA\n$A$ to \nB\n$B$ under the given constraints, so Popeye will have to use the power of spinach."},{"problemId":"30906","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tOn a small island far far away, a handful of old men live isolated from the rest of the world. The entire island is divided into plots of land by fences, and each old man owns a single plot of land bounded by fences on all sides. (The region outside all fences is the ocean.) Each of the inhabitants needs fish to survive and the only place where they can fish is the ocean surrounding them. Since not every plot of land is connected to the ocean, some of the men might need to pass through the land of others before being able to fish. The men can cross a single fence at a time, but cannot go through fenceposts or locations where fences intersect.\n\nUnfortunately, the old men are greedy. They demand one fish each time a person wants to enter their land. Since they do not want to lose too much fish to the others, every old man chooses a route that minimizes the number of fish he has to pay to get to the ocean.\n\nOver the years, this has led to rivalry between the old men. Each man hates all other men who have to pay less than him to reach the ocean. Two men only like each other if they have to pay the same amount of fish to reach the ocean.\n\n  \n\nFigure I.1: Illustrations of the first three Sample Inputs. In Sample Input 1, every man has direct access to the ocean, so they all like each other. In Sample Input 2, there does not exist a pair of neighbours who like each other, because the man living in the middle needs to pay one fish, whereas all of his neighbours do not have to pay any fish to reach the ocean. In Sample Input 3, there are six men, some of whom are friendly neighbours.\n\nThe natural question which now occurs is: are there some old men on this island who are neighbours (owning land on opposite sides of a single fence) and like each other? See Figure I.1 for two islands with opposite answers to this question.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31107","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tSeveral years ago a chessboard was a square n×n$n \\times n$ in size (considering that n$n$ was even), divided into squares 1×1$1 \\times 1$ in size. However, after all these years many things have changed in the Chess Kingdom.\n\nThe magical progress never stops and during the trials of the newest mass destruction weapon two corner squares of a chessboard, (1,1)$(1,1)$ and (n,n)$(n,n)$, were destroyed. Besides, the court magicians learned about a parallel world's existence – the so-called {\\itshape Through the Looking Glass}, located at the other side of the board. They even learned to move from any chessboard square to the corresponding Through the Looking Glass square (to the square that is located exactly under the given square) and back again using special portals.\n\nThe White King wanted to visit once more all the squares of his kingdom with his devoted friend. His friend, that is, the Knight moves according to usual chess rules, namely: first it moves two squares in one direction, then changes the movement direction by 90 degrees (to the left or to the right) and moves one other square. In the Through the Looking Glass the Knight moves in perfectly the same manner. Besides, the King has a pocket portal using which he and the Knight can travel to Through the Looking Glass and back. We have to note that using the portal, as well as the Knight's move, is considered to be a move as well.\n\nHelp the White King and find some movement path. Each of the 2n2−4$2n^2-4$ chessboard squares should be visited exactly once. Besides, the path should be closed, that is, one should be able to go from the first square of the path to the last one in one move. The court Wisemen proved that such path exists.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31085","content":"문제\n\nProf. Pang is playing Plants vs Zombies.\n\nImagine that the game is played on a number axis. The following are the elements in the game:\n\n \nn\n$n$ zombies. The \ni\n$i$-th zombie appears at \n0\n$0$ on the number axis at time \nti\n$t_i$ with health point \nhi\n$h_i$. The zombies have the same moving speed \nV\n$V$ and they all move to the right.\n \nm\n$m$ spikeweeds. The \ni\n$i$-th spikeweed is of position \npi\n$p_i$ and attack power \nai\n$a_i$.\nOne peashooter at the position of \n10100\n$10^{100}$. It shoots \nK\n$K$ peas of attack power \nD\n$D$ every second.\n\nEvery second in the game is processed as follows:\n\nWhen the \nx\n$x$-th second begins, the zombies whose \nti\n$t_i$s equal \nx\n$x$ appear at position \n0\n$0$.\nAfter that, for each appeared and alive zombie \nu\n$u$, it will suffer from the spikeweeds whose positions are in \n(Pu,Pu+V]\n$(P_u, P_u + V]$ where \nPu\n$P_u$ is the current position of the \nu\n$u$-th zombie. So its health point will be decreased by \n\n∑1≤i≤m,Pu<pi≤Pu+Vai\n$\\sum\\limits_{1\\le i\\le m, P_u < p_i \\le P_u + V} a_i$. The zombie dies if its health point is no more than zero. Otherwise, it is still alive and its position will be increased by \nV\n$V$.\nWhen the \nx\n$x$-th second ends, the peashooter shoots \nK\n$K$ peas in a row. For each pea, it will hit the zombie that is alive and of the maximum position currently. If there are multiple zombies of the maximum position, the pea hits the one of the minimum index. The health point of the zombie being hit decreases by \nD\n$D$. This zombie dies if its health point is decreased to some value no more than \n0\n$0$. The peas are processed one by one, not simultaneously. (For example, if a zombie is killed by the first pea, the second pea cannot hit it since it dies before the second pea is shot.) If no alive zombie exists, the remain peas will hit nothing.\n\nProf. Pang wants to know the death time (in seconds) of all the \nn\n$n$ zombies."},{"problemId":"31072","content":"문제\n\n서울과학고의 기숙사는 \nN\n$N$개의 방과 서로 다른 두 방을 연결하는 \nN−1\n$N-1$개의 복도로 이루어진 트리 형태로 표현할 수 있다. 방들은 각각 \n1\n$1$부터 \nN\n$N$까지의 수 중 하나를 번호로 가지고 있다. 모든 복도는 양방향으로 이동할 수 있고, 복도를 이용해 모든 방 사이를 이동할 수 있다.\n\n서울과학고에는 총 \nN\n$N$명의 학생이 있으며, 각각 \n1\n$1$부터 \nN\n$N$까지의 수 중 하나를 번호로 가지고 있다. \ni\n$i$번 학생은 기숙사의 \ni\n$i$번 방에서 밤을 지낸다.\n\n서울과학고에는 닌자부가 있다는 오랜 전설이 있다. 닌자부의 부원이 누구인지는 알려지지 않았으나, 적어도 한 명의 부원이 있다고 알려져 있다. 전설에 따르면, 이들은 밤마다 기숙사의 방 중 한 방에서 파티를 연다고 한다. 닌자부의 부원들은 다음과 같은 규칙으로 파티를 열 방을 정한다.\n\n \nu\n$u$번 방과 \nv\n$v$번 방의 거리는 두 방 사이를 이동할 때 거쳐야 하는 최소 복도의 수로 정의한다.\n어떤 방 \np\n$p$에 대해, 만약 다른 방 \nr≠p\n$r\\neq p$가 존재해, \nr\n$r$번 방이 모든 닌자부 부원들의 방에서 \np\n$p$번 방보다 거리가 가깝다면, \np\n$p$번 방에서는 파티를 열지 않는다.\n위 조건을 위배하지 않는 모든 방 중 가장 번호가 큰 방에서 파티를 연다. 이 방이 닌자부 부원의 방이 아닐 수도 있다는 데에 주의하여라.\n\n예를 들어, 서울과학고의 기숙사가 아래 그림과 같다고 하자. 닌자부에 소속된 학생들의 번호의 집합 \nS={4,5,8}\n$S=\\{4,5,8\\}$이라면, 파티가 열릴 조건을 위배하지 않는 방은 \n1\n$1$, \n2\n$2$, \n3\n$3$, \n4\n$4$, \n5\n$5$, \n8\n$8$번 방이고, 이 중 번호가 가장 큰 \n8\n$8$번 방에서 파티가 열리게 된다.\n\n서울과학고의 학생들은 최근에 수학여행을 다녀왔다. 수학여행에서 묵은 숙소 역시 \nN\n$N$개의 방과 서로 다른 두 방을 연결하는 \nN−1\n$N-1$개의 복도로 이루어진 트리 형태로 표현할 수 있다.\n\n열정이 많은 닌자부 부원들은 수학여행을 가서도 파티를 열었다. 이때 파티가 열리는 장소를 선택하는 방법은 이전과 같았다.\n\n서울과학고 기숙사 사감인 지후는 서울과학고 기숙사와 수학여행 숙소에서 파티가 열린 방의 번호가 같다는 사실을 알게 되었다. 지후는 이 정보를 토대로 닌자부 부원들이 누구인지 알아내려고 한다. 닌자부 부원들의 번호의 집합으로 가능한 것의 개수를 구하여라."},{"problemId":"31108","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThere are two infinite flat mirrors located at an angle α$\\alpha$ relative to each other so that they can be considered as rays on the plane when viewed from the side. Through a tiny hole in one of the mirrors, a laser beam is launched at an angle β$\\beta$ as shown in the figure below:\n\n\n\nYour task is to count the number of reflections of the laser beam from the mirrors before it goes to infinity. The angle of incidence of the beam on the mirror always coincides with the angle of reflection. The hole through which the beam is launched is extremely small, so we can assume that if the beam suddenly hits the hole, it will still be completely reflected according to the usual rules.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30921","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tN-Queen 문제는 크기가 N × N인 체스판 위에 N개의 퀸을 서로 공격할 수 없게 놓는 문제이다. 퀸은 같은 행, 열, 또는 대각선 위에 있는 다른 기물을 공격할 수 있다.\n\n이 문제에서는 체스판이 찌그러져 있다. 즉 체스판은 그림과 같은 볼록사각형 ABCD로, 사각형의 네 변을 N등분하고, 네 선분 AB와 CD, AD와 BC에 있는 N − 1개의 등분점들을 마주 보는 것끼리 이어서 만들어진 N2개의 사각형 칸으로 구성된다.\n\n\n\n이 체스판 위에 퀸 N개를 서로 공격하지 못하도록 놓는 방법들 가운데, 퀸이 위치한 칸의 넓이의 합이 최대가 되는 경우를 구하자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31109","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tLet's remind you what a correct bracket sequence (CBS) is.\n\n\n\tAn empty string is CBS.\n\tIf s$s$ is CBS, then ( s$s$ ) and [ s$s$ ] also are CBS.\n\tIf s$s$ and t$t$ are CBS, then st$st$ also is CBS.\n\tIf a sequence can't be obtained applying the rules given above, then it is not a CBS.\n\n\nVasya wrote a correct bracket sequence consisting of brackets \"(\", \")\", \"[\" and \"]\". After that Vasya added to some places of the sequence characters \"b\", \"d\", \"o\", \"p\", \"q\" and \"x\". As a result, Vasya got some string z$z$.\n\nNow Vasya performs the following operations:\n\nIf z$z$ has a substring of the form ( s$s$ ) (there are no brackets in s$s$), then Vasya replaces it with s$s$ string's mirror reflection relative to vertical axis. If z$z$ contains a substring of the form [ t$t$ ] (there are no brackets in t$t$ as well), then Vasya replaces it with t$t$ string's mirror reflection relative to horizontal axis. For example, substring \"(qbpoxd)\" will be replaced with \"bxoqdp\", and substring \"[qbpoxd]\" will be replaced with \"dpboxq\".\n\nVasya performs operations until there are no brackets left in the string.\n\nCalculate by the given z$z$ string what result Vasya will have in the end.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31073","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t괄호 문자열은 여는 괄호 (와 닫는 괄호 )로만 이루어진 문자열을 의미한다. 올바른 괄호 문자열은 다음과 같이 정의된다.\n\n\n\t빈 문자열은 올바른 괄호 문자열이다.\n\tS가 올바른 괄호 문자열이라면, (S)도 올바른 괄호 문자열이다.\n\tS와 T가 올바른 괄호 문자열이라면, 두 문자열을 이어 붙인 괄호 문자열 ST도 올바른 괄호 문자열이다.\n\n\n위 과정을 통해 만들어질 수 없는 모든 괄호 문자열은 올바른 괄호 문자열이 아니다.\n\n최근 준희는 길이가 2n$2n$인 올바른 괄호 문자열의 개수가 카탈란 수 Cn${C}_{n}$개라는 사실을 알게 되었다. 올바른 괄호 문자열을 좋아하는 준희는 올바른 괄호 문자열이 전체 괄호 문자열 중 너무 낮은 빈도로 등장한다고 생각하여 슬퍼하고 있었다.\n\n지민이는 준희를 위로해 주기 위하여, 올바른 괄호 문자열이 충분히 많이 존재한다는 것을 보여주기로 하였다. 지민이는 다음과 같은 게임에서 준희에게 승리하여 올바른 괄호 문자열이 충분히 많다는 것을 보여주고 싶다.\n\n길이 N$N$인 올바르지 않은 괄호 문자열 S$S$에서, 두 명이 번갈아 가며 지울 문자가 없어질 때까지 맨 앞의 문자 또는 맨 뒤의 문자를 지운다. 게임 중 S$S$가 빈 문자열이 아닌 올바른 괄호 문자열이 되는 순간이 존재한다면 지민이가 승리한다. 게임이 끝날 때까지 빈 문자열이 아닌 올바른 괄호 문자열이 등장하지 않으면 준희가 승리한다.\n\n게임은 지민이가 먼저 시작한다. 길이 N$N$과 문자열 S$S$가 주어졌을 때, 지민과 준희가 모두 최적의 선택만을 내린다면 누가 게임에서 이길지 알아보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31086","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tProf. Pang does research on the minimum covering circle problem. He does not like random algorithms so he decides to find an efficient deterministic one. He starts with the classical idea of binary search. In each iteration of the binary search, the following problem needs to be solved:\n\nGiven the radius r$r$ of a circle and a convex hull C$C$, let S$S$ be defined as S={p | the circle with center p and radius r covers C}.$$S=\\{p\\ |\\ \\text{the circle with center $p$ and radius $r$ covers $C$}\\}.$$ Find the area of S$S$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30907","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou may know that in the 17th century, a group of Dutchmen founded a settlement called New Amsterdam on Manhattan Island that later went on to become New York City. Less well-known is the story of another group of Dutchmen that also moved over to America and founded a city called New Delft. Like its bigger counterpart, New Delft has been built on a grid made up of two sets of parallel streets that meet each other at a perpendicular angle.\n\nSome stroopwafel bakeries have already been built in New Delft, but none of the streets have been constructed. Your task is to lay out the grid of streets. For this, you need to decide on an orientation for the grid so that there are two orthogonal directions for the two types of streets. Once the orientation is fixed, you may build arbitrary streets, as long as each of them has one of the two given directions, as shown in Figure J.1. Each street can be traversed in either direction.\n\n\n\nFigure J.1: Illustration of Sample Input 2 with a possible street layout that gives the shortest possible path that visits all bakeries in some order.\n\nThe street layout should be created in an optimal way for the annual Stroopwafel Run. This is an event in which a group of runners visits all the bakeries in some order of their choosing, and they may start and end their run at any point in the city. Your task is to come up with a grid layout that makes this shortest path as short as possible.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31074","content":"문제\n\n이 문제는 인터랙티브 문제이다.\n\n숨겨진 수열 \nS\n$S$가 있다. 당신은 이 수열 \nS\n$S$에 관한 정보를 알아내야 한다. 수열 \nS\n$S$의 길이는 \nN\n$N$이고, 아래의 조건에 모두 맞는다.\n\n \nS\n$S$의 모든 원소는 \n1\n$1$, \n2\n$2$, \n3\n$3$, \n4\n$4$ 중 하나이다.\n \nS1=1\n$S_1=1$이다.\n \nSi=1\n$S_i=1$이라면, \nSi+1=1\n$S_{i+1}=1$ 또는 \nSi+1=2\n$S_{i+1}=2$이다. \n(1≤i<N)\n$(1\\le i<N)$ \n \nSi=2\n$S_i=2$이라면, \nSi+1=2\n$S_{i+1}=2$ 또는 \nSi+1=3\n$S_{i+1}=3$이다. \n(1≤i<N)\n$(1\\le i<N)$ \n \nSi=3\n$S_i=3$이라면, \nSi+1=3\n$S_{i+1}=3$ 또는 \nSi+1=4\n$S_{i+1}=4$이다. \n(1≤i<N)\n$(1\\le i<N)$ \n \nSi=4\n$S_i=4$이라면, \nSi+1=4\n$S_{i+1}=4$ 또는 \nSi+1=1\n$S_{i+1}=1$이다. \n(1≤i<N)\n$(1\\le i<N)$ \n\n당신은 다음과 같은 두 가지 질문을 할 수 있다.\n\ncount l r: \n[l,r]\n$[l,r]$ 구간 내에 있는 \n1\n$1$, \n2\n$2$, \n3\n$3$, \n4\n$4$의 개수를 오름차순으로 정렬한 수열을 질문한다.\ndiff l r: \nl≤i<r\n$l\\le i<r$이고 \nSi≠Si+1\n$S_i\\neq S_{i+1}$인 \ni\n$i$의 개수를 질문한다.\n\n이때, \nS\n$S$에 \n1\n$1$, \n2\n$2$, \n3\n$3$, \n4\n$4$가 각각 몇 개씩 있는지 알아내어라."},{"problemId":"31110","content":"문제\n\nBobo has an undirected graph with \nn\n$n$ vertices and \nm\n$m$ edges. The vertices are numbered by \n1,…,n\n$1, \\dots, n$, and the \ni\n$i$-th edge is between the \nai\n$a_i$-th and the \nbi\n$b_i$-th vertex. Plus, the \ni\n$i$-th vertex is associated with a character \nci\n$c_i$.\n\nFind the number of ways to choose four distinct vertices \n(u,v,w,x)\n$(u, v, w, x)$ such that\n\n \nu\n$u$ and \nv\n$v$, \nv\n$v$ and \nw\n$w$, \nw\n$w$ and \nx\n$x$ are connected by an edge,\n \ncu=b\n$c_u = \\mathtt{b}$, \ncv=o\n$c_v = \\mathtt{o}$, \ncw=b\n$c_w = \\mathtt{b}$, \ncx=o\n$c_x = \\mathtt{o}$."},{"problemId":"31087","content":"문제\n\nTexas hold 'em (also known as Texas holdem, hold 'em, and holdem) is one of the most popular variants of the card game of poker. Please read the following rules as they may be different from the regular rules. Two cards, known as hole cards, are dealt face-down to each player. Each player only knows his own hole cards. And then five community cards are dealt in three stages face-up. The stages consist of a series of three cards (\"the flop\"), later an additional single card (\"the turn\" or \"fourth street\"), and a final card (\"the river\" or \"fifth street\"). All players know the face-up cards that are already dealt. All cards are drawn from a standard 52-card deck. A standard 52-card deck comprises \n13\n$13$ ranks in each of the four French suits: clubs (\n♣\n$\\clubsuit$), diamonds (\n♢\n$\\diamondsuit$), hearts (\n♡\n$\\heartsuit$) and spades (\n♠\n$\\spadesuit$). Each suit includes an Ace (A), a King (K), Queen (Q) and Jack (J), each depicted alongside a symbol of its suit; and numerals or pip cards from the Deuce (Two) to the Ten, with each card depicting that many symbols (pips) of its suit. No card can be drawn more than once.\n\nIndividual cards are ranked as follows (high-to-low): A, K, Q, J, 10, 9, 8, 7, 6, 5, 4, 3, 2. Each player seeks the best five-card poker hand from any combination of the seven cards -- the five community cards and his two hole cards.\n\nThe following table shows the possible five-card poker hand types in increasing order of their values. Each type has a specific ordering of the five cards that is described below. The following part is describing how to compare two hands, which is the same as the regular rule.\n\nHighcard: Simple value of the card. The cards are ordered as \na1a2a3a4a5\n$a_1a_2a_3a_4a_5$ such that \na1>a2>a3>a4>a5\n$a_1>a_2>a_3>a_4>a_5$. (\nai\n$a_i$ represents the rank of \ni\n$i$-th card.)\n\nPair: Two cards with the same value. The cards are ordered as \na1a2a3a4a5\n$a_1a_2a_3a_4a_5$ such that \na1=a2\n$a_1=a_2$, \na3>a4>a5\n$a_3>a_4>a_5$, \na1≠a3\n$a_1 \\ne a_3$, \na1≠a4\n$a_1 \\ne a_4$, \na1≠a5\n$a_1 \\ne a_5$.\n\nTwo pairs: Two times two cards with the same value. The cards are ordered as \na1a2a3a4a5\n$a_1a_2a_3a_4a_5$ such that \na1=a2\n$a_1=a_2$, \na3=a4\n$a_3=a_4$, \na1>a3\n$a_1 > a_3$, \na1≠a5\n$a_1 \\ne a_5$, \na3≠a5\n$a_3 \\ne a_5$.\n\nThree of a kind: Three cards with the same value. The cards are ordered as \na1a2a3a4a5\n$a_1a_2a_3a_4a_5$ such that \na1=a2=a3\n$a_1=a_2=a_3$,\na4>a5\n$a_4 > a_5$, \na1≠a4\n$a_1 \\ne a_4$, \na1≠a5\n$a_1 \\ne a_5$.\n\nStraight: Sequence of 5 cards in increasing value. The cards are ordered as \na1a2a3a4a5\n$a_1a_2a_3a_4a_5$ such that \nai\n$a_i$ is exactly one rank above \nai+1\n$a_{i+1}$ for all \n1≤i≤4\n$1\\le i\\le 4$. Specially, if \na5\n$a_5$ is Ace, \na4\n$a_4$ can be \n2\n$2$. In this case, Ace is considered one rank below 2.\n\nFlush: 5 cards of the same suit. The cards are ordered as \na1a2a3a4a5\n$a_1a_2a_3a_4a_5$ such that all the five cards have the same suit and \na1>a2>a3>a4>a5\n$a_1>a_2>a_3>a_4>a_5$.\n\nFull house: Combination of three of a kind and a pair. The cards are ordered as \na1a2a3a4a5\n$a_1a_2a_3a_4a_5$ such that \na1=a2=a3\n$a_1=a_2=a_3$, \na4=a5\n$a_4=a_5$.\n\nFour of a kind: Four cards of the same value. The cards are ordered as \na1a2a3a4a5\n$a_1a_2a_3a_4a_5$ such that \na1=a2=a3=a4\n$a_1=a_2=a_3=a_4$.\n\nStraight flush: Straight of the same suit. The cards are ordered as \na1a2a3a4a5\n$a_1a_2a_3a_4a_5$ such that all the five cards have the same suit and that \nai\n$a_i$ is exactly one rank above \nai+1\n$a_{i+1}$ for all \n1≤i≤4\n$1\\le i\\le 4$. Specially, if \na5\n$a_5$ is Ace, \na4\n$a_4$ can be \n2\n$2$. In this case, Ace is considered one rank below 2.\n\nRoyal flush: Straight flush from Ten to Ace. The cards are ordered as \na1a2a3a4a5\n$a_1a_2a_3a_4a_5$ such that \na1,a2,a3,a4,a5\n$a_1, a_2, a_3, a_4, a_5$ are Ace, King, Queen, Jack, Ten of the same suit.\n\nTo compare two hands, first, we will compare the type of two hands. For example, one hand is Four of a kind, the other hand is Full house, Four of a kind always win Full house.\n\nIf the types of two hands are the same, we compare the ranks of the cards. We will order the card as described above, and compare them one by one. Firstly, we will compare the first card. If a hand's first card has a higher rank, it wins. If the first cards of the two hands have the same rank, we will compare the second card, and so on. If the cards have the same rank in every position, no one wins. The suit of cards never matters. For example, \n♣\n$\\clubsuit$ 5, \n♢\n$\\diamondsuit$ 5, \n♡\n$\\heartsuit$ 5, \n♠\n$\\spadesuit$ 2, \n♣\n$\\clubsuit$ 2 can win \n♢\n$\\diamondsuit$ 3, \n♠\n$\\spadesuit$ 3, \n♡\n$\\heartsuit$ 3, \n♢\n$\\diamondsuit$ A, \n♡\n$\\heartsuit$ A. Since they are both Full house, and we will compare the ranks of the three cards of a kind at first.\n\nConsider the case that the hole cards of Alice are \n♣\n$\\clubsuit$ A, \n♢\n$\\diamondsuit$ 4 and the hole cards of Bob are \n♡\n$\\heartsuit$ 2, \n♠\n$\\spadesuit$ 3. The community cards are \n♠\n$\\spadesuit$ A, \n♡\n$\\heartsuit$ 4, \n♠\n$\\spadesuit$ 5, \n♣\n$\\clubsuit$ Q, \n♡\n$\\heartsuit$ Q. The best hand of Alice (five cards among her hole cards and the community hards) is \n♣\n$\\clubsuit$ A, \n♠\n$\\spadesuit$ A, \n♣\n$\\clubsuit$ Q, \n♡\n$\\heartsuit$ Q, \n♠\n$\\spadesuit$ 5, which is Two pairs. The best hand of Bob is \n♠\n$\\spadesuit$ 5, \n♡\n$\\heartsuit$ 4, \n♠\n$\\spadesuit$ 3, \n♡\n$\\heartsuit$ 2, \n♠\n$\\spadesuit$ A, which is Straight. Thus, Bob wins.\n\nPlayers have betting options to check, call, raise, or fold. In this problem, we do not care about the meanings of these bets. Rounds of betting take place before the flop is dealt and after each subsequent deal. The player who has the best hand and has not folded by the end of all betting rounds wins all of the money bet for the hand, known as the pot. In certain situations, a \"split-pot\" or \"tie\" can occur when two players have hands of equivalent value. This is also called a \"chop-pot\". In this problem, we assume the two players never fold. So the player with the best five-card poker hand from any combination of the seven cards wins. If the two players have hands of equal values, no one wins.\n\nTo simplify the statement, we do not introduce the detailed rules here.\n\nDaddy Dream is a world-famous Texas hold 'em player. As a strong challenger, Wolf Chicken wants to beat Daddy Dream. Wolf Chicken plays first after \"the flop\" (three cards are dealt face-up). Both players know the three face-up cards and each player knows his own two hole cards. Wolf Chicken will choose to allin if and only if he will certainly win whatever the \"the turn\", \"the river\" (the remaining two community cards that have not been revealed) and Daddy Dream's hole cards are. Otherwise, Wolf Chicken will choose to check.\n\nGiven Wolf Chicken's two hole cards and the three flop cards, help him to determine whether he can allin."},{"problemId":"30923","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t어느 날, 크냑은 지인으로부터 3D 프린터를 선물 받았다. 평소에 3D 프린터에 대해 관심이 많았던 크냑은 들떴으나, 도대체 이걸로 무엇을 만들어야 할지 감을 잡을 수 없었다. 그래서 일단 눈에 들어온 히스토그램을 3D 프린터를 이용해 출력해 보기로 했다.\n\n히스토그램은 너비가 1$1$로 동일한 막대 N$N$개가 빈틈없이 일렬로 붙어있는 형태이다. 크냑은 이를 너비와 폭이 1$1$이고, 높이가 hi$h_i$인 N$N$개의 직육면체로 이루어진 3D 모형으로 출력할 것이다.\n\n돈이 없는 크냑은 극한의 절약을 위해 모형의 속은 비우고, 정확히 겉넓이만큼의 재료만 사용하고자 한다. 히스토그램의 정보가 주어졌을 때, 3D 모형의 겉넓이를 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30908","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn traditional Dutch clog dancing, you as the dancer need to follow a very specific sequence of movements. The dance takes place on a square grid of square tiles, and at the start of the dance you stand on the top left corner tile of the grid. You then alternate between two types of dance move, moving from tile to tile in the grid for as long as you want. Your first move may be of either kind, but after that you need to strictly alternate between the two kinds of moves.\n\nBoth moves are similar to knight moves in chess: in the first type of move, you go from your current square to a square that is a$a$ tiles away along one axis of the grid and b$b$ tiles away along the other axis. Similarly, in the second type of move, you need to move c$c$ and d$d$ tiles along the respective axes. As you can freely swap the two axes and choose the movement direction along each axis, there can be up to 8$8$ ways of performing a given type of move. Figure K.1 shows an example dance routine with (a,b)=(1,2)$(a,b) = (1,2)$ and (c,d)=(2,3)$(c,d) = (2,3)$.\n\n\n\nFigure K.1: Illustration of Sample Input 3, showing a dance that begins in the top left corner of a 4×4$4\\times 4$ grid and ends in the bottom left corner, visiting the blue squares along the way. There are 13$13$ reachable squares in total. The three squares highlighted in red cannot be part of any dance performance.\n\nStarting on the top left corner tile, how many different tiles could you reach while doing a clog dance? It is not allowed to step outside of the grid and you do not count tiles that you are simply stepping over while doing a move. Note that you need to count all tiles that can be reached during some performance of the dance, but not necessarily during the same one.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31075","content":"문제\n\n이 문제는 투 스텝 인터랙티브 문제입니다.\n\n브루와 민규는 서울과학고등학교에서 열리는 전략 서바이벌 게임 '더 챌린저스'에 팀으로 참가했다.\n\n예선 게임은 두 팀원 중 한 명이 송신자, 다른 한 명이 수신자 역할을 맡아 게임을 진행한다. 게임이 진행되는 동안 두 팀원은 서로 다른 방에 들어가며 소통할 수 없다. 브루가 송신자, 민규가 수신자 역할을 맡는다.\n\n게임의 딜러 동현은 먼저 브루의 방에 들어가 길이 \nL\n$L$의 비트스트링 \nS\n$S$('0'과 '1'로만 이루어진 문자열)를 제시한다. 이후 브루는 길이 \nN\n$N$의 순열 \nA\n$A$를 제출해야 한다. 동현은 브루가 제출한 순열을 다음과 같은 과정으로 섞는다.\n\n먼저 순열 \nA\n$A$의 수 중 하나를 피봇 \np\n$p$로 선택한다.\n이후, \np\n$p$보다 작은 수는 원래 순열에 있는 순서대로 \np\n$p$ 왼쪽으로 옮기고, \np\n$p$보다 큰 수는 원래 순열에 있는 순서대로 \np\n$p$ 오른쪽으로 옮긴다. 이렇게 섞인 순열을 \nA′\n$A'$이라고 하자.\n\n예를 들어, 원래 순열 \nA=[3,6,1,5,4,2]\n$A=[3,6,1,5,4,2]$이고, 피봇 \np=4\n$p=4$라면, 섞인 순열 \nA′=[3,1,2,4,6,5]\n$A'=[3,1,2,4,6,5]$가 된다. 이후 동현은 민규에게 순열 \nA′\n$A'$를 전달한다. 민규가 이 순열 \nA′\n$A'$를 보고 비트스트링 \nS\n$S$를 정확히 맞힌다면 게임에서 승리한다.\n\n민규가 운 좋게 비트스트링 \nS\n$S$를 정확히 맞히는 것을 방지하기 위해, 동현은 초기에 브루에게 \nT\n$T$개의 비트스트링을 제시할 것이다. 그리고 브루가 제출한 \nT\n$T$개의 순열 각각을 동현이 섞어 새로운 순열 \nT\n$T$개를 만들고, 이 \nT\n$T$개의 순열을 임의의 순서로 민규에게 전달할 것이다.\n\n당연하게도, 브루와 민규는 게임이 시작되기 전 전략을 논의할 수 있다. 또한, 브루와 민규는 게임 전 \nN\n$N$과 \nL\n$L$의 값을 직접 정할 수 있다. \nN\n$N$과 \nL\n$L$의 값에 따라 게임의 난이도, 그리고 게임 승리 시 얻는 점수가 결정된다. 난이도가 쉽게 두 변수를 정하면 게임에서 승리할 수 있겠지만, 얻는 점수가 더 낮아질 것이다.\n\n브루와 민규를 위해 게임에서 승리할 수 있는 최선의 전략을 만들어 주자."},{"problemId":"31111","content":"문제\n\nGiven three integers \nn\n$n$, \nm\n$m$, \nk\n$k$, find the number of pairs \n(a,b)\n$(a, b)$ where\n\n \n|a|,|b|≤m\n$|a|, |b| \\leq m$,\n \na,b∈Z\n$a, b \\in \\mathbb{Z}$, i.e., \na\n$a$ and \nb\n$b$ are integers,\n \n|S|=k\n$|S| = k$ where \nS\n$S$ be the set of rational roots of the equation \nxn+a⋅x+b=0\n$x^n + a \\cdot x + b = 0$, and \n|S|\n$|S|$ is the size of \nS\n$S$. In particular, there exists exactly \nk\n$k$ distinct rational numbers \nx\n$x$ which solve the last equation.\n\nNote: \nx\n$x$ is a rational number if and only if there exists two integers \np\n$p$ and \nq\n$q$ (\nq≠0\n$q \\neq 0$) where \nx=pq\n$x = \\frac{p}{q}$."},{"problemId":"31112","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tGiven three arrays f$f$, g$g$, h$h$ of length 2m$2^m$, Bobo defines a cryptographic function enc(x,y)=(a,b)$\\mathrm{enc}(x, y) = (a, b)$ where\n\n\n\t a=y⊕g[x⊕f[y]]$a = y \\oplus g[x \\oplus f[y]]$,\n\t b=x⊕f[y]⊕h[y⊕g[x⊕f[y]]]$b = x \\oplus f[y] \\oplus h[y \\oplus g[x \\oplus f[y]]]$.\n\n\nHe also has q$q$ questions (a1,b1),…,(aq,bq)$(a_1, b_1), \\dots, (a_q, b_q)$.\n\nFor each (ai,bi)$(a_i, b_i)$, find a pair of integers (x,y)$(x, y)$ where 0≤x,y<2m$0 \\leq x, y < 2^m$ and enc(x,y)=(ai,bi)$\\mathrm{enc}(x, y) = (a_i, b_i)$. It is guaranteed that for each (ai,bi)$(a_i, b_i)$, there exists a unique pair (x,y)$(x, y)$ satisfying the condition.\n\nNote: ⊕$\\oplus$ denotes the bitwise exclusive-or, i.e., xor.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31088","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tFather Study loves math very much.\n\nGiven a sequence of integers a1,a2,...,an$a_1,a_2,...,a_n$, Father Study wants to calculate another sequence of integers t1,t2,...,tn$t_1,t_2,...,t_n$ satisifing \n\n\n\tFor each i(1≤i≤n)$i (1 \\le i \\le n)$, ti>0$t_i > 0$.\n\tFor each i(1≤i<n)$i (1\\le i < n)$, ai×ti×ai+1×ti+1$a_i \\times t_i \\times a_{i+1} \\times t_{i+1}$ is a square number. (In mathematics, a square number or perfect square is an integer that is the square of an integer, in other words, it is the product of some integer with itself.)\n\t ∏i=1nti$\\prod_{i=1}^{n}{t_i}$ is minimized.\n\n\nPlease help Father Study to calculate the answer --- the minimum value of ∏i=1nti$\\prod_{i=1}^{n}{t_i}$. Because the answer is too large, please output the answer modulo 1000000007$1000000007$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30924","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t1 이상 10,000 이하의 정수 A, B에 대해 A+B의 값을 출력해야 한다. 단, 이 문제는 인터랙티브 (상호작용) 문제이다. 이 문제에서는 A와 B의 값이 바로 주어지지 않고, 채점기와의 상호작용을 통해 그 값을 알아내야 한다.\n\n상호작용 문제에 대해 잘 모른다면, 제1편을 먼저 풀어보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31076","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tВ погожий субботний день небезызвестные жители Простоквашино по традиции собрались на чаепитии у Дяди Федора. На этот раз Дядя Федор открыл ящик с заморскими шарообразными шоколадными конфетами, а Почтальон Печкин в силу своей аккуратности построил из всех конфет пирамидку в форме правильного тетраэдра.\n\n\n\nКаждый слой пирамидки представляет из себя правильный треугольник, выложенный из конфет, причем сторона его содержит на одну конфету меньше, чем сторона предыдущего слоя. Например, так выглядят третий и четвертый сверху слои пирамидки.\n\n\n\nГалчонку Хватайке очень не понравилось распределение конфет по слоям (верхний слой состоит из одной конфеты, а последний может состоять, к примеру, из десяти!), и он решил немного исправить ситуацию. Приведя всех в заблуждение и ослабив бдительность фразой «Кто там?» он целиком съел несколько верхних слоев пирамидки.\n\n\n\nЭтот поступок заметили и дружно начали ловить заметно растолстевшего галчонка. Разумеется, что в суете стол опрокинули, и все конфеты рассыпались по полу.\n\nОперацию по поиску и сбору конфет провели Шарик и Матроскин, которые нашли n$n$ конфет, и заинтересовались, не потерялись ли еще конфеты. Так как никто не помнит, сколько конфет было, да и анализ внешности и состояния Хватайки ничего не дал, будем считать, что конфеты не потерялись, если их можно сложить в усеченную правильную пирамидку, то есть пирамидку без нескольких верхних слоев. Помогите жителям Простоквашино понять, потерялись ли столь ценные заморские конфетки!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31113","content":"문제\n\nIn compute science, a stack \ns\n$s$ is a data structure maintaining a list of elements with two operations:\n\n \ns.push(e)\n$s.\\mathtt{push}(e)$ appends an element \ne\n$e$ to the right end of the list,\n \ns.pop()\n$s.\\mathtt{pop}()$ removes the rightmost element in the list and returns the removed element.\n\nFor convenience, Bobo denotes the number of elements in the stack \ns\n$s$ by \nsize(s)\n$\\mathtt{size}(s)$, and the rightmost element by \nright(s)\n$\\mathtt{right}(s)$.\n\nBobo has \nm\n$m$ stacks \ns1,…,sm\n$s_1, \\dots, s_m$. Initially, the stack \nsi\n$s_i$ contains \nki\n$k_i$ elements \nai,1,…,ai,ki\n$a_{i, 1}, \\dots, a_{i, k_i}$ where \nai,j∈{1,…,n}\n$a_{i, j} \\in \\{1, \\dots, n\\}$. Furthermore, for each \ne∈{1,…,n}\n$e \\in \\{1, \\dots, n\\}$, the element \ne\n$e$ occurs in the \nm\n$m$ stacks exactly twice. Thus, \nk1+⋯+km=2n\n$k_1 + \\dots + k_m = 2 n$.\n\nA sorting plan of length \nl\n$l$ consists of \nl\n$l$ pairs \n(f1,t1),…,(fl,tl)\n$(f_1, t_1), \\dots, (f_l, t_l)$. To execute a sorting plan, for each \ni∈{1,…,l}\n$i \\in \\{1, \\dots ,l\\}$ in the increasing order, Bobo performs \nsti.push(sfi.pop())\n$s_{t_i}.\\mathtt{push}(s_{f_i}.\\mathtt{pop}())$.\n\nA sorting plan is valid if the length does not exceed \n⌊3n2⌋\n$\\lfloor \\frac{3n}{2} \\rfloor$, and for each \ni∈{1,…,l}\n$i \\in \\{1, \\dots, l\\}$, \n1≤fi,ti≤m\n$1 \\leq f_i, t_i \\leq m$, \nfi≠ti\n$f_i \\neq t_i$. Before the \ni\n$i$-th operation,\n\n \nsize(sfi)>0\n$\\mathtt{size}(s_{f_i}) > 0$,\n \nsize(sti)<2\n$\\mathtt{size}(s_{t_i}) < 2$,\neither \nsize(sti)=0\n$\\mathtt{size}(s_{t_i}) = 0$ or \nright(sfi)=right(sti)\n$\\mathtt{right}(s_{f_i}) = \\mathtt{right}(s_{t_i})$.\n\nAlso, after the execution of a valid sorting plan, each of the \nm\n$m$ stacks either is empty or contains the two copies of the same element.\n\nFind a valid sorting plan, given the initial configuration of the \nm\n$m$ stacks."},{"problemId":"30909","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are playing Battleships in a large ocean with large ships. More precisely, there is a large square grid of size at most 100×100$100\\times 100$ and inside it are up to 10$10$ of the largest type of ship in Battleships -- the aircraft carrier -- which has a length of five tiles, placed either horizontally or vertically. The ships do not overlap, but they are allowed to be adjacent to each other. See Figure L.1 for an example.\n\nUnfortunately, your opponent appears to bend the rules to their liking. It looks like they do not always determine the placement of their ships before you start shooting. You are not impressed by their attempt at cheating, and decide to try and win the game anyway.\n\n\n\nFigure L.1: Illustration of Sample Interaction 1 after the first four shots were fired.\n\nYour goal is to locate and sink all your opponent's aircraft carriers in at most 2500$2500$ shots, that is, you must hit each of the five tiles of all their ships.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31089","content":"문제\n\nProf. Pang is the king of Pangland. Pangland is a board with size \nn×m\n$n\\times m$. The cell at the \ni\n$i$-th row and the \nj\n$j$-th column is denoted as cell \n(i,j)\n$(i, j)$ for all \n1≤i≤n,1≤j≤m\n$1\\le i\\le n, 1\\le j\\le m$. If two cells share an edge, they are connected. The board is toroidal, that is, cell \n(1,y)\n$(1,y)$ is also connected to \n(n,y)\n$(n,y)$ and \n(x,1)\n$(x,1)$ is also connected to \n(x,m)\n$(x,m)$ for all \n1≤x≤n,1≤y≤m\n$1\\le x\\le n, 1\\le y\\le m$.\n\nProf. Pang has three sons. We call them the first son, the second son and the third son. Each of them lives in a cell in Pangland. The \ni\n$i$-th son lives in cell \n(xi,yi)\n$(x_i, y_i)$. No two sons live in the same cell. Prof. Pang wants to distribute the cells in Pangland to his sons such that\n\nEach cell belongs to exactly one son.\nThere are \ncnti\n$cnt_i$ cells that belong to the \ni\n$i$-th son for all \n1≤i≤3\n$1\\le i\\le 3$.\nThe cells that belong to the \ni\n$i$-th son are connected for all \n1≤i≤3\n$1\\le i\\le 3$.\nThe cell that the \ni\n$i$-th son lives in must belong to the \ni\n$i$-th son himself for all \n1≤i≤3\n$1\\le i\\le 3$.\n\nPlease help Prof. Pang to find a solution if possible."},{"problemId":"30925","content":"문제\n\nThe ICPC committee is planning a surprise event to cheer on the participating teams. The committee provides each team with a pair of two numbers, \nA\n$A$ and \nB\n$B$ (\n1≤A≤B≤m\n$1 ≤ A ≤ B ≤ m$), before the competition, which will be used for the lucky draws after the competition. The committee wants to hold \nK\n$K$ draws. In each draw, a single number \nC\n$C$ is chosen by the committee, and all teams with a pair \n(A,B)\n$(A, B)$ such that \nA≤C≤B\n$A ≤ C ≤ B$ win in this draw. To make more teams happy, the committee wants to choose the \nK\n$K$ numbers used in the  \nK\n$K$  draws in advance so that the most teams win. A team can win multiple times but is considered to have won once.\n\nFor example, five teams are participating in ICPC and their pairs are \n(1,2)\n$(1, 2)$, \n(1,4)\n$(1, 4)$, \n(3,6)\n$(3, 6)$, \n(4,7)\n$(4, 7)$, \n(5,6)\n$(5, 6)$, and \nK=2\n$K = 2$. When the committee chooses two numbers \n2\n$2$ and \n4\n$4$ , four teams with \n(1,2)\n$(1, 2)$, \n(1,4)\n$(1, 4)$, \n(3,6)\n$(3, 6)$ and \n(4,7)\n$(4, 7)$ win. The team with \n(1,4)\n$(1, 4)$ wins twice because the pair contains both chosen numbers. In fact, all five teams can win if \n2\n$2$ and \n5\n$5$ are chosen. The maximum number of winning teams is five.\n\nGiven \nn\n$n$ pairs of two integers for teams, write a program to output the maximum number of winning teams for all possible \nK=1,2,…,m\n$K = 1, 2, \\ldots, m$."},{"problemId":"31114","content":"문제\n\nFor a string \ns1…sn\n$s_1\\dots s_n$ of \nn\n$n$ bits (i.e., zeros and ones), Bobo computes the \nf\n$f$-value of \ns1…sn\n$s_1\\dots s_n$ by playing the following game.\n\nIf all the bits are zero, the game ends.\nIf there are \nk\n$k$ ones in the bit string, Bobo flips the \nk\n$k$-th bit, i.e., \nsk\n$s_k$.\nThe \nf\n$f$-value of the bit string is the number of flips Bobo has performed before the game ends.\n\nFormally,\n\nIf \ns1=⋯=sn=0\n$s_1 = \\dots = s_n = 0$, \nf(s1…sn)=0\n$f(s_1 \\dots s_n) = 0$.\nOtherwise, assuming that \nk=s1+⋯+sn\n$k = s_1 + \\dots + s_n$, \nf(s1…sn)=f(s1…sk−1sk―sk+1…sn)+1\n$f(s_1 \\dots s_n) = f(s_1 \\dots s_{k - 1} \\overline{s_k} s_{k + 1} \\dots s_n) + 1$ where \nc―\n$\\overline{c}$ denotes the flip of the bit \nc\n$c$ such as \n0―=1\n$\\overline{0} = 1$ and \n1―=0\n$\\overline{1} = 0$.\n\nNow, Bobo has a bit string \ns1…sn\n$s_1 \\dots s_n$ subjecting to \nq\n$q$ changes, where the \ni\n$i$-th change is to flip all the bits among \nsli…sri\n$s_{l_i} \\dots s_{r_i}$ for given \nli\n$l_i$, \nri\n$r_i$. Find the \nf\n$f$-value modulo \n998244353\n$998244353$ of the bit string after each change."},{"problemId":"31077","content":"문제\n\n\"gshfd1jkhaRaadfglkjerVcvuy0gf\" said Prof. Pang.\n\nTo understand Prof. Pang's word, we would like to calculate the number of namomo subsequences of it. The word by Prof. Pang is a string \ns\n$s$ with \nn\n$n$ characters where each character is either an English letter (lower or upper case) or a digit. The \ni\n$i$-th character of \ns\n$s$ is denoted by \ns[i]\n$s[i]$ (\n1≤i≤n\n$1\\le i\\le n$). A subsequence \nt\n$t$ of \ns\n$s$ is defined by a list of indices \nt1,…,t6\n$t_1, \\ldots, t_6$ such that \n1≤t1<t2<…<t6≤n\n$1\\le t_1 < t_2 < \\ldots < t_6\\le n$. Let \ncompare(c1,c2)\n$compare(c_1, c_2)$ be a function on two characters such that \ncompare(c1,c2)=1\n$compare(c_1, c_2)=1$ when \nc1=c2\n$c_1=c_2$ and \ncompare(c1,c2)=0\n$compare(c_1, c_2)=0$ otherwise. \nt\n$t$ is a namomo subsequence of \ns\n$s$ if and only if for any \n1≤i<j≤6\n$1\\le i<j\\le 6$, \ncompare(s[ti],s[tj])=compare(namomo[i],namomo[j])\n$compare(s[t_i], s[t_j]) = compare(namomo[i], namomo[j])$, where \nnamomo[x]\n$namomo[x]$ represents the \nx\n$x$-th character of the string \"namomo\" (\n1≤x≤6\n$1\\le x\\le 6$).\n\nOutput the number of namomo subsequences of a given string \ns\n$s$ modulo \n998244353\n$998244353$."},{"problemId":"31078","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tProf. Pang enters a trap room in a dungeon. The room can be represented by an n$n$ by m$m$ chessboard. We use (i,j)$(i, j)$ (1≤i≤n$1\\le i\\le n$, 1≤j≤m$1\\le j\\le m$) to denote the cell at the i$i$-th row and j$j$-th column. Every second, the floor of one cell breaks apart (so that Prof. Pang can no longer stand on that cell.) After nm$nm$ seconds, there will be no cell to stand on and Prof. Pang will fall through to the next (deeper and more dangerous) level.\n\nBut Prof. Pang knows that calm is the key to overcome any challenge. So instead of being panic, he calculates the number of rectangles such that every cell in it is intact (i.e., not broken) after every second. (A rectangle represented by four integers a,b,c$a, b, c$ and d$d$ (1≤a≤b≤n,1≤c≤d≤m$1\\le a\\le b\\le n, 1\\le c\\le d\\le m$) includes all cells (i,j)$(i, j)$ such that a≤i≤b,c≤j≤d$a\\le i\\le b, c\\le j\\le d$. There are n(n+1)2×m(m+1)2$ \\frac{n(n+1)}{2} \\times \\frac{m(m+1)}{2}$ rectangles in total.)\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31079","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tProf. Pang is selecting teams that advance to the world final contest. As the regionals are cancelled, he uses random shuffle to rank the teams. There are n$n$ teams in total. His code is as follows:\n\nuint64_t x;//uint64_t represents 64-bit unsigned integer\nint n;\nuint64_t rand() {//this is a xor-shift random generator\n    x ^= x << 13;\n    x ^= x >> 7;\n    x ^= x << 17;\n    return x;\n}\nint main() {\n    cin >> n;\n    cin >> x;\n    for (int i = 1; i ≤ n; i++) {//random shuffle [1, 2,..., n]\n        a[i] = i;\n        swap(a[i], a[rand() % i + 1]);\n    }\n    for (int i = 1; i ≤ n; i++) {//print the result\n        cout << a[i] << (i == n ? '\\n' : ' ');\n    }\n}\n\n\nHe compiled and ran his code and then entered n$n$ and some special nonnegative integer x$x$. He printed the result on paper.\n\nOne day later, Prof. Pang forgot his choice for x$x$. You are given the result of the code and the integer n$n$. Please recover the number x$x$ that Prof. Pang had entered.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31115","content":"문제\n\nBobo has an undirected graph \nG\n$G$ with \nn\n$n$ vertices labeled by \n1,…,n\n$1, \\dots, n$ and \nn\n$n$ edges. For each \n1≤i≤n\n$1 \\leq i \\leq n$, there is an edge between the vertex \ni\n$i$ and the vertex \n(imodn)+1\n$(i \\bmod n) + 1$. He also has a list of \nm\n$m$ pairs \n(a1,b1),…,(am,bm)\n$(a_1, b_1), \\dots, (a_m, b_m)$.\n\nNow, Bobo is going to choose an \ni\n$i$ and remove the edge between the vertex \ni\n$i$ and the vertex \n(imodn)+1\n$(i \\bmod n) + 1$. Let \nδi(u,v)\n$\\delta_i(u, v)$ be the number of edges on the shortest path between the \nu\n$u$-th and the \nv\n$v$-th vertex after the removal. Choose an \ni\n$i$ to minimize the maximum among \nδi(a1,b1),…,δi(am,bm)\n$\\delta_i(a_1, b_1), \\dots, \\delta_i(a_m, b_m)$.\n\nFormally, find the value of\n\n\n\nmin1≤i≤n{max1≤j≤mδi(aj,bj)}.\n$$\\min_{1 \\leq i \\leq n}\\left\\{\\max_{1 \\leq j \\leq m} \\delta_i(a_j, b_j)\\right\\}\\text{.}$$ "},{"problemId":"31090","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t백준 온라인 저지의 송년대회 Good Bye, BOJ 2023!의 개최일은 2023년 12월 31일이다. 키파는 대회가 개최된다는 사실이 기뻐 2023과 2024를 뚫어져라 보다가 무언가 특별하다는 사실을 깨달았다.\n\n그렇다. 내년의 연도인 2024가 올해 연도의 끝 두 자리인 23으로 나누어 떨어진다! 다음에도 이런 연도가 오려면 6년 뒤인 2029/2030년이 되어야 한다.\n\n양의 정수 N$N$이 주어진다. N$N$년과 N+1$N+1$년이 이러한 조건을 만족하는 관계인지 판별하는 프로그램을 작성하라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30926","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t n$n$ 명의 벚꽃소녀들이 파티를 열었다. 이 파티에서 벚꽃소녀들은 애인을 사귈 것이다. 애인 관계는 두 벚꽃소녀 사이에서 형성되며, 한 벚꽃소녀는 최대 하나의 애인 관계에만 속할 수 있다.\n\n벚꽃소녀는 성격 종류 ai$a_i$ 와 행복도 bi$b_i$ 를 가진다. 두 벚꽃소녀 i,j$i, j$ 가 애인 관계를 형성하기 위해서는, 두 벚꽃소녀의 성격 종류가 달라야 하며 (ai≠aj$a_i \\neq a_j$) 둘의 행복도의 합이 k$k$ 이하여야 한다 (bi+bj≤k$b_i + b_j \\le k$). k$k$ 은 입력으로 주어지는 정수이다.\n\n애인 관계에 속하는 벚꽃소녀들의 행복도의 합으로 가능한 최댓값은 얼마인가?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30910","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t시현이는 사람들의 헤어 스타일을 바꾸어 묶는 것을 좋아한다. 사람들의 헤어 스타일에는 0$0$ (생머리), 1$1$ (포니테일), 2$2$ (양갈래), 3$3$ (세갈래)이 있다.\n\n시현이는 사람들의 헤어스타일 A1,A2,⋯,AN$A_1, A_2, \\cdots, A_N$이 있을 때, l$l$과 r$r$을 적절히 골라 l$l$번째부터 r$r$번째까지 사람의 헤어 스타일을 동시에 Al⊕Al+1⊕⋯⊕Ar$A_l \\oplus A_{l+1} \\oplus \\cdots \\oplus A_r$로 바꿀 수 있다. ⊕$\\oplus$는 Bitwise XOR 연산자이다.\n\n시현이는 모양이 이상한 세갈래를 싫어해서, 어떤 사람의 헤어 스타일도 세갈래가 아니도록 만들려고 한다. 사람들의 헤어 스타일을 바꾸는 최소 횟수를 구해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31116","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBobo has an n×n$n \\times n$ symmetric matrix C$C$ consisting of zeros and ones. For a permutation p1,…,pn$p_1, \\dots, p_n$ of 1,…,n$1, \\dots, n$, let ci={Cpi,pi+1for 1≤i<nCpn,p1for i=n.$$ c_i = \\begin{cases} C_{p_i, p_{i + 1}} & \\text{for } 1 \\leq i < n \\\\ C_{p_n, p_1} & \\text{for } i = n \\\\ \\end{cases}\\text{.}$$ \n\nThe permutation p$p$ is almost monochromatic if and only if the number of indices i$i$ (1≤i<n$1 \\leq i < n$) where ci≠ci+1$c_i \\neq c_{i + 1}$ is at most one.\n\nFind an almost monochromatic permutation p1,…,pn$p_1, \\dots, p_n$ for the given matrix C$C$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30927","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t n$n$ 명의 벚꽃소녀들이 n$n$ 억원의 상금이 걸린 의문의 서바이벌에 참가하였다. 벚꽃소녀들이 참가할 서바이벌 게임은 폭탄 해체 게임 이다. 게임을 위해, n$n$ 명의 벚꽃소녀들은 한 줄에 일렬로 서 있다. 벚꽃소녀들은 줄의 맨 앞부터 시작하여 1,2,…,n$1, 2, \\ldots, n$ 으로 번호가 붙어 있다.\n\n각 벚꽃소녀들은 게임의 주최로부터 모자를 받아서 머리 위에 썼다. 어떤 모자들은 평범하지만, 어떤 다른 모자들은 폭탄이 붙어 있다. 폭탄이 붙지 않은 모자를 'R', 폭탄이 붙은 모자를 'B' 라고 하자. i$i$ 번 벚꽃소녀는 자신의 앞에 있는 모든 벚꽃소녀의 모자를 볼 수 있다. 다시 말해, 1≤j<i$1 \\le j < i$ 를 만족하는 모든 j$j$ 번 벚꽃소녀의 모자에 폭탄이 달려 있는 지를 볼 수 있다. 하지만, 자신의 모자, 그리고 자신의 뒤에 있는 벚꽃소녀의 모자는 볼 수 없다.\n\n게임의 주최는 맨 처음 폭탄이 붙어 있는 모자의 개수를 모든 벚꽃소녀에게 알린다. 이후, 999999999999$9999^{9999^{9999}}$ 번의 라운드 를 진행한다. 각 라운드는 다음과 같다:\n\n\n\t각 벚꽃소녀는 게임 전에 자신에게 주어진 리모콘을 통해서 자신의 모자에 폭탄이 붙어 있는지의 여부를 주최에게 알린다. 대답은 예, 아니오, 알 수 없음 의 세 종류 중 하나이다. 이 정보는 주최에게만 전해지며, 다른 벚꽃소녀가 염탐할 수 없다. 벚꽃소녀들은 잘못된 대답을 할 경우 즉시 탈락하기 때문에 폭탄 존재 여부가 확실할 때만 정확하게 대답할 것이며, 게임에서 빨리 탈출하고 싶기 때문에 폭탄 존재 여부가 확실해 지면 즉시 대답할 것이다. 모든 벚꽃소녀는 위 조건에 맞게 최적으로 행동하며, 모든 벚꽃소녀가 최적으로 행동한다는 사실이 모든 벚꽃소녀들에게 알려져 있다.\n\t탈락한 벚꽃소녀가 없다면, 예나 아니오로 대답한 벚꽃소녀들은 줄에서 나가 게임에서 탈출한다. 이후, 전광판을 통해서 이번 라운드에 게임에서 탈출한 벚꽃소녀들의 번호가 모두 공개된다. 번호만 공개되는 것이지, 해당 벚꽃소녀의 모자에 폭탄이 있었는지 여부가 공개되지는 않는다.\n\n\n모든 라운드가 끝난 이후에도 자신의 모자의 종류를 알지 못하는 벚꽃소녀들은 탈락한다.\n\n당신은 모든 벚꽃소녀의 운명을 맞추어야 한다 - 모든 n$n$ 명의 벚꽃소녀들에 대해서, 해당 벚꽃소녀가 이번 게임에서 탈출할 수 있는지를 판별하라.\n\n이 문제는 T$T$ 개의 테스트 케이스가 한 입력에 주어진다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31091","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t당신 앞에는 N$N$명의 사람들이 있다. 각 사람은 자신을 포함하여 몇 명 이상이 거짓말을 하고 있다고 말하거나, 몇 명 이하의 사람이 거짓말을 하고 있다고 말한다.\n\n예를 들어, 각 사람이 다음과 같이 주장한다고 하자.\n\n\n\t첫 번째 사람이 이렇게 말한다: \"1명 이상이 거짓말을 하고 있다!\"\n\t두 번째와 세 번째 사람이 이렇게 말한다: \"1명 이하가 거짓말을 하고 있다!\"\n\t네 번째 사람이 이렇게 말한다: \"2명 이상이 거짓말을 하고 있다!\"\n\n\n이 경우에 가능한 시나리오는 다음과 같다.\n\n\n\t네 번째 사람만 거짓말을 하고 있다.\n\t두 번째와 세 번째 사람이 거짓말을 하고 있다.\n\n\n사람들의 주장이 주어질 때, 거짓말을 하는 사람의 수로 가능한 것을 모두 구해라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31117","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tGiven n$n$, x$x$ and y$y$, let fn,x,y(a,b)$f_{n, x, y}(a, b)$ denote the value of ∑i=an−b(ia)xi−a(n−ib)yn−i−b.$$ \\sum_{i = a}^{n - b} \\binom{i}{a} x^{i - a} \\binom{n - i}{b} y^{n - i - b}\\text{.}$$ \n\nBobo also has q$q$ pairs (a1,b1),…,(aq,bq)$(a_1, b_1), \\dots, (a_q, b_q)$. Find the value of fn,x,y(a1,b1),…,fn,x,y(aq,bq)$f_{n, x, y}(a_1, b_1), \\dots, f_{n, x, y}(a_q, b_q)$ modulo 998244353$998244353$.\n\nNote: (nk)=n!(n−k)!k!.$$\\binom{n}{k} = \\frac{n!}{(n - k)! k!}\\text{.}$$ \n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30911","content":"문제\n\n \nN×N\n$N \\times N$ 체스판이 주어질 때, 체스판에 퀸 \nN\n$N$개를 서로 공격할 수 없게 놓는 특별한 방법 한 가지를 출력해 보자. 체스판의 \nr\n$r$행 \nc\n$c$열 좌표는 \n(r,c)\n$(r, c)$이며, 가장 왼쪽 위 칸은 \n(1,1)\n$(1, 1)$, 가장 오른쪽 아래 칸은 \n(N,N)\n$(N, N)$이다. 단, 체스판의 평행한 변끼리 연결되어 있어, 두 퀸의 좌표가 각각 \n(a,b)\n$(a, b)$, \n(c,d)\n$(c, d)$라 할 때 다음 네 조건 중 적어도 하나를 만족시키면 두 퀸은 서로 공격하는 상태이다.\n\n \na=c\n$a = c$ \n \nb=d\n$b = d$ \n \na+b≡c+d(modN)\n$a+b \\equiv c+d \\pmod N$ \n \na−b≡c−d(modN)\n$a-b \\equiv c-d \\pmod N$ \n\n퀸 \nN\n$N$개가 서로 공격하지 않는 배치에서 \ni\n$i$번째 행에 있는 퀸의 열의 번호를 \nAi\n$A_i$라 하자. 정수 \nk\n$k$와 모든 \ni\n$i$에 대해서 \nA(imodN)+1−Ai\n$A_{(i \\bmod N) + 1} - A_i$ \n≡k(modN)\n$\\equiv k \\pmod N$을 만족시키면 이 배치는 \nk\n$k$-선형이라고 한다. 모든 정수 \nk\n$k$에 대해서 \nk\n$k$-선형이 아니면 이 배치를 특별하다고 한다.\n\n체스판에 퀸 \nN\n$N$개를 서로 공격할 수 없게 놓는 특별한 방법 한 가지를 출력해 보자."},{"problemId":"31118","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tLet oi=1…1⏟i times$o_i = \\underbrace{1 \\dots 1}_{i\\text{ times}}$ be the number which consists of i$i$ ones in its decimal representation.\n\nBobo has an integer n$n$. Find a sequence of possibly negative integers (x1,x2,…,)$(x_1, x_2, \\dots, )$ where\n\n\n\t ∑i=1∞oi⋅xi=n$\\sum_{i = 1}^{\\infty} o_i \\cdot x_i = n$,\n\t ∑i=1∞i⋅|xi|$\\sum_{i = 1}^{\\infty} i \\cdot |x_i|$ is minimized.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31119","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA sequence a1,…,am$a_1, \\dots, a_m$ of m$m$ distinct numbers is called *without 231* if there is **no** triples (i,j,k)$(i, j, k)$ where 1≤i<j<k≤m$1 \\leq i < j < k \\leq m$ and ak<ai<aj$a_k < a_i < a_j$.\n\nBobo has a permutation p1,…,pn$p_1, \\dots, p_n$ of 1,…,n$1, \\dots, n$, and he can remove some (possibly none, but not all) elements from the permutation. Find the number of sequences without 231$231$ among (2n−1)$(2^n - 1)$ resulting permutations.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30928","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tDo you know about Yokohama Phenomena? The phenomenon takes place when three programmers, sitting around a table, hold a single pen together above a board. A grid of squares is drawn on the board, with each square marked with a single letter. Although none of the participants purposely moves the pen, its nib, as if it has a will, goes down to one of the squares marked with Y, and then starts moving on the board. The squares passed are marked with O, K, O, H, A, and M in this order, and then the nib stops on the square marked with A.\n\nLet us call the series of squares along such a trajectory of the nib a YOKOHAMA trace. A YOKOHAMA trace is defined as follows.\n\n\n\tIt is a series of eight squares in the given grid of squares.\n\tEvery square in the series, except for the first one, shares an edge with (is edge-adjacent to) its directly preceding square in the series.\n\tThe letters marked in the eight squares of the series are Y, O, K, O, H, A, M, and A, in this order.\n\n\nNote that the same square may appear more than once in the series.\n\nFigure A.1 (a) is an illustration of the board corresponding to Sample Input 1. Figures A.1 (b) and (c) show trajectories on two of the YOKOHAMA traces. Both traces start at the leftmost square in the upper row. The same square marked with O appears twice in the trace illustrated in Figure A.1 (c).\n\n\n\nFigure A.1. A board and trajectories on two of the YOKOHAMA traces\n\nYou are given a grid of squares, each marked with one of six letters, A, H, K, M, O, or Y. Your task is to count how many distinct YOKOHAMA traces are possible on it.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31092","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t 1$1$번 스티커부터 M$M$번 스티커까지 총 M$M$종류의 스티커가 있다. j$j$번 스티커에는 알파벳 소문자 sj$s_j$가 적혀 있다. 이때 같은 알파벳이 적힌 스티커가 여러 종류 있을 수 있다.\n\n여러분은 N$N$개의 칸으로 나누어진 보드판을 하나 갖고 있다. 각 칸에는 스티커가 하나씩 붙어 있고, i$i$번째 칸에는 bi$b_i$번 스티커가 붙어 있다. 같은 종류의 스티커가 여러 개의 칸에 붙어 있는 것도 가능하다. 1$1$번째 칸에 있는 스티커부터 N$N$번째 칸에 있는 스티커까지 적힌 알파벳을 순서대로 읽으면 알파벳 소문자로 구성된 길이가 N$N$인 문자열을 하나 얻는다. 이를 스티커 문자열이라고 정의한다.\n\n여러분은 다음 시행을 통해 스티커 문자열을 바꿀 수 있다. 모든 시행을 완료하였을 때, 보드판에 빈칸이 있으면 안 된다.\n\n\n\t스티커가 붙어 있는 칸의 스티커를 뗄 수 있다. 스티커는 강력 접착제로 붙어있기 때문에, j$j$번 스티커를 떼는 데에는 dj$d_j$만큼의 비용이 든다. 스티커를 뗀 칸은 빈칸이 된다.\n\t빈칸을 하나 골라서 스티커를 붙일 수 있다. 이때, 스티커를 새로 구매하여 붙이거나 이미 떼었던 스티커를 재활용하여 붙이는 것이 가능하다. 스티커를 붙일 때는 비용이 발생하지 않으며, j$j$번 스티커를 한 장 구매하는 데에는 aj$a_j$만큼의 비용이 든다. 같은 종류의 스티커를 여러 장 구매하는 것도 가능하다.\n\n\n여러분의 목표는, 적절하게 시행을 반복하여 스티커 문자열이 입력으로 주어진 길이가 K(≤N)$K(\\leq N)$인 문자열 S$S$를 부분 문자열로 포함하도록 만드는 것이다. 그러기 위한 최소 비용을 구하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30912","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n비잉비잉 돌아가는\n\n세상도 나를 비웃듯이 계속 꿈틀대죠\n\n\n혁이는 백화점 한가운데서 N$N$명의 인파에 둘러싸여 있다. i$i$번째 사람의 위치는 평면좌표 (Xi,Yi)$(X_i, Y_i)$로 표현되고, 혁이와 같은 위치에 있는 사람은 없다. 혁이는 사람들의 시간을 멈추고, 반시계 방향으로 제자리에서 돌면서 매 순간 정면에 놓인 사람들의 위치를 순서대로 기록하려 한다. 정면에 사람이 여럿 있을 경우, 혁이에게 가까운 사람부터 그 위치를 기록한다.\n\n사람들과 혁이의 위치가 주어질 때, 혁이가 기록한 위치들을 순서대로 출력하는 프로그램을 작성하자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30929","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tQuiz Solver is a popular online computer game. Each time a player opens the mobile application of the game, a new quiz is displayed. The player submits an answer to the quiz, and then it is judged either as correct or incorrect, which is accumulated in the database. When the player shows high accuracy for a number of quizzes, the rank of the player in the game is promoted.\n\nPlayer ranks are non-negative integers, and each player starts the game at the rank 0$0$. The player will be promoted to the next rank when the player achieves a high ratio of correct answers during a sufficiently long sequence of quizzes. More precisely, the rank promotion system is defined by two parameters: an integer c$c$, and a rational number p/q$p/q$. After finishing the e$e$-th quiz, the player’s rank is immediately incremented by one if there exists an integer s$s$ satisfying the following conditions.\n\n\n\t 1≤s≤e−c+1$1 ≤ s ≤ e - c + 1$.\n\tThe player was already at the current rank before starting the s$s$-th quiz.\n\tThe ratio of correct answers of the quizzes from the s$s$-th through the e$e$-th is higher than or equal to p/q$p/q$.\n\n\nOtherwise, the rank stays the same.\n\nOne day, the administrator of Quiz Solver realized that the rank data of the players were lost due to a database failure. Luckily, the log of quiz solving records was completely secured without any damages. Your task is to recompute the rank of each player from the solving records for the player.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30913","content":"문제\n\n \n2\n$2$ 이상의 자연수 \nN\n$N$과, \n1\n$1$ 이상 \nN−1\n$N-1$ 이하의 자연수 \na\n$a$에 대하여 \nae≡1(modN)\n$a^e\\equiv 1\\pmod{N}$을 만족시키는 가장 작은 \n1\n$1$ 이상의 정수 \ne\n$e$를 법 \nN\n$N$에 대한 \na\n$a$의 위수(order)라고 하고, \nordN(a)\n$\\operatorname{ord}_N(a)$로 표기합니다. 만약 그러한 수 \ne\n$e$가 존재하지 않는 경우 편의상 \nordN(a)=0\n$\\operatorname{ord}_N(a) =0$으로 정의합니다.\n\n자연수 \nN\n$N$이 주어졌을 때, 다음과 같은 쿼리를 처리해봅시다.\n\n1 \na\n$a$: \nordN(a)\n$\\operatorname{ord}_N(a)$를 출력합니다. (\n1≤a≤N−1\n$1\\leq a\\leq N-1$)\n2 \ne\n$e$: \nordN(a)=e\n$\\operatorname{ord}_N(a) =e$를 만족시키는 \n1\n$1$ 이상 \nN−1\n$N-1$ 이하의 자연수 \na\n$a$를 아무거나 하나 출력합니다. 만약 그러한 수가 존재하지 않으면 0을 출력합니다. (\n1≤e≤N−1\n$1\\leq e\\leq N-1$)\n3 \ne\n$e$: \nordN(a)=e\n$\\operatorname{ord}_N(a) =e$를 만족시키는 \n1\n$1$ 이상 \nN−1\n$N-1$ 이하의 자연수 \na\n$a$의 개수를 출력합니다. (\n1≤e≤N−1\n$1\\leq e\\leq N-1$)\n4 \ne\n$e$: \nordN(a)=e\n$\\operatorname{ord}_N(a) =e$를 만족시키는 \n1\n$1$ 이상 \nN−1\n$N-1$ 이하의 자연수 \na\n$a$의 합을  \nN\n$N$으로 나눈 나머지를 출력합니다. (\n1≤e≤N−1\n$1\\leq e\\leq N-1$)"},{"problemId":"31093","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t동현이는 2023년의 끝을 조금 특별하게 기념하기 위하여 7-Segment Display를 이용한 장식물을 만들기로 했다. 동현이는 N$N$개의 Display가 일렬로 꼭 맞게 들어가는 틀을 준비하고, N$N$개의 Display에 각각 2, 3, E 중 하나를 표시하여 틀에 모두 끼워 넣었다.\n\n\n\n동현이는 짝수를 좋아하기 때문에 N$N$은 짝수로 정하였다. 그리고, 동현이는 점대칭 역시 좋아하기 때문에 장식물을 180도 돌렸을 때 원래 모습과 비슷할수록 아름다운 장식물이라고 생각한다. 원래 장식물과 180도 돌린 장식물에서 위치와 표시된 글자가 모두 일치하는 Display의 개수를 장식물의 아름다움이라고 하자. 구체적으로는 아래와 같이 정의한다.\n\n\n\t원래 장식물과 180도 돌린 장식물의 왼쪽에서 i$i$번째 Display에 표시된 글자를 각각 Si$S_i$, Ti$T_i$라고 하자. (1≤i≤N$1\\le i\\le N$)\n\t f($f($ 2 )=$)=$ 2, f($f($ 3 )=$)=$ E, f($f($ E )=$)=$ 3 이라고 하자.\n\t Ti=f(SN+1−i)$T_i=f(S_{N+1-i})$ 이다.\n\t장식물의 아름다움은 Si=Ti$S_i=T_i$ 인 i$i$ (1≤i≤N$1\\le i\\le N$) 의 개수이다.\n\n\n예제 1의 입력에 해당하는 처음 장식물은 아래 그림과 같이 아름다움이 4임을 알 수 있다.\n\n\n\n장식물에서 서로 다른 두 Display의 위치를 서로 바꾸는 것을 교환이라고 하자. 동현이는 처음에 만든 장식물에서 교환을 여러 차례 반복하여 장식물을 더욱 아름답게 만들려고 하는데, 교환은 귀찮은 일이므로 최대 K$K$번까지만 하려고 한다. 동현이를 위해, 각 정수 i$i$(0≤i≤K$0 \\le i \\le K$)에 대해 처음 장식물에서 교환을 최대 i$i$번 수행했을 때 얻을 수 있는 장식물의 최대 아름다움을 모두 구하자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30930","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe big Ferris wheel, Cosmo Clock 21, is a landmark of Yokohama and adds beauty to the city’s night view. The ICPC city also wants something similar.\n\nThe ICPC city plans to build an illuminated Ferris wheel with an even number of gondolas. All the gondolas are to be colored with one of the given set of candidate colors. The illumination is planned as follows.\n\n\n\tAll the gondolas are paired up; every gondola belongs to a single pair.\n\tOnly two gondolas of the same color can form a pair.\n\tPaired gondolas are connected with a straight LED line to illuminate the wheel.\n\tNo two LED lines cross when looked from the front side.\n\n\nA coloring of gondolas is suitable if it allows at least one way of pairing for the illumination plan.\n\n\n\nFigure C.1. Ferris wheels with suitable (left) and not suitable (right) colorings\n\nGiven the numbers of gondolas and candidate colors, count the number of suitable colorings of gondolas. Since the Ferris wheel rotates, two colorings are considered the same if they coincide under a certain rotation. Two colorings that coincide only when looked from the opposite sides are considered different.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31120","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tFor a string u=u1…un$u = u_1 \\dots u_n$, Bobo denotes the prefix u1…ui$u_1 \\dots u_i$ by pre(u,i)$\\mathrm{pre}(u, i)$. Similarly, he denotes the suffix un−i+1…un$u_{n - i + 1} \\dots u_n$ by suf(u,i)$\\mathrm{suf}(u, i)$. In particular, pre(u,0)$\\mathrm{pre}(u, 0)$ and suf(u,0)$\\mathrm{suf}(u, 0)$ are empty strings.\n\nFor two strings u=u1…un$u = u_1 \\dots u_n$ and v=v1…vm$v = v_1 \\dots v_m$, Bobo denotes the concatenation u1…unv1…vm$u_1 \\dots u_n v_1 \\dots v_m$ by u+v$u + v$. Also, presuf(u,v)=max{i∣i<n and i≤m and pre(u,i)=suf(v,i)}.$$\\mathrm{presuf}(u, v) = \\max\\{i \\mid i < n \\text{ and } i \\leq m \\text{ and } \\mathrm{pre}(u, i) = \\mathrm{suf}(v, i) \\}\\text{.}$$ \n\nGiven two strings s=s1…sn$s = s_1 \\dots s_n$ and t=t1…tm$t = t_1 \\dots t_m$, let f(i)=presuf(s,pre(s,i)+t)$f(i) = \\mathrm{presuf}(s, \\mathrm{pre}(s, i) + t)$. Find the value of f(0),…,f(n−1)$f(0), \\dots, f(n - 1)$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31140","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tJB is playing a game. There are n$n$ cities in the game, numbered as 1,2,⋯,n$1, 2, \\cdots, n$. The i$i$-th city and the j$j$-th city are adjacent if and only if i=j−1$i = j - 1$ or i=j+1$i = j + 1$. Initially, some of the cities are occupied by JB.\n\nThe game runs in rounds. At the beginning of a round, each occupied city can mark at most one adjacent unoccupied city as the target of attack. At the end of the round, all the attack targets marked become occupied. The game ends when all the cities are occupied.\n\nJB wants to occupy all the cities in minimum rounds. Can you help him?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30914","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31141","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe popcount word of interval [l,r]$[l,r]$ is defined asw(l,r)=slsl+1…sr−1sr,$$w(l,r)=s_ls_{l+1}\\dots s_{r-1}s_{r},$$where si=popcount(i)mod2$s_i=\\text{popcount}(i)\\bmod 2$. Here popcount(i)$\\text{popcount}(i)$ means the number of ones in binary representation of integer i$i$.\n\nYou will be given n$n$ intervals [l1,r1],[l2,r2],…,[ln,rn]$[l_1,r_1],[l_2,r_2],\\dots,[l_n,r_n]$. Let's build an extremely long string S=w(l1,r1)+w(l2,r2)+⋯+w(ln,rn),$$S=w(l_1,r_1)+w(l_2,r_2)+\\dots+w(l_n,r_n),$$here \"+\" denotes concatenation of strings.\n\nYou will also be given q$q$ queries. In the i$i$-th query, you will be given a bit pattern pi$p_i$, your task is to report how often does pi$p_i$ occur as a substring in S$S$. Note that occurrences may overlap. \n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30931","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou have a number of strings of lowercase letters to be sent in e-mails, but some of them are so long that typing as they are would be tiresome. As you found repeated parts in them, you have decided to try out a simple compression method in which repeated sequences are enclosed in parentheses, prefixed with digits meaning the numbers of repetitions. For example, the string “abababaaaaa” can be represented as “3(ab)5(a)” or “a3(ba)4(a)”. The syntax of compressed representations is given below in Backus-Naur form with the start symbol S$S$.\n\n\n<S$S$> ::= <R$R$> | <R$R$> <S$S$>\n\n<R$R$> ::= <L$L$> | <D$D$> (<S$S$>)\n\n<D$D$> ::= 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9\n\n<L$L$> ::= a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z\n\n\nNote that numbers of repetitions are specified by a single digit, and thus at most nine, but more repetitions can be specified by nesting them. A string of thirty a’s can be represented as “6(5(a))” or “3(5(2(a)))”, for example.\n\nFind the shortest possible representation of the given string in this compression scheme.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31142","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThere are n$n$ soldiers in JB kingdom, numbered as 1,2,⋯,n$1, 2, \\cdots, n$. The i$i$-th soldier has a power value of i$i$. \n\nThere is a tournament in the kingdom now. The soldiers need to be divided into several groups where each soldier belongs to exactly one group. Note that it's allowed for a group to contain only one single soldier. For some unknown reason, some soldiers have a disease called PTSD (post-traumatic stress disorder). The soldiers with PTSD don't like being the $second$ strongest soldier in their groups. Formally speaking, a soldier with PTSD will be upset if there is exactly one other soldier with a larger power value than him in his group.\n\nJB, the king of JB kingdom, wants to maximize the sum of the power values of the soldiers who feel upset because of PTSD. You are asked to help him divide the soldiers.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31094","content":"문제\n\n당신은 주원 전력 공사의 사장이다. 주원 전력 공사는 \n1\n$1$번부터 \nN\n$N$번까지 총 \nN\n$N$개의 전력탑을 보유하고 있다.\n\n그 중 \nN−1\n$N-1$개의 전력탑 쌍은 서로 전선으로 이어져 있고, 전선에는 \n1\n$1$번부터 \nN−1\n$N-1$번까지 번호가 붙어 있다. \ni\n$i$번 전선은 \nxi\n$x_i$번 전력탑과 \nyi\n$y_i$번 전력탑을 잇는다. 모든 전력탑은 전선을 통해 서로 이어져 있다.\n\n전기의 수요는 시시각각 변하므로, 한 전력탑에서 다른 전력탑으로 전기를 보내야 하는 경우가 자주 생긴다. 문제는, 전기를 보낼 때 전선의 품질에 따라 손실이 발생한다는 것이다.\n\n \ni\n$i$번 전선의 저항은 \nri\n$r_i$이고, 손실계수는 \nzi\n$z_i$이다. 한 전력탑에서 \ni\n$i$번 전선을 통해 이어진 전력탑으로 전기를 \ne\n$e$만큼 보내면, \n⌊max(e−ri,0)zi⌋\n$\\displaystyle\\left\\lfloor\\frac{\\max(e-r_i,0)}{z_i}\\right\\rfloor$ 만큼의 전기만이 도착하게 된다.\n\n당신은 \nQ\n$Q$개의 질의를 처리해야 한다.\n\n \na\n$a$번 전력탑에서 \ne\n$e$만큼의 전기를 \nb\n$b$번 전력탑으로 보내려고 할 때, \nb\n$b$번 전력탑에서 받을 수 있는 전기의 최댓값은 얼마인가?"},{"problemId":"31121","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThere are n$n$ distinct points on a 2-dimension plane. The coordinates of the i$i$-th point is (xi,yi)$(x_i, y_i)$.\n\nIf there are three points A$A$, B$B$ and C$C$ which form a triangle ABC$ABC$ with positive area, Bobo can remove them simultaneously from the plane. Also, if there are multiple triangles with positive area, Bobo can choose to remove any of them. Find the minimum number of points left on the plane if he can perform the operation for any number of times.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31143","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tJB is the National Olympiad Tutor of Suffix Automaton. Today he comes up with the following problem.\n\nSuppose you have a string S$S$, we write down all the distinct substrings in S$S$. Then we sort the strings according to their length in increasing order. For two strings with the same length, the one that has the smaller lexicographical order comes first. Now we have a sorted string sequence A$A$.\n\nJB has Q$Q$ questions, for each question, he will give you one integer k$k$ and suppose you to tell him the k$k$-th string in A$A$.\n\nTo simplify the problem, you just need to tell him the left and right positions in S$S$ of the first occurrence of the string.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30932","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tOnce upon a time, there were a number of chayas (teahouses) along one side of an east-west road in Yokohama. Although the total number of chayas is known, the information about their locations was considered to be lost totally.\n\nRecently, a document describing the old townscapes of Yokohama has been found. The document contains a number of records on the order of the locations of chayas. Each record has information below on the order of the locations of three chayas, say a$a$, b$b$, and c$c$.\n\n\nChaya b$b$ was located between chayas a$a$ and c$c$. Note that there may have been other chayas between a$a$ and b$b$, or between b$b$ and c$c$. Also, note that chaya a$a$ may have been located east of c$c$ or west of c$c$.\n\n\nWe want to know how many different orders of chayas along the road are consistent with all of these records in the recently found document. Note that, as the records may have some errors, there might exist no orders consistent with the records.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30915","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t 1$1$ 이상의 정수 N$N$에 대해서 수열 AN$A_N$은 분모가 N$N$ 이하이면서 분수의 값이 0$0$ 이상 1$1$ 이하인 기약분수를 크기의 오름차순으로 나열한 수열이다. 예를 들어,\n\n A1={01,11}$$ A_1 = \\left\\{\\frac{0}{1}, \\frac{1}{1}\\right\\} $$ \n\n A2={01,12,11}$$ A_2 = \\left\\{\\frac{0}{1}, \\frac{1}{2}, \\frac{1}{1}\\right\\} $$ \n\n A3={01,13,12,23,11}$$ A_3 = \\left\\{\\frac{0}{1}, \\frac{1}{3}, \\frac{1}{2}, \\frac{2}{3}, \\frac{1}{1}\\right\\} $$ \n\n A4={01,14,13,12,23,34,11}$$ A_4 = \\left\\{\\frac{0}{1}, \\frac{1}{4}, \\frac{1}{3}, \\frac{1}{2}, \\frac{2}{3}, \\frac{3}{4}, \\frac{1}{1}\\right\\} $$ \n\n A5={01,15,14,13,25,12,35,23,34,45,11}$$ A_5 = \\left\\{\\frac{0}{1}, \\frac{1}{5}, \\frac{1}{4}, \\frac{1}{3}, \\frac{2}{5}, \\frac{1}{2}, \\frac{3}{5}, \\frac{2}{3}, \\frac{3}{4}, \\frac{4}{5}, \\frac{1}{1}\\right\\} $$ \n\n이다. AN$A_N$의 i$i$번째 항 ab$\\frac{a}{b}$가 주어질 때, i+j$i+j$번째 항을 구하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31122","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAn axis-aligned tetrahedron (also known as triangular pyramid) DABC$DABC$ is a convex polyhedron in three dimension with vertices\n\n\n\t D:(x1,y1,z1)$D: (x_1, y_1, z_1)$,\n\t A:(x2,y1,z1)$A: (x_2, y_1, z_1)$,\n\t B:(x1,y2,z1)$B: (x_1, y_2, z_1)$,\n\t C:(x1,y1,z2)$C: (x_1, y_1, z_2)$.\n\n\nAlso, an axis-aligned cube PQRSDEFG$PQRSDEFG$ is a convex polyhedron with vertices\n\n\n\t P:(x3,y3,z3)$P: (x_3, y_3, z_3)$,\n\t Q:(x3,y3,z4)$Q: (x_3, y_3, z_4)$,\n\t R:(x3,y4,z3)$R: (x_3, y_4, z_3)$,\n\t S:(x3,y4,z4)$S: (x_3, y_4, z_4)$,\n\t D:(x4,y3,z3)$D: (x_4, y_3, z_3)$,\n\t E:(x4,y3,z4)$E: (x_4, y_3, z_4)$,\n\t F:(x4,y4,z3)$F: (x_4, y_4, z_3)$,\n\t G:(x4,y4,z4)$G: (x_4, y_4, z_4)$.\n\n\nGiven an axis-aligned tetrahedron DABC$DABC$ and an axis-aligned cube PQRSDEFG$PQRSDEFG$, find the volume of their intersection.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31144","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tJB received his driver's license recently. To celebrate this fact, JB decides to drive to other cities in Byteland. There are n$n$ cities and m$m$ bidirectional roads in Byteland, labeled by 1,2,…,n$1,2,\\dots,n$. JB is at the 1$1$-st city, and he can only drive on these m$m$ roads. It is always possible for JB to reach every city in Byteland.\n\nThe length of each road is the same, but they are controlled by different engineering companies. For the i$i$-th edge, it is controlled by the ci$c_i$-th company. If it is the k$k$-th time JB drives on an edge controlled by the t$t$-th company, JB needs to pay k×wt$k\\times w_t$ dollars for tax.\n\nJB is selecting his destination city. Assume the destination is the k$k$-th city, he will drive from city 1$1$ to city k$k$ along the shortest path, and minimize the total tax when there are multiple shortest paths. Please write a program to help JB calculate the minimum number of dollars he needs to pay for each possible destination.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31145","content":"문제\n\nOn the north side of Bytestreet, there are \nn\n$n$ buildings standing sequentially one next to the other, labeled by \n1,2,…,n\n$1,2,\\dots,n$ from east to west. The coordinate of the \ni\n$i$-th building is \n(i,1)\n$(i,1)$.\n\nOn the south side of Bytestreet, there are \nn\n$n$ communication towers standing sequentially one next to the other, labeled by \n1,2,…,n\n$1,2,\\dots,n$ from east to west. The coordinate of the \ni\n$i$-th tower is \n(i,−1)\n$(i,-1)$.\n\nYou are an electrical engineer in Byteland, your job is to design a wiring scheme. A wire can be used to connect a building and a tower. Each connection runs along a straight line. For each pair of building and tower, you can connect at most one wire between them. When you use a wire to connect the \ni\n$i$-th building with the \nj\n$j$-th tower, you will get \nwi,j\n$w_{i,j}$ dollars from the owner of the building, and the wire can be regarded as a segment connecting \n(i,1)\n$(i,1)$ and \n(j,−1)\n$(j,-1)$.\n\nEach building can be connected with multiple wires, but you need to pay \nui\n$u_i$ dollars if you want to connect at least one wire to the \ni\n$i$-th building, because you should first install equipment in that place. For the same reason, each tower can be connected with multiple wires, but you also need to pay \nvi\n$v_i$ dollars if you want to connect at least one wire to the \ni\n$i$-th tower. What is more, two wires can only intersect at their endpoints, in order to prevent short-circuit.\n\nUnfortunately, it is impossible to install equipment in some places, so they can not be connected with any wire. You will be given \nq\n$q$ queries, in the \ni\n$i$-th query, you will be given four integers \nai,bi,ci\n$a_i,b_i,c_i$ and \ndi\n$d_i$, which means you can only install equipment in buildings whose label is in \n[ai,bi]\n$[a_i,b_i]$, and you can only install equipment in towers whose label is in \n[ci,di]\n$[c_i,d_i]$. Your task is to find a wiring scheme to make money optimally. Note that the answer can't be negative because you can choose to do nothing."},{"problemId":"31095","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n소프트웨어에 진심인 LG전자는 개발자들이 문제 해결 능력을 겨루고 지적 즐거움을 누릴 수 있도록 2012년부터 매년 LG Code Jam을 개최하고 있다.\n\nLG Code Jam에서 우수한 성적을 거둔 개발자는 코딩 전문가로 선발되어 비즈니스 문제 해결 및 개발자 교육과 같은 다양한 분야에 기여하고 있다.\n\n특히, 신입 개발자라도 뛰어난 실력을 갖추면 전문가 타이틀을 획득할 수 있다.\n\n이와 함께 LG전자는 2024년 LG 대학생 프로그래밍 경진대회를 개최하여 실력 있는 학생들에게도 지적 즐거움을 제공할 예정이다.\n\n\n운 좋은 금성이는 2024년 LG 대학생 프로그래밍 경진대회에 참가하여 K$K$등을 기록하는 꿈을 꾸고 있다. 이번 LG 대학생 프로그래밍 경진대회에는 총 N$N$명이 참가할 것이다.\n\n금성이는 자신이 K$K$등을 기록했을 때 나올 수 있는 서로 다른 대회 결과의 경우의 수를 구하고 싶다. 두 대회의 결과가 서로 다르다는 것은 두 대회에서의 등수가 다른 참가자가 1명 이상 존재한다는 뜻이다.\n\n단, 동점을 기록한 사람들은 같은 등수가 된다. 예를 들어, 공동 2등이 3명일 수 있고, 이 경우 다음 등수는 5등이 된다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30933","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are given a set of square cells arranged in a chessboard-like pattern with n$n$ horizontal rows and n$n$ vertical columns. Rows are numbered 1$1$ through n$n$ from top to bottom, and columns are also numbered 1$1$ through n$n$ from left to right.\n\nInitially, the cells are colored as in a chessboard, that is, the cell in the row i$i$ and the column j$j$ is colored black if i+j$i + j$ is odd and is colored white if it is even.\n\nColor-inversion operations, each of which is one of the following two, are made one after another.\n\nInvert colors of a row: Given a row number, invert colors of all the cells in the specified row. The white cells in the row become black and the black ones become white.\n\nInvert colors of a column: Given a column number, invert colors of all the cells in the specified column. The white cells in the column become black and the black ones become white.\n\nThe number of distinct areas after each of the operations should be counted. Here, an area means a group of directly or indirectly connected cells of the same color. Two cells are said to be directly connected when they share an edge.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30916","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t드디어 외계인이 지구를 방문한다고 한다! 외계인들은 지구의 현재 기술로는 만들 수 없는 Enigmatic Device™ 장치를 가져온다고 한다. 전 세계 과학자들도 이를 믿고 있고, 온갖 언론 매체에 기사가 실렸다.\n\n이 장치는 정수 수열 {ai}$\\{a_i\\}$를 초기 입력으로 받는다. 그다음부터는 다음의 두 가지 연산을 수행할 수 있다.\n\n\n\t구간 [l;r]$[l;r]$을 입력받아 l$l$ 이상 r$r$ 이하의 모든 정수 i$i$에 대해 ai$a_i$의 값을 ai2mod2023$a_i^2\\bmod 2023$로 바꾼다.\n\t구간 [l;r]$[l;r]$을 입력받아 l$l$ 이상 r$r$ 이하의 모든 정수 i$i$에 대한 ai$a_i$의 값의 합을 출력한다.\n\n\n이 장치의 놀라운 점은 5$5$초 이내에 길이 500000$500 000$의 수열에 대해 이러한 연산을 500000$500 000$번 할 수 있다는 것이다. 지구상의 누구도 지금까지 이를 이루어내지 못했다.\n\n하지만 외계인을 믿지 않는 Bojan은 이 모든 것이 그저 누군가가 주식으로 떼돈을 벌기 위해 뿌린 헛소문이라고 생각한다. 이를 증명하기 위해 그는 당신에게 이 장치를 따라하는 프로그램을 만들어 달라고 부탁했다.\n\n정수 수열 ai$a_i$와 연산의 순서가 주어졌을 때, Enigmatic Device™를 따라 하는 프로그램을 작성하시오.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31146","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are given a string S$S$ of length 2n$2n$, consisting of the characters A, B and C. Determine if S$S$ can be split into n$n$ non-intersecting subsequences, each of which forms one of the strings \"AB\", \"AC\", \"BC\". If it is possible, find such a splitting.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31123","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tGiven vector (a,b)$(a,b)$ (where a$a$ and b$b$ are integers) and integer R$R$. Find the maximum value of the scalar product (a,b)⋅(x,y)$(a,b) \\cdot (x,y)$, where both x$x$ and y$y$ are integer, and x2+y2≤R2$x^2+y^2 \\le R^2$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30917","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t1 이상 9 이하의 정수 A, B에 대해 A+B의 값을 출력해야 한다. 단, 이 문제는 인터랙티브 (상호작용) 문제이다. 이 문제에서는 A와 B의 값이 바로 주어지지 않고, 채점기와의 상호작용을 통해 그 값을 알아내야 한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31147","content":"문제\n\nYou know those problems where you are given an array of length roughly \n105\n$10^5$ and you have to process roughly \n105\n$10^5$ queries about something on a segment? Yes, this is one of those problems. And it should be persistent, because why not.\n\nConsider \nk×n\n$k \\times n$ matrix \nA\n$A$ (with \nk\n$k$ rows and \nn\n$n$ columns). For a given matrix we can construct the array \nB\n$B$ as follows: \nBj=∑i=1kAij\n$B_{j} = \\sum_{i=1}^{k} A_{ij}$.\n\nThere will be up to \nq+1\n$q+1$ versions of the matrix. The \nj\n$j$-th element in \ni\n$i$-th row of \nt\n$t$-th version of \nA\n$A$ is denoted as \nAij(t)\n$A_{ij}^{(t)}$. The \nj\n$j$-th element of the array \nB\n$B$ corresponding to \nt\n$t$-th version of \nA\n$A$ is denoted as \nBj(t)\n$B_{j}^{(t)}$.\n\nYou are given the \n0\n$0$-th version of the matrix \nA\n$A$. You have to process \nq\n$q$ queries of 3 types:\n\n1 t p l r x : add \nx\n$x$ to \nApi(t)\n$A_{pi}^{(t)}$ for \nl≤i≤r\n$l \\le i \\le r$, thus creating a new version of the matrix\n2 t p l r y : set \nApi(t)\n$A_{pi}^{(t)}$ to be equal to \ny\n$y$ for \nl≤i≤r\n$l \\le i \\le r$, thus creating a new version of the matrix\n3 t l r : print \nmini=lrBi(t)\n$\\min_{i=l}^{r} B_{i}^{(t)}$ \n\nThe version of the matrix \nA\n$A$ created after the \ni\n$i$-th query will be called the \ni\n$i$-th version. Thus version numbers can be from \n0\n$0$ to \nq\n$q$ inclusive, but some of the integers from \n0\n$0$ to \nq\n$q$ may not have the correspondent version."},{"problemId":"31096","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이 문제는 인터랙티브 문제입니다.\n\n이따금, 광고에서는 도발적인 내용과 제목을 넣어 사람들이 게임을 하도록 유도하는 경우가 있다. 코코아는 이런 도발에 매우 취약해서, 이런 광고가 나오면 반드시 해당 게임을 완벽히 정복해야 직성이 풀린다. 오늘도 어김없이 코코아는 ‘오직 5%의 사람들만이 이 문제를 풀 수 있습니다’라는 제목의 광고를 보았고, 이제 코코아는 이 게임을 완벽히 정복해야만 한다! 코코아가 하려는 게임은 다음과 같다.\n\n게임은 직사각형 양면 격자판에서 진행된다. 격자판은 앞면과 뒷면에 상하좌우 중 한 방향을 가리키는 화살표가 그려져 있는 일반 칸과 양면 모두 아무것도 그려져 있지 않은 목표 칸으로 구성되어 있다. 처음에 모든 칸은 앞면으로 되어 있다.\n\n \n\n플레이어는 정해진 시작 칸에 공을 놓고 게임을 시작한다. 격자판에 있는 버튼을 누르면 공은 자신이 있는 칸에 있는 화살표가 가리키는 방향으로 굴러간다. 공이 어떤 칸 위에 있었다가 떠나면 그 칸은 위아래가 뒤집혀 앞면과 뒷면이 바뀐다.\n\n만약 공이 굴러가던 방향과 다른 방향의 화살표가 있는 칸에 올라가거나 목표 칸에 올라가면 공은 그 칸에서 멈춘다.\n\n게임의 목적은 버튼을 눌러서 공을 목표 칸에 위치시키는 것이다. 공이 격자판 밖으로 떨어지면 게임은 실패이다.\n\n\n\n위는 3행 1열에 공을 놓고 버튼을 4번 누르는 상황이다. 처음에 버튼을 누르면, 공이 3행 3열까지 이동하면서 3행 1열과 3행 2열에 있는 칸이 뒤집힌다. 그다음에 버튼을 한 번 더 누르면, 공이 한 칸 아래로 내려가면서 3행 3열에 있는 칸이 뒤집힌다. 그 후, 위 그림처럼 버튼을 두 번 더 누르면 공은 4행 4열에 있는 목표 칸에 도달한다.\n\n코코아는 친구 치노의 깜짝 새해 선물로 N×M$N\\times M$ 크기 게임판을 만들어 주려고 한다. 하지만 코코아가 만들어 주려는 게임판은 조금 특별한 게임판이다. 바로 정확히 k$k$번 버튼을 누른 후에 게임에서 이기는 게임판이다. 그런데 사소한 문제가 생겼다. k$k$를 치노가 좋아하는 수로 정하고 싶은데 깜빡하고 k$k$를 물어보지 않은 것이었다. 지금 와서 k$k$를 물어보고 새로 게임판을 만든다면 깜짝 선물이 아니다!\n\n그래서 코코아는 치노가 어떤 k$k$를 좋아하더라도 대처할 수 있도록 게임판을 만들기로 했다. 코코아는 선물을 주기 직전에 치노에게 k$k$를 물어본 후, 딱 20$20$개 이하의 일반 칸에 그려진 화살표 방향을 순식간에 바꿔서 게임판을 만들려고 한다. 어떤 칸을 바꾸기로 했다면, 윗면과 아랫면에 그려진 화살표를 모두 바꿀 수 있다.\n\n\n\n그러나 이런 게임판을 만드는 것은 화살표의 방향을 순식간에 수정하는 것보다 어려운 문제이다. 코코아는 고민을 해보았지만 마땅한 방안을 찾지 못하였다. 여러분이 코코아를 위해 초기 게임판을 만들고, k$k$가 입력되었을 때 게임판을 수정하는 프로그램을 작성하자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30934","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYour fortune is to be told by a famous fortune teller. She has a number of tarot cards and a six-sided die. Using the die, she will choose one card as follows and that card shall tell your future.\n\nInitially, the cards are lined up in a row from left to right. The die is thrown showing up one of the numbers from one through six with equal probability. When x$x$ is the number the die shows up, the x$x$-th card from the left and every sixth card following it, i.e., the (x+6k)$(x + 6k)$-th cards for k=0,1,2,…$k = 0, 1, 2, \\dots$, are removed and then remaining cards are slid left to eliminate the gaps. Note that if the number of cards remaining is less than x$x$, no cards are removed. This removing and sliding procedure is repeated until only one card remains.\n\nFigure G.1 illustrates how cards are removed and slid when the die shows up two.\n\n\n\nFigure G.1. Removing and sliding cards\n\nYou are given the number of initial tarot cards. For each card initially placed, compute the probability that the card will remain in the end.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31124","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tKhodislav has taken up orienteering and is participating in a contest. The field is an endless plane without obstacles, and he can move at the same speed in all directions. There are N$N$ checkpoints in the field, where every participant must visit in the ascending order of their numbers. The check-in system is contactless --- each checkpoint has a base station that automatically checks in any participant in a range less than or equal to R$R$. It is guaranteed that checkpoint coverage areas do not overlap, but they can touch each other.\n\nA participant starts at any point of the first checkpoint coverage and finishes at the moment of checking in at the last checkpoint. Participants are allowed to enter other checkpoint coverage areas on their way to the necessary checkpoint, but in this case, they are not checked in there.\n\nKhodislav is feeling lucky and believes he will be able to cover the distance optimally. Help him calculate the distance he will have to cover.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31148","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tLet's call an array [a1,a2,…,ak]$[a_1, a_2, \\ldots, a_k]$ of positive integers \\textbf {phenomenal}, if the product of its elements is equal to the sum of its elements (i.e. if a1a2…ak=a1+a2+…+ak$a_1 a_2 \\ldots a_k = a_1 + a_2 + \\ldots + a_k$) .\n\nFor example, the array [2,2]$[2, 2]$ is phenomenal, because 2⋅2=2+2=4$2\\cdot 2 = 2+2 = 4$, and [3,1,2]$[3, 1, 2]$ is phenomenal, because 3⋅1⋅2=3+1+2=6$3\\cdot 1 \\cdot 2 = 3 + 1 + 2 = 6$, but the array [2,3]$[2, 3]$ is not phenomenal, as 2⋅3≠2+3$2\\cdot 3 \\neq 2+3$.\n\nLet f(i)$f(i)$ denote the number of phenomenal arrays of size i$i$. It can be shown that for any fixed i≥2$i \\ge 2$ there is only a finite number of phenomenal arrays of size i$i$.\n\nYou are given an integer n$n$. Find f(2),f(3),…,f(n)$f(2), f(3), \\ldots, f(n)$. As these numbers can be very big, output them modulo P$P$, where P$P$ is a given prime number.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30918","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t 2$2$차원 평면 상에 서로 다른 점들이 N$N$개 놓여있다. 각 점에는 1$1$부터 N$N$까지의 서로 다른 정수가 쓰여있다.\n\n이제 모든 점들을 원점을 기준으로 특정한 각도만큼 회전시키고, x$x$축 위로 사영한다. 이를 x$x$좌표가 증가하는 순서대로 점을 읽었을 때, 점에 쓰인 수들로 길이 N$N$의 수열을 만들 수 있다. 단 어떤 두 점이 회전 이후 같은 x$x$좌표를 가지는 것은 금지된다. 이 방법으로 만들 수 있는 수열 중, 반전 수가 최소인 수열의 반전 수를 구하시오.\n\n여기서 수열 A1$A_1$, A2$A_2$, ⋯$\\cdots$, An$A_n$의 반전 수란, 1≤i<j≤n$1 \\le i < j \\le n$이면서 Ai>Aj$A_i > A_j$인 순서쌍 (i,j)$(i, j)$의 개수를 말한다.\n\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30935","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tHanako is the CEO of a small company with two employees. She currently has some number of tasks and aims to earn some profits by making the employees do the tasks. Employees can enhance their skills through the tasks and, with higher skills, a larger profit can be earned from the same task. Thus, assigning tasks to appropriate employees in an appropriate order is important for maximizing the total profit.\n\nFor each pair (i,j)$(i, j)$ of employee i$i$ and task j$j$, two non-negative integers vi,j$v_{i,j}$ and si,j$s_{i,j}$ are defined. Here, vi,j$v_{i,j}$ is the task compatibility and si,j$s_{i,j}$ is the amount of skill growth. When task j$j$ has been completed by employee i$i$ whose skill point was p$p$, a profit of p×vi,j$p \\times v_{i,j}$ is earned, and his skill point increases to p+si,j$p + s_{i,j}$. Initially, both employees have skill points of p0$p_0$.\n\nNote that the skill points are individual, and completing a task by one employee does not change the skill point of the other. Each task must be done only once by only one employee. The order of tasks to carry out can be arbitrarily chosen.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30919","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31125","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tKhodislav is playing a tabletop role-playing game. He has finally chosen his weapons to deal with a monster and casts the crushing strike. To do this, he rolls dice, calculates the sum of numbers on their faces, and says it aloud to the game master.\n\nRolling a group of identical dice is characterized by three numbers n$n$, f$f$, and m$m$, where n$n$ is the number of the dice, f$f$ is the number of faces on each die, and m$m$ is the modifier. The faces carry all numbers from 1$1$ through f$f$, and each and any face can be rolled; all rolls are independent. For instance, if n=3$n = 3$, f=8$f = 8$, m=5$m = 5$, to define the sum, the player must roll three eight-faced dice, sum up the results, and add five: this is usually written as 3d8+5$3d8 + 5$.\n\nThe game master wants to check if Khodislav could get the sum he has reported after rolling the dice.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31149","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are given integers N,M$N, M$ with and a prime modulo P$P$.\n\nConsider all permutations of length N⋅M$N \\cdot M$ such that the length of their longest increasing subsequence equals N$N$ and the length of their longest decreasing subsequence equals M$M$.\n\nDefine f(pos,val)$f(pos, val)$ for each 1≤pos,val≤N⋅M$1 \\le pos, val \\le N \\cdot M$ as the number of such permutations in which the pos$pos$-th element of the permutation equals to val$val$.\n\nFind f(pos,val)$f(pos, val)$ for all 1≤pos,val≤NM$1 \\le pos, val \\le NM$, modulo P$P$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31097","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe famous astrologer Pavel Globus writes a bot for trading stocks in the stock market. Pavel is going to predict the stock price by the stars. He analyzed historical data and noticed that, for example, when Mars was in Capricorn, the stock price fell, and when the moon was in Gemini, the quotes went up. Of course, Pavel will not reveal all the details of his algorithm.\n\nPavel is not so good at programming, and one of the parts of the program that he cannot cope with is determining the zodiac sign, in which the Sun is located, depending on the current date. The zodiac sign for the current date can be determined from the following table:\n\n\n\t\n\t\t\n\t\t\tAries\n\t\t\tMarch 21 --- April 19\n\t\t\n\t\t\n\t\t\tTaurus\n\t\t\tApril 20 --- May 20\n\t\t\n\t\t\n\t\t\tGemini\n\t\t\tMay 21 --- June 20\n\t\t\n\t\t\n\t\t\tCancer\n\t\t\tJune 21 --- July 22\n\t\t\n\t\t\n\t\t\tLeo\n\t\t\tJuly 23 --- August 22\n\t\t\n\t\t\n\t\t\tVirgo\n\t\t\tAugust 23 --- September 22\n\t\t\n\t\t\n\t\t\tLibra\n\t\t\tSeptember 23 --- October 22\n\t\t\n\t\t\n\t\t\tScorpio\n\t\t\tOctober 23 --- November 22\n\t\t\n\t\t\n\t\t\tSagittarius\n\t\t\tNovember 23 --- December 21\n\t\t\n\t\t\n\t\t\tCapricorn\n\t\t\tDecember 22 --- January 19\n\t\t\n\t\t\n\t\t\tAquarius\n\t\t\tJanuary 20 --- February 18\n\t\t\n\t\t\n\t\t\tPisces\n\t\t\tFebruary 19 --- March 20\n\t\t\n\t\n\n\nHelp Pavel and write a program that determines the zodiac sign by the current date. Pavel, in return, will help you increase your capital.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31150","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tGiven are two black and white N×M$N \\times M$ images A$A$ and B$B$.\n\nThe \"flood fill\" tool works as follows: you choose any cell (x,y)$(x, y)$, locate its connected component and flip the colors of all the cells in the component (if the cell was black, it becomes white, and if it was white, it becomes black). The connected component of the cell is the set of cells you can reach by going up/down/left/right without changing color.\n\nYou can apply the \"flood fill\" tool to image A$A$ any number of times. What is the minimum number of cells in which A$A$ can be different from B$B$ after some sequence of operations?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31098","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tLet us have some virtual machine. The machine has a memory stack that can infinitely widen and can contain strings of any finite non-zero length.\n\nThe machine supports four operations:\n\n\n\tcopy --- copy a string at the stack's end and place it in the stack's end;\n\tswap --- swap the last string in the stack and the one before the last;\n\troll --- cyclically shift three last strings in the stack away from the stack's end;\n\tfuse --- extract two strings from the stack's end and then place their concatenation at the stack's end.\n\n\nMore formally it looks like that: ([...] stands for some sequence of strings at the beginning of the stack, perhaps of zero length):\n\n\n\tcopy: [...] x →$\\to$ [...] x x;\n\tswap: [...] x y →$\\to$ [...] y x;\n\troll: [...] x y z →$\\to$ [...] y z x;\n\tfuse: [...] x y →$\\to$ [...] xy.\n\n\nProgram for a given virtual machine is represented by a command sequence; the machine performs the commands one after another. If the stack doesn't have enough strings to perform the program's current command, then an event CRASH occurs and the machine stops functioning. The machine also stops if the program runs out of commands (in this case the CRASH event never occurs).\n\nInitially the virtual machine's stack contains two strings and has the form of \"a b\". You have to write a program for the given machine; the program's progress should result in an s$s$ string located at the stack's end (at the end of the program's progress the stack can have more than one string left). The program should contain no more than 3×|s|$3 \\times |s|$ commands (|s|$|s|$ --- is the s$s$ string's length). Of course, the program's progress shouldn't lead to the CRASH event.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31099","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tSuppose we have a virtual machine that is described in the statement of problem B.\n\nGiven string s$s$ and a program in the form of a list of n$n$ commands for the given machine (each command is one from the list \"copy\", \"swap\", \"roll\", \"fuse\").\n\nInitially, the virtual machine stack contains two strings and looks like \"a b\".\n\nAll commands from the list are sequentially executed on the virtual machine.\n\nDetermine if all the commands from the list were executed correctly, or if the execution of one of them resulted with the CRASH event. If all program commands were executed correctly --- additionally determine whether the string at the end of the machine's stack after the execution of all commands is equal to the s$s$ string or not.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30936","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAfter years of space exploration, humans succeeded in bringing back a small amount of sample materials from an asteroid to Earth! The materials were stored in several bottles, each containing a complete mixture of two liquids, A and B.\n\nIntense discussion finally reached an agreement that all the materials brought back should be distributed to the research institutes participated in the exploration. The amounts of the liquids A and B to be sent were decided depending on the research topics of each of the institutes.\n\nHowever, after this decision, a problem was found that it is impossible with current human technologies to separate two liquids from the mixture. The only operations we can perform are to take some amounts of the mixtures from one or more bottles and put them together in a new bottle.\n\nYour task is to judge whether the agreed distribution of the liquids is possible ever.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31126","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tKhodislav has learned that apart from the decimal numeral system, there exist other systems, such as the hexadecimal system. He is curious about the connection of the values of the same notation in these two systems. For instance, can a sequence of K$K$ digits have its hexadecimal value divisible by its decimal value? Will anything change if we subtract a specified number D$D$ from the decimal value of this notation?\n\nA notation is a sequence of digits. Digits from 0 through 9 can be used in a notation: they belong both to the decimal and to the hexadecimal systems. A notation of a number cannot begin with the digit 0. The decimal value of a notation is the number resulting from interpreting the notation as a decimal number. The hexadecimal value of a notation is the number resulting from interpreting the notation as a hexadecimal number.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31151","content":"문제\n\nYou are playing a game, and you are going to fight the secret boss. In this game, the boss doesn't attack you, but they can cast regeneration spells.\n\nThe fight consists of exactly \nN\n$N$ rounds, in each round the following actions can happen, in this order:\n\nThe boss can choose to cast the \"Regeneration\" spell.\nYou can choose to cast the \"Poison\" spell if you have any mana left.\nYou attack with a sword, dealing \nX\n$X$ damage.\nAll the passive effects are applied.\n\nThere are two types of passive effects: regeneration and poison. The effects stack, which means that the current state of the boss can be described with three integers: current health points (\nhp\n$hp$), current poison stacks (\np\n$p$) and current regeneration stacks (\nr\n$r$). At the beginning of the fight, there are no poison stacks and no regeneration stacks (\np=r=0\n$p=r=0$). Each poison stack deals \nP\n$P$ damage, each regeneration stack heals \nR\n$R$ health points.\n\nSpells have the following effects:\n\n\"Regeneration\": increase the number of regenerations stacks \nr\n$r$ by \n1\n$1$.\n\n\"Poison\": increase the number of poison stacks \np\n$p$ by \n1\n$1$. If the number of regeneration stacks is strictly positive (\nr>0\n$r > 0$), then decrease it by \n1\n$1$.\n\nAfter the round the \nhp\n$hp$ will decrease by \nX+P⋅p−R⋅r\n$X + P \\cdot p - R \\cdot r$ (this value can be negative if the boss heals faster than you deal damage).\n\nFor each round you know if the boss will cast \"Regeneration\". You have enough mana to cast \"Poison\" \nK\n$K$ times (you don't have to use all of your mana). What's the largest total damage you can deal to the boss, in other words, what is the maximum value of \nhpstart−hpend\n$hp_{start} - hp_{end}$? Assume that \nhpstart=101000\n$hp_{start} = 10^{1000}$, so you can't actually kill the boss in \nN\n$N$ rounds. Boss \nhp\n$hp$ can go higher than the initial value (see the third sample case)."},{"problemId":"31127","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tRules described in this problem differ from the conventional hockey rules.\n\nA hockey match lasts 60 minutes, with two team trying to score as many goals as possible. A hockey team consists of five field players and a goalkeeper.\n\nPenalties are an important part of hockey. A field player can be given a penalty: in this case, the guilty player leaves the rink for a period of time, which depends on the violation. As the result, the number of players in the rink temporarily decreases. There are two types of penalties in hockey: major and minor. A major penalty means the player leaves the rink for five minutes; with minor penalty, it is two minutes. When penalty time runs out, the player returns to the rink. A minor penalty can be ended earlier. A team is said to be playing in minority when it has less players in the rink than the other field. If a team is playing in minority, and the opponents score a goal, it can have one of its players leave the penalty box, and the player's penalty expires ahead of time. If the team has several players in the penalty box, the player who was put into the box first will be the first to leave it. If there are no players with minor penalties in the team, no one leaves ahead of time.\n\nPenalty removals in the course of the game mean the teams can play in various formats regarding the number of field players in the rink. We will denote the game format by AxB, meaning the first team currently has A field players in the rink, and the second team has B. For instance, in the beginning of the game each team has five players in the rink, and this format is denoted as 5x5. If the first team currently has two players in the penalty box, and the second team has one, the format is denoted as 3x4.\n\nYou are given a game protocol, registering the time of all penalties and goals. Use the protocol to calculate the formats played in the course of the game and their durations.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31152","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tConsider an array A$A$ and a set B$B$ of integers such that all numbers in A$A$ and B$B$ are distinct. Your task is to turn A$A$ into a sorted array. To do this you can take any number from B$B$ and replace any element of A$A$ with it. You can perform this operation any number of times, but each element of B$B$ can be used at most once.\n\nDetermine the minimum number of operations needed to turn A$A$ into a sorted array, or determine that it is impossible.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30937","content":"문제\n\nYou are the head of a group of \nn\n$n$ employees including you in a company. Each employee has an employee ID, which is an integer \n1\n$1$ through \nn\n$n$, where your ID is \n1\n$1$. Employees are often called by their IDs for short: #\n1\n$1$, #\n2\n$2$, and so on. Every employee other than you has a unique immediate boss, whose ID is smaller than his/hers. A boss of an employee is transitively defined as follows.\n\nIf an employee #\ni\n$i$ is the immediate boss of an employee #\nj\n$j$, then #\ni\n$i$ is a boss of #\nj\n$j$.\nIf #\ni\n$i$ is a boss of #\nj\n$j$ and #\nj\n$j$ is a boss of #\nk\n$k$, then #\ni\n$i$ is a boss of #\nk\n$k$.\n\nEvery employee including you is initially assigned exactly one task. That task can be done by him/herself or by any one of his/her bosses. Each employee can do an arbitrary number of tasks, but doing many tasks makes the employee too tired. Formally, each employee #i has an individual fatigability constant \nfi\n$f_i$, and if #\ni\n$i$ does \nm\n$m$ tasks in total, then the fatigue level of #\ni\n$i$ will become \nfi×m2\n$f_i \\times \\text{m}^2$.\n\nYour mission is to minimize the sum of fatigue levels of all the \nn\n$n$ employees."},{"problemId":"31153","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are given a colored tree on n$n$ nodes, node i$i$ has color ci$c_i$. As a reminder, a tree on n$n$ nodes is a connected graph with n−1$n-1$ edges.\n\nCompute the number of connected subgraphs of this tree, for which there exists some color (majority color), such that strictly more than half of the nodes of this subgraph have this color.\n\nSince the answer can be quite large, compute it modulo 998244353$998\\,244\\,353$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31128","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe Architect has created a multiverse with M$M$ universes. In each universe, the day of the week has been set individually. The Architect also has N$N$ buttons. Each button is connected to a certain set of universes. Pressing a button shifts all of its connected universes one day forward.\n\nThe Architect is curious: is there such a configuration of weekdays in universes that it is unachievable by any sequence of pressing buttons? Help the Architect solve this problem.\n\nAll universes use the Earth week: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday. When shifting the day of the week forward: Monday changes to Tuesday, Tuesday to Wednesday, etc, and Sunday changes to Monday.\n\nThe Architect can press any button any number of times and in any order. When a button is pressed, all its connected universes change instantly and simultaneously.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30938","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThis is an interactive problem.\n\nA thin black disk is laid flat on the square bottom of a white box. The sides of the box bottom are 105$10^5$ units long.\n\nSomehow, you are not allowed to look into the box, but you want to know how large the disk is and where in the box bottom the disk is laid. You know that the shape of the disk is a true circle with an integer units of radius, not less than 100$100$ units, and its center is integer units distant from the sides of the box bottom. The radius of the disk is, of course, not greater than the distances of the center of the disk from any of the sides of the box bottom.\n\nYou can probe the disk by projecting a thin line segment of light to the box bottom. As the reflection coefficients of the disk and the box bottom are quite different, from the overall reflection intensity, you can tell the length of the part of the segment that lit the disk.\n\nYour task is to decide the exact position and size of the disk through repetitive probes.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"30939","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tLana likes to draw specific snowflakes. A snowflake of size x$x$ is defined as follows:\n\n\n\tThe center of the snowflake is the character '+'.\n\tAbove and below the character '+' there is a sequence of x$x$ characters '|'.\n\tTo the left and right of the character '+' there is a sequence of x$x$ characters '-'.\n\tOn the diagonal from the upper left corner to the center and from the center to the lower right corner of the snowflake there is a sequence of x$x$ characters '\\'.\n\tOn the diagonal from the upper right corner to the center and from the center to the lower left corner of the snowflake there is a sequence of x$x$ characters '/'.\n\n\nSometimes Lana connects several snowflakes, but even then the size of each snowflake is determined separately, regardless of whether the snowflakes share some characters.\n\n\n\t\n\t\t\n\t\t\t\n\t\t\t\\|/\n-+-\n/|\\\n\t\t\t\n\t\t\t\n\t\t\t\\.|./..\n.\\|/...\n--+--..\n./|\\...\n/.|.\\|/\n....-+-\n..../|\\\n\t\t\t\n\t\t\t\n\t\t\t\\.|./.\n.\\|/..\n--+---\n./|\\..\n/...\\.\n\t\t\t\n\t\t\n\t\n\n\nOn the left is an example of a snowflake of size 1$1$.\n\nIn the middle is an example of connected snowflakes, the left one of size 2$2$ and the right one of size 1$1$.\n\nOn the right is an example of a snowflake of size 1$1$. It is missing one character '|' to be of size 2$2$.\n\nLana is currently drawing snowflakes on a piece of paper of size n×m$n \\times m$. However, she got a bit confused and did not draw all the snowflakes completely in accordance with her usual snowflake shapes. Namely, some snowflakes are missing some characters, so their size is equal to the smallest length of the corresponding character sequence from the center in one of the eight directions. Moreover, she drew some characters that are not part of any snowflake.\n\nCan you help Lana determine the size of the largest snowflake in the drawing?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31129","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAlice and Bob are playing a game. They've got B$B$ blue and R$R$ red balls laid out before them. Alice has the first move, and after that, players alternate moves. Alice picks a random ball and removes it. Bob removes a single red ball.\n\nAlice chooses her balls randomly with equal probability regardless of their color. It does not matter which red ball Bob removes.\n\nThe game ends when one of the two outcomes occurs:\n\n\n\tthere are no more blue balls --- Alice wins;\n\tthere are strictly more blue balls than there are red balls  --- Bob wins.\n\n\nAlice and Bob would like a balance of outcomes, and are curious as for what number of blue balls is necessary for a game of C=B+R$C = B + R$ for the probability of Alice winning to be as close  to 50%$50\\%$ as possible. In other words, they want to minimize the value |h−0.5|$\\left| h - 0.5 \\right|$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31154","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are given a permutation p1,p2,…,pn$p_1, p_2, \\ldots, p_n$ of integers from 1$1$ to n$n$. Each position from 1$1$ to n$n$ is colored in one of k$k$ colors. We want to sort the permutation, and for that, we can apply any number of operations of the following types:\n\n\n\tSwap any two elements. This operation costs S$S$ coins;\n\tChoose any color i$i$, and permute the elements on positions of color i$i$ as you wish. This operation costs Ci$C_i$ coins.\n\n\nNote that the positions are colored, not the elements, so when you swap two elements, the positions won't change their colors.\n\nFind the minimum number of coins you need to spend to sort the permutation.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31162","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tOrganizing AMPPZ in the times of pandemic is quite a challenge. As the Head Judge of Social Distancing, it is your job to ensure that participants keep a safe distance from each other. Since students from a single university are practically a family, you're mostly concerned with the distance between pairs of students from different universities. Intuitively, you want the students from the same university to form a tight group, keeping a safe distance from all other such groups.\n\nTo formalize your intuition, you came up with the following rule: let A$A$ denote the largest euclidean distance (standard distance on the plane) between two of students from the same university, and let B$B$ denote the smallest euclidean distance between two students from different universities. Then your rule states that A<B$A < B$ must hold.\n\nAll your guests accepted the guidelines, and upheld them throughout the event. However, there's a catch: after the competition ended, you were asked to prove that the social distancing rules were indeed respected. Everybody is already gone, and the only thing left is to try to use one of the group photos as a proof... problem is, you don't know which contestants were affiliated with which university! But since you know, that the social distancing rule was upheld, maybe you can recover the division into universities?\n\nKnowing the positions of all students in the picture (described as points on the plane: the group photo was taken from above using a drone, as this was the angle from which the contestants looked the best.) and the number of universities, divide students into universities in a way that respects your social distancing rule. Every university has to have at least one student; moreover, you can assume that the solution always exists.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31130","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tOld man Romualdych learned about division with remainders and it just threw him off the hinges. The thing got him all mixed up and sweating like a pig. What a sad sight he was, hoping to find some number x$x$ in the interval [a,b]$[a,b]$, that would produce the specified remainder r$r$ when divided by some number y$y$. Let's face it --- Romualdych is not the sharpest tool in the shed, and even if he sinks his few remaining teeth into the task, he is not likely to cope without your help.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31155","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are given a string S$S$ of length 3n$3n$, consisting of the characters A, B and C. You are allowed to perform the following operation:\n\n\n\tSelect some subsegment of this string and a character c$c$ (one of A, B and C). Then, replace all the characters on the subsegment with c$c$.\n\n\nFind the smallest number of times that you would have to apply the operation above to get a string which contains each of characters A, B and C exactly n$n$ times. It can be shown that it is always possible to get such a string.\n\nIn addition, find a sequence of operations of the smallest possible length. If there are many such sequences, you can output any of them.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31180","content":"문제\n\nPaimon just puts \n(n+1)\n$(n+1)$ distinct points on the plane, one of which is a special point \nO=(0,0)\n$O=(0,0)$, and denote the group of remaining points as \nS\n$\\mathbb{S}$.\n\nWe call a point set \nU\n$\\mathbb{U}$ strict convex set, if and only if \n|U|≥3\n$|\\mathbb{U}| \\ge 3$ and all the points from \nU\n$\\mathbb{U}$ lie exactly on the convex hull built from \nU\n$\\mathbb{U}$, with no three points lying on the same line.\n\nYou should divide \nS\n$\\mathbb{S}$ into two sets \nA\n$\\mathbb{A}$ and \nB\n$\\mathbb{B}$ so that:\n\n \nA∩B=∅\n$\\mathbb{A} \\cap \\mathbb{B}=\\emptyset$.\n \nA∪B=S\n$\\mathbb{A} \\cup \\mathbb{B}=\\mathbb{S}$.\n \n|A|≥2,|B|≥2\n$|\\mathbb{A}| \\ge 2, |\\mathbb{B}| \\ge 2$.\nThe point set \nA∪{O}\n$\\mathbb{A} \\cup \\{O\\}$ is a strict convex set, and denote its convex hull as \nCA∪{O}\n$C_{\\mathbb{A} \\cup \\{O\\}}$.\nThe point set \nB∪{O}\n$\\mathbb{B} \\cup \\{O\\}$ is a strict convex set, and denote its convex hull as \nCB∪{O}\n$C_{\\mathbb{B} \\cup \\{O\\}}$.\nThe outlines(edges) of \nCA∪{O}\n$C_{\\mathbb{A} \\cup \\{O\\}}$ and \nCB∪{O}\n$C_{\\mathbb{B} \\cup \\{O\\}}$ only intersect at point \nO\n$O$. That is, only one point \nO\n$O$ satisfies that it lies both on the outlines of \nCA∪{O}\n$C_{\\mathbb{A} \\cup \\{O\\}}$ and \nCB∪{O}\n$C_{\\mathbb{B} \\cup \\{O\\}}$.\n\nPlease help Paimon to maximize the sum of the perimeters of these two convex hulls. That is, find a valid division \nA\n$\\mathbb{A}$ and \nB\n$\\mathbb{B}$ which maximizes \n(L(CA∪{O})+L(CB∪{O}))\n$(L(C_{\\mathbb{A} \\cup \\{O\\}}) + L(C_{\\mathbb{B} \\cup \\{O\\}}))$, where \nL(polygon)\n$L(\\text{polygon})$ means the perimeter of that polygon."},{"problemId":"31131","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tOn the left side of the board, there are N$N$ polynomials, and on the right side, there are M$M$ polynomials. Your task is to construct each of the M$M$ polynomials from the right side of the board with the minimum number of actions.\n\nTo construct a polynomial from the right side, first choose any of the N$N$ polynomials from the left side. The following transformations can be applied to the chosen polynomial:\n\n\n\tDifferentiation: a polynomial is replaced by its derivative.\n\tIntegration: a polynomial is replaced by its antiderivative with an arbitrary integration constant.\n\n\nTransformations can be applied in arbitrary order any number of times, however, one application counts as one action. You can use no transformations at all if a polynomial from the right side matches some polynomial from the left side.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31163","content":"문제\n\nBabushka Bajtmiła is throwing a party! And the main dish served will be her famous pierogi.\n\nThere will be \nn\n$n$ plates available during the party, and Babushka plans to put exactly \npi\n$p_i$ pierogi on the \ni\n$i$-th plate (all the values \npi\n$p_i$ are distinct). Though the task seemed too heavy for an old lady, Bajtmiła has stood up to the challenge and almost instantly prepared all of the pierogi needed, divided among \nn\n$n$ plates with \n(p1,…,pn)\n$(p_1, \\ldots, p_n)$ pierogi. Next, Bajtmiła has distributed the plates among the plates. However, she soon realized that while she got the numbers right, she messed up the order of the plates.\n\nBajtmiła is quite tired and is only willing to perform one type of operation: she can choose two plates numbered \ni\n$i$ and \nj\n$j$, and swap the amounts of pierogi on each plate. In other words, if there are \nx\n$x$ pierogi at the plate \ni\n$i$, and \ny\n$y$ pierogi at the plate \nj\n$j$, then after this operation there will be \ny\n$y$ pierogi at the plate \ni\n$i$, and \nx\n$x$ pierogi at plate \nj\n$j$. Such an operation takes exactly \n|x−y|+C\n$|x - y| + C$ seconds to perform -- \nC\n$C$ seconds for finding a proper spoon, and \n1\n$1$ second for each of pierogi moved.\n\nThe party is about to start very soon! Now, Bajtmiła won't allow you to touch anything in the kitchen, but she has put her trust in your algorithmic skills. She asked you to find a sequence of operations restoring the desired order of numbers, and must do it in the shortest time possible. Can you help Bajtmiła?"},{"problemId":"31181","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tPaimon has found a tree with (n+1)$(n + 1)$ initially white vertices in her left pocket and decides to play with it. A tree with (n+1)$(n + 1)$ nodes is an undirected connected graph with n$n$ edges.\n\nPaimon will give you an integer sequence a1,a2,⋯,an$a_1, a_2, \\cdots, a_n$ of length n$n$. We first need to select a vertex in the tree and paint it black. Then we perform the following operation n$n$ times.\n\nDuring the i$i$-th operation, we select a white vertex xi$x_i$ which is directly connected with a black vertex yi$y_i$ by an edge, set the weight of that edge to ai$a_i$ and also paint xi$x_i$ in black. After these n$n$ operations we get a tree whose edges are all weighted.\n\nWhat's the maximum length of the diameter of the weighted tree if we select the vertices optimally? The diameter of a weighted tree is the longest simple path in that tree. The length of a simple path is the sum of the weights of all edges in that path.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31164","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tOnce upon a time Babushka Bajtmiła (known for the exception pierogi from problem B) baked a cake. She cut it into 2n$2n$ rectangular pieces (two rows containing n$n$ pieces each) and put colour icing on the top of each piece. She looked at her masterpiece and was taken aback: the colour scheme looked absolutely awful.\n\nBajtmiła decided that she needs to change the colour configuration to something better. Unfortunately, changing the locations of the pieces one by one is out of question: any attempt to take out a single piece out of the cake would inevitably make its sides chipped. Babushka Bajtmiła would never serve her guests a cake which appears raggedly cut!\n\nFortunately, Bajtmiła possesses a rectangular spatula which can fit exactly four pieces (in two rows containing two pieces each). She can therefore carefully take four such pieces out, rotate the spatula and insert them back from the opposite side. We can formally describe this operation as taking a 2$2$ x 2$2$ square and rotating it by 180$180$ degrees.\n\nRemembering your quick and efficient help in problem B, Babushka knew exactly what to do: she asked you to determine the minimum possible number of operations that would turn her initial frosting configuration into something nice. Of course, you did what any decent person would do in your place: you said you won't be able to help because the problem is not well-defined. Bajtmiła expected that: she went to the whiteboard and draw one specific nice configuration and asked you to find the minimal number of operations to change her initial frosting configuration into this specific one.\n\nIt might have also happened that the granny (tired from moving all the pierogi in problem B) was mistaken and it is actually impossible to obtain the desired configuration. In such case you also need to notify her as soon as possible!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31132","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tKhodislav is playing his favorite roguelike game. Every level of the game is a rectangular grid, and each cell is either empty or containing a wall. Until the player gets near the cell, they have no way of knowing what is in it.\n\nVault rooms, which are especially valued, can be hidden in such a manner that the player cannot reach them by usual means. To get into such a room, the player must cast a spell that uncovers a portion of cells on that level, as well as the teleportation spell. Luckily, the wiki page of the game contains a layout of the vault, which is rectangular. The vault can be located anywhere in the game level, but its orientation must exactly match the layout on the wiki.\n\nKhodislav has already unlocked a part of the level and is curious as for where the vault can be. Find all possible positions of the top left corner of the vault room that do not contradict what is already known about the level. Note that the vault must fully fit into the level.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31156","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tConsider an undirected tree. The following algorithm constructs a post-order traversal of the tree:\n\nfun dfs(v):\n    mark v as used\n    for u in neighbours(v):\n        if u is not used:\n            dfs(u)\n    append v to order\n\n\nThe post-order traversal will be in the list order.\n\nYou are allowed to choose the order of neighbors for each vertex as well as the starting vertex. What is the lexicographically minimal order you can get?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31133","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYulia wrote the number x$x$ on the blackboard, and Zakhar wrote y$y$. The kids are bored and have come up with an extremely captivating activity. Once every minute, they erase their numbers simultaneously and write new numbers instead. Yulia writes new numbers according to the following rule: if her number equaled i$i$, it is substituted by fi$f_i$. Zakhar does the same, but the rule is different: if his number equaled i$i$, it is substituted by gi$g_i$.\n\nThey will stop when their numbers match. This coould happen right away (if x=y$x=y$), or later, or maybe never. Your task is to determine for different values of x$x$ and y$y$, if the kids will ever end writing out numbers.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31182","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tPaimon is catching crystalflies on a tree, which are a special kind of butterflies in Teyvat. A tree is a connected graph consisting of n$n$ vertices and (n−1)$(n - 1)$ undirected edges. \n\n\n\nPixiv ID: 93964680\n\nThere are initially ai$a_i$ crystalflies on the i$i$-th vertex. When Paimon reaches a vertex, she can catch all the remaining crystalflies on the vertex immediately. However, the crystalflies are timid. When Paimon reaches a vertex, all the crystalflies on the adjacent vertices will be disturbed. For the i$i$-th vertex, if the crystalflies on the vertex are disturbed for the first time at the beginning of the t′$t'$-th second, they will disappear at the end of the (t′+ti)$(t' + t_{i})$-th second.\n\nAt the beginning of the 0$0$-th second, Paimon reaches vertex 1$1$ and stays there before the beginning of the 1$1$-st second. Then at the beginning of each following second, she can choose one of the two operations:\n\n\n\tMove to one of the adjacent vertices of her current vertex and stay there before the beginning of the next second (if the crystalflies in the destination will disappear at the end of that second she can still catch them).\n\tStay still in her current vertex before the beginning of the next second.\n\n\nCalculate the maximum number of crystalflies Paimon can catch in 1010101010$10^{10^{10^{10^{10}}}}$ seconds.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31165","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe Bytegate machine is Bajtazar's newest invention. It consists of two parts, which -- to quote enthusiastic Bajtazar -- \"are simply impossible to split apart!\"... or so he thought. His two-year-old son Bajtuś is just about to prove him wrong.\n\nThe initial state of mechanism can be described as an n×m$n \\times m$ array, filled with characters A, B and dots. Characters A correspond to the first part of mechanism, characters B -- the second part of mechanism, and dots mean empty spaces:\n\n+-+-+-+-+-+\n|B|B|A|A|.|\n+-+-+-+-+-+\n|.|B|B|A|A|\n+-+-+-+-+-+\n|A|.|B|B|A|\n+-+-+-+-+-+\n|A|.|.|B|A|\n+-+-+-+-+-+\n|A|A|A|A|A|\n+-+-+-+-+-+\n\nSince the mechanism consists of two parts, the array contains at least one character A and at least one character B. Furthermore, both parts of the mechanism are connected, i.e. for any two A-cells there exists some path connecting these cells, passing only through other A-cells, with any two consecutive cells on this path sharing a common edge. The part B is connected in the same way.\n\nBajtuś plays with the machine by pulling part B in various directions. His play can be described as a sequence of q$q$ letters N, S, E, W -- the directions of the consecutive moves (North, South, East and West, respectively). Each time, Bajtuś is pulling the component B in the chosen direction until any further pulling in that direction would cause the parts of the mechanism to overlap. If Bajtuś could continue that movement indefinitely, we say that the two parts have been split apart. It does not mean that Bajtuś stopped messing with the mechanism at that moment -- nonetheless, once split, the mechanism remains split forever. Determine if Bajtuś will actually split the mechanism during his play.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31157","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tDefine PLR=P∩[L;R]$\\mathbb{P}_{LR} = \\mathbb{P} \\cap [L;R]$, where P$\\mathbb{P}$ is the set of prime numbers. In other words, PLR$\\mathbb{P}_{LR}$ is the set of all primes between L$L$ and R$R$ inclusive.\n\nGiven L$L$ and R$R$, find the number of integers that can be represented as XOR of some (possibly empty) subset of PLR$\\mathbb{P}_{LR}$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31134","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tDota 2 is a multiplayer online battle arena (MOBA) video game developed and published by Valve. Dota 2 is played in matches between two teams of five players, with each team occupying and defending their own separate base on the map. Each of the ten players independently controls a powerful character, known as a 'hero', who all have unique abilities and differing styles of play. During a match players collect experience points and items for their heroes to successfully defeat the opposing team's heroes in player versus player combat. A team wins by being the first to destroy the other team's 'Ancient', a large structure located within their base.\n\nThe International is an annual esports world championship tournament for the video game Dota 2, hosted and produced by the game's developer, Valve. The tournament consists of 18$18$ teams; 12 based on final results from the Dota Pro Circuit and six more from winning regional playoffs from North America, South America, Southeast Asia, China, Eastern Europe, and Western Europe regions.\n\nIn Year 3021, The International is held in Guilin, China. Once again, just like 1000$1000$ years ago, Team LGD from China will compete against Team Spirit from Russia. But as the championship developing, the rule is that whoever wins the best of n$n$ (n$n$ is an odd positive integer) games will win the champion, so a team should win at least n+12$\\frac{n+1}{2}$ games. (In 2021, n$n$ equals to only 5$5$ and Team Spirit won by 3:2$3:2$).\n\nBefore the game starts, teams can choose to ban specific heroes from being used by the opponent team. Among these 1000$1000$ years, everyone knows that Team Spirit is very good at using a hero called Magnus, which once helped them defeat Team LGD in 2021$2021$.\n\n\n\nAlthough everyone thinks Team LGD will choose to ban Magnus from the beginning, team LGD thinks differently. Somehow they think that they are strong enough to beat the opponent's Magnus and they will only start to ban Magnus in the x$x$-th game if there is one. \n\nTo simplify the problem, if team LGD choose to ban Magnus, they will certainly win the game. Otherwise, they may have a 50%$50\\%$ possibility to win the game.\n\nAs one of Team LGD's fans, JB wants to know what's the minimum number of n$n$ that team LGD can win the champion in the worst case.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31158","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tGiven K$K$, construct two non-empty binary strings S$S$ and T$T$ of length at most 8848 such that they have exactly K$K$ different longest common subsequences. More formally, if L$L$ is the length of the longest common subsequence of S$S$ and T$T$, there should exist exactly K$K$ distinct binary strings of length L$L$ which are subsequences of both S$S$ and T$T$.\n\nIt is guaranteed that under the constraints of this problem such strings always exist.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31159","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are given 2n$2n$ pairs (ai,bi)$(a_i, b_i)$ of integers. Consider a complete graph on 2n$2n$ vertices and define the weight of the edge (ij)$(ij)$ to be wij=max(|ai−aj|,|ai−bj|,|bi−aj|,|bi−bj|)$w_{ij} = max(|a_i-a_j|, |a_i-b_j|, |b_i-a_j|, |b_i-b_j|)$. \n\nDetermine the maximum weight of the matching in this graph.\n\nIn other words, consider all ways to select n$n$ edges of this graph such that no two chosen edges have a common endpoint. What is the maximum possible total weight of these edges?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31183","content":"문제\n\nCloud Retainer, the builder of the Dwelling in the clouds above Qingyun Peak, is very interested in mechanics. Although there is more than one month away from the Lantern Rite Festival in Liyue, she has already started the design of a gaming event for it.\n\nCloud Retainer and the Traveler\n\nThe game is mainly about releasing pinballs to get a score as high as possible. It is played on the 2-dimensional plane with two horizontal straight lines \ny=0\n$y = 0$ and \ny=H\n$y = H$. Between the two lines, there are \nn\n$n$ tiny wooden boards and \nm\n$m$ coins, both can be regarded as single points. The \ni\n$i$-th wooden board is located at \n(xi,yi)\n$(x_i, y_i)$ while the \ni\n$i$-th coin is located at \n(xi′,yi′)\n$(x'_i, y'_i)$.\n\nA pinball is released from \n(10−9,10−9)\n$(10^{-9}, 10^{-9})$ by the player. Let \nv→=(vx,vy)\n$\\overrightarrow{v} = (v_x, v_y)$ be the velocity of the ball (that is to say, if the ball is currently located at \n(x,y)\n$(x, y)$ it will move to \n(x+vxϵ,y+vyϵ)\n$(x + v_x\\epsilon, y + v_y\\epsilon)$ after \nϵ\n$\\epsilon$ seconds). Initially \nv→=(1,1)\n$\\overrightarrow{v} = (1, 1)$.\n\nWhen the ball hits a wooden board or one of the two horizontal straight lines, \nvy\n$v_y$ will be negated (that is, \nvy\n$v_y$ becomes \n−vy\n$-v_y$) while \nvx\n$v_x$ remains unchanged. If the ball hits a coin, the player's score is increased by \n1\n$1$ and the velocity of the ball remains unchanged.\n\nTo gain a higher score, the player can choose to remove any number of wooden boards before the pinball is released. It is also OK not to remove any wooden board. Cloud Retainer wants you to help her estimate the difficulty by computing the maximum score the player can get after \n1010101010\n$10^{10^{10^{10^{10}}}}$ seconds under the best strategy?"},{"problemId":"31166","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tByteland has just shut its borders, the reason being a new strain of bytebacterium detected in the neighbouring countries. Research shows that the new strain is not only highly contagious, but also does not trigger any response of the Bytelanders' immune systems, so any person once infected will remain so -- and will continue to infect others -- lifelong (or, at the least, until an effective cure is discovered).   \n\nTo contain the spread of bytebacterium, the Bytelandish government introduced far-reaching restrictions and launched the National Invigilation System, allowing to monitor all social interactions in the country. It was announced that the restrictions will only get lifted once it becomes certain that nobody, except for people who have been put under quarantine, is infected with bytebacterium. As the country's most renowned data science expert, you were entrusted with analyzing data from the invigilation system and determining when the restrictions can indeed get lifted.\n\nThere are n$n$ people in Byteland and, initially, any one of them can either be healthy or infected with bytebacterium. After the borders get shut, k$k$ events take place one after another, of the following types:\n\n\n\tYou learn from the invigilation system that some group of people meets. If any of them is infected, all of them become infected as well (and will remain so indefinitely). Such a social contact is the only possible way to catch the disease (contrary to initial press reports, becoming sick due to touching infected surfaces is actually impossible).\n\tA given person performs bytebacterium test and the result is negative.\n\tA given person performs bytebacterium test and the result is positive. Such a person is immediately put under quarantine and will not participate in any social contacts from then on (although it might happen that another test is later still performed to them). You might wonder why anyone would perform a bytebacterium test on such a person, when it is clear that its result must be positive. The author of this problem has issued a relevant enquiry to Byteland's Ministry of Health, but got notified that the statutory time for response has been prolonged by three months due to the complex nature of the case at hand.\n\tYou receive a query from the health minister to determine if the restrictions can already be abolished, i.e. whether all the information gained so far makes it possible to prove that nobody -- except for the quarantined people -- can be infected. If any individual might still possibly be infected, you need to provide an example of such a person, with accordance to the ministry's guidelines (described in the *Output* section).\n\n\nYour solution must implement an online algorithm -- that is, you need to be able to answer each query right after you receive it, without reading any later sections of the input.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31135","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tJB gets a machine that can solve \"A Plus B Problem\" and feels curious about the mechanism.  He hears that you are proficient in competitive programming and have learned many advanced data structures and algorithms such as Link-Cut tree, Lagrange Inversion formula, Sweepline Mo, and so on. Hence, he asks you to help implement a program that can solve \"A Plus B Problem\" as same as the machine.\n\nThe machine consists of 3×n$3\\times n$ digits. The digits of the first two rows can be changed arbitrarily, and the third row always equals the decimal sum of the first two rows. The third row only consists of the lowest n$n$ digits even if the sum exceeds n$n$ digits.\n\nFor example, when n=5$n=5$, the three rows can be \"01234\", \"56789\", \"58023\" or \"56789\",  \"58023\", \"14812\".\n\nTo test your function, you are given q$q$ queries. In the i$i$-th query, the ci$c_i$-th digit of the ri$r_i$-th row is updated to di$d_i$ (the digit may not change). Because the digits are too many and JB has no time to check your answer, he only asks you to find the ci$c_i$-th digit of the third row after the query and how many digits of the machine change in the query.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31167","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBajtazar is widely believed to be the greatest scrooge in the whole borough. One can find many examples to support this claim, and the least important one of them is that his estate has not even got a fence. However, Bajtazar has recently found n$n$ old planks in his basement, so he decided to build at least a fragment of a hoarding.\n\nHe stacked the planks one over the other such that their consecutive lengths were a1,…,an$a_1, \\ldots, a_n$. He took the first one, cut out a fragment of length b$b$, and nailed it as the leftmost piece of the fence. Then, he cut out the next fragment of length b$b$, and nailed it next to the previous one. He continued doing so until what was left in his hands was a piece of length c$c$ (1≤c≤b$1 \\leq c \\leq b$). Well, this one might seem a little bit too short, but it would be a pity if such a good plank went to waste, he thought... and added it to the fence as well. He then took the second plank from the stack, then the next one, and repeated the whole procedure for each one of them.\n\nWhen the job was done, Bajtazar looked at the result... and concluded that using those shorter pieces might really not have been the best idea. This doesn't look like a cohesive design at all -- he thought -- and decided to paint the whole fence white to give it at least a pretence of consistency. Still, it occurred to him suddenly, if I only paint every other plank white, and leave the remaining ones brown, I could use (roughly) twice as little paint and yet the fence will still look like a well thought-out, coherent construction! And so he only painted every second plank, starting from the leftmost one (apparently, the rumours of Bajtazar's meanness must have been somewhat exaggerated. He could have started from the second leftmost plank after all.).\n\nHowever, in the evening, a frightening thought struck him: maybe if he had chosen a different value of b$b$, the overall amount of paint used could have been smaller? Well, there's not much that can be done anymore, but just the thought of such an unnecessary wastage keeps Bajtazar awake -- he needs to know how much paint he would have used if he had chosen to build a fence of any other possible height. Help him to find the answer so he can finally fall asleep peacefully (or not, depending on the result of your computation).\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31136","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tJB is trying to get more \"AC\" on problems with his AC Automaton. \n\nThe AC Automaton is a rooted tree with n$n$ nodes and node 1 as root. Each node i$i$ except the root has its unique parent pi$p_i$ and a character si$s_i$ on it, which is one of 'A', 'C', or '?'. A node x$x$ is called an ancestor of y$y$ if and only if x=py$x = p_y$ or x$x$ is an ancestor of py$p_y$. The number of \"AC\" JB can get equal to the number of ordered pairs (x,y)$(x,y)$ that x$x$ is an ancestor of y$y$, sx=$s_x = $ 'A' and sy=$s_y = $ 'C'. JB can replace '?' arbitrarily with 'A' or 'C'. His goal is to get more \"AC\" after replacing all '?'.\n\nHowever, the problem always changes. JB will change his AC Automaton q$q$ times. Each time he will modify the character on one of the nodes x$x$ to one of 'A', 'C', or '?' (the character will possibly not change). JB wants you to answer the maximum number of \"AC\" he can get if he replaces all '?' on his AC Automaton after each modification. Note that JB will not actually modify the AC Automaton while calculating the maximum number of \"AC\". You can refer to the sample to help you understand.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31184","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tOnce again, Xingqiu hides Chongyun's ice cream into a box with a strange lock. Liyue's summer has been always very hot and Chongyun suffers more because of his excessive yang (positive) energy, so he needs that ice cream desperately.\n\n\n\nPixiv ID: 86787400\n\nThere are two integers a$a$ and b$b$ on the lock. Chongyun can perform the following three types of operations any number of times:\n\n\n\tMinus 1$1$ from both a$a$ and b$b$;\n\tPlus 1$1$ to both a$a$ and b$b$;\n\tDivide both a$a$ and b$b$ by one of their common prime factor (that is to say, divide them by a prime g$g$ where a$a$ and b$b$ are both divisible by g$g$).\n\n\nThe box will be unlocked if either a$a$ or b$b$ or both become 1$1$. To help Chongyun gets the ice cream back as quickly as possible, please tell him the minimum number of operations needed to unlock the box.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31168","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tLike every spring, Gebyte the Witcher embarks on his trail, planning to get a taste of the witcher's craft and earn some coin while doing so. The trail stretches from west to east, n$n$ miles long; each mile one of three kinds of objects awaits:\n\n\n\tB bi$b_i$: A lair of a cruel beast, a terror known among the local peasants. When Gebyte steps into the lair, the beast within attacks him at once, wounding the witcher. If Gebyte survives the first blow, he quickly draws his silver sword and slains the beast. As a result, Gebyte's health changes according to if H≤bi then death else H:=H−bi.$$\\text{if } H \\leq b_i \\text{ then } death \\text{ else } H := H - b_i\\text{.}$$ \n\tK ki$k_i$: A local inn, which Gebyte (known for his weakness for booze) is sure to visit. If he stays at the tavern with health lower than ki$k_i$, having drank one barrel too many he dies before dawn. Otherwise, with a heavy hangover, and thus health lowered to ki$k_i$, he continues his journey. Gebyte's health changes according to if H<ki then death else H:=ki.$$\\text{if } H < k_i \\text{ then } death \\text{ else } H := k_i \\text{.}$$ \n\tC ci$c_i$: A house of a powerful witch, whose magic and potions can heal wounds and drive the hangover away. If Gebyte meets the witch while having health below ci$c_i$, through witch's spells and decoctions his health raises to ci$c_i$. Gebyte's health changes according to H:=max(H,ci).$$H := max(H, c_i)\\text{.}$$ \n\n\nNow, the witcher wonders what part of the trail he should visit, so that he has a bit of fun but keeps his life. Days pass, and on the i$i$-th day one of two things happens:\n\n\n\tOne of the objects on the trail changes, for example the witch's house is bought by a local merchant and turned into a tavern, or a new beast crawls out from the underworld, burns an inn down, and sets down a lair in its place;\n\tGebyte goes outside his house, sits under a tree, and wonders: if he started his journey at the i$i$-th object, and travelled east, how far would he have gone without losing his life? Such questions are beyond the capabilities of a simple witcher, thus he asks you -- a sorcerer known for mysterious coding magic -- to answer them.\n\n\nNote that the witcher only thinks about what to do, without actually embarking anywhere, so while the changes to the trail stay forever, every Gebyte's question is independent and in each his starting level of health equals H$H$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31137","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tJB holds the belief that assumption is all you need to solve a problem. In order to prove that, JB has given you two permutations of numbers from 1$1$ to n$n$: A$A$ and B$B$, and JB wants you to output a sequence of element swapping operation (xi,yi)$(x_i,y_i)$ on A$A$, so that:\n\n\n\tevery pair of swapped element forms an inversion pair (i.e. xi<yi$x_i < y_i$ and Axi>Ayi$A_{x_i} > A_{y_i}$ when the i$i$-th operation is being performed)\n\t A$A$ will become B$B$ at the end of the swapping sequence.\n\n\nor determine it is impossible. Help prove JB's belief by solving this problem!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31138","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAlice and Bob are playing a game on a directed graph G$G$. There are n$n$ vertices in G$G$, labeled by 1,2,…,n$1,2,\\dots,n$. Initially, there are no edges in G$G$. Alice will first buy some direct edges from the shop and then add them into G$G$. After that, Bob needs to delete edges until there are no edges in G$G$. In a deletion round, Bob can delete a subset of edges S$S$ from G$G$, such that when only keeping edges in S$S$, the graph is acyclic. Note that Alice can buy nothing, and in such a case the number of deletion rounds is 0$0$.\n\nThere are m$m$ edges in the shop. Alice has c$c$ dollars, so the total price of edges she will buy should not exceed c$c$. Alice wants to maximize the number of deletion rounds while Bob wants to minimize it. Both Alice and Bob will play optimally. Please write a program to predict the number of deletion rounds. \n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31139","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are given two convex polygons, where the larger polygon has n$n$ vertices and the smaller polygon has m$m$ vertices. All the vertices of the smaller polygon locate strictly inside the larger polygon, thus the smaller polygon fully locates strictly inside the larger polygon.\n\n\n\nOur dear friend JB is going to install an illuminant on the interior boundaries of the larger polygon to light up some exterior boundaries of the smaller polygon. Feeling indecisive, JB decides to choose where to install the illuminant uniformly at random on the interior boundaries of the larger polygon, and you need to calculate the expected length of the illuminated boundaries of the smaller polygon.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31185","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAstrologist Mona Megistus discovers an ancient magic circle in Teyvat recently.\n\n\n\nPixiv ID: 89228733\n\nThe magic circle looks like a complete graph with n$n$ vertices, where m$m$ edges are colored red and other edges are colored blue. Note that a complete graph is a simple undirected graph in which every pair of distinct vertices is connected by a unique edge.\n\nMona realizes that if she chooses four different vertices such that the six edges between these four vertices are of the same color, she will get a key from the magic circle. If the color is red, she will get a red key, and if the color is blue, she will get a blue key.\n\nBase on the information written in the ancient books Mona has read, the magic power of the ancient magic circle is the absolute difference between the number of red keys and the number of the number of blue keys she can get from the magic circle.\n\nMona needs your help badly, since calculating the magic power of the magic circle is really a tough job.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31169","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAfter a successful internship, Bytholomew was hired as a senior cyber-security expert. To lead by example, he decided to finally heed his own advice and use two different passwords for his e-mail and for the Facepalm social media. Unfortunately, remembering two passwords proved too much for him. Moreover, he couldn't just plainly write the passwords somewhere, as it would be against another of his recommendations. But being a security expert, Bytholomew knew exactly what to do. He chose his favorite integer d>0$d > 0$ and wrote both passwords encoded with Caesar cipher with key d$d$.\n\nPleased with his work, he looked at his notes and the horrible truth dawned on him: after the encoding, the first (e-mail) password became literally the second (Facepalm) password, while the second one turned into the first one. ,,Holy moly!\" -- Bytholomew exclaimed, as there was nothing more to say.\n\nNow you too can become a security expert -- knowing the first of Bytholomew's passwords, guess the second one, if possible.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31186","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn the north tower of Tianqiu Valley's ruins, there are some flame torch puzzles and Lumine the traveler is facing the last and the hardest one.\n\n\n\nSource: Genshin Impact Official\n\nThere are n$n$ torches in a circle and some torches have been ignited initially. The i$i$-th and the (imodn+1)$(i \\bmod n +1)$-th are adjacent for all 1≤i≤n$1 \\le i \\le n$.\n\nTo solve the puzzle, all the torches should be ignited. In each move, Lumine can ignite an extinguished torch, and the status of the adjacent torches will be reversed affected by the supernatural. That is, each of the adjacent torches will be ignited if it is currently extinguished, or be extinguished if it is currently ignited.\n\nTime is money, Lumine wants to solve the puzzle in 2n$2n$ moves or determine that the puzzle is unsolvable.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31200","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are given a rooted binary tree consisting of N$N$ vertices. The vertices are numbered from 1$1$ to N$N$, the root is the vertex number 1$1$. Each of the other vertices has a single parent in the tree. The tree is binary, i.e. each vertex can be a parent of at most two other vertices.\n\nOne of the vertices is special. You are trying to guess it. You can ask the questions of the following kind: \"Is the special vertex in the subtree of vertex x$x$\"? A node y$y$ is in the subtree of vertex x$x$ if and only if the shortest path between y$y$ and 1$1$ goes through vertex x$x$. Note that vertex x$x$ is also in its own subtree.\n\nYou are allowed to ask this question at most 35$35$ times. After that you should report your guess.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31220","content":"문제\n\n무향 그래프 \nG=(V,E)\n$G=(V,E)$에서 다음의 조건을 만족하는 정점 집합 \nS\n$S$를 그래프 \nG\n$G$의 지배 집합이라고 부릅니다.\n\n \nS\n$S$에 속하지 않는 모든 정점 \nv\n$v$에 대해 간선 \n(u,v)\n$(u,v)$가 \nE\n$E$에 속하도록 하는 정점 \nu∈S\n$u \\in S$가 하나 이상 존재합니다.\n\n또한, 다음의 조건을 만족하는 정점 집합 \nS′\n$S'$를 그래프 \nG\n$G$의 연결된 지배 집합이라고 부릅니다.\n\n \nS′\n$S'$는 그래프 \nG\n$G$의 지배 집합입니다.\n그래프 \nG\n$G$에서 \nS′\n$S'$에 의해 유도된 부분 그래프는 연결 그래프입니다.\n\n요약하자면, 어떤 정점 집합 \nS′\n$S'$가 그래프의 연결된 지배 집합이 되기 위해서는, \nG\n$G$의 모든 정점이 \nS′\n$S'$에 속하거나 \nS′\n$S'$의 어떤 정점과 인접한 상태여야 하며, \nS′\n$S'$에 속하는 임의의 두 정점 \nu\n$u$, \nv\n$v$를 선택할 때 \nS′\n$S'$에 속하는 정점만을 포함하는 경로로 연결되어 있어야 합니다.\n\n \nn\n$n$개의 행과 \nm\n$m$개의 열이 있으며, 상하좌우로 인접한 모든 두 칸 사이에 간선이 존재하는 격자 그래프를 생각합시다. 이 그래프에는 \nnm\n$nm$개의 정점과 \n2nm−n−m\n$2nm-n-m$개의 간선이 존재합니다. 이 그래프에 대해 흐즈로는 다음과 같은 가설을 세웠습니다.\n\n \n2\n$2$ 이상의 임의의 \nn\n$n$과 \nm\n$m$에 따라 정의된 격자 그래프에서, 크기가 \nnm2\n$\\frac{nm}{2}$ 이하인 연결된 지배 집합 \nD\n$D$가 존재합니다.\n\n흐즈로는 매우 많은 경우에 이 사실이 성립함을 직접 증명했습니다. 그러나 아직 모든 경우에 대해서 이 사실을 증명한 것이 아니기 때문에, 이 가설이 틀린 경우가 있을지도 모릅니다. \nn\n$n$과 \nm\n$m$이 주어질 때, \nn\n$n$과 \nm\n$m$에 대해 정의된 격자 그래프에서 크기가 \nnm2\n$\\frac{nm}{2}$ 이하인 연결된 지배 집합 \nD\n$D$가 존재하는지 판단하고, 존재한다면 그러한 집합 \nD\n$D$를 출력하세요."},{"problemId":"31170","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe \\textsl{bitwise exclusive or}, or simply XOR, is an operation denoted by ⊕$\\oplus$ which works on two integers by XOR-ing their corresponding bits: if xi,yi,zi$x_i, y_i, z_i$ denote the i$i$-th binary digit of x$x$, y$y$ and z$z$, where z=x⊕y$z = x \\oplus y$, then zi=(xi+yi)mod2$z_i = (x_i + y_i) \\mod 2$.\n\nYou are given a positive integer k$k$. A sequence of integers is \\textsl{interesting} if XOR of any its two elements is less than or equal k$k$.\n\nGiven a sequence a1,…,an$a_1, \\dots, a_n$, determine the largest possible length of its interesting subsequence. (A subsequence is a sequence that can be derived from the given sequence by deleting zero or more elements.)\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31221","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이 문제는 인터랙티브 문제입니다.\n\n흐즈로는 음이 아닌 정수 x$x$ (0≤x≤1018$0 \\le x \\le 10^{18}$)를 하나 가지고 정수 맞히기 게임을 하고자 합니다. 여러분은 질문을 하여 숨겨진 정수 x$x$를 맞혀야 합니다. 하지만, 흐즈로는 지금까지 이러한 종류의 문제만 몇백 개 정도 있었다는 사실을 알고 있습니다. 그렇기에 흐즈로는 여러분이 문제를 쉽게는 풀 수 없도록 그 누구도 생각하지 못했을 종류의 질문을 생각해 냈습니다. 여러분이 사용할 수 있는 질문은 다음과 같습니다.\n\n여러분은 두 음이 아닌 정수 a$a$와 b$b$를 정해서, 흐즈로에게 질문을 할 수 있습니다. 질문으로 주어진 두 정수 a$a$와 b$b$에 따라, 흐즈로는 다음 값을 계산합니다.\n\n (x−a)−b$$\\sqrt{(x-a)}-b$$ \n\n흐즈로는 계산 결과에 따라 이 값이 양수인지, 음수인지, 아니면 0$0$인지 여러분에게 알려줍니다. 75$75$개 이하의 질문을 사용하여 정수를 맞힐 수 있다면 여러분이 승리하고, 질문의 개수가 75$75$개를 초과할 경우 여러분이 패배합니다. 그러나,  x−a$x-a$가 음수가 되는 질문을 한다면 게임이 즉시 종료되고 여러분이 패배합니다. 여러분은 과연 정수의 값을 맞히고 흐즈로를 이길 수 있을까요?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31171","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn the mobile game \"Jungle Trail\", you are given a rectangular n×m$n \\times m$ board divided into n⋅m$n \\cdot m$ squares. Each square is either empty, blocked (impassable) or contains a den of snakes, either poisonous or benign (not poisonous). If a square contains a den of snakes, then either all the snakes on a given field are poisonous, or all are benign.\n\nThe game allows you to tap any column or any row of the board. If you tap a column, all poisonous snakes in this column are turned to benign, and vice versa. Similarly, if you tap any row, all snakes in the row change their state. You can tap each row/column only once. If a den is in a tapped row as well as in a tapped column, its state returns to the original one.\n\nAfter performing all those operations, you must find a trail through the jungle: a path which starts at the top left corner, in every move goes either one square down or one to the right, ends at the bottom right corner and never passes through a den of poisonous snakes or a blocked field.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31187","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe Windblume Festival in Mondstadt is coming! People are preparing windblumes for Barbatos and for those they love and adore. The Windblume Festival is also an opportunity to improve the relationships people have.\n\n\n\nSource: Genshin Impact Official\n\nDuring the festival, a famous game will be played every year, invented by Jean, the Acting Grand Master of the Knights of Favonius. In the game, n$n$ players numbered from 1$1$ to n$n$ stand in a circle, each holding an integer with them. Each turn, one player will be removed. The game will end when there is only one player left.\n\nFor each turn, let k$k$ be the number of players remaining and ai$a_i$ be the integer player i$i$ holds. Two adjacent players, x$x$ and (xmodk+1)$(x \\bmod k + 1)$ are selected and player (xmodk+1)$(x \\bmod k + 1)$ is removed from the game. Player x$x$'s integer will then change from ax$a_x$ to (ax−axmodk+1)$(a_x - a_{x \\bmod k + 1})$. Player y$y$ in this turn will become player (y−1)$(y - 1)$ in the next turn for all x<y≤k$x < y \\le k$, though the integer they hold will not change.\n\nJean wants to know the maximum possible integer held by the last remaining player in the game by selecting the players in each round optimally.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31201","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAnna and Beka are at different points on a coordinate line, planning to meet. Their only means of movement is through the use of teleporters.\n\nThere are N$N$ teleporters, with the i$i$-th teleporter located at coordinate c[i]$c[i]$ and operating at a frequency denoted as f[i]$f[i]$. However, not all of them are currently available; only those within the frequency range [L,R]$[L,R]$ can be used.\n\nUsing a teleporter takes a minute and transports its user to a coordinate that is a reflection of the original coordinate around the teleporters location. In other words, if the original coordinate was x1$x_1$, then after using teleporter i$i$, the resulting coordinate x2$x_2$ will satisfy the equation (x1+x2)/2=c[i]$(x_1 + x_2 )/2 = c[i]$.\n\nEach minute, Anna and Beka must use one of the available teleporters (not necessarily different ones). They will communicate during teleportation and experience discomfort equal to the absolute difference of the frequencies of the teleporters they are using. The overall difficulty of the travel is defined as the maximum discomfort they have experienced.\n\nYou will be asked about Q$Q$ different scenarios, and for each one, your task is to determine whether Anna and Beka can ever meet using available teleporters, and if so, what the minimum possible travel difficulty is.\n\nA single scenario is described by four integers:\n\n\n\t A$A$: Anna's starting coordinate\n\t B$B$: Beka's starting coordinate\n\t L$L$: The minimum frequency of the available teleporters\n\t R$R$: The maximum frequency of the available teleporters\n\n\nFor each scenario, print the minimum travel difficulty if they can meet and −1$-1$ otherwise. Please note that the total travel time is irrelevant for the purposes of this task.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31222","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t백준 온라인 저지에는 많은 \"수열과 쿼리\" 문제가 있습니다. 그러나 그중 대다수는 Diamond 이상의 티어를 가지고 있기에, 흐즈로는 언젠가는 어렵지 않은 \"수열과 쿼리\" 문제를 내겠다고 다짐하였습니다. 그렇게 탄생한 문제가 이것입니다.\n\n수열의 연속 부분 수열 [al,al+1,al+2,⋯,ar−1,ar]$[a_l,a_{l+1},a_{l+2},\\cdots,a_{r-1},a_r]$에서 모든 원소가 서로 일치할 때, 이러한 구간 [l,r]$[l,r]$을 수열 a$a$의 연속 일치 구간이라고 합니다. 또한, 수열 a$a$의 어떤 연속 일치 구간이 다른 어떤 a$a$의 연속 일치 구간에도 완전히 포함되지 않는다면 이를 수열 a$a$의 중요한 연속 일치 구간이라고 합니다.\n\n여러분은 인덱스가 1$1$부터 시작하는 수열 A$A$에 대하여 다음의 쿼리 q$q$개를 해결해야 합니다.\n\n\n\t 1 i x$1 \\ i \\ x$: Ai$A_i$의 값을 x$x$로 변경합니다. (1≤i,x≤n$1 \\le i,x \\le n$)\n\t 2 l r$2 \\ l \\ r$: B$B$를 수열의 연속 부분 수열 [Al,Al+1,Al+2,⋯,Ar−1,Ar]$[A_l,A_{l+1},A_{l+2},\\cdots,A_{r-1},A_r]$로 정의할 때, 수열 B$B$의 서로 다른 중요한 연속 일치 구간의 개수를 출력합니다. (1≤l≤r≤n$1 \\le l \\le r \\le n$)\n\n\n어렵지 않은 문제죠? 여러분이 느끼기에도 어렵지 않다면 좋겠습니다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31172","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA little kitten of Bituś, Kapitan, does love sleeping! Sadly, the average quality of Kapitan's sleep has decreased significantly after its owner decided to buy Roomba -- a robot vacuum cleaner. It seems the kitten is scared of Roomba as... well, it is fairly scared.\n\nBituś's house consists of n$n$ rooms connected by n−1$n-1$ two-way corridors in such a way that it is possible to reach any room from any other one. Bituś noticed that whenever Roomba enters a room with Kapitan inside, the kitten awakes instantly and runs away to one of the neighbouring rooms, where it returns back to dreaming about playing with mice. Frightened Kapitan escapes the room blindly, so if there exists more than one room directly connected to the current one, then every neighbouring room is equally likely to chosen by Kapitan (in particular, it can escape to the room from which Roomba has just came from).\n\nDuring one particularly long night shift at work, Bituś opened the Roomba app and observed that during today's cleaning it visited rooms a1,…,am$a_1, \\dots, a_m$ (in this order). A room can appear more than once in this sequence, but every two neighbouring rooms must be directly connected to each other. Bituś also remembers that initially the kitten had been sleeping in the room c$c$. Moreover, it must hold that a1≠c$a_1 \\neq c$ because observant Kapitan would never ever sleep in one room with Roomba!\n\nNow Bituś wonders what is the expected value of the number of times Roomba has woken Kapitan during the cleaning session. Please help Bituś to find the answer so he can finally return back to work.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31188","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tNaše nacionalno blago, Croatia Airlines, ulaže milijarde eura u sofisticirani algoritam koji će dodijeliti bolja zrakoplovna sjedala onim putnicima koji su ranije kupili kartu.\n\nSjedala se u zrakoplovu protežu kroz r$r$ redova, gdje je r$r$ paran broj. Također postoje tri izlazna reda koji služe kao pristup izlazima u slučaju nužde, te ne sadrže sjedala. Prvi izlazni red nalazi se na samom početku zrakoplova (prije prvog reda sjedala), drugi se nalazi točno u sredini zrakoplova, a treći se nalazi na kraju zrakoplova (nakon posljednjeg reda sjedala). Redovi zrakoplova numerirani su prirodnim brojevima od 1$1$ do r+3$r + 3$ koji rastu od početka prema kraju zrakoplova. Odnosno, redovi numerirani brojevima 1$1$, r/2+2$r/2 + 2$ i r+3$r + 3$ su izlazni redovi, dok svi ostali redovi sadrže sjedala.\n\nKonfiguracija sjedala u zrakoplovu je 3-3-3, odnosno svaki red sjedala sastoji se od tri grupe po tri sjedala između kojih se nalazi prolaz za putnike. Sjedala svakog retka označena su uzastopnim slovima prema sljedećem uzorku ABC.DEF.GHI slijeva nadesno.\n\nKada putnik kupi avionsku kartu, sofisticirani mu algoritam dodijeli sjedalo prema sljedećim pravilima:\n\n\n\t\n\tAko postoji prazno sjedalo u redu koji se nalazi direktno iza nekog izlaznog reda, svi se ostali redovi (za koje ne vrijedi ovo svojstvo) ignoriraju u idućem pravilu.\n\t\n\t\n\tNajprije se odabire red s najvećim brojem praznih sjedala. Ako postoji više takvih redova, odabire se onaj red koji je najbliži nekom izlaznom redu (udaljenost između redova a$a$ i b$b$ je |a−b|$|a − b|$). Ako i dalje postoji više takvih redova, odabire se onaj s najmanjim brojem.\n\t\n\t\n\tPotom se u obzir uzmu sva prazna sjedala u odabranom redu, te se odabire ono koje ima najveći prioritet. Poredak sjedala prema prioritetu (od najvećeg do najmanjeg) jest:\n\n\t\n\t\tSjedala uz prolaz srednje grupe (D i F)\n\t\tSjedala uz prolaz prve i treće grupe (C i G)\n\t\tSjedala uz prozor (A i I)\n\t\tSrednje sjedalo srednje grupe (E)\n\t\tPreostala srednja sjedala (B i H)\n\t\n\n\tAko postoje dva prazna sjedala s istim najvećim prioritetom, tada je potrebno uzeti u obzir balans cijelog zrakoplova. Putnici s lijeve strane zrakoplova sjede na sjedalima s oznakama A, B, C i D, dok putnici s desne strane zrakoplova sjede na sjedalima s oznakama F, G, H i I. Algoritam odabire sjedalo koje se nalazi na strani zrakoplova s više praznih sjedala. Ako obje strane zrakoplova sadrže jednak broj praznih sjedala, algoritam odabire sjedalo s lijeve strane zrakoplova.\n\t\n\n\nNeka su sjedala u zrakoplovu unaprijed rezervirana (ne nužno koristeći opisani algoritam), a vaš je zadatak dodijeliti dodijeliti sjedala za sljedećih n$n$ putnika prema opisanom algoritmu.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31173","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBajtazar has been sent on a mission to the jungle. He is going to study the behaviour of newly discovered species -- taxicab lemurs.\n\nThe jungle has a rectangular shape with dimensions n$n$ by m$m$. Taxicab lemurs are already known to be group animals. Furthermore, each group of lemurs inhabits only one cell of the jungle, i.e. a single cell with coordinates (x,y)$(x, y)$, where 1≤x≤n$1 \\leq x \\leq n$ and 1≤y≤m$1 \\leq y \\leq m$. But the most fascinating aspect of their behaviour lies in their foraging area: if some group of lemurs inhabits a cell with coordinates (x,y)$(x, y)$, then their foraging area is bounded by a ball with radius k$k$ in the taxicab metric. In other words, the foraging area of this group of lemurs is the set of cells with coordinates (x′,y′)$(x', y')$ satisfying |x−x′|+|y−y′|≤k$|x - x'| + |y - y'| \\le k$ and 1≤x′≤n$1 \\leq x' \\leq n$, 1≤y′≤m$1 \\leq y' \\leq m$. The constant k$k$ is universal for all taxicab lemurs.\n\nThe last taxicab lemur's researcher has disappeared under unknown circumstances and the only thing he left behind was an n$n$ by m$m$ map with some cells marked as taxicab lemurs' foraging area (the circumstances of this event are still unclear; the latest theory suggests that the newly discovered species of lemurs may not be herbivorous after all...). Slightly disturbed by that story, Bajtazar is currently wondering if this map is reliable. Therefore he would like to check if there exists such a set of groups of taxicab lemurs, that their foraging area would match precisely the cells marked on the map.\n\nHelp Bajtazar and find the answer to his bugging question. He will certainly be grateful till his very last days!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31223","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t선인장 그래프란 모든 간선이 최대 하나의 단순 사이클에만 포함된 무향 그래프를 의미합니다. 흐즈로는 선인장 그래프를 하나 가지고 있으며, 각 간선에는 길이가 있습니다. 두 정점 u$u$, v$v$를 연결하며 길이가 l$l$인 간선을 순서쌍 (u,v,l)$(u,v,l)$로 표기합니다. 문득 흐즈로는 자신의 그래프를 보다가 이러한 생각을 하게 되었습니다.\n\n\n\t어떤 선인장 그래프는 적당히 접어서 1차원으로 만들 수도 있지 않을까?\n\n\n이 의문을 해결하기 전, 다음의 성질을 만족하는 그래프를 접어서 1차원으로 만들 수 있다고 정의합시다.\n\n\n\t각 정점 i$i$에 1차원 좌표 xi$x_i$를 배정하여, 각 간선 (u,v,l)$(u,v,l)$에 대해 |xu−xv|=l$|x_u-x_v|=l$이 성립하도록 할 수 있습니다.\n\n\n이제 여러분이 해결해야 하는 문제는 다음과 같습니다. 입력으로 흐즈로가 가진 선인장 그래프가 주어집니다. 이 그래프를 접어서 1차원으로 만들 수 있는지 판단해 주세요.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31202","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYour company is planning to open its offices in a city with N$N$ horizontal and M$M$ vertical streets with a building at each intersection. Each building is connected to all of its neighbors by up to two vertical and two horizontal roads, each with a length of 1$1$.\n\nAt night, only N×M−1$N \\times M - 1$ of the roads are illuminated and others are not available for use. It so happens that these roads form a tree, i.e., they are exactly enough to connect any building to another.\n\n\n\nThe first figure in the image shows the roads at nighttime, while the second one depicts them during the daytime. The third figure is a simpler example that will be used in explanations below.\n\nEach building can be bought and made to be an office. Each month, you will tour the offices, starting from one building, visiting all the other converted office buildings, and finally returning to the initial building. You will use the available roads for this purpose and minimize the total length of the tour, although you aren't certain about the specific time of day.\n\nIn the example on the right, in case of opening the offices in the buildings A$A$, D$D$ and F$F$ the tour length would be 6 during the day and 10$10$ during the night.\n\nTo avoid planning complications, the decision was made to select office buildings in a manner that ensures the minimum length for the tour remains the same both during the day and at night.\n\nYou need to calculate the number of ways in which the office buildings can be chosen that satisfy the given requirement. Two choices are considered different if there exists at least one building that is present in one of them and not in the other. As the number of ways can be large, you should compute it modulo 1000000007$1\\, 000\\, 000\\, 007$.\n\nPlease note that there is a restriction on the number of offices. Refer to the input format for details.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31189","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tU bipartitnom grafu, čvorovi se mogu podijeliti u dva disjunktna skupa A$A$ i B$B$ tako da svaki brid povezuje čvor iz skupa A$A$ s čvorom iz skupa B$B$. Sparivanje M$M$ je skup bridova gdje nijedna dva brida ne dijele zajednički čvor. Kažemo da sparivanje M$M$ barikadira skup čvorova V$V$ ako je svaki čvor iz V$V$ krajnja točka barem jednog brida iz M$M$.\n\nZadan je bipartitan graf u kojem je svakom čvoru pridružena cjelobrojna težina. Pritom, težinu skupa čvorova definiramo kao sumu težina čvorova toga skupa.\n\nZa dani cijeli broj t$t$, potrebno je pronaći broj skupova V$V$ takvih da je njihova težina barem t$t$ te da je skup V$V$ barikadiran barem jednim sparivanjem M$M$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31240","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tВ регионалната библиотека \"Стилиян Чилингиров\" в Шумен извършват ревизия. На някоя страница на всяка книга има поставен знак на библиотеката. За да улеснят своята работа, библиотекарите отпечатват на лист хартия информация за книгите. На отделен ред за всяка книга принтерът трябва да отпечата „Страница i от n”, където i е номер на страницата, на която е знакът на библиотеката, а n – брой страници на книгата.\n\nЗа съжаление, принтерът се повредил и за всяка книга отпечатал само една дълга последователност от цифри. Наложило се библиотекарите да отделят цифрите така, че да получат две числа – едното да показва на коя страница е поставен знакът на библиотеката, другото - колко са страниците на съответната книга. Помогнете им като напишете програма number, която намира колко са решенията на тази задача, т.е. по колко начина може да се отдели последователността от цифри така, че да се получи коректен надпис от вида „Страница i от n”. Страниците на всяка книга са номерирани с числата от 1 до n. Числата i и n са записани без водещи нули.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31224","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\n\t\t\n\t\t\t\n\t\t\t죄송합니다, 저는 이 문제가 P에 속하는지 증명하지 않았습니다.\n\n\t\t\t다시 말해, 이 문제는 P에 속하지 않을 수도 있습니다.\n\n\t\t\t하지만 적어도 제가 풀었으니, 인간이 풀 수 없는 문제는 아닐 거라고 생각합니다.\n\t\t\t\n\t\t\n\t\t\n\t\t\t\n\t\t\t— 흐즈로\n\t\t\t\n\t\t\n\t\n\n\n여러분은 이 문제에서 다음과 같이 변형된 최소 비용 최대 유량 문제를 해결해야 합니다. 변형된 문제에 한하는 조건은 다음과 같습니다.\n\n\n\t그래프에는 n$n$개의 정점과 m$m$개의 방향 있는 간선이 있습니다. 1$1$번 정점이 시작점이며, n$n$번 정점이 끝점입니다. 중복 간선이나 자기 자신을 향하는 간선은 없습니다.\n\t각 간선에는 정수 세 개의 순서쌍 (a,b,c)$(a,b,c)$가 있습니다. 이때 0≤a$0 \\le a$가 반드시 성립하고,  a≠0$a \\neq 0$인 간선은 최대 100$100$개 존재합니다.\n\t순서쌍 (ai,bi,ci)$(a_i,b_i,c_i)$를 갖는 간선을 통해 최대 ci$c_i$단위의 자원을 보낼 수 있고, x$x$단위의 자원을 보냈을 때 소모되는 비용은 aix2+bix$a_i x^2+b_i x$입니다. 비용이 음수가 될 수 있습니다.\n\t각 간선을 통해 보내는 자원의 양은 음이 아닌 정수여야 합니다.\n\n\n다음은 기본적인 최소 비용 최대 유량 문제에 따른 본 문제의 조건입니다.\n\n\n\t여러분은 시작점에서 끝점까지 보내는 자원의 양을 최대화하면서, 동시에 요구되는 비용을 최소화해야 합니다.\n\t시작점에서 나가는 자원의 양과 끝점으로 들어오는 자원의 양은 같아야 합니다.\n\t시작점과 끝점을 제외하고, 모든 정점에 대해 들어오는 자원의 양과 나가는 자원의 양은 같아야 합니다.\n\n\n문제의 조건에 따른 그래프가 주어졌을 때, 문제를 해결하고 최대 유량과 최소 비용을 출력하는 프로그램을 작성하세요.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31174","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYaawn... you really shouldn't have played on ByteStation till 3 AM. You begin to slowly drift away, immersed by the monotone voice of your algorithms professor...\n\nWait. What happened? It seems that you fell asleep during online classes, and slept through the entire afternoon, night, and the next morning. But that means... the exam! Barely catching your breath, you bust into the classroom precisely when the professor is beginning to explain the problem statement.\n\nThe task at the exam is to compute the median of a sequence, defined as the middle element in the sorted order (if the length of the sequence is even, the median is the smaller out of the two middle values). You're supposed to write down the pseudocode of a solution, and then simulate it on an example sequence provided by the professor.\n\nReaching into the depths of your memory, you seem to recall something like that appearing during the lecture. Some sort of a magic algorithm... magic threes? Yaawn, the memory itself makes you sleepy again. You somehow split the sequence into parts, solve them recursively, and then combine...?\n\nBased on the bits and pieces that you remembered, you came up with the following algorithm:\n\nfunction magicThrees(sequence)\n  if the length of the sequence is no more than 2 then\n    return the smallest value in sequence\n  otherwise\n    part_1, part_2, part_3 = splitIntoThreeParts(sequence)\n    median_i = magicThrees(part_i) dla i = 1, 2, 3\n    return the median of [median_1, median_2, median_3]\n\n\nwhere splitIntoThreeParts divides the sequence into three connected fragments, with lengths as close to each other as possible. Concretely, the fragments will have lengths [s, s, s], [s + 1, s, s] or [s + 1, s + 1, s], depending on the length of the original sequence. For example, the sequence [8, 2, 6, 6, 3, 5, 7, 1] will be divided into [8, 2, 6], [6, 3, 5] and [7, 1].\n\nAfter leaving the exam, you realized that your algorithm is not so magical after all, as it doesn't always work. Maybe, at least, it has worked on the example sequence from the exam... Unfortunately, your memory of that sequence is as fuzzy as the one of the algorithm itself: while you do remember almost all elements of the sequence from the exam, you're not sure about a few of the values. However, you do remember the overall bounds on all values appearing in the sequence: all elements were supposed to lie in a (closed) interval [0,m−1]$[0, m-1]$.\n\nCalculate the number of ways to choose the values you don't know, in such a way that magicThrees executed on the resulting sequence returns the correct median (as defined above). As the answer may be very large, it's enough if you find its remainder modulo 109+7$10^9 + 7$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31225","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이 문제는 \"선인장 접기\"의 어려운 버전입니다. 두 버전 간에 l$l$에 대한 제약의 차이가 존재하며, 어려운 버전에서는 대응되는 xi$x_i$의 값을 직접 출력해야 합니다.\n\n선인장 그래프란 모든 간선이 최대 하나의 단순 사이클에만 포함된 무향 그래프를 의미합니다. 흐즈로는 선인장 그래프를 하나 가지고 있으며, 각 간선에는 길이가 있습니다. 두 정점 u$u$, v$v$를 연결하며 길이가 l$l$인 간선을 순서쌍 (u,v,l)$(u,v,l)$로 표기합니다. 문득 흐즈로는 자신의 그래프를 보다가 이러한 생각을 하게 되었습니다.\n\n\n\t어떤 선인장 그래프는 적당히 접어서 1차원으로 만들 수도 있지 않을까?\n\n\n이 의문을 해결하기 전, 다음의 성질을 만족하는 그래프를 접어서 1차원으로 만들 수 있다고 정의합시다.\n\n\n\t각 정점 i$i$에 1차원 좌표 xi$x_i$를 배정하여, 각 간선 (u,v,l)$(u,v,l)$에 대해 |xu−xv|=l$|x_u-x_v|=l$이 성립하도록 할 수 있습니다.\n\n\n이제 여러분이 해결해야 하는 문제는 다음과 같습니다. 입력으로 흐즈로가 가진 선인장 그래프가 주어집니다. 이 그래프를 접어서 1차원으로 만들 수 있는지 판단해 주세요.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31175","content":"문제\n\nAfter the great success in 2018, 2019, and 2020, Nanjing University of Aeronautics and Astronautics (NUAA) will host the International Collegiate Programming Contest (ICPC) Nanjing regional for the fourth time.\n\nTeam Power of Two and team Three Hold Two won the champion for Tsinghua University in 2018 and 2019. In 2020, team Inverted Cross from Peking University won the champion. In 2021, there are around \n700\n$700$ teams including the defending champion participating in the contest. We are so excited to see who will win this year!\n\nAlthough we can't gather in Nanjing this time due to the pandemic, we should still be grateful for the hard work done by all staff and volunteers for this contest. Thank you all for your great contribution to this contest!\n\nIn the 2018 contest, problem K, Kangaroo Puzzle, requires the contestants to construct an operation sequence for the game:\n\nThe puzzle is a grid with \nn\n$n$ rows and \nm\n$m$ columns (\n1≤n,m≤20\n$1 \\le n, m \\le 20$) and there are some (at least \n2\n$2$) kangaroos standing in the puzzle. The player's goal is to control them to get together. There are some walls in some cells and the kangaroos cannot enter the cells with walls. The other cells are empty. The kangaroos can move from an empty cell to an adjacent empty cell in four directions: up, down, left, and right.\n\nThere is exactly one kangaroo in every empty cell in the beginning and the player can control the kangaroos by pressing the button U, D, L, R on the keyboard. The kangaroos will move simultaneously according to the button you press.\n\nThe contestant needs to construct an operating sequence of at most \n5×104\n$5 \\times 10^4$ steps consisting of U, D, L, R only to achieve the goal.\n\nIn the 2020 contest, problem A, Ah, It's Yesterday Once More, requires the contestants to construct an input map to hack the following code of the problem described before:\n\n#include <bits/stdc++.h>\nusing namespace std;\nstring s = \"UDLR\";\nint main()\n{\n  srand(time(NULL));\n  for (int i = 1; i ≤ 50000; i++) putchar(s[rand() % 4]);\n  return 0;\n}\n\n\nNow in the 2021 contest, Paimon prepares another version of the problem for you. You are given a grid with \nn\n$n$ rows and \nn\n$n$ columns (\n2≤n≤500\n$2 \\leq n \\leq 500$). All cells are empty and there is one kangaroo standing in each cell.\n\nSimilarly, you can control the kangaroos by pressing the button U, D, L, R on the keyboard. The kangaroos will move simultaneously according to the button you press. Specifically, for any kangaroo located in the cell on the \ni\n$i$-th row and the \nj\n$j$-th column, indicated by \n(i,j)\n$(i,j)$:\n\nButton U: it will move to \n(i−1,j)\n$(i-1,j)$ if \ni>1\n$i>1$. Otherwise, it will stay in the same grid.\nButton D: it will move to \n(i+1,j)\n$(i+1,j)$ if \ni<n\n$i<n$. Otherwise, it will stay in the same grid.\nButton L: it will move to \n(i,j−1)\n$(i,j-1)$ if \nj>1\n$j>1$. Otherwise, it will stay in the same grid.\nButton R: it will move to \n(i,j+1)\n$(i,j+1)$ if \nj<n\n$j<n$. Otherwise, it will stay in the same grid.\n\nYou need to construct an operating sequence consisting only of characters 'U', 'D', 'L', and 'R'. After applying it, you must make sure every kangaroo will gather at the specific cell \n(a,b)\n$(a,b)$. The length of the operating sequence cannot exceed \n3(n−1)\n$3(n-1)$."},{"problemId":"31241","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tВсички къщи в градчето X са разположени на една дълга улица и са номерирани от ляво надясно, последователно с числата от 1 до N. Разстоянията в метри между тях са цели числа, като съответно d1 е разстоянието между къща номер 1 и къща номер 2, d2 – растоянието между къща номер 2 и къща номер 3 и т.н., dN-1 е разстоянието между къща номер N-1 и къща номер N. Пощальонът Пенчо трябва да разнесе рекламни материали до всяка къща, като започне от къща със зададен номер K. Пенчо избрал да обхожда къщите по следния начин: след като пуснел рекламния материал в пощенската кутия на някоя къща, той се отправял към най-близката до нея, която още не бил посетил. Ако имало повече от една най-близка, непосетена къща, той отивал в тази, която е с по-малък номер. В началото Пенчо се намирал до къща с номер K.\n\nНапишете програма postman, която пресмята какво растояние е изминал Пенчо докато обходи всички къщи.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31190","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tU našoj lijepoj domovini, ceste su ponos i dika njenih građana, a posebno superautocesta maštovitog naziva A1$A1$. Nažalost, mnogobrojni turisti sa svojim trabantima napunjenim jeftinim paštetama i limenkama pive svake godine unište cestu pa je treba popravljati.\n\nDržavni zavod za cjelovitost cesta napravio je pregled autoceste i označio sve rupe koje treba sanirati. Sanira se na sljedeći način: najprije se, počevši od nekog mjesta prije prvog oštećenja, cesta podijeli na segmente jednake duljine i zatim se na svaki segment na kojem ima oštećenja pošalje jedan bager sa pripadajućom ekipom.\n\nZbog nedovoljnog broja bagera u državi, prometni stručnjaci trebaju odrediti kako podijeliti cestu na segmente unaprijed zadane duljine tako da broj segmenata s oštećenjima bude što manji.\n\nNa cesti se nalazi n$n$ rupa i svaka je zadana cijelim brojem koji predstavlja njenu udaljenost od početka ceste. Dužina svakog segmenta je unaprijed zadana prirodnim brojem m$m$. Na prvih m$m$ metara ceste nema oštećenja. Cesta se podijeli na segmente tako da se odabere mjesto za početak prvog segmenta koje se mora nalaziti na jednom od prvih m$m$ metara. Ako prvi segment počinje na k$k$-tom metru, onda i$i$-ti segment počinje na k+(i−1)⋅m$k + (i - 1) \\cdot m$ metru. Jedan bager može pokriti sve rupe od početka nekog segmenta (uključivo) do početka sljedećeg segmenta (isključivo).\n\nNapišite program koji će odrediti minimalni broj bagera potrebnih za sanaciju autoceste i sva moguća mjesta na kojima prvi segment može početi.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31203","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn this puzzle, you are given a 0$0$-indexed N×N$N \\times N$ square grid consisting of distinct integers from 0$0$ to N×N−1$N \\times N - 1$, inclusive. Your goal is to reach the ordered state where the number at the intersection of the i$i$-th row and the j$j$-th column is equal to i×N+j$i \\times N + j$ for each 0≤i,j<N$0 ≤ i, j < N$. You can achieve this goal using two types of moves:\n\n\n\tDown move: \"D a[0]$a[0]$ a[1]$a[1]$ …$\\dots$ a[N−1]$a[N - 1]$\", where a[0]$a[0]$, a[1]$a[1]$, …$\\dots$, a[N−1]$a[N - 1]$ is some rearrangement of the numbers from the topmost row of the grid. With this move, the topmost row is removed and the new row created with the numbers a[0]$a[0]$, a[1]$a[1]$, …$\\dots$, a[N−1]$a[N - 1]$ from left to right is added to the bottom of the grid.\n\tRight move: \"R b[0]$b[0]$ b[1]$b[1]$ …$\\dots$ b[N−1]$b[N - 1]$\", where b[0]$b[0]$, b[1]$b[1]$, …$\\dots$, b[N−1]$b[N - 1]$ is some rearrangement of the numbers from the leftmost column of the grid. With this move, the leftmost column is removed and the new column created with the numbers b[0]$b[0]$, b[1]$b[1]$, …$\\dots$, b[N−1]$b[N - 1]$ from top to bottom is added to the right of the grid.\n\n\nRearrangement refers to changing the order of the numbers without adding or removing any of them, and it may preserve the original order.\n\nFor example, if the current grid is:\n\n\n\t\n\t\t\n\t\t\tRow/Column\n\t\t\t 0$0$ \n\t\t\t 1$1$ \n\t\t\t 2$2$ \n\t\t\n\t\t\n\t\t\t 0$0$ \n\t\t\t 2$2$ \n\t\t\t 4$4$ \n\t\t\t 6$6$ \n\t\t\n\t\t\n\t\t\t 1$1$ \n\t\t\t 8$8$ \n\t\t\t 1$1$ \n\t\t\t 5$5$ \n\t\t\n\t\t\n\t\t\t 2$2$ \n\t\t\t 7$7$ \n\t\t\t 3$3$ \n\t\t\t 0$0$ \n\t\t\n\t\n\n\nBy performing the move \"D 6$6$ 2$2$ 4$4$\", we will obtain the following grid:\n\n\n\t\n\t\t\n\t\t\tRow/Column\n\t\t\t 0$0$ \n\t\t\t 1$1$ \n\t\t\t 2$2$ \n\t\t\n\t\t\n\t\t\t 0$0$ \n\t\t\t 8$8$ \n\t\t\t 1$1$ \n\t\t\t 5$5$ \n\t\t\n\t\t\n\t\t\t 1$1$ \n\t\t\t 7$7$ \n\t\t\t 3$3$ \n\t\t\t 0$0$ \n\t\t\n\t\t\n\t\t\t 2$2$ \n\t\t\t 6$6$ \n\t\t\t 2$2$ \n\t\t\t 4$4$ \n\t\t\n\t\n\n\nHowever, if we instead execute move \"R 2$2$ 8$8$ 7$7$\", we would get:\n\n\n\t\n\t\t\n\t\t\tRow/Column\n\t\t\t 0$0$ \n\t\t\t 1$1$ \n\t\t\t 2$2$ \n\t\t\n\t\t\n\t\t\t 0$0$ \n\t\t\t 4$4$ \n\t\t\t 6$6$ \n\t\t\t 2$2$ \n\t\t\n\t\t\n\t\t\t 1$1$ \n\t\t\t 1$1$ \n\t\t\t 5$5$ \n\t\t\t 8$8$ \n\t\t\n\t\t\n\t\t\t 2$2$ \n\t\t\t 3$3$ \n\t\t\t 0$0$ \n\t\t\t 7$7$ \n\t\t\n\t\n\n\nFor N=3$N = 3$, the target grid would look like this:\n\n\n\t\n\t\t\n\t\t\tRow/Column\n\t\t\t 0$0$ \n\t\t\t 1$1$ \n\t\t\t 2$2$ \n\t\t\n\t\t\n\t\t\t 0$0$ \n\t\t\t 0$0$ \n\t\t\t 1$1$ \n\t\t\t 2$2$ \n\t\t\n\t\t\n\t\t\t 1$1$ \n\t\t\t 3$3$ \n\t\t\t 4$4$ \n\t\t\t 5$5$ \n\t\t\n\t\t\n\t\t\t 2$2$ \n\t\t\t 6$6$ \n\t\t\t 7$7$ \n\t\t\t 8$8$ \n\t\t\n\t\n\n\nYou aim to solve the puzzle with fewer than 3×N$3 \\times N$ moves. However, partial points may be awarded in case you use more moves or not solve the puzzle. Refer to the scoring section for details.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31226","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이 문제는 인터랙티브 문제입니다.\n\n고슴도치 귀엽지 않나요?\n\n\n\n귀여운 고슴도치!\n\n키파는 \"성게 그래프\"도 있는데 이렇게 귀여운 고슴도치에 대응하는 그래프가 없는 것은 아무래도 말이 안 된다고 생각해서, 고슴도치 그래프를 만들기로 했습니다.\n\n고슴도치 그래프는 다음과 같은 두 가지 성질을 만족하는 방향 없는 연결 그래프입니다. 이 그래프에는 self-loop(한 정점 v$v$와 같은 정점인 v$v$를 연결하는 간선)와 multiedge(서로 다른 두 정점 v$v$와 w$w$에 대해 v$v$와 w$w$를 연결하는 서로 다른 간선 e1$e_{1}$과 e2$e_{2}$)가 없습니다.\n\n\n\t사이클이 정확히 하나 존재합니다. 이 사이클을 고슴도치의 몸통이라고 부르겠습니다. 몸통의 크기는 사이클에 속한 정점의 개수입니다. 사이클이 항상 존재하기 때문에 몸통의 크기는 항상 3$3$ 이상이라는 점에 유의하세요.\n\t사이클에 속하지 않은 정점의 차수가 1$1$입니다.\n\n\n키파는 고슴도치 그래프를 열심히 키운 결과 각 그래프가 V=106$V = 10^{6}$개의 정점으로 이루어진 고슴도치 그래프를 총 N$N$개 가지게 되었습니다. 키파는 각 고슴도치 그래프를 다음과 같은 방법으로 어루만져 주기로 했습니다.\n\n\n\t각 노드에 붙어 있는 간선의 방향을 한 방향으로 정하되, 모든 노드가 나가는 방향의 간선을 정확히 하나 가지도록 정합니다. 임의의 고슴도치 그래프에 대해, 간선의 방향을 위 조건을 만족하도록 정하는 것이 항상 가능함을 증명할 수 있습니다.\n\t다음을 최대 M=900$M = 900$번 반복합니다.\n\t\n\t\t정점 v$v$와 5×1018$5 \\times 10^{18}$ 이하의 아무 양의 정수 x$x$를 고릅니다.\n\t\t v$v$에서 화살표를 x$x$번 따라가며 고슴도치 그래프를 쓰다듬습니다. 모든 노드가 나가는 방향의 간선이 하나 있기 때문에 도착 노드는 하나로 정해지며, 이 도착 노드가 어디인지 알 수 있습니다.\n\t\n\t\n\n\n과정 1은 키파가 이미 임의로 방향을 정했습니다.\n\n키파는 고슴도치 그래프를 어루만져 주는 것뿐만 아니라 각 고슴도치 그래프의 몸통의 크기를 알고 싶어했습니다. 하지만 키파는 이걸 생각하기에는 머리가 너무 아팠기 때문에, 과정 2를 여러분에게 맡기기로 했습니다.\n\n여러분은 각 고슴도치 그래프에 대해 과정 2를 시행한 후 얻은 정보로 각 고슴도치의 몸통의 크기를 알아내야 합니다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31191","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMirko i Slavko vole jesti burek za doručak pa su tako, jednom prilikom, kupili jedan burek sa sirom i jedan s mesom kako bi se osladili. Gledajući bureke kako se vrući dime na stolu, puneći im pritom nosnice zamamnim mirisima, nisu se nikako mogli dogovoriti tko će pojesti koji burek pa su ih odlučili podijeliti tako da svako od njih dobije pola jednog i pola drugog bureka.\n\nMirko se pohvalio da će jednim ravnim potezom noža prerezati oba bureka točno na dvije površinom jednake polovice. Pomozite Mirku da to i napravi prije no što se bureci sasvim ohlade.\n\n\n\nSlika odgovara prvom probnom primjeru\n\nSvaki od bureka ima oblik konveksnog poligona te je zadan nizom koordinata uzastopnih vrhova. Bureci leže razdvojeni na stolu, i to tako da prvi od njih u potpunosti leži lijevo od y-osi (dakle u II i III kvadrantu) dok drugi u potpunosti leži desno od y-osi (u I i IV kvadrantu).\n\nNapišite program koji će, na temelju niza koordinata vrhova oba poligona, odrediti jednadžbu pravca po kojem je moguće povući nož tako da se svaki od poligona razdvoji na dva dijela s jednakim površinama.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31176","content":"문제\n\nEvery traveler knows that they'll be rewarded with a treasure box after solving the puzzles in Inazuma, but few know that these puzzles are designed by Yae Miko, the Guuji of the Grand Narukami Shrine, to test whether the traveler is strong enough to save her friend Raiden Shogun and people of Inazuma.\n\nGrand Narukami Shrine\n\nAfter a traveler passes the test Yae will have to reset the puzzles to the initial state. But this time she has some troubles and even doubts that whether some of them are already broken.\n\nYae's puzzle can be considered as a weighted undirected complete graph \nG\n$G$ before resetting. We also denote the initial state as another weighted undirected complete graph \nH\n$H$. Both \nG\n$G$ and \nH\n$H$ have exactly \nn\n$n$ vertices, and these vertices are labeled from \n1\n$1$ to \nn\n$n$.\n\nTo reset graph \nG\n$G$ to \nH\n$H$ Yae can perform the following operation any number of times:\n\nFirst select four distinct vertices \na\n$a$, \nb\n$b$, \nc\n$c$, \nd\n$d$ and an integer \nx\n$x$. Note that she can select a different set of \na\n$a$, \nb\n$b$, \nc\n$c$, \nd\n$d$ and \nx\n$x$ each time.\nLet \n(i,j)\n$(i, j)$ be the edge between vertices \ni\n$i$ and \nj\n$j$. Increase the weight of \n(a,b)\n$(a, b)$, \n(a,c)\n$(a, c)$ and \n(a,d)\n$(a, d)$ by \nx\n$x$ and also decrease the weight of \n(b,c)\n$(b, c)$, \n(b,d)\n$(b, d)$ and \n(c,d)\n$(c, d)$ by \nx\n$x$.\n\nPlease help Yae determine whether she can change graph \nG\n$G$ to graph \nH\n$H$. If yes you also shall tell her the detailed steps."},{"problemId":"31242","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tНа Математическото състезание „Хитър Петър”, Габрово, 13 октомври 2012 г., на учениците от 6 клас била дадена следната задача:\n\n\nЗадача на Хитър Петър: Малкият Петърчо иска да обиколи всички полета на дъската с последователни ходове на коня, без да повтаря поле, в което вече е бил. Той намерил няколко решения за дъска с размери 3 х 4:\n\n\n\nНамерете решение за дъска с размери 4 х 5:\n\n\n\nПоставете в полетата числата 1, 2, ..., 20, така че от полето с числото 1 с ход на коня да се отива на полето с числото 2, от там в полето с числото 3 и т.н.\n\n\nПомогнете на журито при проверката на решенията. Напишете програма board, която въвежда решение на задачата на Хитър Петър и извежда до кое число е стигнал съответният състезател.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31192","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tLudi znanstvenik Matija radi eksperimente sa bijelim štakorima. Štakor se nalazi u kavezu čije je dno podijeljeno na n×n$n \\times n$ kvadrata. Svaki kvadrat obojen je u bijelu ili crvenu boju. Redovi su pobrojani brojevima od 1$1$ do n$n$ odozgo prema dolje, a stupci slijeva nadesno.\n\nŠtakor se sa svakog kvadrata može pomaknuti na njemu susjedni kvadrat s kojim ima zajedničku stranicu, ali se plaši crvenih kvadrata, tako da ni u kojem trenutku neće stati na kvadrat crvene boje.\n\nNakon što je štakor proveo neko vrijeme u kavezu i naučio kuda se smije kretati, Matija ga je prekrio kutijom koja je dimenzija k×k$k \\times k$ kvadrata i to tako da su njene stranice paralelne stranicama kaveza. Iako je štakor sada u mraku on se, začudo, i dalje kreće samo po bijelim kvadratima.\n\nDok se štakor kreće unutar kutije, to izvana nije moguće vidjeti. Izvana je vidljivo jedino kretanje kutije, a ono se događa kada se štakor nalazi uz rub kutije i pomakne se u smjeru u kojem se nalazi kutija. Tada se i kutija pomakne za jedan kvadrat u tom smjeru.\n\n\n\nIlustracija prvog probnog primjera – crni krug predstavlja štakora, a zatamnjeno područje kutiju.\n\nMatija je zapisao početnu poziciju kutije i za svaki njen pomak zapisao je znak 'L' ako se kutija pomakla ulijevo, 'R' ako se pomakla udesno, 'U' ako se pomakla prema gore, te 'D' ako se pomakla prema dolje.\n\nNapišite program koji će iz zapisanih podataka odrediti najmanji broj koraka koje je štakor mogao napraviti.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31243","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tТри автомобила тръгват на автопоход по определен маршрут по различно време и пристигат в крайната точка по различно време.\n\nНапишете програма time, която намира максималното и минималното време, за което е преодоляно разстоянието.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31227","content":"문제\n\n천문학자 수연이는 \nN\n$N$일 동안 총 \nM\n$M$개의 별을 관측하였고, 각 별의 좌표를 관측한 순서대로 기록하였다. 밤하늘을 2차원 좌표평면으로 이해할 때, 별은 좌표평면상의 한 점으로 표현할 수 있다.\n\n수연이가 어떤 날 관측한 별들의 대푯값 \nR\n$R$은 그날 관측한 별 중 가장 멀리 떨어진 두 별 사이의 거리다. 이때, 두 별의 좌표가 각각 \n(a,b)\n$(a,b)$, \n(c,d)\n$(c,d)$라면 두 별의 거리는 \n|a−c|+|b−d|\n$|a-c|+|b-d|$이다. 만약 어떤 날 수연이가 관측한 \n4\n$4$개의 별의 좌표가 순서대로 \n(1,3)\n$(1,3)$, \n(6,−3)\n$(6,-3)$, \n(−1,5)\n$(-1,5)$, \n(5,4)\n$(5,4)$라면, 그날의 대푯값은 \nR=|6−(−1)|+|−3−5|=15\n$R=|6-(-1)|+|-3-5|=15$이다. 관측한 별이 \n1\n$1$개인 날의 경우 대푯값이 \n0\n$0$임에 유의하자.\n\n수연이는 매일 하나 이상의 별들을 관측한 것은 기억하지만, 정확히 어느 날에 어떤 별을 관측하였는지는 잊었다. 어차피 기억도 안 나는 거, 수연이는 별의 관측 순서를 유지하면서, 매일 하나 이상의 별을 관측했다는 사실을 바탕으로 \nN\n$N$일간의 대푯값의 합이 최대가 되도록 별들의 관측 날짜를 적절히 구분하고 싶어졌다.\n\n예를 들어 \n3\n$3$일 동안 관측한 \n5\n$5$개의 별의 좌표가 순서대로 \n[p1,p2,…,p5]\n$[p_{1},p_{2},\\dots , p_{5}]$일 때, \n[p1,p2],[p3],[p4,p5]\n$[p_{1},p_{2}],[p_{3}],[p_{4},p_{5}]$와 같이 별들의 관측 날짜를 구분할 수 있지만 \n[p1,p3],[p2],[p4,p5]\n$[p_{1},p_{3}],[p_{2}],[p_{4},p_{5}]$나 \n[p1,p2],[p3,p4,p5]\n$[p_{1},p_{2}],[p_{3},p_{4},p_{5}]$와 같이 구분할 수는 없다.\n\n수연이가 관측한 별들의 관측 날짜를 적절히 구분한 뒤 \ni\n$i$번째 날의 대푯값을 \nRi\n$R_{i}$라고 할 때, \n∑i=1NRi\n$\\sum_{i=1}^{N}R_{i}$의 최댓값을 구하시오."},{"problemId":"31177","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tSince the traveler comes, People in Monstadt suddenly raise great interest in computer programming and algorithms, including Klee, the Spark Knight of the Knights of Favonius.\n\n\n\nSource: Genshin Impact Official\n\nBeing sent to solitary confinement by Jean again, Klee decides to spend time learning the famous Mo's algorithm, which can compute with a time complexity of O(n1.5)$\\mathcal{O}(n^{1.5})$ for some range query problem without modifications.\n\nTo check whether Klee has truly mastered the algorithm (or in fact making another bombs secretly), Jean gives her a problem of an integer sequence a1,a2,⋯,an$a_1, a_2, \\cdots, a_n$ along with some queries [li,ri]$[l_i, r_i]$ requiring her to find the mode number in the contiguous subsequence ali,ali+1,⋯,ari$a_{l_i}, a_{l_i + 1}, \\cdots, a_{r_i}$. The mode number is the most common number (that is to say, the number which appears the maximum number of times) in the subsequence.\n\nWith the help of Mo's algorithm, Klee solves that problem without effort, but another problem comes into her mind. Given an integer sequence a1,a2,⋯,an$a_1, a_2, \\cdots, a_n$ of length n$n$ and an integer k$k$, you can perform the following operation at most once: Choose two integers l$l$ and r$r$ such that 1≤l≤r≤n$1 \\le l \\le r \\le n$ and add k$k$ to every ai$a_i$ where l≤i≤r$l \\le i \\le r$. Note that it is OK not to perform this operation. Compute the maximum occurrence of the mode number of the whole sequence if you choose to perform (or not perform) the operation optimally.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31193","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tFrano već godinama radi fenomenalne zadatke za natjecanja u programskom jeziku Logo. Dugogodišnje izlaganje takvim aktivnostima može biti pogubno za psihofizičko zdravlje pa je tako naš Frano postao prvi borac protiv zlostavljanja kornjača nepotrebnim dizanjem i spuštanjem olovaka. Frani u čast, cilj ovog zadatka je podizanje svijesti o problemima s kojima se svakodnevno susreću Logo kornjače. . .\n\nTipični zadaci za programski jezik Logo uključuju crtanje pravokutnika po ekranu. Crtanje u programskom jeziku Logo vrši se pomicanjem kornjače.\n\nKornjača je u svakom trenutku zadana pozicijom i smjerom gledanja, a u svojim zubima drži olovku koja može biti spuštena ili podignuta. Ako je olovka spuštena, tada pomicanje kornjače ostavlja trag na ekranu.\n\nKornjača se na početku svakog programa nalazi na koordinatama (0,0)$(0, 0)$, gleda u pozitivnom smjeru y-osi, te drži olovku spuštenom. Njom ćemo u ovom zadatku upravljati isključivo ovim skupom naredbi:\n\n\n\tFD x – pomiče kornjaču za x$x$ piksela u smjeru gledanja.\n\tLT x – okreće kornjaču za x$x$ stupnjeva ulijevo.\n\tRT x -– okreće kornjaču za x$x$ stupnjeva udesno.\n\tPU – podiže olovku.\n\tPD – spušta olovku.\n\n\nZadan je skup pravokutnika stranica paralelnih s koordinatnim osima koje je potrebno nacrtati na ekranu. Kornjača smije više puta spuštenom olovkom preći preko istog segmenta ekrana, meñutim nije dopušteno da nacrta ništa više osim zadanih pravokutnika.\n\nNapišite program koji će odrediti koliko je najmanje puta potrebno podići olovku da bismo nacrtali zadani skup pravokutnika.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31204","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are given a rooted tree consisting of N$N$ vertices, along with integers R$R$ and M$M$. The vertices are numbered from 1$1$ to N$N$, with vertex 1$1$ as a root. Each of the other vertices has a single parent in the tree.\n\nIf a vertex s is chosen, it becomes infected along with all its descendants (i.e. vertices that can be reached by following edges downward from s) at a distance of R$R$ or less, where distance is calculated as the number of edges between vertices. A vertex u$u$ is considered reachable from vertex v$v$ if and only if neither of them is infected, and the number of infected vertices on the path between them does not exceed M$M$.\n\nFor each possible chosen vertex s$s$ (1≤s≤N$1 ≤ s ≤ N$), you must calculate the number of vertex pairs (u,v)$(u, v)$ such that 1≤u<v≤N$1 ≤ u < v ≤ N$ and u$u$ is reachable from v$v$ (and vice versa).\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31194","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMirko je na starom tavanu pronašao drvenu ploču i n$n$ čavala. Mirko je, brže bolje, zabio čavle u ploču. Ploču možemo predstaviti kao koordinatnu ravninu, a zabijene čavle kao točke na njoj. Nijedna dva zabijena čavla nemaju istu x$x$ koordinatu niti istu y$y$ koordinatu.\n\nKako bi se dalje zabavljao s novopronađenim stvarima, Mirko je sestri ukrao gipku gumicu za kosu, te je rastegao oko svih čavala i zatim je pustio. Gumica se, prirodno, stegla oko vanjskih čavala. Mirko zatim ponavlja sljedeći postupak sve dok je broj čavla u ploči veći od 2$2$:\n\n\n\tNa papir zapisuje površinu lika kojeg gumica opisuje.\n\tOdabire jedan od sljedećih čavala: najlijeviji, najdesniji, najgornji ili najdonji.\n\tOdabrani čavao izvlači iz ploče, a gumica se ponovo steže oko vanjskih čavala.\n\n\nNapišite program koji će izračunati brojeve zapisane na papir ako znamo koji čavao je Mirko odabrao u svakom koraku.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31178","content":"문제\n\nPaimon just invents a new sorting algorithm which looks much like bubble sort, with a few differences. It accepts a \n1\n$1$-indexed sequence \nA\n$A$ of length \nn\n$n$ and sorts it. Its pseudo-code is shown below.\n\nFunctions 1 The Sorting Algorithm\n\nfunction Sort(\nA\n$A$)\n    for \ni\n$i$ ← \n1\n$1$ to \nn\n$n$ do // \nn\n$n$ is the number of elements in \nA\n$A$ \n        for \nj\n$j$ ← \n1\n$1$ to \nn\n$n$ do\n            if \nai<aj\n$a_i < a_j$ then // \nai\n$a_i$ is the \ni\n$i$-th element in \nA\n$A$ \n                Swap \nai\n$a_i$ and \naj\n$a_j$ \n\nIf you don't believe this piece of algorithm can sort a sequence it will also be your task to prove it. Anyway here comes the question:\n\nGiven an integer sequence \nA=a1,a2,⋯,an\n$A = a_1, a_2, \\cdots, a_n$ of length \nn\n$n$, for each of its prefix \nAk\n$A_k$ of length \nk\n$k$ (that is, for each \n1≤k≤n\n$1 \\le k \\le n$, consider the subsequence \nAk=a1,a2,⋯,ak\n$A_k = a_1, a_2, \\cdots, a_k$), count the number of swaps performed if we call \nSORT(Ak)\n$\\text{SORT}(A_k)$."},{"problemId":"31179","content":"문제\n\nPaimon just learns the persistent segment tree and decides to practice immediately. Therefore, Lumine gives her an easy problem to start:\n\nGiven a sequence \na1,a2,⋯,an\n$a_1, a_2, \\cdots, a_n$ of length \nn\n$n$, Lumine will apply \nm\n$m$ modifications to the sequence. In the \ni\n$i$-th modification, indicated by three integers \nli\n$l_i$, \nri\n$r_i$ (\n1≤li≤ri≤n\n$1 \\le l_i \\le r_i \\le n$) and \nxi\n$x_i$, Lumine will change \nak\n$a_k$ to \n(ak+xi)\n$(a_k + x_i)$ for all \nli≤k≤ri\n$l_i \\le k \\le r_i$.\n\nLet \nai,t\n$a_{i, t}$ be the value of \nai\n$a_i$ just after the \nt\n$t$-th operation. This way we can keep track of all historial versions of \nai\n$a_i$. Note that \nai,t\n$a_{i,t}$ might be the same as \nai,t−1\n$a_{i,t-1}$ if it hasn't been modified in the \nt\n$t$-th modification. For completeness we also define \nai,0\n$a_{i, 0}$ as the initial value of \nai\n$a_i$.\n\nAfter all modifications have been applied, Lumine will give Paimon \nq\n$q$ queries about the sum of squares among the historical values. The \nk\n$k$-th query is indicated by four integers \nlk\n$l_k$, \nrk\n$r_k$, \nxk\n$x_k$ and \nyk\n$y_k$ and requires Paimon to calculate\n\n \n\n\n\n\n∑i=lkrk∑j=xkykai,j2\n$$\\sum\\limits_{i=l_k}^{r_k}\\sum\\limits_{j=x_k}^{y_k} a_{i, j}^2$$ \n\nPlease help Paimon compute the result for all queries. As the answer might be very large, please output the answer modulo \n109+7\n$10^9 + 7$."},{"problemId":"31025","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe restaurant you work for has recently changed management. It's going to close down, renovate and remodel, and open again under a new name with a new menu. Being the executive chef at the time, they come to you looking for help. They wish to redesign the kitchen to be more efficient and conform more to their new vision. They know you're a computer science student, too, so efficiency is practically your middle name.\n\nWhile designing the area for the dishwasher, they want to make sure that the outgoing side for clean plates can be subdivided in such a way that each plate will have its own designated spot. Management was hoping to be able to section off each area with either a horizontal or vertical divider so that it would be easy for a new employee to become accustomed to the new system.\n\nSince they want to spend as little money as possible, they need to know if the plates they are designing would all fit in the space they have laid out.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31244","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tЕдно число ще наричаме симетрично (огледално), ако първата му цифра е равна на последната, втората на предпоследната и т.н. От картинката на фиг.1 (а) числото 12 и огледалният му образ образуват симетричното число 1221.\n\nПримери за симетрични числа са дадени на фиг.1 (б). Забележете, че има симетрични числа с четен и нечетен брой цифри!\n\nНапишете програма sym, която по дадени три цифри A, B и C извежда най-малкото симетрично число, на което първите три цифри съвпадат с дадените три цифри.\n\n\n\nФиг. 1\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31228","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t2023 shake! 대회가 끝나고, 참가자들의 뒤풀이 행사가 시작되었다. 참가자들은 바닥에 거대한 원을 그린 뒤, 원의 둘레를 따라 동일한 간격을 두고 자리에 앉았다. 이대로 뒤풀이를 진행하려고 하였으나, 서로 너무 멀리 떨어진 사람끼리는 목소리가 잘 전달되지 않는다는 사실을 깨달았다.\n\n이를 해결하기 위해 당신은 실 전화기를 통해 사람들의 소통을 도와주기로 했다. 구체적으로 다음의 순서를 따른 시행을 통해 사람들을 이어준다.\n\n\n\t 1$1$번 이름표를 당신에게 붙인 뒤, 시계 방향으로 사람들에게 순서대로 각각 2$2$번부터 N$N$번까지 이름표를 붙여준다.\n\t 1$1$번 이름표를 가진 사람(즉, 당신)을 선택한다.\n\t선택한 참가자와 그로부터 시계방향으로 K$K$번째에 위치한 참가자의 둘 사이를 잇는 선분을 따라 실 전화기를 팽팽하게 연결해 준다.\n\t선택했던 참가자로부터 시계방향으로 K$K$번째에 위치한 참가자를 선택한다.\n\t새롭게 선택한 참가자가 이전에 한 번이라도 선택되었던 참가자라면 시행을 종료한다. 그렇지 않다면 3$3$번 시행으로 돌아간다.\n\n\n그런데 이때, 서로 다른 두 개의 실 전화기가 서로 교차하게 된다면 목소리의 전달이 방해된다는 사실을 알게 되었다. 원의 둘레를 따라 앉은 참가자의 수 N$N$과 정수 K$K$가 주어질 때, 원의 내부에서 서로 교차하게 되는 실 전화기 쌍의 수를 구해보자. 단, 사람이 위치한 곳에서는 실 전화기가 서로 만나지 않는다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31195","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tNova generacija internet protokola IPv6 definira IP adresu od 128$128$ bitova. Potpuni zapis IPv6 adrese sastoji se od 8$8$ grupa po 4$4$ heksadecimalne znamenke gdje su grupe odvojene znakom dvotočke (':'). Na primjer:\n\n2001:0db8:85a3:0000:0000:8a2e:0370:7334\n\nKako bi se skratio zapis IPv6 adresa, dozvoljena su neka pojednostavljenja potpunog zapisa.\n\n\n\t\n\tSve ili samo neke vodeće nule unutar grupe mogu se izostaviti, pa se tako gornja adresa može pojednostaviti kao:\n\n\t2001:db8:85a3:0:00:8a2e:370:7334\n\t\n\t\n\tDodatno, jedna ili više uzastopnih grupa jednakih nula može se zamijeniti dvostrukim znakom dvotočke (\"::\"). Gornja adresa tako postaje:\n\n\t2001:db8:85a3::8a2e:370:7334\n\n\tOvo pojednostavljenje moguće je učiniti samo jednom kako bi iz dobivenog zapisa bilo moguće jedinstveno odrediti adresu.\n\t\n\n\nNapišite program koji će za pravilno zapisanu IPv6 adresu odrediti njen potpuni zapis.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31245","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tПрез ноември в един МОЛ нямало много клиенти и продавачките се забавлявали, като играели следната игра: вземали по три стоки и правели от цените им табела с обща цена.\n\nЗа да намалят броя на цифрите, образуващи общата цена, решили, че ако краят на една цена завършва с цифра, с която започва следващата цена, ще пишат цифрата само един път и ще добавят символа апостроф ('), с който да отбелязват повторението.\n\nПосле разпечатвали табелата и цял ден я украсявали с маркери и пайети.\n\nНапример от цените 13, 17 и 72 получили общата цена 1317’2 и съответно табелата:\n\n\n\nВ края на деня украсената табела изглеждала така:\n\n\n\nВие сте състезател по програмиране и се разхождате в МОЛ-а. Когато виждате табелата, решавате да напишете програма sign, с която ако знаете цените на трите стоки, да намирате надписа върху табелата.\n\nВ програмата се въвеждат по три цени в зададения ред (без да ги размествате) и общата цена се получава по описаните правила.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31229","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t다음 조건을 만족하는 길이 N$N$의 수열 A={A1,A2,…,AN}$A=\\left\\{A_{1},A_{2},\\dots,A_{N}\\right\\}$를 출력하시오.\n\n 1≤i<j≤N$1\\leq i<j \\leq N$을 만족하는 모든 정수 i$i$와 j$j$에 대해서 다음 조건을 만족한다.\n\n\n\t Ai≠Aj$A_{i}\\neq A_{j}$이고 수열 A$A$의 모든 원소는 1$1$ 이상 109$10^{9}$ 이하의 정수이다.\n\t Ai+Aj$A_{i}+A_{j}$는 Ai×Aj$A_{i}\\times A_{j}$의 약수가 아니다.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31027","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t오토는 반쵸스시에서 곰치 커리를 대접받은 뒤, 그 보답으로 데이브에게 2×N$2\\times N$ 크기의 양식장을 만들어 주었다!\n\n\n\n\n\t데이브: 오...! 여기는 뭔가요?\n\t오토: 자네, 만날 물고기 잡아 오니라 꽤 고생하고 있는 것 같구먼?\n\t오토: 그래서 내가 어제 하루 만에 뚝딱 이 양식장을 만들어 버렸잖여!\n\t데이브: ... 하루 만에?\n\t오토: 내가 일단 (1,1)$(1, 1)$과 (2,N)$(2, N)$을 제외한 칸 (i,j)$(i, j)$에는 물고기를 Ai,j$A_{i,j}$마리씩 넣어 놨구먼.\n\t오토: 그런데 그냥 줄 수는 없쟈. 나랑 게임을 해서 자네가 얻은 만큼의 물고기를 주겠슈!\n\n\n... 그렇게 해서 데이브와 오토가 게임을 하게 되었다. 오토는 (1,1)$(1,1)$에 서 있고, 데이브는 (2,N)$(2,N)$에 서 있다. (1,1)$(1,1)$과 (2,N)$(2,N)$을 제외한 칸에는 물고기가 있다. 데이브와 오토는 다음과 같은 턴을 10100$10^{100}$회 반복한다.\n\n\n\t오토가 인접한 칸으로 이동한다.\n\t오토가 그 칸에 있는 물고기를 모두 수확해 가져간다. 오토가 칸을 떠나도 물고기는 다시 생기지 않는다.\n\t데이브가 인접한 칸으로 이동한다.\n\t데이브가 그 칸에 있는 물고기를 모두 수확해 가져간다. 데이브가 칸을 떠나도 물고기는 다시 생기지 않는다.\n\t이 과정에서 데이브와 오토는 같은 칸에 동시에 있을 수도 있다.\n\n\n데이브와 오토는 물고기를 최대한 많이 가져가려고 한다. 이때, 오토가 가져가는 물고기의 마릿수와 데이브가 가져가는 물고기의 마릿수를 구해야 한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31205","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou aim to assemble a team of N$N$ programmers. You've already scouted them and assessed that the skill level of the i$i$-th individual (1≤i≤N$1 ≤ i ≤ N$) is represented by the nonnegative integer s[i]$s[i]$. You've realized that what truly matters is the order in which you hire them.\n\nEach programmer is characterized by two additional integer values: workrate and motivation, both of which are 0$0$ upon their arrival but can increase after hiring new team members. When a new programmer is hired, the following events occur in the given order:\n\n\n\tThe new programmer joins the team with workrate and motivation initialized to 0$0$.\n\tThe workrate of each other previously hired programmer is increased by their own motivation value.\n\tThe motivation of each other previously hired programmer is increased by the skill level of the new hire.\n\n\nThe strength of the team is determined afterwards by the sum of the workrates of all the team members. Your objective is to calculate the maximum attainable team strength by optimizing the order of hiring.\n\nFor example, if you hire programmers with skill levels (0,2,2,3)$(0, 2, 2, 3)$ in this order, the hiring process will affect their values as follows:\n\n\n\t\n\t\t\n\t\t\tEvent\n\t\t\tWorkrates\n\t\t\tMotivations\n\t\t\n\t\t\n\t\t\tHiring with skill 0$0$ \n\t\t\t 0$0$ \n\t\t\t 0$0$ \n\t\t\n\t\t\n\t\t\tHiring with skill 2$2$ \n\t\t\t 0$0$ 0$0$ \n\t\t\t 0$0$ 0$0$ \n\t\t\n\t\t\n\t\t\tWorkrates update\n\t\t\t 0$0$ 0$0$ \n\t\t\t 0$0$ 0$0$ \n\t\t\n\t\t\n\t\t\tMotivations update\n\t\t\t 0$0$ 0$0$ \n\t\t\t 2$2$ 0$0$ \n\t\t\n\t\t\n\t\t\tHiring with skill 2$2$ \n\t\t\t 0$0$ 0$0$ 0$0$ \n\t\t\t 2$2$ 0$0$ 0$0$ \n\t\t\n\t\t\n\t\t\tWorkrates update\n\t\t\t 2$2$ 0$0$ 0$0$ \n\t\t\t 2$2$ 0$0$ 0$0$ \n\t\t\n\t\t\n\t\t\tMotivations update\n\t\t\t 2$2$ 0$0$ 0$0$ \n\t\t\t 4$4$ 2$2$ 0$0$ \n\t\t\n\t\t\n\t\t\tHiring with skill 3$3$ \n\t\t\t 2$2$ 0$0$ 0$0$ 0$0$ \n\t\t\t 4$4$ 2$2$ 0$0$ 0$0$ \n\t\t\n\t\t\n\t\t\tWorkrates update\n\t\t\t 6$6$ 2$2$ 0$0$ 0$0$ \n\t\t\t 4$4$ 2$2$ 0$0$ 0$0$ \n\t\t\n\t\t\n\t\t\tMotivations update\n\t\t\t 6$6$ 2$2$ 0$0$ 0$0$ \n\t\t\t 7$7$ 5$5$ 3$3$ 0$0$ \n\t\t\n\t\n\n\nThe team strength will be calculated as 6+2+0+0=8$6 + 2 + 0 + 0 = 8$. However, if you hire programmers in better order (2,2,3,0)$(2, 2, 3, 0)$, you will achieve a team strength of 7+3+0+0=10$7 + 3 + 0 + 0 = 10$.\n\n\n\t\n\t\t\n\t\t\tNew hire skill\n\t\t\tWorkrates\n\t\t\tMotivations\n\t\t\n\t\t\n\t\t\t 2$2$ \n\t\t\t 0$0$ \n\t\t\t 0$0$ \n\t\t\n\t\t\n\t\t\t 2$2$ \n\t\t\t 0$0$ 0$0$ \n\t\t\t 2$2$ 0$0$ \n\t\t\n\t\t\n\t\t\t 3$3$ \n\t\t\t 2$2$ 0$0$ 0$0$ \n\t\t\t 5$5$ 3$3$ 0$0$ \n\t\t\n\t\t\n\t\t\t 0$0$ \n\t\t\t 7$7$ 3$3$ 0$0$ 0$0$ \n\t\t\t 5$5$ 3$3$ 0$0$ 0$0$ \n\t\t\n\t\t\n\t\t\t \n\t\t\t \n\t\t\t \n\t\t\n\t\n\n\nFurthermore, over the course of the upcoming Q$Q$ days, you will receive notifications about changes in the skill level assessments of certain programmers. After day i$i$, the skill level of programmer x[i]$x[i]$ will be updated to y[i]$y[i]$ (which may match the previous value). This updated skill value will be used in the following days, until it potentially gets updated again.\n\nAfter each day, starting from today, your goal is to determine the maximum achievable team strength by hiring all N$N$ programmers, taking into account the assessed skill levels at that particular moment.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31196","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMali Ivica svake večeri šalje maloj Marici tajne podatke e-poštom. Oni znaju da Ivičino e-pismo na putu do Maričinog e-pretinca potpuno nezaštićeno prolazi preko više različitih računala u mreži, pa su se dogovorili da će svaku poruku Ivica šifrirati prema sljedećem algoritmu:\n\n\n\tNeka se poruka koju Ivica želi poslati Marici sastoji od n$n$ znakova.\n\tIvica prvo mora pronaći tablicu koja se sastoji od r$r$ redaka i s$s$ stupaca takvu da je r≤s$r ≤ s$ i da je n=rs$n = rs$. Ako postoji više takvih tablica, Ivica treba odabrati onu koja ima što je moguće više redaka.\n\tIvica zapisuje poruku u tablicu po recima odozgo prema dolje, a unutar retka slijeva nadesno. Tako u prvi red upisuje prvi dio poruke, u drugi red drugi dio poruke itd.\n\tPoruka koju Ivica šalje Marici dobiva se čitanjem tablice po stupcima slijeva nadesno, a unutar stupca odozgo prema dolje.\n\n\nLjubomorna Ines presrela je šifriranu e-poruku koju je Ivica poslao Marici. Napišite program koji će dešifrirati tajnu poruku.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31246","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t모바일 광고 시장에서 광고 지면의 권리는 실시간 경매를 통해 결정된다. 이 경매에서는 각 지면에 대해 광고를 게재하고자 하는 회사들이 입찰가를 제시하며, 최고 입찰가를 제시한 회사가 해당 지면의 광고 권리를 얻는다. 이 과정은 전 세계 수많은 광고지면을 실시간으로 분석하고 입찰하는 기술적 도전을 포함한다.\n\nMOLOCO는 고객사가 모바일 광고 시장에 접근할 수 있도록 도와주는 “MOLOCO 클라우드 DSP” 서비스를 운영한다. 이 서비스는 머신러닝을 기반으로 하여 초당 수백만 건 이상의 광고지면 입찰 요청을 처리한다. MOLOCO는 고객사들을 대신하여 입찰에 참여하며, 고객사가 최적의 가격으로 광고지면을 구매할 수 있도록 지원한다.\n\n당신은 MOLOCO에서 클라우드 DSP 서비스를 개선하는 일을 맡고 있으며, 당신의 목표는 과거 중요한 광고지면 N$N$개에 대한 입찰 데이터를 분석하여, 입찰 가격 결정 로직을 개선하는 것이다.\n\n각 광고지면 i$i$에 대해 MOLOCO가 제시한 입찰 가격 Ai$A_i$와 MOLOCO의 입찰가를 제외한 다른 모든 입찰가 중 최고 가격 Bi$B_i$가 주어진다. 당신은 MOLOCO가 모든 입찰가를 일괄적으로 X(≥0)$X(\\ge 0)$만큼 올렸을 때, (즉, MOLOCO의 입찰가를 Ai$A_i$에서 Ai+X$A_i+X$로 일괄적으로 올리는 것이다.) K$K$개 이상의 지면을 낙찰받게 되는 가장 작은 음이 아닌 정수 X$X$를 찾고자 한다. 단, 같은 지면에 대해 MOLOCO의 입찰가와 다른 회사의 최고 입찰가가 같을 경우 MOLOCO가 낙찰받는다고 가정한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31028","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t동현이와 정후는 밤하늘을 보고 있다.\n\n\n\t동현: 정후야, 저 밤하늘을 봐. 오리온자리야! 마치 길이가 N$N$인 두 순열이 교차하는 것 같지 않니?\n\t정후: 뭐라고?\n\t동현: 길이가 N$N$인 두 순열 A1,A2,⋯,AN$A_1, A_2, \\cdots, A_N$와 B1,B2,⋯,BN$B_1, B_2, \\cdots, B_N$을 생각해 보자. 수열 A$A$에서 제일 앞 i$i$개의 수를 고르고, B$B$에서 제일 앞 j$j$개의 수를 골라 일렬로 나열했을 때 길이 i+j$i+j$의 순열이 되는 경우는 몇 가지일까? i,j$i, j$의 범위는 0$0$ 이상 N$N$ 이하야.\n\t정후: 간단하지! 그건...\n\n\n...이라고 대답해 버렸다. 정후를 도와 동현이의 퀴즈를 풀어 주자. 단, 길이 M$M$의 순열이란 0$0$ 이상 M$M$ 미만의 수가 정확히 한 번씩 등장하는 수열이다. 길이 0$0$의 수열도 순열이다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31230","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n현대모비스는 글로벌 자동차 부품 기업으로 자율주행, 커넥티비티, 전동화 분야에 역량을 집중해 스마트 모빌리티 시대를 선도하고 있습니다.\n\n현대모비스는 앞으로 미래 모빌리티 산업에서 소프트웨어와 하드웨어를 결합한 차별화된 모빌리티 솔루션을 제공하는 선도기업으로 도약하기 위해 노력하고 있으며, 이러한 연구개발과 생산능력 등 핵심역량을 바탕으로 스마트 모빌리티, UAM, 로보틱스 사업분야로 비즈니스를 확대해 나가고 있습니다.\n\n\n민겸이와 시은이는 이런 꿈의 직장인 현대모비스에 입사하기 위해 모비스터디라는 이름의 스터디를 진행하기로 했다. 하지만, 민겸이와 시은이는 서로 다른 도시에 살고 있기 때문에, 스터디를 진행할 장소를 정해야 한다.\n\n민겸이와 시은이는 1$1$번부터 N$N$번까지 번호가 부여된 N$N$개의 도시와 서로 다른 두 도시를 잇는 M$M$개의 양방향 도로가 있는 나라에 살고 있다. 도로마다 통행하는 데 걸리는 시간이 양의 정수로 존재하고, 각 도시에서 도로를 통해 항상 다른 모든 도시로 이동할 수 있다. 또한, 같은 도시를 출발지와 도착지로 두고 있는 도로는 존재하지 않으며, 임의의 두 도시를 잇는 도로는 최대 1개 존재한다.\n\n민겸이는 A$A$번 도시, 시은이는 B$B$번 도시에 살고 있다. 민겸이는 시은이와 모비스터디를 위해 둘이서 만날 도시를 정하려고 한다. 최단 경로 문제를 풀던 민겸이는 약속 장소를 정할 때, A$A$ 도시에서 B$B$ 도시까지 이동하는 최단 경로 위에 존재하는 도시로 약속 장소를 정하는 것이 좋다고 생각했다. 이때, 최단 경로가 여러 개라면 그중 하나 위에만 존재해도 된다. A$A$번 도시와 B$B$번 도시 또한 약속 장소가 될 수 있음에 유의하자.\n\n하지만, 민겸이는 이러한 조건을 만족하는 도시가 어디 있는지 모른다. 민겸이는 이 문제를 풀기에는 너무 귀찮았기 때문에, 여러분에게 해결을 부탁했다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31197","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tSlon Mirko živi pokraj velikog jezera na kojem se nalazi n$n$ lopoča. Jezero možemo zamisliti kao koordinatnu ravninu, pri čemu se lopoči nalaze u nekim točkama s cjelobrojnim koordinatama.\n\nMirko svakog dana čim se probudi obavlja svoju jutarnju gimnastiku tako da na osebujan način veselo skakuće po lopočima duž jezera. Iz samo njemu poznatih razloga, Mirko u svakom koraku može skočiti samo na one lopoče koji imaju obje koordinate veće od koordinata lopoča na kojem se trenutno nalazi. Drugim riječima, Mirko sa lopoča sa koordinatama (x1,y1)$(x_1, y_1)$ može skočiti na lopoč sa koordinatama (x2,y2)$(x_2, y_2)$ samo ako je x2>x1$x_2 > x_1$ i y2>y1$y_2 > y_1$. Prvi lopoč u nizu Mirko odabire proizvoljno.\n\nMirko voli jutarnju gimnastiku i želio bi da ona traje što je dulje moguće, a još i svaki dan želi skakati na drugačiji način.\n\nNapišite program koji će, za zadani raspored lopoča, odrediti duljinu najdužeg niza lopoča koji zadovoljava Mirkove uvjete. Također, zanima nas broj takvih najdužih nizova, međutim, kako taj broj može biti vrlo velik, potrebno je odrediti samo njegov ostatak pri dijeljenju s 1000000007$1\\,000\\,000\\,007$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31231","content":"문제\n\n요정의 나라에서 마카롱 만들기 대회가 열렸다! 마카롱은 두 개의 구워진 코크 사이에 원하는 필링을 넣어서 만드는 디저트이다. 룰루는 대회에 참가하기 위해서 우선 마카롱에 사용될 코크들을 만들었다. 룰루는 빨간색 코크 \nN\n$N$개를 만들어서 바닥에 두었다. \ni\n$i$번째 빨간색 코크의 크기는 \nai\n$a_{i}$이다. 또한 \nN\n$N$개의 파란색 코크도 만들었으며, \ni\n$i$번째 파란색 코크의 크기는 \ni\n$i$번째 빨간색 코크의 크기와 같다.\n\n마카롱 만들기 대회에는 특별한 룰이 있다. 각 마카롱의 크기는 \n1\n$1$ 이상 \n9\n$9$ 이하의 정수여야 하고, 마카롱의 총개수는 \nN\n$N$개여야 한다. 참가자가 받게 되는 점수는 \n1\n$1$번째부터 \nN\n$N$번째까지의 마카롱의 크기를 순서대로 적었을 때 만들어지는 수이다. 예를 들어서 \nN=4\n$N = 4$인 경우 \ni\n$i$번째 마카롱의 크기를 \nmi\n$m_{i}$라고 하면, \n(m1,m2,m3,m4)=(1,4,2,3)\n$(m_{1}, m_{2}, m_{3}, m_{4}) = (1, 4, 2, 3)$일 때 참가자가 얻는 점수는 \n1423\n$1423$점이다. 이때, 얻은 점수가 가장 큰 참가자가 대회에서 우승한다.\n\n룰루는 바닥에 놓아둔 \ni\n$i$번째 빨간색 코크에 각각 \ni\n$i$번째 파란색 코크를 올려서 마카롱 만들기를 마무리 지으려고 했으나, 대회에서 이기기 위해서 꼼수를 부리기로 했다. 바닥에 놓아둔 빨간색 코크의 순서는 유지하되, 파란색 코크는 원하는 위치의 빨간색 코크 위에 마음대로 올리기로 하였다. 이렇게 \nN\n$N$개의 마카롱을 만든 후, 빨간색 코크와 파란색 코크 중 크기가 더 큰 코크를 위로 가게 두면 요정들은 더 큰 코크의 크기가 해당 마카롱의 크기라고 착각하게 될 것이다.\n\n그러나 이를 옆에서 요정 픽시가 지켜보고 있었고, 꼼수를 허용하는 대신 룰루가 얻은 점수가 팰린드롬수가 되도록 마카롱을 만들어 달라고 요청했다. 팰린드롬수는 숫자들을 앞에서부터 읽은 것과 뒤에서부터 읽은 것이 같은 수이다. 예를 들어 \n12321\n$12321$은 팰린드롬수지만, \n3141\n$3141$은 팰린드롬수가 아니다. 픽시의 요청을 받아들이면서 룰루가 얻을 수 있는 최대 점수를 구해보자."},{"problemId":"31029","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t서울의 명소 서울과학고등학교에는 1부터 N$N$까지의 번호가 매겨진 건물이 M$M$개의 길로 연결되어 있다. 길은 서로 다른 두 건물을 양방향으로 연결하고, 두 건물을 잇는 길은 최대 하나이다. 또한 서울과학고등학교는 어떤 두 건물 사이도 연결된 길만을 이용하여 오갈 수 있다. 정후는 서울과학고등학교를 여러 조각으로 분열시킨 후 서울과학고등학교를 지배할 계획을 세우고 있다. 구체적인 계획은 다음과 같다.\n\n\n\t서로 다른 세 건물 a,b,c$a, b, c$를 고른다. \n\t건물 a,b,c$a, b, c$ 중 서로 다른 두 건물을 연결하고 있는 길이 있다면, 그러한 길들을 모두 막아서 더 이상 사용할 수 없도록 한다.\n\t남아있는 길만을 이용하여 서로 이동할 수 없는 두 건물이 있다면 정후의 계획이 성공한 것이다.\n\n\n정후의 계획이 성공하기 위해 골라야 할 세 건물의 집합 {a,b,c}$\\{ a, b, c\\}$의 가짓수를 구해 주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31247","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t백준 온라인 저지의 신년대회 Hello, BOJ 2024!의 개최일은 2024년 1월 14일이다. 정휘는 대회가 개최된다는 사실이 기뻐 제목을 뚫어져라 보다가 2024가 무언가 특별하다는 사실을 깨달았다.\n\n그렇다. τo(n)$\\tau_o(n)$을 n의 약수이면서 홀수인 양의 정수의 개수, τe(n)$\\tau_e(n)$을 n$n$의 약수이면서 짝수인 양의 정수의 개수라고 할 때, τe(2024)=3τo(2024)$\\tau_e(2024) =3\\tau_o(2024)$을 만족한다. 다음에 이런 연도가 오려면 16년 뒤인 2040년이 되어야 한다.\n\n τe(x)=K×τo(x)$\\tau_e(x) =K\\times\\tau_o(x)$를 만족하는 양의 정수 x$x$를 K$K$-특별한 수라고 정의하자. 양의 정수 N$N$과 음이 아닌 정수 K$K$가 주어진다. N$N$ 이하의 양의 정수 중 K$K$-특별한 수의 개수를 출력하는 프로그램을 작성하시오.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31198","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tObližnji pašnjak možemo predstaviti pravokutnom pločom koja se sastoji od 106$10^6$ redaka i 106$10^6$ stupaca. Retci su numerirani brojevima od 1$1$ do 106$10^6$ odozgo prema dolje, dok su stupci numerirani brojevima od 1$1$ do 106$10^6$ slijeva nadesno.\n\nKrdo od n$n$ krava nalazi se pašnjaku i to tako da se svaka krava nalazi u nekom jediničnom kvadratu. Na pašnjaku se također nalazi i m$m$ tratinčica koje se također nalaze u jediničnim kvadratima. Konačno, na pašnjaku se nalazi i f$f$ pravokutnih ograda čije se stranice protežu rubovima jediničnih kvadrata. Ograde se ne sijeku niti se diraju, međutim ograda se može u potpunosti nalaziti unutar područja koje ograđuje neka druga ograda.\n\nSve su krave kilave te se mogu kretati samo u dva smjera – dolje ili desno. Na svojim putovanjima mogu stati na bilo koje polje (uključujući i ona na kojima su druge krave ili tratinčice), ali ne mogu prelaziti preko ograde.\n\nZa svaku kravu, odredite ukupan broj tratinčica koje ta krava može posjetiti šetnjom iz svoje početne pozicije.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31199","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tU pravokutnoj mreži podijeljenoj na jedinične kvadrate uredno je posloženo n$n$ geometrijskih likova. Likovi se nalaze unutar uzastopnih jediničnih kvadrata istoga retka i to tako da se unutar svakog jediničnog kvadrata nalazi točno jedan lik. Likovi mogu biti:\n\n\n\tKvadrat kojem su stranice savršeno poravnate sa stranicama jediničnih kvadrata mreže.\n\tKrug koji je upisan u jedinični kvadrat.\n\tJednakostranični trokut kojem jedna stranica odgovara donjoj stranici jediničnog kvadrata mreže.\n\n\n\n\nLikovi iz prvog probnog primjera i njihov konveksni obris\n\nNeformalno, konveksni obris rasporeda likova je najkraća linija koja zatvara sve likove. Formalnije, radi se o opsegu konveksne ljuske unije svih likova.\n\nZa dani raspored likova, odredite duljinu njihovog konveksnog obrisa.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31232","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t당신은 세계적으로 인기 있는 전쟁 시뮬레이션 게임 shake!를 플레이하고 있다. 게임 내에는 1$1$번부터 N$N$번까지 번호가 매겨져 있는 N$N$개의 도시가 있으며 각 도시는 전투력을 가진다. 또한, 서로 다른 두 도시를 양방향으로 잇는 N−1$N-1$개의 도로가 있으며 도로를 따라 임의의 도시 간 이동이 가능하다.\n\n당신은 세 국가를 건국하여 전쟁 시뮬레이션을 진행하려고 한다. 각 국가는 적어도 하나의 도시를 포함해야 하며 각 도시는 정확히 하나의 국가에 포함되어야 한다. 또한, 다른 국가의 도시를 거치지 않으면서 도로를 따라 국가 내 임의의 도시 간 이동이 가능해야 한다.\n\n어떤 국가가 지나치게 강력하여 쉽게 삼국을 통일하면 게임의 재미가 떨어지므로 전투력을 균형 있게 분배하는 것이 중요하다. 국가의 전투력은 국가에 포함된 모든 도시의 전투력의 합으로 정의된다. 고민 끝에 당신은 세 국가의 전투력을 각각 a,b,c$a,b,c$라 할 때, |a−b|+|b−c|+|c−a|$\\left|a-b \\right| + \\left|b-c \\right| + \\left|c-a \\right|$를 최소로 하는 것이 전투력을 균형 있게 분배하는 방법이라고 결론 지었다. 삼국의 전투력을 균형 있게 분배하시오.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31030","content":"문제\n\n길이 \nN\n$N$의 순열은 \n1,2,⋯,N\n$1, 2, \\cdots , N$이 정확히 한 번 등장하는 수열이다. 예를 들어, \n[2,3,1,4]\n$[2, 3, 1, 4]$나 \n[6,4,5,1,2,3]\n$[6, 4, 5, 1, 2, 3]$은 모두 순열이지만 \n[1,2,2]\n$[1, 2, 2]$나 \n[1,2,3,5]\n$[1, 2, 3, 5]$는 순열이 아니다. 길이 \nN\n$N$의 순열 \nA\n$A$와 길이 \nN\n$N$의 수열 \nX\n$X$가 주어진다.\n\n다음 조건에 맞는 길이 \nN\n$N$의 수열 \nB\n$B$ 중에서 \nX1B1+X2B2+⋯+XNBN\n$X_1 B_1 + X_2 B_2 + \\cdots + X_N B_N$의 최댓값을 출력하라.\n\n \nB\n$B$의 각 원소는 \n1\n$1$ 이상, \nN\n$N$ 이하의 정수이다.\n \n1≤i≤N\n$1 \\le i \\le N$인 모든 양의 정수 \ni\n$i$에 대하여 \nABi=BAi\n$A_{B_i}=B_{A_i}$ \n\n모든 순열 \nA\n$A$에 대해 위 조건을 만족하는 수열 \nB\n$B$가 하나 이상 존재한다는 것을 증명할 수 있다."},{"problemId":"31206","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tСашка много обича операцията деление. Дотолкова я обича, че тя измисли задача, която да даде на Есенния турнир по информатика, свързана само и единствено с нея. Тя включва любимата си редица от N$N$ цели, положителни числа a1$a_1$, a2$a_2$, …$\\dots$, aN$a_N$ и Q$Q$ въпроса, съответно i$i$-тият от тях характеризиран от три цели положителни числа li$l_i$, ri$r_i$ и di$d_i$. Въпросите са за броя числа на позициите от li$l_i$ до ri$r_i$ в редицата, които са делители или са кратни на di$d_i$. Тъй като времето тече, а Вие копнеете за първото място, Вие се захващате да напишете програма divide.cpp, която да отговори на въпросите.\n\n \n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31248","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t3+1 하노이 탑 게임은 가로 방향으로 일렬로 놓인 4개의 기둥과 크기가 서로 다른 N$N$개의 원판을 이용한 게임이다. 편의상 왼쪽에 있는 기둥부터 차례대로 A, B, C, D라고 하자.\n\n처음에는 기둥 A에 크기가 가장 큰 원판이 아래에 오도록 모든 원판이 크기 순서대로 쌓여 있다. 이 게임의 목표는 아래 규칙을 지키면서 모든 원판을 기둥 D로 옮기는 것이다.\n\n\n\t한 번에 1개의 원판만 옮길 수 있다.\n\t어떤 기둥의 맨 위에 있는 원판만 옮길 수 있다.\n\t작은 원판 위에 큰 원판을 놓을 수 없다.\n\t기둥 D에 있는 원판을 다른 기둥으로 옮길 수 없다.\n\t기둥 A, B, C에 있는 원판은 위 조건을 어기지 않는 한 자유롭게 옮길 수 있다.\n\n\n기둥 A에 있는 N$N$개의 원판을 모두 기둥 D으로 옮기기 위해 필요한 최소 이동 횟수를 구하고, 그러한 이동 방법을 아무거나 하나 출력하시오.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31233","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t민겸이는 새로운 관광 상품을 기획하려고 한다. 민겸이가 기획하려고 하는 관광 상품은 여러 명소를 관광하는 코스이다. 민겸이가 관광 상품에 넣을 수 있는 명소는 1$1$번 명소부터 N$N$번 명소까지 총 N$N$개가 있으며, 각 명소는 양의 정수로 표현 가능한 아름다움을 가지고 있다. 민겸이는 관광 상품에 명소를 넣을 때, 연속된 번호의 명소만을 넣을 수 있다. 예를 들어, 민겸이는 3$3$번, 4$4$번, 5$5$번 명소를 관광 상품에 넣을 수 있지만, 2$2$번, 4$4$번, 5$5$번 명소를 관광 상품에 넣으면서 3$3$번 명소를 제외할 수는 없다. 또한 민겸이는 관광 상품에 두 개 이상의 명소를 넣는다.\n\n민겸이는 관광객이 관광 상품을 이용했을 때 얼마나 만족도를 얻는지 알아냈다. 관광객은 민겸이가 기획한 관광 상품의 명소들의 아름다움의 중앙값만큼의 만족도를 얻는다. 중앙값이란 어떤 K$K$개의 수들에 대해 그 수들을 비내림차순으로 정렬했을 때 ⌊K+12⌋$\\lfloor \\frac{K+1}{2}\\rfloor$번째 수를 말한다. 비내림차순이란, 각각의 수가 바로 앞에 있는 수보다 크거나 같은 경우를 말한다.\n\n민겸이는 이 사실에 기반하여 관광객의 만족도를 최대화할 수 있는 관광 상품을 개발하였다. 민겸이가 개발한 관광 상품의 만족도가 얼마인지 알아보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31031","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t마비노기에는 가방 안에 담을 수 있는 물건의 면적이 한정되어 있기 때문에, 정후는 마비노기를 하다가 가방 공간이 턱없이 부족해졌다. 마비노기에서 R×C$R\\times C$ 크기의 가방은 R$R$행 C$C$열의 격자 RC$RC$ 개로 이루어진 직사각형 모양이다. 또한, x×y$x\\times y$ 크기의 물건은 가방에서 x$x$행 y$y$열의 연속한 격자 공간을 차지한다. 물건은 회전할 수 없고, 서로 다른 물건은 서로 겹칠 수 없으며, 가방 경계를 벗어날 수 없다. 정후는 직사각형 모양 가방을 정리해 담을 수 있는 물건의 가치의 합을 최대화하고자 한다.\n\n처음에 정후는 물건이나 가방을 가지고 있지 않다.\n\n정후는 Q$Q$ 회에 걸쳐 물건을 새로 습득하거나 버리거나, 가방을 새로 구매하거나 버린다. 이는 다음과 같은 형식으로 기록된다.\n\n\n\t1 R C \t: 정후가 R×C$R\\times C$ 크기의 가방을 새로 구매한다. 이 가방을 다른 가방 안에 넣을 필요는 없으며, 가방을 구매하는 데 드는 비용은 생각하지 않는다.\n\t2 x y w \t: 정후가 x×y$x\\times y$ 크기, 가치 w$w$의 물건을 습득한다. 한 번이라도 습득한 물건의 가치는 모두 서로 다르다.\n\t3 e \t: e$e$번 기록에서 구매한 가방이나 습득한 물건을 버린다.\n\n\n정후는 매 기록 이후 가방에 담을 수 있는 물건의 가치의 합의 최댓값을 알고 싶다. 기록마다 가방에 물건을 담는 방법은 독립이다. 정후를 도와주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31249","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n현대모비스는 기술연구소(경기도 용인)에 400여 명의 연구원들이 소프트웨어 직무교육을 동시에 이수할 수 있는 소프트웨어 아카데미를 2018년부터 운영하고 있습니다. 현재 800여 명 수준인 국내 기술연구소의 소프트웨어 설계 인원을 2025년까지 약 4천 명으로 5배 이상 확충할 방침입니다.\n\n국내 연구소의 소프트웨어 인력 육성, 확충과 더불어 인도연구소를 소프트웨어 전문 글로벌 연구 거점으로 확대하여 운영하고 있습니다.\n\n또한 국내 부품업계 최초로 2018년 빅데이터팀을 신설하여 빅데이터와 인공지능을 연구개발에 적극 활용하고 있습니다.\n\n\n현대모비스가 새롭게 건설한 주행시험장에서 두 종류의 인공지능 소프트웨어를 실차에 장착해 검증하고 있다. 각 소프트웨어는 전방 레이더와 코너 레이더에 연동되어 있다. 주행시험장에는 총 n+m$n+m$대의 차가 있는데, 그중 전방 레이더가 장착된 차는 n$n$대이고, 다른 m$m$대에는 코너 레이더가 장착되어 있다.\n\n이 주행시험장은 크게 동쪽과 서쪽 두 부분으로 나뉜다. 처음에 모든 차는 동쪽 주행시험장 안에서만 주행하고 있고, 당신도 동쪽 주행시험장에서 차들을 모니터링하고 있다. 당신은 당신이 있는 쪽의 주행시험장만 모니터링할 수 있고, 반대쪽 주행시험장은 모니터링할 수 없다.\n\n아직 서로 다른 종류의 레이더끼리의 호환을 위한 기능을 아직 장착하지 않았기 때문에, 당신이 모니터링하지 않는 주행시험장에 서로 다른 종류의 레이더가 장착된 차량이 동시에 존재하면 차들이 주행 시험을 멈출 것이다. 당신의 목표는 차들이 주행 시험을 멈추지 않게 하면서 모든 차를 서쪽 주행시험장으로 이동시키는 것이다.\n\n구체적으로, 동쪽 주행시험장과 서쪽 주행시험장을 잇는 길이 있다. 당신은 최소 0$0$대, 최대 k$k$대의 차를 동시에 끌고 한 주행시험장에서 다른 쪽 주행시험장으로 이동할 수 있다.\n\n예를 들어 처음에 동쪽 주행시험장에 전방 레이더 3$3$대와 코너 레이더 2$2$대가 있고, k=2$k=2$라고 하자. 그러면 당신은 코너 레이더가 장착된 차량 2$2$대와 같이 길을 건너 서쪽 주행시험장으로 움직일 수 있다. 당신은 차를 끌고 움직인 후에 서쪽 주행시험장을 모니터링 할 수 있다. 마찬가지로, 당신은 다시 2$2$대 이하의 차를 끌고 서쪽 주행시험장에서 동쪽 주행시험장으로 움직인 다음 동쪽 주행시험장을 모니터링할 수 있다.\n\n주행 시험이 멈추는 일이 없이 차를 모두 서쪽 주행시험장으로 옮기기 위한 k$k$의 최솟값을 구하고, 이때 당신이 길을 건너야 하는 최소 횟수를 출력하시오.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31234","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t당신은 shake! 대회의 네트워크 관리자다. 모든 네트워크의 사용은 예약 큐에 등록 후 당신의 승인을 받아 이루어진다.\n\n놀랍게도 네트워크는 트리 구조의 그래프이다. 네트워크의 각 정점은 1$1$번부터 N$N$번까지 번호가 부여되어 있고, 모든 간선은 양방향이다.\n\n각 예약은 x,y,w$x,y,w$로 표현된다. 각 정점의 초기 대역폭 사용량은 0$0$이며, 어떤 예약이 승인되면 x$x$번 정점과 y$y$번 정점을 잇는 최단 경로에 포함되는 모든 정점의 대역폭 사용량이 w$w$만큼 증가한다. 이때 최단 경로는 양 끝의 x$x$번 정점과 y$y$번 정점을 포함한다.\n\n그런데 각 정점은 한계 대역폭이 있어 대역폭을 과다하게 사용하면 전체 서버가 다운된다. 이것은 네트워크 관리자로서 용납할 수 없는 일이다. 즉, 어떤 정점의 대역폭 사용량도 그 정점의 한계 대역폭을 넘으면 안 된다. 또한 큐의 순서는 중요하기 때문에, 앞선 예약을 받지 않고 이후 예약을 승인할 수 없다. 예를 들어 1$1$번, 2$2$번, 3$3$번 예약을 받거나 아무 예약도 받지 않을 수 있지만, 1$1$번, 3$3$번 예약만 받거나 2$2$번, 3$3$번 예약만 받을 수는 없다.\n\n승인할 수 있는 최대 예약 수를 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31032","content":"문제\n\n경기과학고등학교는 연말을 맞아 대학습실에 설치되어 있던 나무를 부활시켜 크리스마스 트리를 설치했다! 이번에 설치한 트리 \nT\n$T$는 정점이 \nN\n$N$개이고, \ni\n$i$번 정점의 내구성이 \nAi\n$A_i$이다. 정점이 \nN\n$N$개인 트리는 간선이 \nN−1\n$N-1$개인 연결 그래프이다. 각 정점의 내구성은 \n1\n$1$ 이상 \nK\n$K$ 이하이다. \nT\n$T$의 부분 트리는 \nT\n$T$의 하나 이상의 정점과 0개 이상의 간선을 골라 만든 트리를 의미한다. 정점이 하나인 그래프도 트리이다.\n\n정후: 동현아, 크리스마스 트리야!\n동현: 그렇네! 이 트리 \nT\n$T$의 부분 트리 \nT′\n$T'$가 썩어서 내구성 \nAi≤j\n$A_i \\leq j$인 모든 정점 \ni\n$i$와 그 정점에 연결된 간선이 없어지게 되면, \nT′\n$T'$는 \nfj(T′)\n$f_j(T')$ 개(단, 모두 없어진다면 \nfj(T′)=0\n$f_j(T')=0$)로 분할되겠지?\n정후: 그렇구나! 그렇다면 \nT\n$T$의 모든 부분 트리 \nT′\n$T'$에 대해 \nfj(T′)\n$f_j(T')$의 합을 \ngj(T)\n$g_j(T)$라고 할 때, \n∑j=1Kgj(T)\n$\\sum_{j=1}^K g_j(T)$의 값을 \n998244353\n$998\\,244\\,353$으로 나눈 나머지는 얼마일까?\n동현: 아! 그건 \nO(N2)\n$O(N^2)$ 미만에 해결할 수 있을 것 같아!\n\n어떻게 해결한다는 걸까? 여러분이 한번 풀어 보자."},{"problemId":"31033","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이 문제는 투 스텝 문제로, 각 테스트 케이스마다 프로그램이 총 두 번 실행된다. 이에 대한 자세한 정보는 채점 방법 문단을 참조하라.\n\n영우와 정후는 은행의 금고를 털어 돈을 버는 금고 털이이다. 오늘은 총 T$T$ 개의 은행의 금고를 털려고 한다. 한 금고를 털 때에는 먼저 정후가 은행 시스템에 침입해 1018$10^{18}$ 이하의 정수인 금고의 비밀번호를 알아내고, 이것을 TTS(Tree Transmission System)를 이용하여 영우에게 전달한다. 영우가 모든 은행의 올바른 비밀번호를 알아내고 금고를 무사히 턴다면 두 사람은 행복하게 성과급 파티를 즐기고, 그렇지 않다면 은행의 엄격한 보안 시스템에 의해 체포되어 철창 신세가 된다. 이렇게 중요한 작전을 실행에 옮기기 전, 두 사람은 비밀리에 다음과 같은 작전 회의를 했다.\n\n\n\t영우가 은행에 진입하기 전에, 정후와 상의하여 비밀번호를 전달할 규칙을 정한다. 두 사람은 비밀번호가 1018$10^{18}$ 이하의 정수라는 사실을 알고 있다.\n\t영우가 은행에 진입하고, 정후가 은행 시스템에 침입하여 금고의 비밀번호를 알아낸다. 정후는 영우와 사전에 정한 규칙에 따라 TTS에 전달할 트리를 만든다. 이때 트리는 다음의 조건에 맞게 만든 후 TTS에 정점의 개수와 간선의 목록을 전달한다.\n\t\n\t\t트리의 정점의 수는 1$1$과 100$100$ 사이의 정수이고, 트리의 크기가 N$N$일 때 트리의 정점은 1$1$부터 N$N$ 이하의 양의 정수이다.\n\t\t간선이 네 개 이상 연결된 정점이 없다.\n\t\n\t\n\t그런데 TTS에는 치명적인 버그가 있어서, 트리를 전달할 때 최대 하나의 간선이 제거될 수 있다. 이렇게 되면 트리는 하나 이상의 연결 요소(connected component)로 분리되는데, TTS는 그중 크기가 가장 큰 것 중 하나를 임의로 고르고 나머지 연결 요소들은 제거한다. 남은 연결 요소의 정점 수를 N′$N'$이라 할 때, TTS는 고른 연결 요소의 정점의 번호를 1,2,⋯N′$1, 2, \\cdots N'$으로 다시 배정한다.\n\tTTS는 N′$N'$과 간선의 목록을 영우에게 전달한다. 이때 전달하는 간선의 순서는 TTS가 임의로 정한다.\n\t영우는 TTS로부터 전달받은 정보와 처음 정후와 상의한 규칙을 바탕으로 금고의 비밀번호를 알아낸다. 그 비밀번호가 처음 정후가 알아낸 비밀번호와 일치한다면 영우는 무사히 금고를 털 수 있다.\n\n\n영우와 정후의 역할을 수행하여, 무사히 금고를 털고 성과급 파티를 즐기자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31280","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tФакирът Мики има във вълшебната си шапка a сиви, b бели, c черни и d пъстри мишки. Ако е със затворени очи, колко най-малко мишки трябва да извади от вълшебната си шапка факирът, за да е сигурен, че измежду извадените мишки има от всеки цвят? Напишете програма fakir, която определя търсeния брой мишки.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31250","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\nFuriosaAI는 신세대 NPU (신경망 처리 단위) 제품을 만들어 당신이 AI 개발을 개척하는 데에 도움을 드립니다. 추론에 초점을 맞춘 NPU 제품은 비용과 에너지 소모량을 줄여 당신이 제약 없이 혁신할 수 있도록 할 것입니다.\n\n\nFuriosaAI에서 일하는 연구원 주원이는 새로운 제품을 만들었다!\n\n이 새로운 제품의 구성 요소는 다음과 같다.\n\n\n\t제품에는 특수한 일을 하는 신경망의 구조가 이미 새겨져 있다. 신경망은 N$N$개의 정점과 M$M$개의 간선으로 이루어진 방향 그래프로 생각할 수 있다.\n\t신경망 추론을 할 때, 우리가 관심이 있는 u$u$번 정점과 카운터 c$c$가 있다. 제품 가동 전에 u=1$u=1$, c=0$c=0$으로 초기화된다.\n\t신경망의 i$i$번 정점은 증분 Ai$A_i$를 가지고 있다.\n\t신경망의 i$i$번 간선은 ui$u_i$번 정점에서 vi$v_i$번 정점으로 이으며, 두 정점은 서로 다르다.\n\t신경망의 i$i$번 간선은 특성값 Bi$B_i$를 가지고 있는데, 그 값은 모두 다르다.\n\n\n이 제품이 하는 일은 다음을 K$K$번 반복하는 것이다.\n\n\n\t먼저 u$u$번 정점에서 나가는 간선 중 c≥Bi$c\\geq B_{i}$면서 Bi$B_{i}$가 가장 큰 간선을 찾아 이를 i$i$번 간선이라 하자.\n\t\n\t\t u$u$를 vi$v_{i}$로 업데이트한다. 즉, 우리의 시선을 i$i$번 간선을 따라 ‘이동시켜’ 관심이 있는 정점을 바꾼다.\n\t\t그런 간선이 존재하지 않는다면 아무 것도 하지 않는다.\n\t\n\t\n\t c$c$의 값을 c+Au$c+A_{u}$로 업데이트한다.\n\n\n연구원 주원이는 1$1$초에 108$10^{8}$번만 연산을 수행할 수 있다는 PSer들의 통념을 깨고, K=1018$K=10^{18}$일 때도 1$1$초 만에 연산을 수행하여 초고속 승진을 노리려 한다. 여러분은 주원이의 계획을 도와야 한다!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31260","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tПрофесор математик измерил с рулетка размерите на един правоъгълник. Той веднага пресметнал, че обиколката на правоъгълника е x метра и y сантиметра, и че едната страна е по-голяма от другата с d сантиметра. Разсеяният професор запомнил числата x, y и d, но забравил къде бил записал размерите на правоъгълника. Напишете програма rectangle, която по дадени x, y и d намира размерите на правоъгълника.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31235","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t길이가 N$N$인 수열 A$A$가 주어질 때, N$N$ 이하의 양의 정수 k$k$에 대하여 길이가 N−k+1$N-k+1$인 수열 B$B$를 다음과 같이 정의하자. \n\n Bi=maxi≤j≤i+k−1Aj$$B_{i}=\\max_{i \\le j \\le i+k-1}A_j$$ \n\n수열 B$B$가 감소하지 않도록 하는 k$k$의 최솟값을 구해보자.\n\n예를 들어 A={3,1,4,2,5}$A=\\{3,1,4,2,5\\}$이고 k=2$k=2$라면, B={3,4,4,5}$B=\\{3,4,4,5\\}$이므로 감소하지 않지만, k=1$k=1$이라면 B={3,1,4,2,5}$B=\\{3,1,4,2,5\\}$이므로 감소하는 부분이 존재한다. 이 경우 k$k$의 최솟값은 2$2$이다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31236","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t2차원 좌표평면상에 N$N$개의 점 P1,P2,...,PN$ P_1, P_2, ... , P_N $이 주어진다. 다음 조건들을 만족하게 하는 두 정수 l$l$과 r$r$에 대하여, r−l+1$r - l + 1$의 최댓값을 구해보자.\n\n\n\t 1≤l<r≤N$1\\le l \\lt r \\le N$이고, r−l+1≥3$r - l + 1 \\ge 3$이다.\n\t Pl,Pl+1,⋯,Pr$P_l, P_{l + 1}, \\cdots , P_r$가 반시계 방향 순서로 볼록 다각형을 이룬다. 이때, 모든 내각은 180도 미만이다.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31251","content":"문제\n\nBOJ 국가는 좌우로 길쭉한 영토를 가지고 있다. 영토는 수직선 상의 길이 \nL\n$L$짜리 선분으로 나타낼 수 있으며, 영토의 왼쪽 끝은 좌표 \n0\n$0$, 오른쪽 끝은 좌표 \nL\n$L$에 각각 놓여 있다.\n\nBOJ 국가의 영토에는 깃발이 총 \nN\n$N$개 꽂혀 있는데, 이 중 왼쪽에서 \ni\n$i$번째 깃발은 정수 좌표 \nXi\n$X_i$에 꽂혀 있다. 깃발이 너무 한 군데에 몰려 있으면 보기에 좋지 않기 때문에, 임의의 두 깃발은 적어도 \nK\n$K$ 이상의 거리를 가지도록 하는 규정이 있다. 현재 꽂혀 있는 \nN\n$N$개의 깃발은 이 규정을 지킨다.\n\n신년을 맞이하여 BOJ 국가에서는 깃발 \nM\n$M$개를 추가로 꽂기로 하였고, BOJ 국가의 공무원인 당신은 이것을 새해 첫 업무로 배정받았다. 깃발을 꽂기 위해서 당신은 특정 좌표에서 깃발 \nM\n$M$개를 들고 출발한다. 당신은 영토 내에서 좌우로 자유롭게 이동할 수 있으며, 현재 서 있는 위치가 정수 좌표라면 언제든지 깃발을 꽂을 수 있다. 단, 규정을 지키기 위해서 이미 꽂힌 깃발을 포함하여 임의의 두 깃발이 적어도 \nK\n$K$ 이상의 거리를 가지도록 깃발 \nM\n$M$개를 꽂아야 한다. 규정을 지키면서 깃발 \nM\n$M$개를 꽂을 수 없는 경우는 주어지지 않는다.\n\n당신은 가능한 출발지로 총 \nQ\n$Q$개의 후보를 골라 이 중 하나에서 출발하기로 했으며, \ni\n$i$번째 후보는 정수 좌표 \nPi\n$P_i$에 위치한다. 이동 거리가 길수록 퇴근이 늦어지기 때문에, 당신은 각 후보에서 출발할 때 \nM\n$M$개의 깃발을 모두 꽂는 데에 필요한 최소 이동 거리를 알고 싶다. 빠른 퇴근을 위해 이 값들을 구하여 보자."},{"problemId":"31252","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n현대오토에버가 개발하는 가상 검증 플랫폼은 차량 내 제어기, 시스템, 차량을 가상화하고 가상주행환경도 구축해 차량에 대한 통합 시뮬레이션을 할 수 있다. 가상 검증 플랫폼을 차량 소프트웨어 개발에 적용한다면, 차량이나 제어기의 실물이 제작되기 전에 미리 소프트웨어를 개발하고 검증할 수 있다. 이를 통해 차량 소프트웨어의 개발에 필요한 기간을 단축하고, 더 높은 안정성을 지닌 차량을 개발할 수 있게 된다.\n\n\n현대오토에버의 기술자인 BOJ군은 새로운 차량 소프트웨어의 개발에 전념하고 있다. 이제 마지막으로 남은 것은 가상 검증 플랫폼을 통해 해당 소프트웨어가 실제로 잘 작동하는지 확인하는 것이다. 그러나 BOJ군은 가상 검증 결과 소프트웨어의 충격적인 결함을 찾아내었다. BOJ군이 개발한 소프트웨어는 숫자로만 이루어진 14자리 비밀번호를 입력해야 작동을 시작하도록 프로그래밍되어 있다. 그런데, 일부 환경에서는 비밀번호에 대한 정보가 손실되는 것이었다! 해결할 방법이 없을까 고민하던 와중 차량 내부의 시계가 BOJ군의 눈에 들어왔다.\n\n해당 소프트웨어는 총 48개의 시계 정보를 읽어오거나 조정할 수 있다. 처음에 앞에 있는 24개의 시계는 1타입 시계이며, 뒤에 있는 24개의 시계는 2타입 시계이다. 특이하게도 각 시계는 시침만 있으며, 시침은 시계 방향 순서대로 1시부터 24시까지 표현할 수 있다. 새 비밀번호를 설정하면 소프트웨어는 각 시계의 시침을 설정한다. 각 시계는 전부 동일하게 생겼으므로, 같은 타입끼리는 물론이요 다른 타입들끼리도 서로 구분이 불가능하다.\n\n여러 번의 가상 검증을 통해 BOJ군은 주행 중에 발생할 수 있는 현상을 두 가지로 분류했다. 차량 소프트웨어는 다양한 환경에서도 정상적으로 작동해야 하므로 차량 주행 도중에 두 현상이 여러 번 발생할 수도 있다.\n\n\n\t차량에 충격이 가해진다. 이 경우, 시계들의 순서가 무작위로 섞인다.\n\t차량이 자기장이 있는 환경에 진입한다. 자기장의 세기가 x$x$인 환경에 진입하면 1타입 시계들의 시침은 x$x$만큼, 2타입 시계들의 시침은 2x$2x$만큼 시계방향으로 움직인다. 24시를 가리키고 있는 상황에서 시침이 시계 방향으로 1 만큼 움직이면 1시가 된다.\n\n\n소프트웨어는 어떤 변형들이 어떤 방식으로 가해졌는지 알지 못한다. 만약 비밀번호를 알아야 하는 상황이 오면, 소프트웨어는 시계들의 시침을 읽고 비밀번호를 복원해야 한다.\n\n시계에 정보를 저장한다는 아이디어는 좋았지만, BOJ군은 어떻게 해야 다양한 환경에서 시시각각 변하는 시계들의 상태를 보고 비밀번호를 알아낼 수 있을지 감을 잡지 못하고 있다. BOJ군을 위해 비밀번호를 저장하고 알아내는 프로그램을 작성해 주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31034","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t당신은 상온 상압 초전도체를 개발하고 세상을 뒤바꿀 논문을 작성했다. 당신은 Ng$N\\mathrm{g}$의 초전도체 덩어리를 가지고 있는데, 논문 검증을 위해 K$K$개의 연구소에서 초전도체 샘플을 요청했다! 각 연구소에는 1g$1\\mathrm{g}$ 이상의 초전도체 샘플을 보내주면 된다. 다행히도, 당신은 초전도체를 정밀하게 부수는 기술을 가지고 있다. 2$2$ 이상의 정수 a$a$에 대하여, ag$a\\mathrm{g}$의 초전도체를 다음과 같은 방법으로 절단할 수 있다.\n\n\n\t 1$1$ 이상 a$a$ 미만의 정수 b$b$를 선택한다.\n\t bg$b\\mathrm{g}$ 짜리 초전도체와 (a−b)g$(a-b)\\mathrm{g}$짜리 초전도체 두 개로 쪼갠다.\n\t이때, a$a$원의 비용이 든다.\n\n\n연구 비용 절감을 위해 초전도체를 K$K$개의 조각으로 자르기 위한 최소 비용은 얼마일지 구해야 한다. 단, 제한 조건하에서 위의 방법을 통해 초전도체를 K$K$개의 조각으로 쪼갤 수 있음을 증명할 수 있다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31035","content":"문제\n\n올해 경기과학고등학교 송년 대회는 밀레니엄 사이언스 스쿨과 연합하여 키보토스에서 열린다! 당신은 키보토스의 선생으로, 폭력 조직이 송년 대회를 습격하는 것을 미연에 방지하기 위해 밀레니엄을 순찰하는 순찰 업무를 담당하기로 했다.\n\n유우카: 선생님, 유우카예요.\n선생: ...누구였지?\n유우카: 하야세 유우카예요! 벌써 잊어버린 건가요?\n유우카: 맞다, 용건인데요\n유우카: 이번 송년 대회에 폭력 조직이 급습하지 않을까, 라는 거예요\n유우카: 선생님의 힘이 필요해요\n선생: 내가 뭘 하면 되는 거야...?\n유우카: 밀레니엄을 순찰해 주세요\n선생: 순찰?\n유우카: 네\n유우카: 육각형 모양인 밀레니엄을 순찰해서, 폭력 조직이 급습할 수 없게 하는 거예요\n선생: 하지만 업무가...\n유우카: 감사합니다, 그럼 학생회실에서 기다릴게요\n\n밀레니엄의 학생들이 때때로 전투를 벌이는 이곳, 밀레니엄은 여섯 변의 길이가 시계 방향으로 각각 \na\n$a$, \nb\n$b$, \nc\n$c$, \na\n$a$, \nb\n$b$, \nc\n$c$(단, \n2≤a≤b≤c\n$2\\leq a\\leq b\\leq c$)이고 여섯 각의 크기가 각각 \n120∘\n$120^\\circ$인 육각형 모양이다. 이 육각형은 한 변의 길이가 1인 단위 정육각형 모양의 격자로 가득 차 있다. 즉, \nb+c−1\n$b + c - 1$ 개의 행의 각 \ni\n$i$ 행마다, 첫 \nb−1\n$b-1$ 개의 행에는 \na+i−1\n$a+i-1$ 개, 그다음 \nc−b+1\n$c-b+1$ 개의 행에는 \na+b−1\n$a+b-1$ 개, 그다음 \nb−1\n$b-1$ 개의 행에는 \na+b+c−i−1\n$a+b+c-i-1$ 개의 격자가 있어, 총 격자의 수는 \nM=ab+bc+ca−a−b−c+1\n$M=ab+bc+ca-a-b-c+1$이다. 밀레니엄의 \n(i,j)\n$(i, j)$는 \ni\n$i$째 행의 \nj\n$j$째 격자를 의미한다. 당신은 밀레니엄 사이언스 스쿨의 학습관이 있는 \n(x,y)\n$(x, y)$에서 시작하여, 여섯 개의 방향으로 한 칸씩 이동하여야 하며, 한 칸을 이동할 때마다 1의 시간이 흐른다. 초기 시각은 0이며, 여섯 방향의 이동은 각각 Q, E, D, C, Z, A로 나타내어진다. 다음 그림은 \na=b=c=3\n$a=b=c=3$인 경우 \n(3,4)\n$(3, 4)$에서 시작하는 경우의 예시이다.\n\n다만, 폭력 조직은 주기 \nK\n$K$로 활동하므로, 각 칸마다 \n0≤i<K\n$0\\leq i<K$인 \ni\n$i$에 대하여 시각 \nKt+i\n$Kt+i$에 방문하는 음이 아닌 정수 \nt\n$t$가 존재하여야 한다. 즉, 다음 조건에 맞는 길이 \nKM\n$KM$의 경로 \nP\n$P$를 찾아야 한다.\n\n \nP1=(x,y)\n$P_1 = (x, y)$ \n \nPi\n$P_i$와 \nPi+1\n$P_{i+1}$가 인접하여 있다.\n모든 \n(x,y)\n$(x, y)$와 \n0≤i<K\n$0\\leq i<K$인 \ni\n$i$에 대하여 \nPKt+i=(x,y)\n$P_{Kt+i}=(x, y)$인 음이 아닌 정수 \nt\n$t$가 유일하게 존재한다.\n \nPKM\n${P_{KM}}$과 \nP1\n$P_1$이 인접할 필요는 없다."},{"problemId":"31281","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tДадени са три различни цели числа – a, b, c.\n\nНапишете програма middle, която намира и извежда число, което е равно на едно от дадените числа, но не е нито най-малкото, нито най-голямото от тях.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31282","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tЕдно ловно куче е на N стъпки след бягащ заек. Напишете програма dog, която изчислява след колко скока ловното куче ще настигне бягащия заек, ако за всеки скок заекът изминава M стъпки, а кучето К стъпки.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31283","content":"문제\n\n양의 정수로 구성된 길이가 \nm\n$m$ (\nm≥2\n$m ≥ 2$)인 수열 \nx[0],⋯,x[m−1]\n$x[0], \\cdots, x[m - 1]$이 막힌 수열이라는 것은, 이 수열이 아래 조건을 만족한다는 것을 의미한다:\n\n \n1\n$1$ 이상 \nm−2\n$m - 2$ 이하의 모든 정수 \nk\n$k$에 대해, \nx[k]>x[0]\n$x[k] > x[0]$이고 \nx[k]>x[m−1]\n$x[k] > x[m - 1]$이다.\n\n즉, \nx\n$x$의 양 끝 원소가 그 사이에 위치한 모든 원소보다 작다면 \nx\n$x$는 막힌 수열이다.\n\n예를 들어 \n[3,7,8,4,2]\n$[3, 7, 8, 4, 2]$과 \n[7,7]\n$[7, 7]$은 막힌 수열이지만, \n[5,8,4,6,7]\n$[5, 8, 4, 6, 7]$와 \n[3,3,4]\n$[3, 3, 4]$은 막힌 수열이 아니다. 정의에 의해 길이가 \n2\n$2$인 모든 수열은 막힌 수열이고, 길이가 \n1\n$1$ 이하인 수열은 막힌 수열일 수 없다는 점에 유의하라.\n\n길이가 \nK\n$K$인 수열 \nX[0],⋯,X[K−1]\n$X[0], \\cdots, X[K - 1]$이 있을 때, 들어내기 연산은 \nX[i],⋯,X[j]\n$X[i], \\cdots, X[j]$가 막힌 수열인 \n(i,j)\n$(i, j)$을 골라, 수열에서 \nX[i+1],⋯,X[j−1]\n$X[i + 1], \\cdots, X[j - 1]$을 제거하는 (즉, 수열을 \nX[0],⋯,X[i],X[j],⋯,X[K−1]\n$X[0], \\cdots, X[i], X[j], \\cdots, X[K - 1]$으로 바꾸는) 연산이다.\n\n \nf(X)\n$f(X)$를 이러한 들어내기 연산을 원하는 대로 사용하여(사용하지 않을 수도 있고, 여러 번 사용할 수도 있음) 만들 수 있는 최종 수열의 평균의 최댓값이라고 정의하자.\n\n예를 들어, \nf([1,3,2,100,97,98,2,3,4,1])=43\n$f([1, 3, 2, 100, 97, 98, 2, 3, 4, 1]) = 43$이며, 들어내기 연산을 아래와 같이 적용하면 된다.\n\n \ni=0\n$i = 0$, \nj=2\n$j = 2$를 선택하여 수열을 \n[1,2,100,97,98,2,3,4,1]\n$[1, 2, 100, 97, 98, 2, 3, 4, 1]$로 바꾼다.\n \ni=5\n$i = 5$, \nj=8\n$j = 8$을 선택하여 수열을 \n[1,2,100,97,98,2,1]\n$[1, 2, 100, 97, 98, 2, 1]$로 바꾼다.\n최종 수열은 \n[1,2,100,97,98,2,1]\n$[1, 2, 100, 97, 98, 2, 1]$이며, 이 수열의 평균은 \n(1+2+100+97+98+2+1)/7=43\n$(1 + 2 + 100 + 97 + 98 + 2 + 1)/7 = 43$이다.\n\n양의 정수로 구성된 길이가 \nN\n$N$인 수열 \nA[0],⋯,A[N−1]\n$A[0], \\cdots, A[N -1]$이 주어진다. 여러분은 \nA[i],⋯,A[j]\n$A[i], \\cdots, A[j]$가 막힌 수열이 되도록 하는 순서쌍 \n(i,j)\n$(i, j)$가 주어질 때마다, \nf(A[i],⋯,A[j])\n$f(A[i], \\cdots , A[j])$의 값을 구하는 프로그램을 작성해야 한다."},{"problemId":"31261","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tЕдин ден Боби казал на брат си Иво: „Намислих си едно число. Намери го, ако знаеш, че като го разделиш на a и от полученото извадиш a, и с полученото число пак извършиш същите действия, ще получиш числото b”. Помогнете на Иво като напишете програма think, която при дадени a и b, намира числото, което е намислил Боби.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31253","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t크기가 4×N$4\\times N$인 격자판의 맨 왼쪽 위 칸에 트랜스포머 나이트가 하나 놓여 있다. 트랜스포머 나이트는 체스 나이트 또는 퍼즈(Ferz)처럼 이동할 수 있다.\n\n\n\t나이트는 현재 자신이 있는 칸에서 가로로 2칸, 세로로 1칸 떨어진 칸으로 이동하거나 가로로 1칸, 세로로 2칸 떨어진 칸으로 이동할 수 있다.\n\t퍼즈는 현재 자신이 있는 칸에서 가로로 1칸, 세로로 1칸 떨어진 칸으로 이동할 수 있다.\n\n\n트랜스포머 나이트는 처음에 나이트처럼 이동하여, 나이트와 퍼즈의 이동 방식을 번갈아 가며 이동한다. 즉, 나이트 - 퍼즈 - 나이트 - 퍼즈 - …와 같이 이동한다.\n\n트랜스포머 나이트를 이동하여 격자판의 모든 칸을 정확히 한 번씩 밟고 다시 출발점으로 돌아오는 경로의 수를 구하시오.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31237","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tЕто че свърши лятната ваканция и на 15 септември в клуба по шахмат на г-н Иванов беше открит новият сезон! Скоро предстои ежегодният „Есенен шахматен турнир” и затова още сега трябва да започне подготовката („От далеко да е леко...”). За целта г-н Иванов трябва да състави график на тренировките в клуба, който да отговаря на следните изисквания:\n\n\n\tТренировки трябва да бъдат провеждани в едни и същи дни всяка седмица. Например всеки понеделник, четвъртък и събота. В деня на започването на школата и в деня на турнира не трябва да има тренировки.\n\tТренировки трябва да бъдат провеждани във всички седмици между откриването на школата и състезанието.\n\tДа бъдат проведени не по-малко от Х и не повече от Y на брой тренировки. Напишете програма timetable, която да помогне на г-н Иванов при съставянето на графика.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31036","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t길이가 짝수 N$N$인 수열 A$A$가 있다. 초기에 A$A$의 모든 원소는 0$0$이다. 다음 쿼리를 처리하라.\n\n\n\t1 l r b \t: Al,Al+1,⋯,Ar$A_l, A_{l+1}, \\cdots, A_r$에 각각 b$b$를 더한다.\n\t2 l \t: 1$1$ 이상 N$N$ 이하의 모든 정수 i$i$에 대해 Ai$A_i$를 Al+⌊i−12⌋$A_{l+ \\lfloor \\frac{i-1}{2} \\rfloor}$로 바꾼다. 이 작업은 모든 i$i$에 대해서 동시에 이루어진다.\n\t3 \t: 현재까지 시행한 모든 1번, 2번 종류의 쿼리를 순서대로 다시 시행한다. 이때, 3번 종류의 쿼리로 인해 시행된 1번, 2번 종류의 쿼리도 포함한다.\n\t4 l r \t: ∑i=lrAi$\\sum_{i=l}^r A_i$의 값을 998244353$998\\,244\\,353$으로 나눈 나머지를 출력한다.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31284","content":"문제\n\n과일 게임은 여러 가지 종류의 과일들을 합쳐 크기가 큰 종류의 과일을 만드는 게임이다. 과일 게임의 게임판은 수열 \nX[0],X[1],⋯,X[K−1]\n$X[0], X[1], \\cdots , X[K - 1]$로 표현할 수 있다. 이 때 각 수는 과일의 종류에 따른 번호를 나타내며, 번호가 클수록 과일의 크기가 크다는 것을 의미한다.\n\n이 때 플레이어는 종류가 같으며 인접한 두 과일을 합쳐서 크기가 큰 과일을 만들 수 있는 합치기 연산을 수행할 수 있다. 이 연산은 다음과 같이 정의된다.\n\n합치기: \nX[0],X[1],⋯,X[K−1]\n$X[0], X[1], \\cdots , X[K - 1]$로 표현되는 게임판에서 정수 \n0≤i≤K−2\n$0 ≤ i ≤ K - 2$를 골라, \nX[i]=X[i+1]\n$X[i] = X[i + 1]$을 만족한다면 게임판을 \nX[0],⋯,X[i−1],X[i]+1,X[i+2],⋯,X[K−1]\n$X[0], \\cdots , X[i - 1], X[i] + 1, X[i + 2], \\cdots , X[K - 1]$로 바꾼다.\n\n플레이어의 목표는 초기 게임판이 주어지면 합치기 연산을 \n0\n$0$회 이상 사용하여 크기가 큰 과일을 만드는 것이다.\n\n예를 들어서 게임판이 \nX=[2,1,1,3,2]\n$X = [2, 1, 1, 3, 2]$인 경우, \nX[1]=X[2]\n$X[1] = X[2]$이기 때문에 \ni=1\n$i = 1$을 선택하여 합치기 연산을 수행하면 게임판이 \nX=[2,2,3,2]\n$X = [2, 2, 3, 2]$로 바뀌게 된다. 또 \nX[0]=X[1]\n$X[0] = X[1]$이기 때문에 \ni=0\n$i = 0$을 선택하여 합치기 연산을 수행하면 게임판이 \nX=[3,3,2]\n$X = [3, 3, 2]$로 바뀌게 된다. 마지막으로 \nX[0]=X[1]\n$X[0] = X[1]$이기 때문에 \ni=0\n$i = 0$을 선택하여 합치기 연산을 수행하면 게임판이 \nX=[4,2]\n$X = [4, 2]$로 바뀌게 된다. 이렇게 하면 번호가 \n4\n$4$인 과일을 만들 수 있고, 이것이 얻을 수 있는 가장 큰 과일의 번호이다.\n\n여러분에게 길이 \nN\n$N$의 수열 \nA\n$A$가 주어진다. 이 때 \nA\n$A$의 원소는 중간에 변경될 수 있으며 이 변화는 누적된다. 여러분은 \n0≤l≤r≤N−1\n$0 ≤ l ≤ r ≤ N - 1$을 만족하는 정수 순서쌍 \n(l,r)\n$(l, r)$이 주어질 때마다 \nA[l],⋯,A[r]\n$A[l], \\cdots , A[r]$로 표현되는 게임판에서 얻을 수 있는 가장 큰 과일의 번호를 구하는 프로그램을 작성해야 한다. 수열의 원소가 변하거나 순서쌍이 주어지는 횟수는 총 \nQ\n$Q$번이다."},{"problemId":"31207","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tВ някои точки от дълъг прав път са разположени площадки за кацане. Известни са разстоянията от началото на пътя до всяка от площадките. Няколко експедиции искат да достигнат дадени точки от пътя, тръгвайки от началото му с хеликоптер. За целта, всяка експедиция трябва задължително веднъж да кацне на една от дадените площадки (не непременно най-близката до желаната точка), изразходвайки определено дадено количество гориво за хеликоптера (да отбележим, че ако например има само една площадка, намираща се точно в началото, хеликоптерът като излети, трябва да кацне на тази площадка). След кацане на някоя от площадките, експедицията трябва да се придвижи пеша (напред или назад, ако желаната точка не съвпада с площадката) до желаната точка по пътя. При това придвижване за всяка единица от пътя се изразходва даден брой единици гориво.\n\nНапишете програма expedition, която намира за всяка експедиция минималното количество гориво, необходимо за доставка на експедицията до посочената точка.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31238","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tМ на брой мишки са разположени в една редица. Някъде между тях има парчета сирене. Всички мишки могат да се движат една след друга само наляво или само надясно и никоя мишка не задминава друга.За всички мишки има два варианта:\n\nВариант (А) - Всяка изяжда само едно парче сирене – първото неизядено парче, което срещне.\n\nВариант (Б) - Всяка изяжда всички неизядени парчета сирене, които срещне по пътя си.\n\nНа една позиция има най-много една мишка, но парчетата сирене може да са повече. Също така на една позиция може да има едновременно както мишка, така и парчета сирене.\n\nНапишете програма mice, която за всеки от двата варианта извежда посоката на движение и минималния брой мишки, неизяли нито едно парче сирене.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31239","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tВ една известна телевизионна игра играч се намира пред вертикално правоъгълно табло с размери N реда на М колони. Той има възможност да избере някоя от колоните и да пусне в нея топче. Топчето започва да пада надолу като последователно преминава през различни клетки докато не достигне до дъното на правоъгълното табло. По своят път надолу то може да преминава от една колона в друга, като попада в клетки, означени със следните знаци:\n\n\n\t‘.’ – от тази клетка топчето ще продължи своето падане право надолу. Тоест, ако е било в клетка на ред i и колона j със стойност ‘.’ то ще отиде в клетка с ред i+1 и колона j.\n\t‘L’ – от тази клетка топчето ще продължи своето падане наляво. Тоест, ако е било в клетка на ред i и колона j със стойност ‘L’ то ще отиде в клетка в ред i+1 и колона j-1.\n\t‘R’ – от тази клетка топчето ще продължи своето падане надясно. Тоест, ако е било в клетка на ред i и колона j със стойност ‘R’ то ще отиде в клетка в ред i+1 и колона j+1.\n\t‘X’ – топчето се спира в тази клетка и играчът определя накъде то да продължи да пада. Той има три възможности – към долната лява клетка, към долната клетка или долната дясна клетка.\n\tЦифра от 0 до 9 (включително) – играчът прибавя стойността на цифрата в хиляди левове към своята печалба, а топчето пада в долната клетка ако има такава.\n\n\nНапишете програма tvgame, която определя колко е най-голямата възможна сума, която играчът може да събере в играта и му показва един възможен начин, по който може да я постигне.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31037","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t영우는 송년대회 참가자들을 환영하기 위해 정성스럽게 송년대회 환영 카드를 만들었다. 입부 환영 카드에서 소환된 동현이의 환영이 참가자들을 환영할 것이다. 총 N2$N^2$개의 카드가 있고, 카드들은 가로 N$N$행, 세로 N$N$열의 정사각형 모양으로 배열되어 있다. 이환이는 환영 카드의 색칠을 맡았다. 이환이는 모든 카드들을 검은색 또는 하얀색으로 색칠할 것이다. 첫 행의 몇 개의 카드들은 이미 색칠되어 있다. 이때, 다음 규칙에 따라야 한다.\n\n\n\t카드들의 색상 배치가 복잡해지는 것을 피하기 위해 한 카드와 그 카드의 바로 오른쪽 아래에 있는 카드는 색이 같아야 한다. 즉, i$i$행 j$j$열의 카드와 i+1$i+1$행 j+1$j+1$열의 카드 색은 같아야 한다. (1≤i,j<N$1 \\le i, j <N$)\n\t모든 행에 대해서 그 행을 이루는 하얀 카드의 수는 같아야 한다.\n\n\n초기에 첫 행의 몇 개의 카드가 어떻게 색칠되어 있어도 규칙에 따라 카드들을 색칠하는 하나 이상의 방법이 있음을 증명할 수 있다.\n\n카드 색칠이 완료된 이후, 카드 배열의 점수는 다음과 같이 정의된다.\n\n\n\t각 카드가 하얀색인 경우 그 카드는 하나의 문양에 속하는데, 두 카드 사이를 상하좌우로 하얀색 카드만 경유하여 이동할 수 있는 경우에만 같은 문양에 속한다.\n\t카드 배열의 점수는 서로 다른 문양의 수이다. 문양의 모양과는 상관없다.\n\n\n이환이는 카드를 색칠할 때 나올 수 있는 카드 배열들의 점수가 궁금해졌다. 첫 행의 카드들의 색칠 여부가 주어질 때, 규칙에 맞게 카드를 색칠할 때 나올 수 있는 서로 다른 카드 배열들의 점수의 합을 구해 출력하는 프로그램을 작성하라. 단, 답이 너무 클 수 있으니 998244353$998\\,244\\,353$으로 나눈 나머지를 출력하라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31254","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tДадени са N точки в равнината, представени с име и координати. Да се напише програма triangles, която намира всички триъгълници, които могат да се образуват с върхове три от дадените точки.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31285","content":"문제\n\nKOI 마을은 \nN\n$N$개의 집과 집들을 잇는 \nN−1\n$N - 1$개의 양방향 도로로 이루어져 있으며, 임의의 서로 다른 두 집들을 도로만을 사용하여 오갈 수 있다. 즉, KOI 마을의 도로망은 트리 구조를 이룬다.\n\nKOI 마을의 집들에는 \n0\n$0$부터 \nN−1\n$N − 1$까지의 서로 다른 번호가 붙어 있으며, KOI 마을의 도로들에는 \n0\n$0$부터 \nN−2\n$N - 2$까지의 서로 다른 번호가 붙어 있다. 모든 \n0≤i≤N−2\n$0 ≤ i ≤ N - 2$에 대해 \ni\n$i$번 도로는 \nA[i]\n$A[i]$번 집과 \nB[i]\n$B[i]$번 집을 연결하며 길이는 \nD[i]\n$D[i]$미터이다.\n\n최근 KOI 마을에 도둑이 자주 들어 주민들이 어려움을 겪고 있다. 이에 KOI 마을의 한 집에 경찰을 대기시켜, 도둑이 나타났을 때를 대비하려고 한다. KOI 마을의 사람들은 도둑이 드는 상황에서 경찰이 얼마나 빠르게 도둑을 잡을 수 있을지 궁금해졌다.\n\n여러분에게 \nQ\n$Q$개의 시나리오가 주어진다. 시나리오에는 \n0\n$0$부터 \nQ−1\n$Q - 1$까지의 서로 다른 번호가 붙어 있다. 하나의 시나리오는 다음과 같이 이루어진다.\n\n \nj\n$j$번 시나리오에서 경찰은 \nP[j]\n$P[j]$번 집에서 출발하며 \n1\n$1$초에 최대 \nV1[j]\n$V1[j]$미터를 이동할 수 있다.\n \nj\n$j$번 시나리오에서 도둑은 \nT[j]\n$T[j]$번 집에서 출발하며 \n1\n$1$초에 최대 \nV2[j]\n$V2[j]$미터를 이동할 수 있다.\n경찰이 출발하는 집과 도둑이 출발하는 집은 다르다. 즉, \nP[j]≠T[j]\n$P[j] \\ne T[j]$이다.\n집의 크기는 충분히 작으므로 집은 점으로 취급한다. 도로의 너비는 충분히 좁으므로 도로는 선분으로 취급한다. 도로들은 교차하지 않는다.\n경찰과 도둑은 각각 자신의 최대 속력 내에서 KOI 마을 안을 자유롭게 이동할 수 있다. 이동하지 않는 것도 가능하다.\n경찰이 도둑과 같은 위치에 있다면 경찰은 도둑을 잡을 수 있다. 이때, 집뿐만이 아니라 도로의 중간에서도 도둑을 잡는 것이 가능하다.\n시나리오 내에서 경찰과 도둑은 자신과 상대방의 속도를 알고 있으며, 어느 시점이든 상대방의 위치를 알 수 있다.\n경찰과 도둑은 최선의 전략을 사용한다. 즉, 경찰은 도둑을 가장 빠르게 잡는 전략을, 도둑은 가장 오랫동안 도망치는 전략을 사용한다. 경찰과 도둑이 최선의 전략을 사용할 때, 반드시 유한한 시간 안에 도둑이 잡힘을 증명할 수 있다.\n\n여러분은 각 시나리오마다 도둑이 잡히는 데에 걸리는 시간을 구해야 한다."},{"problemId":"31038","content":"문제\n\n정점이 \nN\n$N$개인 트리가 주어진다. 각 정점은 \n1\n$1$번부터 \nN\n$N$번까지 차례대로 번호가 부여되어 있다. \ni\n$i$번째 간선은 \nAi\n$A_i$번 정점과 \nBi\n$B_i$번 정점을 연결한다. 트리에서 정점 사이의 거리는 두 정점 사이에 존재하는 유일한 단순 경로에 포함되는 간선의 수로 정의한다. 같은 정점 사이의 거리는 \n0\n$0$으로 정의한다. \ni\n$i$번 정점에는 \ni\n$i$번 사람이 살고 있다. 각 정점에 사는 모든 사람들이 모이려고 한다. 이를 위해 다음 조건을 모두 충족하는 길이 \nk\n$k$의 수열 \np\n$p$를 구성해야 한다.\n\n \n1≤k<N\n$1\\leq k<N$ \n \n1≤pi≤N(1≤i≤k)\n$1\\leq p_i\\leq N(1\\leq i\\leq k)$ \n \npi≠pj(1≤i<j≤k)\n$p_i\\neq p_j(1\\leq i<j\\leq k)$ \n \n1<i<k\n$1<i<k$인 모든 \ni\n$i$에 대해 \npi>pi−1\n$p_i>p_{i-1}$와 \npi<pi+1\n$p_i<p_{i+1}$ 중 정확히 하나만 성립한다.\n \np1\n$p_1$부터 \npk\n$p_k$ 까지 순서대로 \npi\n$p_i$번 사람이 살고 있는 정점과의 거리가 \n1\n$1$ 이하인 정점을 모두 하나로 합치자. 정점 \nv1,⋯,vm\n$v_1, \\cdots, v_m$를 하나로 합치는 것은 새로운 정점을 만들어 \nv1,⋯,vm\n$v_1, \\cdots, v_m$와의 거리 중 가장 작은 거리가 \n1\n$1$인 정점들과 간선으로 연결하고, 정점 \nv1,⋯,vm\n$v_1, \\cdots, v_m$ 그리고 정점 \nv1,⋯,vm\n$v_1, \\cdots, v_m$와 연결된 모든 간선을 삭제하는 것으로 정의한다. 이 과정에서 합쳐지는 정점에 살던 사람들은 합쳐진 정점으로 이주한다. 최종적으로 모든 사람이 살고 있는 정점이 같아야 한다.\n\n가능한 \nk\n$k$의 최솟값과 \np\n$p$를 출력해야 한다. 길이가 최소인 수열 \np\n$p$가 여러 개 존재하면 아무거나 출력해도 된다. 존재하지 않는다면 \"IMPOSSIBLE\"을 따옴표 없이 출력한다."},{"problemId":"31039","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou're collecting coins! You want to know how much your coins are worth.\n\nOccasionally, you will pick up bags of coins that you wil add to your collection. Furthermore, because you want to know exactly how many coins of a given type you have, you will keep all of your coins of a type together. You may accidentally lose all your coins of various types.\n\nAt all times, in spite of these events, you want to be able to quickly determine the total value of your coins.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31286","content":"문제\n\nIOI 나라는 \nN\n$N$개의 도시와 도시들을 잇는 \nN−1\n$N - 1$개의 양방향 철도로 이루어져 있으며, 임의의 서로 다른 두 도시를 철도만을 사용하여 오갈 수 있다. 즉, IOI 나라의 철도망은 트리 구조를 이룬다. 도시에는 각각 \n0\n$0$ 이상 \nN−1\n$N - 1$ 이하의 서로 다른 번호가 붙어 있고, 철도에도 각각 \n0\n$0$ 이상 \nN−2\n$N - 2$ 이하의 서로 다른 번호가 붙어 있다. 모든 \n0≤i≤N−2\n$0 ≤ i ≤ N - 2$에 대하여 \ni\n$i$번 철도는 \nU[i]\n$U[i]$번 도시와 \nV[i]\n$V[i]$번 도시를 양방향으로 연결하며, 철도의 길이는 \nW[i]\n$W[i]$이다.\n\nIOI 나라의 어떤 도시에서 출발하더라도 다른 도시로 직통 열차를 타고 바로 이동할 수 있다. 즉, \n0≤u,v≤N−1\n$0 ≤ u, v ≤ N - 1$, \nu≠v\n$u \\ne v$인 모든 \nN(N−1)\n$N(N - 1)$개의 순서쌍 \n(u,v)\n$(u, v)$에 대해, \nu\n$u$번 도시에서 출발하여 \nv\n$v$번 도시에 도착하는 직통 열차가 있다. \nu\n$u$번 도시에서 이 직통 열차를 타면 \nv\n$v$번 도시에 도착할 때까지 내릴 수 없으며, 이 직통 열차의 소요 시간은 IOI 나라의 철도망에서 \nu\n$u$번 도시에서 시작하여 \nv\n$v$번 도시에서 끝나는 유일한 단순 경로 상의 철도들의 길이를 합한 것과 같다.\n\n철도 동호인인 당신은 오랫동안 한 기차를 타면서 여유로움을 느끼는 것을 즐기기 때문에, 소요 시간이 긴 직통 열차만을 타고 다닐수록 더 큰 즐거움을 느낀다.\n\n구체적으로, 서로 다른 두 도시 \nx\n$x$, \ny\n$y$에 대해서, 즐거움 \njoy(x,y)\n$\\text{joy}(x, y)$ 는 다음 조건을 만족하는 최대의 양의 정수 \nD\n$D$로 정의된다:\n\n \nx\n$x$번 도시에서 시작하여 소요 시간이 \nD\n$D$ 이상인 직통 열차만을 타고 이동하는 것을 유한 번 반복하여, \ny\n$y$번 도시에 도착할 수 있다.\n\n \n0≤x,y≤N−1\n$0 ≤ x, y ≤ N - 1$, \nx≠y\n$x \\ne y$를 만족하는 모든 \nN(N−1)\n$N(N - 1)$가지의 순서쌍 \n(x,y)\n$(x, y)$에 대한 \njoy(x,y)\n$\\text{joy}(x, y)$의 합을 \n1000000007(=109+7)\n$1\\, 000\\, 000\\, 007 (= 10^9 + 7)$로 나눈 나머지를 구하는 프로그램을 작성하라."},{"problemId":"31255","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tДаден е низ s с дължина n, съдържащ две букви а и n–2 букви b. Напишете програма substring, която по дадени дължината на низа и позициите на буквите а, намира броя на поднизовете на s, които съдържат поне една буква а.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31256","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tЕли започна работа в голяма софтуерна компания. Йерархията в компанията има дървовидна структура, като всеки човек (освен баш шефът) има точно по един пряк началник. Компанията е разделена на екипи, като един програмист с всичките си преки и непреки подчинени (ако има такива) се счита за един екип. Това означава, че един екип може да се състои от няколко други такива. За пример ще дадем компания като Майкрософт, където има екип, който се занимава с Office, който от своя страна се състои от екипи, които се занимават с Word, Excel, и т.н. В случая на Ели, например, Станчо е шеф на Пешо и Ели, Ели е шеф на Крис, а Пешо е шеф на Гошо и Тошо. Така Станчо, Пешо, Ели, Крис, Гошо и Тошо образуват един екип. Също така Ели и Крис са един екип, а Пешо, Тошо и Гошо са друг екип.\n\nФирмата има много дълъг, но за съжаление тесен офис, в който има място само за един ред от компютри. Шефът на фирмата е заел най-левия от тях и иска да разпредели програмистите по такъв начин, че:\n\n\n\tПрекият началник на всеки програмист да се намира наляво от него.\n\tЧленове на всеки от екипите да заемат непрекъсната последователност от компютри (тоест да са един до друг).\n\n\nАко вземем примера, който дадохме по-рано, едно възможно нареждане би било Станчо, Пешо, Гошо, Тошо, Ели, Крис.\n\nПомогнете на Ели да се подмаже на шефа, като напишете програма, която по дадена структура на фирмата, определя нареждането на програмистите.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31287","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\nU, D, L, R로 이루어진 길이 N$N$의 문자열 S$S$가 주어진다. 문자열 S$S$를 K$K$번 이어 붙인 문자열을 T$T$라고 하자. 장난감 강아지 타카하시는 2차원 좌표평면의 원점에서 시작해서 T$T$에 적힌 문자를 하나씩 읽으며, 문자가 U라면 위쪽, D라면 아래쪽, L이라면 왼쪽, R이라면 오른쪽으로 한 칸 움직인다.\n\n이때, 타카하시가 T$T$를 따라 움직이는 동안 원점에 다시 방문하는 경우가 있는지 구해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31208","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tРазхождайки се навън, Лазар и неговите приятели се впечатляват от един спортен магазин. На витрината са наредени футболни екипи. Те са в еднакъв размер, пасващ на всички деца и различни модели.\n\nСлед като разпитва приятелите си, Лазар прави интересно наблюдение – на всяко дете допада интервал от последователни екипи. Всяко от тях иска да си купи по един от моделите и Лазар се заема със задачата да ги разпрадели така, че да зарадва приятелите си. Той знае, че вие сте добри в програмирането, затова ви моли да му помогнете, като напишете програма outfit, която според зададени интервали от екипи определя, дали съществува оптимално разпределение между децата или не.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31257","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tРедица от символи е симетрична, ако се чете еднакво отляво надясно и обратно. Например, следните редици са симетрични:\n\n123454321\n\nabssddfddssba.\n\nГошо и Пешо играят интересна игра: пишат редица от символи и се опитват с добавяне на възможно най-малко допълнителни символи към нейния край да я направят симетрична.\n\nНапишете програма symmetric, която въвежда число N — броя на символите от входната редица и N символа — елементи на тази редица. Програмата извежда минималния брой символи и самите символи, които трябва да се добавят към края на редицата, за да стане тя симетрична.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31300","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn this problem, you have to find two rectangles with the given total area which have the minimum possible total perimeter.\n\nRecall that the area of a rectangle having sides of length m$m$ and n$n$ is m⋅n$m \\cdot n$, and its perimeter is 2⋅(m+n)$2 \\cdot (m + n)$.\n\nGiven an integer s≥2$s \\ge 2$, consider two rectangles with positive integer lengths of sides such that the sum of their areas is s$s$. What is the minimum possible sum of their perimeters?\n\nFormally, choose four positive side lengths a$a$, b$b$, c$c$ and d$d$ so that the total area a⋅b+c⋅d$a \\cdot b + c \\cdot d$ equals s$s$ and the total perimeter 2⋅(a+b)+2⋅(c+d)$2 \\cdot (a + b) + 2 \\cdot (c + d)$ is minimum possible.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31288","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n\t\n\t\t\n\t\t\t\n\t\t\t \n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t페코린느:\n\t\t\t\t\t\t캬루! 저예요, 알아보시겠어요?\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t캬루:\n\t\t\t\t\t\t페코⋯린느.\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t페코린느:\n\t\t\t\t\t\t다행이다.\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t캬루:\n\t\t\t\t\t\t다른 이름은 유스티아나 폰 아스트라이아.\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t \n\t\t\t\t\t\t폐하의 이름을 사칭하는 괘씸한 놈, 죽어라.\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\n\n\n\n프린세스 커넥트! Re:Dive 8장 \"엇갈리는 마음\", 15화 \"절대로 양보할 수 없는 것\" 내용 일부 발췌\n\n이번에 캬루는 소수를 배신했다. 소수의 한 자리를 바꾸어서 소수가 아니게 만들어버렸다. 구체적으로는, 0$0$으로 시작하지 않는 N$N$자리 소수 P$P$에 대해 어떤 수 Q$Q$가 P$P$-캬루라는 것은 다음을 모두 만족하는 것을 의미한다.\n\n\n\t Q$Q$는 2$2$ 이상의 N$N$자리 정수이며, 0$0$으로 시작하지 않는다.\n\t P$P$와 Q$Q$의 서로 다른 자릿수는 하나뿐이다.\n\t Q$Q$는 소수가 아니다.\n\n\n다음은 N=2,P=19$N=2, P=19$일 때 P$P$-캬루와 P$P$-캬루가 아닌 수의 예시이다.\n\n\n\t Q=9$Q = 9$는 1$1$자리 정수이므로 19$19$-캬루가 아니다. 09$09$처럼 수가 0$0$으로 시작할 수는 없다.\n\t Q=92$Q = 92$는 P=19$P=19$와 서로 다른 자릿수가 두 개이므로 19$19$-캬루가 아니다.\n\t Q=29$Q = 29$는 소수이기 때문에 19$19$-캬루가 아니다.\n\t Q=16,49$Q = 16, 49$ 등은 19$19$-캬루이다.\n\n\n N$N$자리 소수 P$P$가 주어졌을 때, P$P$-캬루인 수가 적어도 N$N$개 있다는 것을 증명할 수 있다. 이 N$N$개의 수를 직접 찾아보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31289","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t기부와 택구는 더 나은 세상을 만들기 위해 기부를 하려고 하는데, 평범하게 기부하면 재미가 없으니 유명한 게임인 님 게임을 이용해 기부하기로 했다.\n\n님 게임이란, 여러 개의 돌 더미가 주어지고 두 사람이 번갈아 가면서 하나의 더미를 선택해 원하는 개수만큼 돌을 1개 이상 제거하다가 전체 돌 더미의 마지막 돌을 가져가는 사람이 승리하는 게임이다.\n\n두 사람은 정확히 세 개의 돌 더미가 있는 님 게임을 할 예정이다. 이번 님 게임은 기부가 목적인 게임이므로 특별히 가져가는 돌 하나 당 10000$10\\,000$원을 기부하기로 했다. 두 사람은 님 게임을 잘 알아서 최적의 전략을 알고 있으며, 스포츠맨십이 뛰어나서 이길 수 있는 게임에서 일부러 지는 경우는 없다. 그러면서도 각자 자신이 최대한 많은 금액을 기부하려고 할 때, 게임이 끝나고 두 사람이 기부할 금액을 구해보자.\n\n이때 게임은 항상 기부가 먼저 시작하는 것으로 한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31209","content":"문제\n\nСашка e влюбена във всякакви числови редици. Тя особено харесва любимата си редица \na1\n$a_1$, \na2\n$a_2$, \n…\n$\\dots$, \naN\n$a_N$ от \nN\n$N$ цели положителни числа. Тъй като Вие току що научихте операцията умножение, Сашка ще Ви изпита на нея чрез редицата си. Тя ще иска да намерите такава редица \nb1\n$b_1$, \nb2\n$b_2$, \n…\n$\\dots$, \nbN\n$b_N$ от \nN\n$N$ цели положителни числа, така че да минимизирате \n∑i=1Nai×bi=a1×b1+a2×b2+⋯+aN×bN\n$\\sum_{i=1}^{N}{a_i \\times b_i} = a_1 \\times b_1 + a_2 \\times b_2 + \\cdots + a_N \\times b_N$. Обаче има уловка – не трябва да има стойност \nx\n$x$, която да се среща на повече от \nK\n$K$ места в редицата \nb1\n$b_1$, \nb2\n$b_2$, \n…\n$\\dots$, \nbN\n$b_N$ (т.е. не трябва да има повече от \nK\n$K$ различни \ni\n$i$-та, за които \nbi=x\n$b_i = x$ и \n1≤i≤N\n$1 ≤ i ≤ N$). Тъй като би било прекалено скучно да отговорите на един въпрос, Сашка ще Ви зададе \nQ\n$Q$ въпроса, като \ni\n$i$-тият от тях ще бъде за минималното произведение при \nK=ki\n$K = k_i$. Напишете програма prod, която да отговаря на въпросите на Сашка."},{"problemId":"31258","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tВие знаете, че една компютърна система се състои от процесорен блок и монитор. В склада на фирма “ShumenSoft” има n процесорни блока и m монитора, като i-тият блок струва ai лева, аj-тият монитор - bj лева. Цената на една компютърна система, съдържаща i–тия системен процесорен блок и j-тия монитор, е равна на ai * bj. Вие трябва да сглобите възможно най-много компютърни системи така, че тяхната обща стойност да бъде максимално възможната.\n\nНапишете програма profit, която решава тази задача.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31259","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tУчителката по БЕЛ на Хитър Потър му постави задача да преброи колко пъти се среща всяка буква от латинската азбука в една от книгите за Хари Потър. За онагледяване на резултата, той реши да направи диаграма.\n\nПомогнете му, като напишете програма frequency, която въвежда текст, завършващ с ‘@’ и извежда на стандартния изход диаграма на честотата на срещане на всяка буква от латинската азбука.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31301","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are the RCD for your regional contest. It just ended and you now need to decide which teams qualify for the next level of competition. The teams are uniquely ranked (there are no ties). The next level has a limit on how many teams from any given school can participate. However, if that limit causes there to be not enough teams advancing, the remaining slots will be filled by teams from schools over the limit. If this happens, you will always give preference to higher-ranking teams, even if it means many teams from the same school advancing.\n\nOutput, in rank order, the teams that qualify for the next contest.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31320","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe yoghurt bottle is populated with N$N$ bacteria. But bacteria want company, so they form colonies, and this happens in the following way. Initially each bacterium is a colony consisting of itself. While there are at least two colonies in the yoghurt, two nearest colonies are chosen at each step and merged together.\n\nInitially for each pair of bacteria u$u$ and v$v$ the distance du,v$d_{u,v}$ between them is known. The distance for the colonies G$G$ and H$H$ is calculated as the average distance between all pairs of bacteria: 1|G|⋅|H|∑u∈G∑v∈Hdu,v$$ \\frac{ 1 }{|G| \\cdot |H|} \\sum_{u \\in G} \\sum_{v \\in H} d_{u, v} $$ \n\nBacteria aren't very particular when it comes to accuracy --- you cannot expect too much from single-cell organisms, anyway. So when there are several pairs of colonies with the distance within 10−6$10^{-6}$ of the minimal, then any of these pairs can be selected for merging at this step.\n\nYou are to model the colony merging process and find one of the possible scenarios.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31290","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t영어 소문자로 이루어진 길이 N$N$의 문자열 A$A$가 주어진다.\n\n희원이는 다음 두 가지 연산을 이용해 길이 N$N$의 문자열 B$B$를 만들고자 한다. B$B$는 처음에 빈 문자열이다.\n\n\n\t L$L$: A$A$의 첫 번째 문자를 B$B$의 맨 뒤에 추가한다. 그리고 A$A$의 첫 번째 문자를 삭제한다.\n\t R$R$: A$A$의 맨 마지막 문자를 B$B$의 맨 뒤에 추가한다. 그리고 A$A$의 마지막 문자를 삭제한다.\n\n\n연산을 적용하는 서로 다른 방법의 수는 총 2N$2^N$가지다. 연산의 결과로 만들 수 있는 모든 문자열 중, 사전순으로 K$K$번째에 위치하는 문자열을 출력하라.\n\n결과로 나온 두 문자열이 같더라도, 두 문자열을 만드는 데 사용한 연산 과정이 다르다면 다른 문자열로 세야 한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31321","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tPeter is a freshman in the University. His biggest problem is analytical geometry, because Peter's mind simply resists everything that is new.\n\nPeter is bored at analytical geometry lectures. Nevertheless he attends these lectures for some reason, and at the moment he is sitting at such a lecture. He is desperate to find something to entertain himself. Peter loves triangles, because triangles are simple and he knows them well. He has got a sheet of paper and a blue ballpen. He put n$n$ dots on the sheet, and decided that he'll connect these dots with lines and fill triangles by blue color.\n\nAt this very instant the bell rings, and everyone leaves the room for a break. Upon his return from the break, he's vexed to see that someone drew a green triangle on his paper. He is not that fond of green. He wants to draw his own blue triangle with three marked dots as vertices so that it would cover the green triangle. This way the nasty green triangle will be completely covered by blue ink, and Peter will be happy. The green triangle must be strictly within the blue one, in particular the boundaries of the two triangles must have no common points. Peter hasn't been listening to his professor, and he cannot solve the problem on his own. He is asking you for help.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31322","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tTrying to reach Skumbriewitz, who was floundering around the buoy, Ostap Bender swam on his side, keeping an eye on Berlaga, who was sitting on the shore. Ostap's head was turned by a constant angle for the whole time. For that reason he swam along a curve rather than along a straight line, so the angle between the direction of his swimming and the direction to Berlaga was constant.\n\nYour task is to find the length of Ostap Bender's trajectory.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31302","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are given a string of lowercase letters. In one operation, if you can find a substring that is one of the written-out forms of one of the digits from zero to nine (\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"), you can replace that substring with the numeric digit.\n\nYour goal is to find the shortest possible string you can end up with after applying zero or more of these operations, as well as how many distinct strings of that length there are.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31291","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe tests for this problem are open. In this problem, you have to choose one of the five items according to a textual description of an image.\n\n\"Barabashka\" (originally named \"Geistesblitz\") is a board game that favors fast reaction. Below are the rules of the game for this problem. Please read them carefully, as they are slightly different from the original game rules.\n\nThe game set includes five items of different colors: a white ghost named Barabashka, a green bottle, a gray mouse, a blue book and a red chair, and also special cards. Each card contains an image with exactly two of these five items. Each of the items also has one of the aforementioned five colors, but the color of each item may be wrong. The colors of these two items are different. The image can contain other objects, but their colors are guaranteed to be different from the five colors above.\n\nA single move in the game proceeds as follows. All items are put on the table, and after that, a card is drawn from the deck and shown to the players. If the card contains an item of the right color (the color on the picture matches the color of the real item on the table), the players have to grab that item. Otherwise, the players have to grab the item which is not present on the picture, and the true color of which also does not appear on the picture. The winner is the player who grabs the right item earlier than the others. The winner gets the card as a reward. It is guaranteed that all cards contain images for which there exists a unique right answer.\n\nIn this problem, each test consists of exactly five sentences. A sentence is a textual description of one card in English. The right answer for a sentence is the description of the item to grab when the players see such card.\n\nEach sentence is written in English and can contain English letters, spaces and characters \"'\", \",\", \"-\" and \".\" (ASCII codes 39, 44, 45 and 46). The names and the right colors of the items are the following: \"white Barabashka\", \"blue book\", \"red chair\", \"gray mouse\" and \"green bottle\".\n\nLet a word be a sequence of English letters surrounded from both ends by line ends or non-letter characters. Then we can formulate the following restrictions on the sentences:\n\n\n\tA sentence contains exactly two positions of the form \"color name\" where the word \"color\" is one of the five colors mentioned above, and the word \"name\" is one of the five item names.\n\tNo other word in the sentence is equal to the name or the color of some of the items on the table.\n\n\nThe tests in this problem are open for contestants and can be downloaded at the following addresses:\n\n\n\ttests.zip (Windows line breaks),\n\ttests.tar.gz (Linux line breaks).\n\n\nThe problem contains 24$24$ tests, that is, 24⋅5=120$24 \\cdot 5 = 120$ card descriptions: one description for each possible combination of items and their colors on a card.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31210","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tДарина харесва числа, които се състоят от еднакви цифри. Например, числата 777$777$ или 5555$5555$, но изобщо не харесва числото 1234$1234$. Когато е в добро настроение, харесва също и числа, в които всички цифри освен една са еднакви, както например в числото 77727$77727$.\n\nДарина разполага с числото хх$х$. Тя иска да намери най-малкото цяло число y≥x$y ≥ x$, което е с еднакви цифри, или в което само една цифра е различна.\n\nНапишете програма numbers, която по дадено цяло число хх$х$ и информация, дали Дарина е в добро настроение, намира минималното цяло число y≥x$y ≥ x$, което се харесва на Дарина.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31323","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn the \\textsf{Faster Than Light} video game each spaceship can be represented on a flat grid. All cells of the grid are unit squares. Some cells represent ship sections and they can be fired at. Other sections don't belong to the ship.\n\nThere is a beam weapon in the game which shoots in the following way. When fired the weapon draws a line segment of the fixed length L$L$ with the beam over the attacked ship. The position of the segment can be chosen arbitrarily given that one of its ends is positioned inside or on the boundary of one of the sections of the attacked ship. The other end of the segment can be anywhere, including outside the grid. The damage to the ship and its crew depends on the set of sections damaged by the beam. A ship section is considered damaged if the line segment and section cell (including its boundary) have at least one common point.\n\nYou are invited to develop a targeting program which should work in the following way. For each spaceship a positive number of points for hitting each of its sections is given. Your program must find the position of the segment which yields the maximum sum of points for all damaged sections.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31303","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAshley and Brandon are designing a survival video game called Don't Hunger Together. The game works as follows:\n\nThe game proceeds as a number of turns. Each turn consists of a day followed by a night. Several players have to survive for many turns in the wilderness. They collect food in the daytime and eat at night. During the daytime, they can scavenge up to a maximum amount of food, and the food found on that day must be eaten by some night in the future. Any leftover such food goes bad and is inedible. Each night, every player must eat a certain quantity of food, otherwise they will die of hunger. They win if every player is able to eat enough food on each of the nights.\n\nAshley and Brandon have designed a scenario and the last thing they need to do is pick the quantity of food that each player must eat every night. They wish to know the maximum possible value of this quantity, which must be positive. However, if the game is not winnable for any positive value, please let Ashley and Brandon know the scenario is impossible!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31324","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe Indian stepped well Chand Baori is, with some simplifications, a pyramid tapering down. Faces of the pyramid are made up of rows of trapezoid stairs which can be used to descend to reach the water. The first (lowest) level is a single stairway with two flights of stairs on the left and on the right. The second level has two such stairways, etc.\n\nTo visit the \"Harshat Mata\" shrine dedicated to the goddess of happiness and joy pilgrims need to cleanse themselves in the waters of the well, that is, to descend to the very bottom. Pilgrims on their way to the water can only descend or walk horizontally along the current level, but not climb up.\n\nThe builders of the well want to construct it in such a way that the number of possible ways of descend would be no less than the number of pilgrims. Two paths are considered different if there exists a level with a different stairway used for descending, or different flight of the same stairway used.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31292","content":"문제\n\nIn this problem, you have to compare two rational numbers represented by their continued fractions.\n\nA finite continued fraction is a sequence \n[a0;a1,a2,…,an]\n$[a_{0}; a_{1}, a_{2}, \\ldots, a_{n}]$. The following restrictions are applied:\n\n \nn\n$n$ is a non-negative finite integer,\nthe elements \na0\n$a_{0}$, \na1\n$a_{1}$, \na2\n$a_{2}$, \n…\n$\\ldots$, \nan\n$a_{n}$ are integers,\n \nai>0\n$a_{i} > 0$ for each \ni>0\n$i > 0$,\n \nan>1\n$a_{n} > 1$ if \nn>0\n$n > 0$.\n\nThese restrictions allow to establish a one-to-one correspondence between rational numbers and finite continued fractions: every rational number \nx\n$x$ corresponds to the unique continued fraction \n[a0;a1,a2,…,an]\n$[a_{0}; a_{1}, a_{2}, \\ldots, a_{n}]$ such that\nx=a0+1a1+1a2+1⋱+1an.\n$$x = a_{0} + \\frac {1} {a_{1} + \\frac {1} {a_{2} + \\frac {1} {\\ddots + \\frac {1} {a_{n}}}}}\\text{.}$$\nThus, the following notation is used: \nx=[a0;a1,a2,…,an]\n$x = [a_{0}; a_{1}, a_{2}, \\ldots, a_{n}]$. For example,\n1725=0+12517=0+11+817=0+11+1178=0+11+12+18,\n$$\\frac {17} {25} = 0 + \\frac {1} {\\frac {25} {17}} = 0 + \\frac {1} {1 + \\frac {8} {17}} = 0 + \\frac {1} {1 + \\frac {1} {\\frac {17} {8}}} = \\mathbf{0} + \\frac {1} {\\mathbf{1} + \\frac {1} {\\mathbf{2} + \\frac {1} {\\mathbf{8}}}}\\text{,}$$\nso we write \n1725=[0;1,2,8]\n$\\frac {17} {25} = [0; 1, 2, 8]$.\n\nGiven the continued fractions for two rational numbers \nx\n$x$ and \ny\n$y$, find whether \nx<y\n$x < y$, \nx=y\n$x = y$, or \nx>y\n$x > y$."},{"problemId":"31293","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are given a bidirectional graph where the degree of each vertex is at most 5. Paint its vertices in 3 colors in such a way that each vertex v$v$ has no more than one neighbor of the same color as v$v$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31325","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tDevil's Hell deLivery company delivers literally everything: boxes, packages, packets, datagrams et cetera.\n\nThe delivery process from city A to city B works as follows. There are N$N$ trucks and K$K$ items. The capacity of truck number i$i$ equals ci$c_i$. The weight of item number j$j$ equals wj$w_j$. The trucks make one or more delivery steps.\n\nDuring one step, some items are loaded into some trucks. Items can not be split. Each truck's capacity must not be exceeded by the total weight of the items assigned to it. All trucks depart simultaneously.\n\nAt the end of each step, all trucks come back to the place where they started. If there are any items left, another step is performed.\n\nYour task is to distribute items among steps and trucks so that the number of steps is minimized.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31304","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tEddy owns a rectangular garden and has noticed some trespassers stomping through his garden. There are some plants that he wants to protect. He hires an assistant, Zyra, to patrol and protect his garden.\n\nZyra cannot be bothered to monitor his garden, so she plants a circle of thorns centered at a randomly chosen location within the boundaries of his garden. A plant is considered protected if it is strictly inside the circle of thorns - that is, the distance from the plant to the center of the circle of thorns is less than the circle's radius. The circle of thorns may extend outside of the boundary of the rectangular garden, though all plants will be inside or on the boundary of the garden.\n\nGiven the random nature of the placement of Zyra's circle of thorns, compute the expected value of the plants that will be protected. Note that Zyra's circle of thorns does not have to be centered at integer coordinates.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31294","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tConsider all subsets of set U={0,1,2,…,n−1}$U = \\{0, 1, 2, \\dots, n-1\\}$. Every subset A={a1,a2,…,ak}$A = \\{a_1, a_2, \\dots, a_k\\}$ corresponds to a unique integer p(A)=∑i=1k2ai$p(A) = \\sum\\limits_{i=1}^k 2^{a_i}$. Let function F$F$ of an n$n$-element set be defined by an array of integers f$f$ of length 2n$2^n$: the value F(A)$F(A)$ is equal to f[p(A)]$f[p(A)]$.\n\nYou are given two functions F$F$ and G$G$. Your task is to find such function H$H$ that H(A)=∑B∪C=AF(B)G(C).$$H(A) = \\sum\\limits_{B \\cup C = A}F(B)G(C)\\text{.}$$ \n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31211","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tЗаписана е редица от n$n$ цели положителни числа a0$a_0$, a1$a_1$, …$\\dots$, an−1$a_{n-1}$. Числата от редицата не са ни известни, но са дадени стойностите на m$m$ суми от вида ai+aj$a_i + a_j$, където i$i$ и j$j$ са индекси от редицата. Напишете програма recover, която при дадени суми от описания вид, намира числата a0$a_0$, a1$a_1$, …$\\dots$, an−1$a_{n-1}$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31295","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tOctopuses are located on the surface of the planar seabed in the most beatiful manner. Octopuses like their location if it specifies a partition of the seabed plane into triangles such that the octopuses' heads are in triangle vertices, and triangle edges are formed by their outstretched tentacles. They call such partition a triangulation. Let us formalize this notion with the help of graph theory.\n\nA planar graph is a graph that can be drawn on a plane in such a way that no edges cross each other.\n\nA face of a graph drawn without crossings is a simple cycle which surrounds such a region that there are no edges or vertices inside the region.\n\nAn outer face of a graph drawn without crossings is the region which has infinite area.\n\nA triangulation of a set of points on the plane is a connected planar graph drawn in such a way that its vertices are in these points, and every face except the outer face is a non-degenerate triangle formed by exactly three edges of the graph.\n\nTwo triangles are connected by side if they have a common side.\n\nA triangle and the outer face are connected by side if one of the triangle's sides touches the outer face.\n\nLet us denote the set of faces of the triangulation by S$S$.\n\nA sequence of elements of S$S$ is called a path if every two consecutive members of it are connected by side.\n\nA subset of S$S$ is said to be connected by side if for any two elements of this subset, there exists a path such that all its elements belong to this subset.\n\nWe are given a triangulation S$S$.\n\nConsider a subset of S$S$ that does not contain the outer face. We will say such a subset is simply connected if it satisfies the following conditions:\n\n\n\tthe subset is connected by side;\n\tthe complement of the subset in S$S$ also is connected by side.\n\n\nOctopuses like simply connected sets because they plan to take contour integrals around their border.\n\nOne of the triangles in the triangulation is fixed as the starting triangle.\n\nHelp the octopuses to find a sequence of all triangles in the triangulation which starts with the starting triangle, and for any 1≤i≤K$1 \\le i \\le K$ where K$K$ is the number of triangles, the set of triangles T1$T_{1}$, T2$T_{2}$, …$\\ldots$, Ti$T_{i}$ is simply connected.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31326","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tImagine we take a stretchable square paper and cut a rectangle of size A×B$A \\times B$ along the grid lines. All squares are numbered from 1$1$ to A⋅B$A \\cdot B$. From this rectangle, we cut another rectangle of size C×D$C \\times D$, again along the grid lines, so that sides of length C$C$ are parallel to sides of length A$A$. Then, we glue the sides of length B$B$ together, and finally, glue the sides of length A$A$ together. What we got is a torus with a rectangular hole of C×D$C \\times D$ squares cut from it. (A torus is the surface of a bagel.)\n\nThe squares of the torus are considered different if they have different numbers.\n\nWe shall now tile the external surface of this torus with a hole using stretchable dominoes. Each domino consists of two squares of two different colors: one white and one black. The squares share a common side.\n\nOur tiling has to satisfy the following condition: if two squares of the torus which are adjacent by side belong to different dominoes, they have to be the same color: both white or both black.\n\nTwo tilings are considered different if at least one of the following two conditions is satisfied:\n\n\n\tat least one square of the torus is white in one tiling and black in another;\n\tat least one square of the torus is covered by dominoes in such a way that the other square covered by the same domino is Y1$Y_{1}$ in one tiling and Y2$Y_{2}$ in another, and Y1≠Y2$Y_{1} \\ne Y_{2}$.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31305","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tVi is a coach for her university's ICPC organization and is working on creating teams for their upcoming regional contest. They recently competed in the North America Qualifier and Vi is using the results as well as each person's preferences to create as many teams of three as possible to send to regionals.\n\nMore specifically, n$n$ people from Vi's university competed in the North America Qualifier (NAQ), and each person got a unique rank from 1$1$ to n$n$. The person at rank r$r$ has two parameters, ar$a_r$ and br$b_r$, where ar≤r≤br$a_r \\le r \\le b_r$, indicating that their two teammates must have a rank between ar$a_r$ and br$b_r$, inclusive. Teams must have exactly three people.\n\nDue to the collaborative environment, Vi notes that for every pair of individuals at ranks i$i$ and j$j$, if i<j$i < j$, then ai≤aj$a_i \\le a_j$ and bi≤bj$b_i \\le b_j$.\n\nCompute the maximum number of teams that Vi can send to regionals\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31340","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tTaja likes to go to the cafe <<In the cube>> with her friends, since it has very convenient ordering system. To make an order, guest should walk to the automated stand and choose any dishes they likes. There are several such stands and they all are fixed at specific place inside the cafe.\n\nIn the cafe guests sit in front of tables, there are k$k$ tables. i$i$th table cannot serve more than ci$c_i$ persons. Uncomfortableness of the table position is the sum of the distances from this table to ci$c_i$ automated stands closest to it. \n\nFormally, cafe is the grid (0,0)−(5000,5000)$(0, 0)-(5000, 5000)$. Each cell (x,y)$(x, y)$ (0≤x,y≤5000$0 \\leq x, y \\leq 5\\,000$) can contain either single automated stand or single table or nothing.\n\nThe distance between cells (x1,y1)$(x_1, y_1)$ and (x2,y2)$(x_2, y_2)$ equals to |x2−x1|+|y2−y1|$|x_2 - x_1| + |y_2 - y_1|$.\n\nYou are to arrange the tables in such a way, that total sum of uncomfortablenesses for all tables should be minimal.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31327","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThis is an interactive problem.\n\nJury has a permutation of numbers from 1$1$ to n$n$. Your task is find positions where numbers from 1$1$ to k$k$ are placed. To do this, you can use jury's program which can compare numbers in any two positions in the permutation.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31306","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe Vowels are a, e, i, o and u, and possibly y. People disagree on whether y is a vowel or not. Unfortunately for you, you have been tasked with counting the number of vowels in a word. You'll have to count how many vowels there are assuming y is a vowel, and assuming y is not.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31296","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are given a pentagon. Your task is to find the number of its triangulations.\n\nA triangulation of polygon P$P$  is a collection of triangles such that the internal areas of these triangles have no common points, and their union is equal to P$P$. Each vertex of each triangle must coincide with some of the polygon's vertices. Additionally, each side of each traingle must either fully coincide with some of the polygon's sides or have exactly two common points (endpoints) with the border of the polygon.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31307","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are the chief judge for the next ICPC regional contest, and you want to make sure that it is theoretically possible for a team to solve all problems in the contest, but only if they are performing at their peak skill. With your insider knowledge, you know that the best team has a fixed limit on the number of lines of code per hour that they can successfully write.\n\nYou have a number of problems to select among and you know that each problem has a number of lines of code that would be required to solve it. You remember that regional contests are five hours long. What is the maximum number of problems you can put in the problem set so that the best team has a chance of solving all of the problems in the contest?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31297","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThis is an interactive problem. In this problem, you have to win against an opponent who makes random moves.\n\nFelix and Sophia play a game on a rectangular board consisting of m×n$m \\times n$ square cells. They move in turns. Each cell of the board is either free or painted. Initially all cells are free. A move consists in selecting any four free cells which form a 2×2$2 \\times 2$ square and painting these cells. The player who can not make a move loses the game.\n\nOn each of his turns, Felix chooses one of the possible 2×2$2 \\times 2$ squares uniformly at random and paints it. Your task is to play as Sophia. Your solution will be considered correct if it loses no more than 10$10$ games out of 300$300$.\n\nIn this problem, each test specifies the size of the board. In each test, you have to play exactly 300$300$ games. In each game, Felix moves first and Sophia moves second.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31328","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn this interactive problem, you have to get from the entry of an unknown maze to its exit spending not too much time.\n\nThe famous warrior Malcolm, The Hero of Arcania, walked at night through a dark forest. He walked for a long time and started to think he got lost, but suddenly ran into a stone wall on his path. The markings on the stone plate which were visible under fallen leaves clearly indicated that he discovered a maze of dwarven origin.\n\nThe hero knows little about the forest and the trees growing there. On the bright side, he spent much time in the company of dwarves, so now he can tell a lot about a maze by just looking at its markings.\n\n\nThe markings on this maze form the characters \"SK3\". Character \"S\" means that the maze is a square, that is, the floor of the maze consists of n×n$n \\times n$ square cells of size 1×1$1 \\times 1$ meters each. There is a thin solid wall around these cells with two openings. The first one is the entrance near which the hero stands. It is located in the southern wall of the southwestern corner cell of the maze. The second opening is the exit located in the northern wall of the northeastern corner cell of the maze.\n\nEach two cells of the maze sharing a side can be either connected by a passage or separated by a section of a thin inner wall, one meter long. In the maze, from each cell, one can move into any cell sharing a side with it if there is no wall between these cells. Additionally, one can freely move through the exit. The entrance is open only until the hero steps inside the maze. After that, it is immediately closed and opens again only when the hero arrives safely at the exit.\n\nCharacters \"K3\" tell to an experienced maze walker that the maze has the following structure. First, from all possible sections of thin inner walls (there are n×(n−1)$n \\times (n - 1)$ north-to-south sections in total, and just as many east-to-west sections), one third is selected at random (a non-integer number is rounded down) and considered in a random fixed order. Then, the sections are placed into the maze in that order. If some section would divide the square containing the maze into disconnected parts if it was placed, such section is discarded (not placed). Thus it is guaranteed that the resulting maze will be connected.\n\n\nMalcolm became happy: he knows so much about the maze that he could certainly arrive at the exit. His goal is to start at the cell of the forest adjacent to the maze entrance and come to the cell of the forest adjacent to the maze exit. Besides, he should hurry: the person who travels from the entrance to the exit fast enough will see the treasure hidden in the forest near the exit. Of course, the above statement is true only if no one got to the treasure earlier.\n\nOn second thought, there is something to worry about. Firstly, Malcolm does not know the size of the maze: the length of the square side n$n$ can be any integer amount of meters from 10$10$ to 200$200$. Secondly, the maze is as dark as the forest around it, so Malcolm has to move almost blindly. At the start of each step, the hero chooses one of four main directions: north, east, south or west. Then he tries to move by one meter in that direction. If the hero runs into an obstacle, he remains where he was. Otherwise, he moves to the neighboring cell in the selected direction. The time required for each step does not depend on the result of the step, so what matters is the total number of steps.\n\nHelp the hero to move in such a way that he arrives at the required cell fast enough. The solution will be considered correct if the hero makes at most 5⋅n+300$5 \\cdot n + 300$ steps and arrives at the cell outside of the maze exit.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31212","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tАвиокомпания А5 извърши още една актуализация на софтуера. Сега при продажба на билети се предлага първото незаето място в самолета (местата в самолета се заемат последователно, следвайки реда за номерирането им). Фигурата по-долу показва схема на салона на Boeing.\n\n\n\nНомерът на седалката в салона е комбинация от номера на реда (число от 1 до 21) и номера на седалката в реда (една от буквите \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"). В същото време на първия ред има само три места: 1D, 1E и 1F, а на последния ред - две места: 21D и 21E.\n\nМясто номер 1D винаги се продава първо, след това място номер 1E, трето място 1F, четвърти - 2А и т.н.\n\nПромяната на софтуера не променила едно старо правило на компанията: преди началото на продажбата на билети да се резервира едно служебно място, което не се продава.\n\nНапишете програма boeing, която по броя на продадените билети и резервираното служебно място, определя и показва номера на първото свободно място, или думата full, ако всички билети са продадени.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31341","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tTaja often went by the toy store and looked at electoronic table near the store window which displayed two integers. Store window shows several kinds of toys, but numbers on the table may be out of sync with actual number of different kinds. It turned out that, not every toy from the store window can be bought, because they do not remove toys as soon as possible, but only after some time past the purchase. For different kinds of toys this time can be different. \n\nThere are n$n$ kinds of toys. For each kind of toy it is known that initial amount of toys is ci$c_i$ and time is ti$t_i$ minutes after the purchase, after which the toy is removed from the window. Each minute the following happens: \n\n\n\tremoval of toys from the store window, that were purchased corresponding amount of minutes ago;\n\tthe electronic table is updated;\n\tnew customer comes and necessarily buys some toy, that is remaining in stock.\n\n\nTaja has been always interested the meaning of the numbers on the electronic table and recently she found it out. Both numbers show how many kinds of toys can be bought in the store, but first one shows number of kinds, possibly in stock up to the current moment, and second one is number of kinds, that are in stock up to the current moment for sure. Also Taja is interested how much is this table informative for customers. That's why she needs a program, that will model behaviour of the customers and update the table.\n\nYour task is: for each minute calculate electronic table numbers.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31329","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA formal grammar is a way of describing formal languages as Γ=⟨Σ,N,S∈N,P⊂N+×(Σ∪N)∗⟩$\\Gamma = \\langle \\Sigma, N, S \\in N, P \\subset N^{+} \\times (\\Sigma \\cup N)^{*}\\rangle$ where Σ$\\Sigma$ is called an аlphabet and its elements are called terminals, N$N$ is a set of nonterminals, S$S$ is the starting nonterminal, and P$P$ is a set of production rules of the form α→β$\\alpha \\rightarrow \\beta$.\n\nHere, N+$N^{+}$ contains all strings of one or more elements of N$N$ (non-empty strings of nonterminals), and (Σ∪N)∗$(\\Sigma\\cup N)^{*}$ consists of all strings of zero, one or more elements of (Σ∪N)$(\\Sigma\\cup N)$ (strings of terminals and nonterminals, including the empty string).\n\nA grammar is called context-free if the left side of each production rule consists of exactly one nonterminal, more formally, P⊂N×(Σ∪N)∗$P \\subset N \\times (\\Sigma\\cup N)^{*}$.\n\nFor example, let us consider a grammar from the second example test case with alphabet $\\Sigma = \\{a, b\\},setofnonterminals$, set of nonterminals $N = \\{S, A\\}$ and two production rules:\n\n\n\t$S \\rightarrow bA$\n\t$A \\rightarrow aa$\n\n\nOne can easily see that it is a context-free grammar.\n\nTo create the language generated by a grammar, one needs to start from a string consisting of only start nonterminal S$S$, and then apply production rules one or more times. Applying a production rule is the procedure of finding the left side of that rule somewhere in the current string and replacing it by the string from the right side of that rule. The language generated by Γ$\\Gamma$ is the set of all strings consisting only of terminals that can be produced by applying production rules one or more times.\n\nFor example, there is a string $baa inthelanguagegeneratedbythegrammardescribedabove.Toproduceit,onecouldapplyproductions$ in the language generated by the grammar described above. To produce it, one could apply productions $S \\rightarrow bA \\rightarrow baa$. There are no other strings in the language generated by this grammar.\n\nSome grammars may even generate infinite languages, others may generate empty ones.\n\nYou are given a context-free grammar with an alphabet consisting of two terminals \"a\" and \"b\". Your task is to check whether the language generated by this grammar contains a string consisting of strictly more characters \"a\" than characters \"b\".\n\nNonterminals in this task are enumerated from 1$1$ to n$n$. The starting nonterminal always has number 1$1$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31308","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAt a recent doctor's appointment, Brandon has been marked as being deficient in magnesium. His doctor has advised him to take exactly some number of picograms of magnesium a day. His doctor can prescribe pills that have any integer number of picograms of magnesium from one up to a maximum. Brandon doesn't like taking pills though, so he refuses any prescription that requires him to take too many pills in a day.\n\nYour task is to find all prescriptions that Brandon could be given. Note that all pills prescribed to Brandon must have the same dosage.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31298","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are given an bidirectional graph with (n+1)$(n + 1)$ vertices numbered from 0$0$ to n$n$. There are no loops and no multiple edges in this graph. Additionally, all cycles pass through vertex 0. Your task is to remove the minimum possible number of vertices so that there are no cycles in the graph. You can not remove the vertex number 0.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31299","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are given a directed acyclic graph with two fixed pairs of vertices: (A,B)$(A, B)$ and (C,D)$(C, D)$. Consider all pairs of edge-disjoint simple paths --- one from A$A$ to B$B$, another from C$C$ to D$D$. Your task is to find pair with minimal total length.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31330","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are given n$n$ points on the plane: A1,A2,⋯,An$A_1, A_2, \\cdots, A_n$. Point i$i$ has weight wi$w_i$. Find such point B$B$ that the maximum weighted distance maxi=1nwi⋅|AiB|$\\max\\limits_{i=1}^{n}{w_i \\cdot |A_{i}B|}$ is minimal possible.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31331","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn this problem, for a collection of bugs each of which is either a spy or an agent, you have to show the true number of spy bugs while not disclosing any spy or agent.\n\nNanobugs are intelligent robots who obey the orders of their masters. They are usually busy spying, eavesdropping or monitoring other nanobugs. All nanobugs look exactly the same.\n\nBartosz and Vivek are engineers of two corporations: Eastern Cartel and Southern Trading Company. They have to examine the meeting room in the office of Eastern Cartel where representatives of their corporations will discuss a new contract. Together, they managed to uncover and catch n$n$ nanobugs. Each of the bugs is either an Eastern Cartel's security agent or a Southern Trading Company's spy.\n\nAnders is a security expert from SpyTek. His job for today is to help Bartosz and Vivek determine how many spies and agents are among the nanobugs they caught. For each bug, Anders knows whether it is a spy or an agent, but no other person has that knowledge.\n\nAnders sees that there are exactly a$a$ spies among the bugs. Bartosz and Vivek, on the other hand, have only learned by standard procedures that there are either a$a$ or b$b$ spies, and the numbers a$a$ and b$b$ differ by exactly one. They have no other information about the bugs.\n\nNanobugs are expensive intelligent machines which especially value their incognito. Sure, being an expert, Anders knows who is the master of each of the bugs. But if for some nanobug, its affiliation (which company the nanobug works for) became known to the engineers or other nanobugs, further functioning of that nanobug (and its very existence!) would be threatened.\n\nAs a security expert, Anders has an instrument which will help him in his work: a balance checker. It is a small box with two chambers and an indicator light. Using a balance checker is simple: Anders places some nanobugs in each of the chambers and presses a button. After that, for each corporation, the instrument checks that the number of nanobugs affiliated with it is the same in both chambers. If this is true for both corporations, the indicator light is green, otherwise, it is red.\n\nAnders plans to perform a series of checks with the balance checker. For that, he will start by placing all nanobugs in a row in the order he likes. During each check, Anders will place some nanobugs in the first camera, some in the second camera, press the button, show the result to the engineers, and then return all nanobugs to their places in the row, restoring their original order. With such procedure, it can be said that, during the whole series of checks, the nanobugs are numbered by integers from 1$1$ to n$n$ according to their places in the row.\n\nHelp Anders prove to the engineers that there are exactly a$a$ spies among the n$n$ nanobugs they caught, and do it in a way that does not disclose any nanobug's affiliation, or determine that this is not possible.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31309","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tKirby has written down all the integers from a$a$ to b$b$ in order. He wrote them down as one big string, with no spaces between them and no leading zeroes, and he didn't tell you the values of a$a$ and b$b$! \n\nBecause Kirby was hungry, he ate one of the numbers. Can you figure out what number he ate?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31342","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA trouble has happened at Taja's work: a truck driver got sick, while there's is an urgency to deliver gifts from one store to another. Fortunately, currently she has a break, and this store is situated on the same street so her skill to drive only forward with constant speed v1$v_1$ is quite sufficient, to help the situation.\n\nBut one of the crossroads on the way to the store has broken traffic lights, and now there is traffic guard, who is not supposed to leave his place.\n\nAt some moment he noticed the truck moving towards him and having no intention to steer aside. And he's not supposed to move --- he will be penaltized for that --- nevertheless he will have to. That's why traffic guard wants to allow the truck bypass in such a way that he will minimize his time of being off his initial position. Traffic guard can move in any way, but his speed cannot exceed v2$v_2$.\n\nRegard the truck as a rectangle and traffic guard as a dot. It is required that dot should never be strictly inside the rectangle and time, during which the dot isn't at (p,q)$(p, q)$ (its initial position), should be minimal possible.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31310","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tHas this scenario ever happened to you? You're having a lovely conversation with someone, begin to say a word you've used hundreds of times, and the word escapes your mind, leaving you sputtering the first syllable. Well worry no more, because the Institute for Cancelling Pauses in Conversation (ICPC) has developed software to curtail this issue.\n\nIf there's a word on the tip of your tongue, enter the first few characters of the word into the ICPC software, and it will tell you how many words in the dictionary have those characters as a prefix. The ICPC quickly discovered that many of their clients don't only have tip-of-your-tongue problems, but also base-of-your-tongue problems, where users only remember some suffix of a word.\n\nTo be as useful as possible, the ICPC software needs to support the following queries:\n\n\n\tAND p$p$ s$s$. Count the number of words in the dictionary that have p$p$ as a prefix and s$s$ as a suffix.\n\tOR p$p$ s$s$. Count the number of words in the dictionary that have p$p$ as a prefix or s$s$ as a suffix.\n\tXOR p$p$ s$s$. Count the number of words in the dictionary that have p$p$ as a prefix or s$s$ as a suffix, but not both.\n\n\nPrefixes and suffixes of a word may be the whole world, and can overlap within the word. Due to a quirk in the ICPC software, p$p$ and s$s$ must be the same length. You must help the software developers answer all the incoming queries.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31213","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tСтандартен часовник със стрелки показва точно h$h$ часа и m$m$ минути. Означенията на циферблата са целите числа от 1 до 12 за часовете на часовата стрелка и от 0 до 59 за минутите, които показва минутната стрелка. Стрелките се движат равномерно. Отбелязваме с чертичка точното място, където е стрелката за минутите. Какво ще покажат стрелките на часовника в първия следващ момент, когато стрелката за часовете застане точно на отбелязаната чертичка?\n\nНапишете програма clock, която отговаря на този въпрос.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31332","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn this problem, you have to travel from one corner of a checkered 4×4$4 \\times 4$ field to the opposite corner using any simple path which is not the shortest one.\n\nThere is a checkered field on a plane consisting of 4×4$4 \\times 4$ cells. Each cell of the field is either empty or fully occupied by a wall.\n\nRobot Aurelius is passing a test to measure the intelligence level by solving various problems on that field. He has already completed the parts which involved searching for an arbitrary path and the shortest path between a pair of cells.\n\nThe next task requires Aurelius to walk from the upper left corner of the field to the lower right corner by moving through empty cells. A single step consists in moving from the current cell to any other cell which shares a side with the current one. The path must be simple, that is, for each cell, the robot can not visit that cell more than once. Additionally, the length of the path must be strictly greater than the length of the shortest path between the corners on the given field. The length of the path is the number of steps on that path.\n\nWrite a program that will help robot Aurelius accomplish the task.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31333","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are given polynomials f(x)$f(x)$, g(x)$g(x)$, h(x)$h(x)$ over field Z/2Z$\\mathbb{Z}/2\\mathbb{Z}$.\n\nFind the polynomial f(g(x))modh(x)$f(g(x)) \\bmod h(x)$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31311","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are given a simple connected graph where each edge is assigned a non-negative weight. Recall that a minimum spanning tree of a graph is a connected, acyclic subset of the edges of the graph with minimum total weight. Find an edge which maximizes the minimum spanning tree weight of a given graph if that edge is deleted. It is guaranteed that the input graph remains connected after deleting any one edge.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31334","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are given a weighted directed graph. Let each vertex i$i$ have potential Φi$\\Phi_i$. Let wuv$w_{uv}$ be the weight of the edge (u,v)$(u, v)$. Then, define the new weight as wuv′=wuv+Φu−Φv$w'_{uv} = w_{uv} + \\Phi_u - \\Phi_v$.\n\nFind such integer potentials Φi$\\Phi_i$ that the weights w′$w'$ for all edges will be equal.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31343","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThis problem is interactive.\n\nAt her loft, Taja found an ancient tabletop game, which she managed to win only from time to time. Show Taja, how to win this game with a guarantee.\n\nGame equipment consists of round piece with a radius of 1$1$, which has an arrow drawn on top of it, two dices and 360$360$ stickers. Every sticker has unique integer written on it, from 0∘$0^\\circ$ to 359∘$359^\\circ$.\n\nBefore starting to play one should mark a point on a table, then place round piece on the table, then choose 12$12$ different stickers, and 6$6$ of them stick on the first dice, and another six on the second dice. The goal is to cover the marked point with the piece. It should be achieved by making turns with the following rule. First, player rolls one of the dice and rotates the piece counterclockwise by amount of degrees written on top of the dice. Then the piece moves towards the arrow by the distance of 10$10$.\n\nCo-ordinates of the marked point is always (0,0)$(0, 0)$. Starting position of the center of the piece is (x,y)$(x, y)$ and satisfies the following constraint:\n\n 2≤max(|x|,|y|)≤500$$2 \\leq \\max(|x|, |y|) \\leq 500$$ \n\nNumber of queries for this problem equals to the number of made turns.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31360","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe Pea King was a wise ruler and a good strategist. He spent all his time dealing with the state affairs. As the kingdom grew, population increased. The new houses popped up everywhere like mushrooms after the rain. The kings of neighboring states were becoming envious and started to plan a war. In order to protect the capital from the invaders, the Pea King decided to build a new city wall around the capital borders that would lock all the buildings on the city outskirts inside of it as well.\n\nFor the aesthetic effect, namely to make the map on the wall in king’s parlor look pretty, it was decided that the capital city should have rectangular borders. Keeping this in mind the total land area should remain as minimal as possible and all the N$N$ houses registered should stay inside the borders of the rectangular city.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31312","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tEvery day, Eugene logs how many cups of water he drank. He forgot to log one entry in his journal though, but he remembers the minimum number and maximum number of cups of water he drank every day since he started logging his journal, and that there was at least one day where he drank the minimum and one day where he drank the maximum. Compute all possible amounts of cups of water he could have imbibed on the day he forgot to log.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31313","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tNoname State University (NSU) Team has made it into ACM ICPC programming contest finals. Four hours into the competition, the rating has just been frozen, and our team is struggling. Luckily, Chuck Norris has come to the rescue. With his help, the team can become world champions! Now the team wants to make their victory as spectacular as possible during the ceremony where the results will be revealed.\n\nA few Chuck Norris facts:\n\n\n\tChuck Norris solved all problems way before their authors.\n\tChuck Norris writes code as fast as the RAM allows.\n\tAt any minute Chuck Norris can send any number of submissions for each problem. However, he has agreed to send submissions only for the NSU team.\n\tChuck Norris can get any verdict he wishes for any of his submissions, however he has pitied the jury and decided to confine himself to two possible verdicts: \"ACCEPTED\" and \"Wrong Answer\".\n\tChuck Norris can predict the future, so he knows everything about all submissions sent by other teams during the competition, including those sent after the score has been frozen.\n\n\n \n\nThe contest lasts for 300$300$ minutes. There are K$K$ problems, numbered from 1$1$ to K$K$. Any team can submit a solution to any problem to the testing system at any moment during a competition. The testing system checks the submissions in order of their arrival and returns verdicts. A submission with the \"ACCEPTED\" verdict is considered successful, all other submissions are considered unsuccessful. A problem is considered solved by a team when there is at least one successful submission to it by the team. Penalty time for a problem equals the number of full minutes from the beginning of the contest to the first successful submission plus the number of submissions before the first successful submission multiplied by 20$20$. Only submissions for a particular problem are taken into account when calculating penalty time.\n\nThe teams in the rating are listed in order of number of solved problems decreasing. Teams with equal numbers of solved problems are ordered by total penalty time increasing. The total penalty time equals the sum of penalty times for all solved problems. If teams have equal numbers of solved problems and equal penalty time, then they are sorted by team number increasing.\n\nDuring the first 240$240$ minutes of the contest the current standings (i.e. rating) are available. After that the rating is \"frozen\", i.e. it is no longer updated. During the closing ceremony the results of the submissions sent during the last hour are gradually disclosed using the ICPC Contest Resolver software.\n\nContest Resolver works in the following way. Initially it displays the rating at the freezing point. It is considered that none of the submissions sent after that moment has been judged yet. The unjudged submissions do not affect the rating, as if they didn't exist at all. Recalculation continues for as long as there are unjudged submissions. Recalculation consists in consecutive execution of the following steps.\n\n\n\tA team with the worst place with at least one unjudged submission is selected from the rating.\n\tA problem with the lowest number is selected, given that the team has at least one unjudged submission for this problem.\n\tAll unjudged submissions of the team for this problem are judged in chronological order.\n\tAfter that the rating is updated based on the judged submissions. As the result the team can jump up, i.e. move to a better place in the rating.\n\n\nJump height is the difference between the position before recalculation and the position after recalculation.\n\nLet \\textit {spectacularity} of a team's performance equal the sum of squared heights of all jumps of the team during Contest Resolver runtime. Note that a change in the team's position resulting from judging successful solutions of other teams is not considered to be a jump. Find the optimal behavior of the team (together with Chuck, of course) after the freeze. The optimal behavior is defined by the following conditions:\n\n\n\tThe team must become champion (i.e. take the first place in the final rating) if that is possible.\n\tThe spectacularity must be the maximal given that the first condition is satisfied.\n\n\nIf there are several variants of the optimal behavior any of them may be displayed.\n\nChuck Norris can't change the past, so the number of full minutes from the beginning of the contest to the moment of any additional submission must be in range from 240$240$ to 299$299$ inclusive. Assume that it is impossible to send a problem exactly in a whole number of minutes since the beginning of the contest. Thus it is impossible to receive penalty time of 300$300$ for a problem solved from the first attempt.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31335","content":"문제\n\n\\textit{In this problem, you have to find the next integer in a particular ordering with has the same set of prime divisors.}\n\nArchaeologist Kris studies the ancient platform Flex which was recently found near Adobe creek. On this platform, the numbers of different versions of teleporters which have been created by The Elders were once inscribed. Each version number is an integer between \n1\n$1$ and \nN\n$N$. On the platform, there are several columns of numbers, one for each teleporter. Each column once listed all created versions of a teleporter in the order they were built. Unfortunately, some of the numbers were erased.\n\nKris just finished studying version \na\n$a$ of teleporter \nb\n$b$, and he is now ready to examine the next version of this teleporter. But he does not even know its number! On the other hand, any program which is a correct solution of this problem must know it. Below is what Kris already knows about the version numbers of the teleporters:\n\nEach number from \n1\n$1$ to \nN\n$N$ is the number of some version of some teleporter.\nDifferent versions of one teleporter have different numbers.\nEach teleporter has its own set of prime numbers. Later, we consider one fixed teleporter. Let its prime number set be \nX={p1,p2,…,pm}\n$X = \\{p_1, p_2, \\dots, p_m\\}$ (we list them so that \np1<p2<⋯<pm\n$p_1 < p_2 < \\dots < p_m$).\nIt is known that any version number of this teleporter is divisible by each prime from \nX\n$X$ and not divisible by primes not in X. It means that such number can be written as \np1k1p2k2…pmkm\n$p_1^{k_1} p_2^{k_2} \\dots p_m^{k_m}$ where \nki≥1\n$k_i \\ge 1$. So, each version of this teleporter can be mapped to a tuple of \nm\n$m$ positive integers \n(k1,k2,…,km)\n$(k_1, k_2, \\dots, k_m)$.\nVersion \nα=(k1,k2,…,km)\n$\\alpha = (k_1, k_2, \\dots, k_m)$ was built before version \nβ=(l1,l2,…,lm)\n$\\beta = (l_1, l_2, \\dots, l_m)$ if and only if there is such \ni\n$i$ (\n0≤i<m\n$0 \\le i < m$) that \nk1=l1\n$k_1 = l_1$, \nk2=l2\n$k_2 = l_2$, \n…\n$\\dots$, \nki=li\n$k_i = l_i$, but \nki+1<li+1\n$k_{i+1} < l_{i+1}$. It can be said that the versions are ordered lexicographically by their tuples."},{"problemId":"31344","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThis problem is interactive.\n\nTaja can easily win this game, but all of her friends couldn't. Now she offers you to play this game.\n\nGame equipment consists of field n×n$n \\times n$ (5≤n≤40$5 \\leq n \\leq 40$), the piece, two coins (COIN1, COIN2), two dices with cardinal directions (DICE1, DICE2), and a lot of one cell size blocks.\n\n\n\t\n\t\t\n\t\t\tName\n\t\t\tNumber of faces\n\t\t\tFaces\n\t\t\n\t\t\n\t\t\tCOIN1. Move coin\n\t\t\t2\n\t\t\tSLIDE, RAM\n\t\t\n\t\t\n\t\t\tCOIN2. Modification coin\n\t\t\t2\n\t\t\tPLACE, REMOVE\n\t\t\n\t\t\n\t\t\tDICE1. First dice with directions\n\t\t\t4\n\t\t\tN (North), S (South), W (West), E (East)\n\t\t\n\t\t\n\t\t\tDICE2. Second dice with directions\n\t\t\t8\n\t\t\tN (North), S (South), W (West), E (East), NW (Northwest), NE (Northeast), SW (Southwest), SE (Southeast)\n\t\t\n\t\n\n\nBefore the beginning of the game the piece and some blocks are placed on the field. Then the player makes moves such kind. At first, the player chooses a coin and tosses it for determine an action. Then he chooses one of the dices and rolls it for determine direction dir$dir$. After that one of the four action happens:\n\n\n\t\n\t\t\n\t\t\tCoin string\n\t\t\tAction\n\t\t\n\t\t\n\t\t\tSLIDE\n\t\t\tMove the piece along empty cells in the direction of dir$dir$, until the piece collides a block or maze border\n\t\t\n\t\t\n\t\t\tRAM\n\t\t\tMove the piece along empty cells in the direction of dir$dir$, until it collides a first block. Then move the piece and the block in the same direction, until moving block collides another block or field border\n\t\t\n\t\t\n\t\t\tPLACE\n\t\t\tIf adjacent cell in the direction dir$dir$ next to the piece is empty and is in the field, place a block on this cell\n\t\t\n\t\t\n\t\t\tREMOVE\n\t\t\tIf adjacent cell in the direction dir$dir$ next to the piece contains a block and is in the field, remove the block from this cell\n\t\t\n\t\n\n\nThe goal is to put the piece on the finish cell.\n\nOne query for this problem is one coin toss and one dice roll.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31361","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBeautiful sums are the sums of several consequent positive integers. For example, the sums 7+8$7 + 8$ and 4+5+6$4 + 5 + 6$ are beautiful, and the sum 3+5+7$3 + 5 + 7$ is not beautiful even though the value in all cases equals 15$15$. (The sum of single summand 15$15$ also considered beautiful.)\n\nGiven this, the beauty index of integer is the number of its representations as a beautiful sum. For example, the beauty index of number 15 equals 4 as 15 is represented by a beautiful sum in four ways: 15=7+8=4+5+6=1+2+3+4+5$15 = 7 + 8 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5$.\n\nOne number is more beautiful than another if its beauty index is higher. If numbers have equal beauty indexes the smaller one is considered more beautiful. For example, 15$15$ is the smallest integer having beauty index 4$4$.\n\nYou have to find the smallest integer for given beauty index n$n$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31336","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYesterday Taja visited the museum. The tour was long and interesting, but the room she liked most contained collections of the cubes of the ten famous collectors. One of the cubes has attracted her attention a lot, but she forgot, who has possessed it. Nevertheless she memorized how three visible faces looked like, as well as criteria of each of the collector. You are to deduce the name of the collectors, who could possess such a cube, from this information.\n\nEach cube has 6$6$ faces. Each face has a single number written on it from 1$1$ to 6$6$, unique for each face. Numbers can be represented either by dots, or as a decimal or as roman numeral. Also each face has one of the following colors --- Black, White, Green, Yellow, Skyblue, Red, Orange and Purple.\n\nHere is the list of the names of the collectors and their corresponding criteria, which hold for the entire collection:\n\n\n\t\n\t\t\n\t\t\tJohn\n\t\t\tAll numbers are represented as dots\n\t\t\n\t\t\n\t\t\tDavid\n\t\t\tNumbers are never written as roman numerals\n\t\t\n\t\t\n\t\t\tPeter\n\t\t\tAll faces are white\n\t\t\n\t\t\n\t\t\tRobert\n\t\t\tFaces of the cube are either black or white\n\t\t\n\t\t\n\t\t\tMark\n\t\t\tOdd numbers have white background, even numbers have black background\n\t\t\n\t\t\n\t\t\tPaul\n\t\t\tAll prime numbers are written as decimal, and vice versa\n\t\t\n\t\t\n\t\t\tPatrick\n\t\t\tAll face have the same color, but neither black nor white\n\t\t\n\t\t\n\t\t\tJack\n\t\t\tAll roman numerals are on the yellow background\n\t\t\n\t\t\n\t\t\tMax\n\t\t\tAll faces have unique colors\n\t\t\n\t\t\n\t\t\tAlex\n\t\t\tNumbers of the same format have the same background, different formats have different colors\n\t\t\n\t\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31314","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe attempted assault on Koreyko, a secret millionaire, was a disastrous failure. The foster brothers Panikovskiy and Balaganov have barricaded themselves in their office. They are playing a strange game. One of them has a room full of horns, and the other has a room full of hooves. They are taking all possible pairs (horn, hoof), and whoever has more expensive object in the pair wins. They want to know one thing --- who will win more often. Their psychological integrity has been somewhat compromised and it might be beyond their powers at the moment to solve this problem by their own efforts. Please help them, and they will thank you... with horns and hooves.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31362","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAn old watchmaker has n$n$ stopped nano alarm-clocks numbered with integers from 1$1$ to n$n$. Nano alarm-clocks count time in hours, and in one hour there are million minutes, each minute lasting a million seconds. In order to repair them all the watchmaker should synchronize the time on all nano alarm-clocks. In order to do this he moves clock hands a certain time forward (may be zero time). Let’s name this time shift a transfer time.\n\nYour task is to calculate the minimal total transfer time required for all nano alarm-clocks to show the same time.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31214","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tДадени са 5$5$ цели числа a$a$, b$b$, c$c$, d$d$, e$e$. Имате право да направите най-много k$k$ пъти следната операция – избирате едно положително число измежду дадените и го намалявате с 1 (намалява се само избраното число). Искаме най-голямото от дадените числа, след последната направена операция, да е възможно най-малко.\n\nНапишете програма minimize, която намира търсената най-малка възможна стойност.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31337","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tTaja prepares a present for the birthday. As you might know, the best present is the one handcrafted by yourself. Recently she learnt cross-stitching and decided to make use of this skill.\n\nAt home she only managed to find a canvas, which already had two crosses stitched on it. Don't panic --- you can always complement it to the full picture. She had little experience, that's why she chose simple but nevertheless beautiful picture, which is parallelepiped. She wants to finish the present as soon as possible, thus number of new cross-stitches should be the least possible.\n\nParallelepiped on the infinite grid is drawn like this.\n\nLet's draw a rectangle ABCD$ABCD$ with its upper left corner at A$A$ and lower right corner at C$C$.\n\n\n\nThen draw segments of equal length towards up-right from A$A$, B$B$ and C$C$ --- with ends at E$E$, F$F$, G$G$ correspondingly. Then add segments EF$EF$ and FG$FG$.\n\n\n\nAll edges of the parallelepiped should be at least 3$3$ cells long.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31315","content":"문제\n\nThe Research Institute of the Given Strings (RIGS) is investigating a new method of infinite string construction.\n\nInitially there is an empty string \nS0(k)=ε\n$S_{0}^{(k)} = \\varepsilon$. Each next version of the string is created in the following way. The current version of the string is repeated \nk\n$k$ times, and an arbitrary symbol is inserted between every two consecutive occurences. The same number \nk\n$k$ is used for the construction of all versions, however, the inserted symbols may differ. This construction ultimately results in the infinite string \nS∞(k)\n$S_{\\infty}^{(k)}$.\n\nTo illustrate, let's consider the series of strings (\nk=3\n$k = 3$):\n\t\n\n\t\n\n\n\t\n\n\t\n\t\n\n\t\nS0(3)=ε(empty)S1(3)=rt(S1(3)=εrεtε)S2(3)=rtxrtrrtS3(3)=rtxrtrrtartxrtrrtrrtxrtrrtSi(3)…S∞(3)=rtxrtrrtartxrtrrtrrtxrtrrtzrtxrtrrtartxrt…\n$$\\begin{align*} S_{0}^{(3)} &= \\varepsilon (\\text{empty})\\\\ S_{1}^{(3)} &= \\mathbf{r}\\mathbf{t} \\hspace{5cm} ( S_{1}^{(3)} = \\boxed{\\varepsilon}\\mathbf{r}\\boxed{\\varepsilon}\\mathbf{t}\\boxed{\\varepsilon} ) \\\\ S_{2}^{(3)} &= \\boxed{rt} \\mathbf{x} \\boxed{rt} \\mathbf{r} \\boxed{rt} \\\\ S_{3}^{(3)} &= \\boxed{rtxrtrrt} \\mathbf{a} \\boxed{rtxrtrrt} \\mathbf{r} \\boxed{rtxrtrrt} \\\\ \\phantom{S_{i}^{(3)}} & \\ldots \\\\ S_{\\infty}^{(3)} &= rtxrtrrtartxrtrrtrrtxrtrrtzrtxrtrrtartxrt\\ldots \\end{align*}$$ \n\nGiven a string \nA\n$A$ of length \nn\n$n$, which is the prefix of \nS∞(k)\n$S_{\\infty}^{(k)}$, find the minimal \nk\n$k$, for which this is possible.\n\nIn other words, your task is to find the minimal \nk\n$k$, for which it is possible to construct a string \nS∞(k)\n$S_{\\infty}^{(k)}$ in a way described above, so that it will have \nA\n$A$ as a prefix."},{"problemId":"31338","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tWhen Taja runs out of money, she goes to the casino. Recently a new game appeared at the casino, and Taja wants to master it. Help her.\n\nTwo parties of the game are croupier and visitor of the casino. Croupier has a single regular k$k$-faced dice, which has all integers from 1$1$ to k$k$ written on its faces. Croupier starts the game with rolling the dice once. Shown number determines amount of points gained by croupier.\n\nTo win, visitor has to gain more points, than croupier did. For this there's suggested a choice out of n$n$ options. Each option is a pair: the dice and number of its allowed rolls. Each face of each dice has some number written on it. This dice is rolled required number of times, all shown numbers are summed up and this sum is exactly the points gained by a visitor.\n\nBut some faces, in addition to numbers, have bonus marks. If shown face has bonus mark, then corresponding amount of points is added to the total, and visitor get additional dice roll. All faces of the same dice are pairwise distinct, which means there's no two identical bonus faces and no two identical ordinary faces. Each dice has at least one face without bonus mark. For every dice, the probability of each of its face being shown is the same.\n\nIn this problem it is required that for each possible amount of croupier's points from 1$1$ to k$k$ you determine visitor's rolling option number, which leads to the maximal probability to gain stricly greater points than croupier did.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31339","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tOnce a puzzle has been gifted to Taja, and she still has no idea how to solve it.\n\nThe puzzle is a grid n×n$n \\times n$, with each row and each column containing exactly one separator, which is diagonal segment which starts in upper left corner and ends at lower right corner. Puzzle has a launch button, which launches the balls at integer time moments from the tubes, which are positioned at the boundary of the grid. Per one moment a ball moves to an adjacent cell. When a ball collides a separator it changes direction by 90∘$90^\\circ$. A ball disappears if it crosses border line.\n\nTo solve a puzzle, one needs to rotate some separators 90∘$90^\\circ$ around their centers, in such a way that no two balls will ever collide inside the grid.\n\nTwo balls collide if:\n\n\n\tThey are at the same cell at the same moment (if the cell contains separator, then both balls should be at the same side).\n\n\n\n\n\n\tThey collided at the cells' boundary (boundary of the whole grid counts as well).\n\n\n\n\nIn this problem you are to find any solution of this puzzle.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31363","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe swamp looks like a narrow lane with length n$n$ covered by floating leaves sized 1$1$, numbered from 1$1$ to n$n$ with a fly sitting on the top of each. A little toad is sitting on one of the leaves instead of a fly. Its name is Kvait and it is about to have lunch. It can jump to the bordering leaf or jump it over to the next one in any direction. When landing it eats a fly. Kvait is already quite a big toad and the leaves are unstable so when it jumps away the leaf starts sinking.\n\nIn order to have lunch Kvait needs to eat all of the flies. It starts his journey from the leaf with number s$s$ and has to finish on the leaf with number f$f$. Yet jumping to the bordering leaf takes more Kvait’s energy than skipping a leaf over. It is necessary to plan the toad’s movements to get lunch with minimal energy spent.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31316","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe Noname State University (NSU) is preparing for a new type of programming contest. Each university in this contest can be represented only by a single team of two students. There is also the official list of N$N$ books which the contestants must read to perform successfully. There's little time left before the contest, and not every student is able to read all books in time.\n\nEvery student knows for each set of books whether she will be able to read it in time. There are M$M$ students willing to participate in the contest in the NSU. The coach prepared a list of K$K$ candidate teams. To choose a single team for the contest, she wants to know each team's reading capability.\n\nAssume a team has read a book if at least one member of the team has read it. Your task is to find for each candidate team and for each set of books whether the team members can plan their training in such a way that the team will have read all the books of this set in time.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31346","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t n$n$ bobo are playing a game about candies. bobo are labeled  by 1,2,…,n$1, 2, \\dots, n$ for convenience. Initially, the i$i$-th bobo has ai$a_i$ candies in hand.\n\nThe game is played in m$m$ rounds. In each round, the bobo who has the least number of candies currently is awarded with x$x$ candies. If two or more bobo have the same number of candies, the bobo with the smallest label gets the prize.\n\nThe 1$1$-st bobo is their leader. So he can get at most y$y$ more candies from some unknown source before the start of the game. Now he wonder the maximum number of candies he can have after the m$m$ rounds.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31215","content":"문제\n\n인덱스가 \n1\n$1$부터 시작하는 길이 \nn\n$n$의 수열 \nB\n$B$가 있으며, 초기에 모든 인덱스 \nk\n$k$에 대해 \nBk=k\n$B_k=k$입니다. 흐즈로는 이 수열에 할 수 있는 매우 이상하고 신기한 연산을 생각해 냈습니다. 그 연산은 다음과 같습니다.\n\n어떠한 양의 정수 \nk\n$k$가 주어질 때, \nk\n$k$의 약수인 가장 큰 \n2\n$2$의 거듭제곱수 \nl\n$l$을 찾고, \nk≠l\n$k \\neq l$이라면 \nBk\n$B_k$와 \nBl\n$B_l$을 서로 교환하는 동작을  \nk\n$k$-교환이라고 합시다.\n \ni\n$i$-교환을 \ni=1,2,⋯,n\n$i=1,2,\\cdots,n$에 대해 순서대로 반복합니다.\n\n흐즈로는 이 연산을 이상한 섞기 연산이라고 부르기로 했습니다. 수열 \nB\n$B$의 길이 \nn\n$n$이 주어질 때, \nB\n$B$에 이상한 섞기 연산을 수행한 뒤 원소 \n1\n$1$이 있는 인덱스를 출력하세요. 다시 말해, 연산이 끝난 후 \nBj=1\n$B_j=1$이 되는 인덱스 \nj\n$j$를 찾아 출력해야 합니다."},{"problemId":"31347","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tbobo and yiyi are playing a game on a chessboard with (n+1)$(n + 1)$ rows and (m+1)$(m + 1)$ columns. Rows are numbered by 0,1,…,n$0, 1, \\dots, n$ from top to bottom, while columns are numbered by 0,1,…,m$0, 1, \\dots, m$ from left to right.\n\nCells (0,1),(0,2),…,(0,m),(1,0),(2,0),…,(n,0)$(0, 1), (0, 2), \\dots, (0, m), (1, 0), (2, 0), \\dots, (n, 0)$ are special. They may contain a \"heaven gate\" or \"hell gate\". People who enters a \"heaven gate\" immediately wins. However, the one who enters a \"hell gate\" dies and gives the victory to the other.\n\nThe game lasts for q$q$ rounds. In each round, a chess is placed on cell (xi,yi)$(x_i, y_i)$ initially. bobo and yiyi moves alternatively. bobo goes first. In one move, chess can be moved one cell upward or leftward.\n\nDetermine if bobo can win for each round. You know, bobo and yiyi are really clever guys ...\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31317","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tSomewhere in the galaxy far, far away, on the planet Nibiru, Basilius, one of the most promising students, has received a special scholarship in the prestigious Nibirian State University (NSU). He's decided to buy a bed for his dorm room.\n\nHe wants a bed with the maximum possible volume, but, on the other hand, the size of his future bed is limited --- Basilius wants to save some space in his room for his future shopping trophies.\n\nAny bed can be crafted in the local store, provided it's a rectangular parallelepiped. But not any bed can be delivered from the store to the dorm room. It will have to be carried through portals, which resemble our common rectangular doors. The portals are perpendicular to the floor. Passing through a portal brings you either to the vicinity of some other portals or to a room. Help Basilius calculate the optimal bed size for his room. The distance between portals is significantly greater than the size of the dorm room.\n\nIt's assumed that the bed is oriented so that a fixed face will always be parallel to the floor and another fixed face will be parallel to the plane containing current portal.\n\nThe bed will not be rotated once it's lifted to be carried through portals to the room.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31364","content":"문제\n\nThe latest Accounting Numeral System is the top accounting system in the whole world. Its creator, Dr. Ceizenpok, is the best expert of the respective authority. Any positive integer \nn\n$n$ in this system based \nm\n$m$ is represented as a sum of \nm\n$m$ parts:\n\n \nn=Cxmm+Cxm−1m−1+Cxm−2m−2+…+Cx11,\n$$n = C_{x_m}^m + C_{x_{m-1}}^{m-1} + C_{x_{m-2}}^{m-2} + \\ldots + C_{x_1}^1,$$ \n\nwhile \nx1,x2,…,xm\n$x_1, x_2, \\ldots , x_m$ --- are such integers that \n0≤x1<x2<…<xm\n$0 \\le x_1 < x_2 < \\ldots < x_m$. Numbers \nCkm=k!m!(k−m)!\n$C_k^m = \\frac{k!}{m!\\,(k-m)!}$ our experts call accounting indexes. Each number \nn\n$n$ in this system is recorded as \nn=(xm)…(x2)(x1)―\n$n = \\overline{(x_m) \\ldots (x_2)(x_1)}$, and it is considered that \n0!=1\n$0! = 1$ and \nCkm=0\n$C_k^m = 0$, if \nm>k\n$m > k$. For example, number \n9\n$9$ in the accounting system based \n3\n$3$ is recorded as ({\\bfseries 4})({\\bfseries 3})({\\bfseries 2}), because \n9=C43+C32+C21\n$9 = C_{\\mathbf 4}^3 + C_{\\mathbf 3}^2 + C_{\\mathbf 2}^1$, and number \n1\n$1$ in this system based \n2\n$2$ looks like:({\\bfseries 2})({\\bfseries 0}), because \n1=C22+C01\n$1 = C_{\\mathbf 2}^2 + C_{\\mathbf 0}^1$.\n\nYou have to find a representation of an integer \nn\n$n$ in the accounting numeral system based \nm\n$m$."},{"problemId":"31318","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn the Antichamber video game the player has a special tool called the Brick Tool. You must model its work in a simple two-dimensional variant.\n\nThe game takes place in an infinite grid. Each cell is either white or black. Two cells are considered adjacent if they share a side. A maximum connected set of black cells is called a component. The size of a component is the number of cells in it.\n\nThe tool allows the player to repaint any cell to the opposite color. Straight afterwards checks are performed which can change the state of the grid.\n\nIf a cell has been repainted to white and the number of components has increased, then some component has split into several subcomponents. In this case the newly formed subcomponents are removed except for, possibly, the largest of them. The largest subcomponent is not removed only in the case when its size is strictly greater than the sum of the sizes of all the other subcomponents. Removing a component means repainting all its cells to white.\n\nNext regardless of the color of the repainted cell, <<holes>> in components are removed: If any white cell is located inside any cycle of black cells, it is repainted to black. Every two neighboring cells in a cycle must be adjacent in the sense defined above.\n\nInitially all cells are white. A sequence of operations is given. Each operation is either repainting of a cell or a query. All the operations must be executed in the given order.\n\nThere can be two types of queries. A query of type Comp: is it true that the given two cells are black and belong to the same component? A query of type Size: find the size of the component that contains the given cell. If this cell is white, the answer must be zero.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31319","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tDuring an expedition to one of the remote stars the Group of Free Search made yet another discovery, apparently linked to the Wanderer civilization. It was a device of unknown purpose, and its main control element was a M×N$M \\times N$ rectangular field; some cells of the field were removed, some other were colored in some of 26 different colors. A box was found nearby with a large number of 2×1$2 \\times 1$ rectangular plates reminiscent of the terrestrial dominoes. The cell size of the plates corresponded exactly to the cell size on the control panel.\n\nA renowned specialist in solving Wanderers' intentions, Rudolph Sikorski, supposed that the mechanism can be activated by laying out the plates on the field in the following way. None of the removed cells must be covered, only one of the cells of each particular color must be covered, non-colored and non-removed cells must be covered completely.\n\nLeo Abalkin, a former progressor, managed to steal the box with plates. Now he must place the plates on the field correctly to activate the mechanism. Help him do that until Rudolph Sikorski discovers the loss.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31348","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tbobo loves geometric progressions! So he wants to know the number of geometric progressions of length 3$3$ in a sequence a1,a2,…,an$a_1, a_2, \\dots, a_n$.\n\nThat is to say, count the number of (i,j,k)$(i, j, k)$ where i<j<k$i < j < k$ and ai⋅ak=aj2$a_{i} \\cdot a_{k} = a_j^2$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31380","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tLet p$p$ be a prime number and a$a$ an integer such that 0<a<p$0 < a < p$. Consider all integers from l$l$ to r$r$ inclusive which can be expressed as akmodp$a^{k} \\bmod p$ for some non-negative integer k$k$. Given that the number of such integers is at most 100$100$, print these integers in ascending order.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31365","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tDr. Ceizenpok from planet i1c5l became famous across the whole Universe thanks to his recent discovery --- the Ceizenpok’s formula. This formula has only three arguments: n$n$, k$k$ and m$m$, and its value is a number of k$k$-combinations of a set of n$n$ modulo m$m$.\n\nWhile the whole Universe is trying to guess what the formula is useful for, we need to automate its calculation.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31216","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t소수는 수학을 사랑하는 누구에게나 매우 중요한 개념입니다. 1$1$보다 크면서 약수가 1$1$과 자기 자신뿐인 자연수를 소수라고 부릅니다. 흐즈로는 소수 중에서도 더욱 특별한 소수가 있다고 생각했습니다.\n\n다음을 만족하는 소수 p$p$를 슈퍼 소수라고 부릅니다.\n\n\n\t소수 p$p$가 모든 소수 중 k$k$번째로 작은 소수라고 합시다. 이때 k$k$가 소수임을 만족합니다.\n\n\n정수 n$n$이 주어질 때, 모든 슈퍼 소수 중 n$n$번째로 작은 것을 출력하는 프로그램을 작성하세요.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31366","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tOn a far-away planet i1c5l a community of n$n$ people harvested k$k$ oranges. Now they have to divide the harvest among themselves. \n\nThis community is ruled by a democratic principle based on the rank hierarchy. Thus, the harvest is divided the following way: each person gets a rank from 1$1$ to n$n$. Then, a person ranked 1$1$ announce his decision: who and how many oranges get. Afterwards all n$n$ people vote <<for>> or <<against>>. If at least half of the people vote <<for>>, then the decision is accepted. Otherwise the person ranked 1$1$ is ostracized from the community and it is turn to person ranked 2$2$ to announce a decision, and the procedure is repeated.\n\nEach person wish to get the best for himself trying to get as many oranges as possible. Between the cases with equal amount of oranges earned he will prefer the one with less people in community left. If a person is ostracized from the community it is considered that he got a negative amount of oranges. If several optimal solutions exist a person can choose any. Each person knows that other people also try to find the optimal solution being guided by the same principles. \n\nHowever, one of the community members has m$m$ wildcards that can give him predefined ranks. The task is to find out  the minimal and the maximum number of oranges that can be obtained for each wildcard rank.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31381","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBillionaire Christian has learned today about Dijkstra's algorithm with Johnson potentials. He liked it so much that he decided to add potentials to all of his favourite graphs.\n\nChristian's tastes are very singular --- he keeps in his secret room only directed weighted graphs.\n\nA little reminder about potentials: each vertex v$v$ will be assigned with its potential ϕ(v)$\\phi(v)$. If there was an edge from u$u$ to v$v$ with initial weight w$w$ then its new weight will be w′=w−ϕ(v)+ϕ(u)$w' = w - \\phi(v) + \\phi(u)$.\n\nStrength of a graph is defined as a minimum of its edges weights.\n\nChristian don't want weak graphs in his room, so he want to choose potentials in such way that its strength is maximized.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31367","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA new swimming pool has been built in Kazan for the forthcoming Water Sports World Championship. The pool has N$N$ lanes. Some of the lanes are already occupied by swimmers. Tatar scientists have divided the lanes into the lucky and unlucky ones. The unlucky lanes are those with the maximum amount of swimmers. That is, there is no other lane where there would be more swimmers than on unlucky one. The unlucky lanes make swimmers unhappy. The rest of the lanes are considered to be lucky. The lucky lanes make people happy. The scientists took a decision to make more people happy. In order to do this they had an agreement with the pool manager saying they can move a single person from any lane to the one neighboring if it was necessary. The swimmer from the first lane can only be moved to the second lane, and the swimmer from the last lane --– to the one before last.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31349","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tbobo has just learnt Knuth-Morris-Pratt (KMP) algorithm.\n\nFor string S=s1s2…sn$S = s_{1} s_{2} \\dots s_{n}$, KMP(S)=(f2,f3,…,fn)$\\mathrm{KMP}(S) = (f_2, f_3, \\dots, f_n)$ where fi$f_i$ is the maximum j<i$j < i$ where s1s2…sj=si−j+1si−j+2…si$s_{1} s_{2} \\dots s_{j} = s_{i - j + 1} s_{i - j + 2} \\dots s_{i}$.\n\nGiven f2,f3,…,fn$f_2, f_3, \\dots, f_n$ and the size of alphabet, find out the number of strings S$S$ where KMP(S)=(f2,f3,…,fn)$\\mathrm{KMP}(S) = (f_2, f_3, \\dots, f_n)$ modulo (109+7)$(10^9 + 7)$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31350","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAs a truly clever guy, bobo has never entered any kind of IQ tests. But here comes one.\n\nThe test consists of n$n$ questions, which are numbered conveniently by 1,2,…,n$1, 2, \\dots, n$. Each question has two options -- namely options \"A\" and \"B\". The i$i$-th question is \"How many questions among questions 1,2,…,(i−1)$1, 2, \\dots, (i - 1)$ are answered by option ti$t_i$?\". (ti$t_i$ is either \"A\" or \"B\".) Option \"A\" says there are xi$x_i$ questions while option \"B\" says yi$y_i$.\n\nbobo soon notices that the test is poorly-designed, so he wonder how many questions he can answer correctly at most.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31368","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAfter landing on planet i1c5l people noticed that blue and black clothes are quite popular among the locals. Each aboriginal has at least one blue-and-black piece of clothing in their wardrobe. This makes no interest except one curious detail: the locals claimed that these colors weren’t blue and black but white and gold.\n\nThus a simple test was created to differ a human being from an alien. On one of the wedding parties people took a picture of the blue-and-black groom mother’s dress. This picture was shown to some respondents who were asked the color of the dress. If the answer contained <<blue>> and <<black>> then there was no doubt that the respondent was from the Earth. The answer containing <<white>> and <<gold>> pointed to the person of planet i1c5l origin. If the answer contained neither of word pairs then it was clear that the respondent was a creature from another planet.\n\nYou have the complete survey log from planet i1c5l. Your task is to determine the constitution of the planet’s population based on the survey.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31382","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are given a weighted graph on n$n$ vertices. You should find a connected subgraph of minimal weight, which contains all vet rices with numbers from 1$1$ to n−k$n - k$.\n\nTo make problem easier to solve, and tests easier to generate, all tests are generated using following algorithm:\n\n\n\tIntegers n$n$, m$m$, k$k$ are chosen.\n\tAll n⋅(n−1)2$\\frac{n\\cdot(n-1)}{2}$ possible edges are shuffled in random order\n\tNext edge is added to graph if after it is add, it's possible to add some more edges to make graph connected with m$m$ edges total.\n\tFor each edge weight is generated uniformly on segment [50,100]$[50, 100]$ independent from other edges.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31400","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t헤네시스 오솔길의 좌우로 늘어진 길이 4L$4L$의 필드에 주황버섯이 N$N$마리 있습니다. 이 주황버섯들은 모든 버섯들의 어머니와 같은 존재, 머쉬맘의 명령을 받고 모였습니다.\n\n\n\n처음에 i$i$번 주황버섯은 필드의 왼쪽 끝에서 4Pi+1$4P_i+1$만큼 떨어진 곳에 있으며, 주황버섯은 정해진 왼쪽 혹은 오른쪽 방향을 바라보고 있습니다. (1≤i≤N)$(1 \\le i \\le N)$ 주황버섯은 매 초마다 다음 규칙을 따라 이동합니다.\n\n\n\t주황버섯은 자기가 바라보는 방향으로 1$1$만큼 이동합니다.\n\t이동 후에 같은 위치에 있는 주황버섯이 두 마리 이상이라면, 모여있는 모든 주황버섯은 다음 시각부터 방향을 바꿔 반대 방향으로 이동합니다.\n\t주황버섯이 필드 끝에 도달한다면, 주황버섯은 필드에서 벗어나게 됩니다.\n\n\n머쉬맘은 아래의 상황에서 주황버섯들에게 방향을 바꿀 것을 명령할 수 있습니다.\n\n\n\t모든 주황버섯이 움직이기 전인 0$0$초 째에.\n\t주황버섯 한 마리가 필드를 빠져나갈 때.\n\n\n머쉬맘이 명령을 내리면 모든 주황버섯들의 이동 방향의 좌우가 바뀝니다.\n\n머쉬맘은 주황버섯들을 이끌고 헤네시스를 침공하려고 합니다. 따라서 헤네시스가 있는 방향인 왼쪽으로 빠져나가는 주황버섯의 수를 최대화하고 싶습니다. 필드의 왼쪽 끝에서 빠져나오는 주황버섯 수의 최댓값과, 이 때 어떤 방식으로 명령해야 하는지 출력하세요.\n\n L$L$ 과 Pi$P_i$가 정수라면 어떤 시점이든 두 마리 이상의 주황버섯이 한 번에 필드를 빠져나가거나, 주황버섯이 필드를 빠져나갈 때 두 마리 이상의 주황버섯이 만나는 경우가 없다는 것을 증명할 수 있습니다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31369","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn the endless desert at point A$A$ there is a strategic nuclear submarine \"The Frog\"\\ buried in the sand. The military headquarters decided to change the dislocation of The Frog to point B$B$. Without having any chance to cancel that decision it came an issue to find out how the buried submarine could be moved from one point of the flat desert to another.\n\nIt turned out that The Frog's design engineering team solved that problem years ago during construction stage. Design engineers installed the real teleport on The Frog. The problem seemed over, as it turned out that the teleport has only K$K$ operation modes which differ only in the teleportation distance, that is for each mode there is a predefined distance Li$L_i$, which the submarine would move in a given direction.\n\nIt is necessary to find the minimal total route distance for The Frog to be moved to destination point.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31351","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tPoor bobo is trapped in a maze!\n\nThe maze is divided into n$n$ rows and m$m$ columns. Each cell of the maze contains a wall across the diagonal. Thus, there are only two types of cells.\n\nThanks to bobo's magic power, he can change the type of cell (i,j)$(i, j)$ with cost ci,j$c_{i, j}$. As a kind magician, bobo would like to make the maze unable to trap people anymore. That is to say, there will be no closed area surrounded by walls.\n\nFind the minimum total cost for bobo to achieve the goal.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31383","content":"문제\n\nA simple motion over and over...\n\nt.A.T.u., <<A Simple Motion>>\n\nJulia loves simple motions very much especially in three-dimensional space! Recently she found a matrix that corresponds with some rotation around an axis that goes through the origin. Rotation is defined by unit vector \n\n\n\nv=(vxvyvz)\n$v = \\begin{pmatrix} v_x \\\\ v_y \\\\ v_z \\end{pmatrix}$ and rotation angle \nα\n$\\alpha$.\n\nSuppose you look at the origin from the end of \nv\n$v$ then if rotation is going counter-clockwise then \nα\n$\\alpha$ will be positive, negative overwise.\n\nRotation matrix moves point \n\n\n\n(xyz)\n$\\begin{pmatrix} x \\\\ y \\\\ z \\end{pmatrix}$ to \n\n\n\n(x′y′z′)\n$\\begin{pmatrix} x' \\\\ y' \\\\ z' \\end{pmatrix}$ like this:\n\n\n\n\t\t\n\t\t\n\t\t\n\n\n\n(x′y′z′)=(A11A12A13A21A22A23A31A32A33)×(xyz).\n$$ \\begin{pmatrix} x' \\\\ y' \\\\ z' \\end{pmatrix} = \\begin{pmatrix} A_{11} & A_{12} & A_{13} \\\\ A_{21} & A_{22} & A_{23} \\\\ A_{31} & A_{32} & A_{33} \\\\ \\end{pmatrix} \\times \\begin{pmatrix} x \\\\ y \\\\ z \\end{pmatrix}. $$ \n\nUnfortunately Julia doesn't know values of \nv\n$v$ and \nα\n$\\alpha$, so she asked you to restore them and then she will continue her simple motion."},{"problemId":"31217","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t흐즈로는 그래프 이론을 공부하다가 흥미로운 그래프를 발견했습니다. 다음의 특징을 가지는 단순 무향 그래프를 Y라고 부릅시다.\n\n\n\t 4$4$개의 정점과 3$3$개의 간선을 가집니다.\n\t하나의 정점을 루트라고 부르며, 나머지 3$3$개의 정점을 리프라고 부릅니다.\n\t 3$3$개의 간선은 각각의 리프와 루트를 연결합니다.\n\n\n흐즈로는 Y의 성질이 매우 특이하다고 생각하여, 어떤 그래프 안에 Y가 몇 개나 존재하는지 세어 보기로 했습니다. 단순 무향 그래프에서 Y의 개수를 다음과 같이 정의합시다.\n\n\n\t그래프에서 3$3$개의 간선을 순서 없이 골랐을 때, 그 간선과 간선이 연결하는 정점들이 이루는 그래프가 Y가 되는 경우의 수를 그래프의 Y의 개수로 정의합니다.\n\n\n단순 무향 그래프가 입력으로 주어질 때, 주어진 그래프의 Y의 개수를 출력하세요. 단, 개수가 너무 많을 수 있으니 개수를 소수 109+7$10^9+7$로 나눈 나머지를 출력하세요.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31370","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn the Scrooge Village they have finally got Internet access. Well, sort of... Direct cable line was routed across the village and into the city nearby. The villagers were proud of the fact that the Internet was finally available in the village and decided to get connected. The provider made a decision to install only one connection gate but let the villagers choose the point of connection. Naturally, the scroogers wanted to have all k$k$ houses connected to the network and save as much as possible on the wiring. It was decided that the communication wires are to be stretched from each house to the connection point no matter how complicated the mounting was.\n\nKnowing each house location it is required to find a point on the cable line, which makes the total distance to all the houses minimal.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31401","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t은하는 정해진 전체집합 안에서 집합을 다룰 수 있는 ‘아니야’라는 언어를 생각했습니다. ‘아니야’는 A부터 T까지 총 20$20$개의 집합과, 다음과 같은 세 연산을 지원해 다양한 집합을 표현할 수 있습니다.\n\n\n\t교집합 연산자: 두 집합에 공통으로 속한 원소만을 추려 새로운 집합을 만듭니다. 기호는 &입니다(A$A$ 그리고 B$B$에 속한 원소).\n\t합집합 연산자: 두 집합 중 어느 한 쪽 이상에 속한 원소만을 추려 새로운 집합을 만듭니다. 기호는 |입니다(A$A$ 또는 B$B$에 속한 원소).\n\t여집합 연산자: 집합에 속하지 않은 원소만을 추려 새로운 집합을 만듭니다. 기호는 ~입니다(A$A$에 속하지 않은 원소).\n\n\n연산을 서로 도합할 수 있습니다. 예를 들어, (A|B)&~C는 A$A$와 B$B$ 중 하나에 속한 원소 중 C$C$에는 속하지 않은 원소들만을 추린 집합입니다. 이때, 연산자 우선순위는 ~가 가장 높고, 그 다음이 &, 마지막으로 | 순입니다. 앞서 보인 식처럼 괄호를 이용해 특정 연산자의 우선순위를 높일 수도 있습니다.\n\n그런데, 자료조사 도중 주어진 집합에 원소가 있는지 판단하는, 엄청나게 빠르게 동작하는 구현체가 있는 ‘빼버려’라는 언어를 마주합니다. ‘빼버려’는 ‘아니야’와 다른 것은 모두 같고, 다음과 같은 차이점이 있습니다.\n\n\n\t여집합 연산자를 지원하지 않습니다.\n\t대신 차집합 연산자를 지원합니다. 이 연산자는 두 집합 중 왼쪽에만 속하는 원소만를 추려 새로운 집합을 만듭니다. 기호는 \\입니다. 즉, A\\B는 A$A$에만 속하고 B$B$에는 속하지 않는 원소들만이 속하는 집합입니다.\n\t‘빼버려’의 연산자 우선순위는 &가 가장 높고, 그 다음이 \\, 마지막으로 | 순입니다.\n\n\n은하는 ‘아니야’의 구현체를 만드는 데에 엄청나게 빠른 ‘빼버려’의 구현체를 이용할 생각을 했습니다. 그러려면 ‘아니야’의 식을 입력받아 빠른 시간 안에 다음과 같은 조건을 만족하는 ‘빼버려’의 식으로 바꾸어 주는 트랜스파일러가 필요합니다.\n\n\n\t당연히, ‘아니야’의 원래 식을 동등한 ‘빼버려’의 식으로 바꾼 결과는 원래 식과 동일한 집합을 표현해야 합니다.\n\t‘빼버려’에서의 맥락은 ‘아니야’에서의 맥락과 동일하므로, ‘아니야’의 원래 식을 동등한 ‘빼버려’의 식으로 바꾼 결과는 원래 식에 등장하는 집합만을 사용해야 합니다.\n\t아무리 ‘빼버려’가 빠른 구현체라도, 긴 식을 처리하는 데에는 오랜 시간이 걸릴 것입니다. 따라서 ‘아니야’의 원래 식을 동등한 ‘빼버려’의 식으로 바꾼 결과는 원래 식의 길이의 2$2$배를 넘어서는 안 됩니다.\n\n\n은하를 도와 이 트랜스파일러를 작성합시다!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31384","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tVasya is a young and very promising android. Today is his first day at University. Vasya has very carefully studied the list of all courses on the wall near the Dean's office and has chosen the ones to attend. Now he wants to write down his own week timetable. Help him do this.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31402","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t당신은 폴더 구조를 손쉽게 탐색할 수 있는 트리 탐색기 기능을 개발하고 있습니다.\n\n폴더에는 1$1$번부터 N$N$번까지 번호가 붙어 있습니다. 폴더는 트리 형태의 계층 구조를 이루고 있어서, 다른 폴더를 하위 폴더로 가질 수 있습니다. 어떤 폴더가 포함하는 폴더란, 그 폴더의 하위 폴더 및 하위 폴더가 포함하는 폴더를 가리킵니다. 1$1$번 폴더는 최상위 폴더로, 다른 모든 폴더를 포함하고 있습니다.\n\n트리 탐색기는 목록에 1$1$번 폴더의 하위 폴더들을 표시합니다. (1$1$번 폴더는 표시하지 않습니다.) 폴더는 펼치거나 접을 수 있습니다. 처음에는 모든 폴더가 접혀 있는 상태입니다. 폴더를 펼치면 그 하위 폴더들이 펼친 폴더 바로 아래에 들여쓰기되어 표시됩니다. 폴더를 접으면 포함된 모든 폴더가 목록에서 사라집니다. 폴더를 접었다가 다시 펼쳤을 때, 포함된 모든 폴더는 이전의 접힘/펼침 상태를 유지합니다. (그림 1)\n\n\n\n(그림 1) 폴더를 펼치고 접는 예제. ▽은 펼쳐진 폴더를, ▶은 접힌 폴더를 나타냅니다.\n\n당신은 트리 탐색기에 커서 기능을 추가하려고 합니다. 커서는 처음에 1$1$번 폴더의 첫 번째 하위 폴더를 가리키고 있습니다. 당신은 두 가지 명령어를 구현해야 합니다.\n\n\n\tmove k$k$ : 커서를 k$k$만큼 아래로 이동합니다. (k$k$가 음수라면 −k$-k$만큼 위로 이동합니다.) 커서를 이동하다가 목록의 시작이나 끝에 도달하면 더이상 이동하지 않습니다. (그림 2)\n\ttoggle : 커서가 가리키는 폴더를 접거나 펼칩니다. 폴더가 접혀 있었다면 펼치고, 펼쳐져 있었다면 접습니다.\n\n\n\n\n(그림 2) move 명령어를 사용하는 예제\n\n주어진 Q$Q$개의 명령어를 모두 수행하는 프로그램을 작성하세요.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31352","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYuuka lives in Moe Country. The road system in Moe Country is a connected graph G$G$. Each edge has a random (real) length, which is uniformly random in [0,1]$[0, 1]$.\n\nNow Yuuka is eager to know the expectation of minimum spanning tree of G$G$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31218","content":"문제\n\n흐즈로는 어느 날 집 주변 잔디밭에 무성히 자란 잔디를 보고, 새로 산 잔디깎이 로봇의 성능을 시험해 보기로 했습니다. 잔디밭은 \nn\n$n$개의 행과 \nm\n$m$개의 열을 가진 2차원 격자로 구성되어 있으며, 그 중 \nr\n$r$번째 행의 \nc\n$c$번째 열에 해당하는 칸을 \n(r,c)\n$(r,c)$로 표기합니다. 초기에 잔디밭의 모든 칸에는 잔디가 있습니다.\n\n잔디깎이 로봇에 네 정수 \ndy\n$d_y$, \ndx\n$d_x$, \ny\n$y$, \nx\n$x$를 입력하면, 초기에 \n(y,x)\n$(y,x)$ 에서 출발하여 \n⟨dy,dx⟩\n$\\langle d_y,d_x \\rangle$ 방향으로 이동하도록 설정됩니다. 이때 \n|dy|+|dx|=1\n$|d_y|+|d_x|=1$이 항상 성립해야 합니다. 다시 말해, 잔디깎이 로봇은 항상 일정한 방향을 따라 이동하며, 상하좌우로 인접한 칸으로만 이동합니다. 잔디깎이 로봇은 다음과 같이 작동합니다.\n\n \n(y,x)\n$(y,x)$에 잔디가 없다면 잔디 깎기를 종료합니다.\n \n(y,x)\n$(y,x)$에 있는 잔디를 제거합니다.\n조건 \ny+dy<1\n$y+d_y<1$, \ny+dy>n\n$y+d_y>n$, \nx+dx<1\n$x+d_x<1$, \nx+dx>m\n$x+d_x>m$ 중 하나 이상이 참이라면 잔디 깎기를 종료합니다.\n \n(y,x)\n$(y, x)$를 \n(y+dy,x+dx)\n$(y+d_y, x+d_x)$로 변경한 뒤, 1번으로 돌아갑니다.\n\n흐즈로는 성능 시험의 일환으로 다음과 같은 쿼리 \nQ\n$Q$개에 대한 답을 찾아야 합니다.\n\n \n1 dy dx y x\n$1 \\ d_y \\ d_x \\ y \\ x$: 방향이 \n⟨dy,dx⟩\n$\\langle d_y,d_x \\rangle$로 설정된 잔디깎이 로봇을 \n(y,x)\n$(y,x)$에서 출발시킨 뒤, 해당 잔디깎이 로봇의 잔디 깎기가 끝날 때까지 대기합니다.\n \n2 y x\n$2 \\ y \\ x$: 쿼리가 들어오기 전 시작한 잔디 깎기가 순서대로 끝나고 난 뒤 \n(y,x)\n$(y,x)$의 상태를 출력합니다. \n(y,x)\n$(y,x)$에 잔디가 있다면 상태는 \n0\n$0$, 잔디가 없다면 상태는 \n1\n$1$입니다.\n \n3\n$3$: 잔디밭에 잔디가 남아있는 칸의 개수를 출력합니다.\n\n모든 쿼리에 대해 정확한 답을 알지 못하면 잔디깎이 로봇이 제대로 작동하는지 확인할 수 없습니다. 주어진 \nQ\n$Q$개의 쿼리에 대해 정확히 대답하는 프로그램을 작성해 주세요."},{"problemId":"31219","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t흐즈로는 어느 날 2차원 메타버스를 방문하였습니다. 2차원 메타버스에서 두 점 사이의 거리는 유클리드 거리 d(A,B)=(xA−xB)2+(yA−yB)2$d(A,B)=\\sqrt{(x_A-x_B)^2+(y_A-y_B)^2}$로 정의합니다. 메타버스에는 n$n$개의 국가가 있는데, 각 국가는 한 점 (xi,yi)$(x_i,y_i)$로 구성되어 있습니다. 메타버스 세계의 평화 협정에 따라 서로 다른 두 국가가 같은 점을 차지하지 않으며, 어떤 세 국가도 한 직선 위에 있지 않습니다. 흐즈로는 2차원 메타버스에서 세계 일주를 하면 재미있을 것으로 생각하였습니다. 흐즈로의 세계 일주는 다음과 같은 규칙을 따릅니다.\n\n\n\t우선 한 국가를 임의로 정합니다. 흐즈로는 그 국가에서 시작해 모든 국가를 한 번씩 지난 뒤 시작한 국가로 돌아옵니다. 국가와 국가 사이를 이동할 때는 두 국가 사이의 최단 경로를 따라 이동합니다. 이때 이동한 거리의 합이 세계 일주의 비용이 됩니다.\n\t이미 본 것을 다시 봐야 한다면 흐즈로는 지루함을 호소할 것입니다. 따라서 세계 일주 중에 이미 지난 점을 다시 지날 수 없습니다. 이는 국가에 해당하지 않는 점도 포함합니다. 단, 모든 국가를 지난 후 시작한 국가에 도착하는 시점은 예외로 둡니다.\n\n\n흐즈로는 이 규칙에 따라 세계 일주를 할 수 있을지 궁금했습니다. 흐즈로가 세계 일주를 할 수 있는지 판단하고, 할 수 있다면 세계 일주의 최소 비용을 출력해 주세요.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31385","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAndroid Vasya attends Maths classes. His group started to study the number theory recently. The teacher gave them several tasks as a homework. One of them is as follows.\n\nThere is an integer n$n$. The problem is to find a sequence of integers a1,…,an$a_1, \\ldots, a_n$ such that for any k$k$ from 2 to n$n$ the sum a1+…+ak$a_1 + \\ldots + a_k$ has exactly ak$a_k$ different positive divisors. Help Vasya to cope with this task.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31371","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tOn the most perfect of all planets i1c5l various numeral systems are being used during programming contests. In the second division they use a superfactorial numeral system. In this system any positive integer is presented as a linear combination of numbers converse to factorials:\n\n pq=a1+a22!+a33!+…+ann!.$$\\frac{p}{q} = a_1 + \\frac{a_2}{2!} + \\frac{a_3}{3!} + \\ldots + \\frac{a_n}{n!}\\,.$$ \n\nHere a1$a_1$ is non-negative integer, and integers ak$a_k$ for k≥2$k \\ge 2$ satisfy 0≤ak<k$0 \\le a_k < k$. The nonsignificant zeros in the tail of the superfactorial number designation pq$\\frac{p}{q}$ are rejected. The task is to find out how the rational number pq$\\frac{p}{q}$ is presented in the superfactorial numeral system.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31403","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tJavaScript에서 +,−$+, -$은 수에 대해서는 일반적인 의미의 덧셈 뺄셈의 의미를 가지고 있습니다. 하지만 문자열에 대해서 +$+$는 두 문자열을 이어붙이라는 의미이고, −$-$는 양쪽 문자열을 수로 해석한 이후에 빼라는 의미입니다.\n\n A,B,C$A, B, C$를 각각 수와 문자열로 생각했을 때 A+B−C$A+B-C$를 출력하세요.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31353","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tbobo has a tree with n$n$ vertices. bobo would like to assign an m$m$-dimension vector p(v)$\\mathbf{p}(v)$ to vertex v$v$, such that for all a,b$a, b$, dist(a,b)=⟨p(a),p(b)⟩$\\mathrm{dist}(a, b) = \\langle \\mathbf{p}(a), \\mathbf{p}(b) \\rangle$.\n\nNote that dist(a,b)$\\mathrm{dist}(a, b)$ is the length of the shortest path between vertices a$a$ and b$b$. For two vectors u=(u1,u2,…,um)$\\mathbf{u} = (u_1, u_2, \\dots, u_m)$ and v=(v1,v2,…,vm)$\\mathbf{v} = (v_1, v_2, \\dots, v_m)$, ⟨u,v⟩=max{|u1−v1|,|u2−v2|,…,|um−vm|}$\\langle \\mathbf{u}, \\mathbf{v} \\rangle = \\max\\{|u_1 - v_1|, |u_2 - v_2|, \\dots, |u_m - v_m|\\}$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31386","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAndroid Vasya likes the history of the ancient world. He likes to read about various superstitions people had at that time.\n\nRecently Vasya came across a superstition concerning his favorite number 13. It turned out, that ancient people considered this number unlucky and avoided it as much as they could:\n\n\n\tthey wouldn't sit at table if there were exactly 13 people;\n\tthey didn't use number 13 in numbering floors of a building: 12-th floor was followed by 14-th one;\n\tthey didn't do anything important on Friday the 13-th.\n\n\nVasya was especially amused by the superstition about Friday. How could people think that something bad could happen in such a wonderful day like Friday?\n\nNow Vasya makes a research in the ancient world history covering a period from year A$A$ till year B$B$. He wonders how many unlucky Fridays this period contains. Help him to cope with this simple task.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31372","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou probably know how microcircuits look like. First of all it is important to pay special attention to connections. Contacts on the circuit are connected by lines. If two lines do not intersect then there is no connection between respective contacts.\n\nYou are holding a circular circuit with n$n$ contacts around the borderline. You have to calculate the number of possibilities to put exactly k$k$ non-intersecting lines each connecting two contacts.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31404","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t뽜밤뽜밤-! 아리스는 메이드 용사로 전직했습니다!\n\n밀레니엄 사이언스 스쿨 엔지니어부의 히비키는 튜링 머신과 비슷한 원리로 작동하는 로봇 청소기를 발명했습니다.\n\n히비키는 로봇 청소기로 H×W$H \\times W$ 직사각형 격자 모양의 게임개발부 부실을 청소하려고 합니다. 격자칸의 좌표는 (r,c)$(r,c)$로 나타낼 수 있으며, 아래로 갈수록 r$r$이 증가하고 오른쪽으로 갈수록 c$c$가 증가합니다. 가장 왼쪽 위 칸의 좌표는 (0,0)$(0,0)$, 오른쪽 아래 칸의 좌표는 (H−1,W−1)$(H-1,W-1)$입니다.\n\n처음에 모든 칸은 먼지로 뒤덮여 있습니다. 로봇 청소기는 격자 한 칸 크기이며, 바라보는 방향으로 전진하거나 제자리에서 회전할 수 있습니다.\n\n로봇 청소기의 전원을 켜면 다음과 같이 작동합니다. 먼저 H×W$H \\times W$ 크기의 규칙표 A$A$와 B$B$를 만듭니다. 규칙표의 각 칸은 청소할 영역의 격자칸에 대응됩니다. 규칙표에는 회전 각도가 적혀 있습니다.\n\n이후 로봇 청소기는 매 단위 시간마다 다음과 같은 이동을 반복합니다.\n\n\n\t현재 칸에 먼지가 있다면 먼지를 제거합니다.\n\t방금 먼지를 제거했다면 규칙표 A$A$를, 먼지를 제거하지 않았다면 규칙표 B$B$를 참조합니다. 규칙표에서 현재 좌표에 적힌 만큼 시계방향으로 회전합니다.\n\t바라보는 방향으로 한 칸 전진합니다.\n\n\n이동을 마친 후에, 로봇 청소기가 영역 밖으로 벗어났다면 작동을 중지합니다. 또한, 지금부터 위의 과정을 아무리 반복해도 더이상 먼지를 제거할 수 없는 경우에도 작동을 중지합니다.\n\n메이드 용사로 전직한 아리스는 히비키의 로봇청소기를 보고, 용사 수행을 위해 로봇 청소기와 똑같은 원리로 동작하여 게임개발부 부실을 청소하려고 합니다. 방의 구조와 아리스의 처음 위치, 그리고 규칙표가 주어집니다. 아리스가 청소를 시작하고 마칠 때까지 이동한 횟수를 출력하세요.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31354","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tbobo has got an undirected graph G$G$, whose edges are colored in red, green and blue.\n\nHe would like to count the number of spanning trees with at most g$g$ green edges and b$b$ blue edges modulo (109+7)$(10^9 + 7)$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31387","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAndroid Vasya attends his Chemistry classes. During the latest semester Vasya's group is studying dry liquids. At the laboratory work on mixing liquids Vasya has got oxygen oxide. An important feature of this substance is its unpredictable consequences after mixing. The liquid is stable only after mixing it in one to one proportion.\n\nVasya has got n$n$ test tubes, with one nano liter of oxygen oxide in each. Due to the features of the oxide Vasya pours liquids from test tube A$A$ to test tube B$B$ in such a way that the resulting liquid volume in test tube B$B$ doubles. To set the experiment successfully Vasya needs to make exactly k$k$ nano liters of the oxide in any of the test tubes. Help him do this.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31405","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t루타비스의 수호자, 시간술사 반반은 모든 음식을 반으로 먹는 것을 즐깁니다. 비록 후라이드 양념 반반 치킨을 먹지는 않지만, 중식은 항상 짬짜면을, 피자집에서는 항상 하프 앤 하프 피자를 주문합니다.\n\n\n\n생일을 맞은 반반은 그의 동료인 어릿광대 피에르에게서 볼록다각형 모양의 케이크를 하나 선물받았습니다. 반반은 이 케이크를 일직선으로 한 번 잘라서 반으로 나눠 먹고 싶습니다. 특히 나눠진 후의 케이크 밑면의 면적이 똑같도록 하고 싶습니다.\n\n반반이 원하는 대로 케이크를 두 조각으로 나눌 수 있을까요?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31355","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tbobo has a sequence of integers a1,a2,…,an$a_1, a_2, \\dots, a_n$. He decides to divide the sequence into exactly m$m$ consecutive parts.\n\nThe cost of each part is its xor sum (bitwise exclusive-or), while the cost of division is bitwise or-sum of its parts' costs.\n\nHelp bobo find the minimum cost.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31388","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAndroid Vasya's elder friends have already been modeling six-dimensional space ships for quite a long time. Vasya himself hasn't yet acquired such level of mastering. He has only just started the 3d-modeling course. And right now he is doing his first homework.\n\nThe homework is pretty easy, one just needs to make a 3d-drawing of any detail. Vasya has already come up with the detail he wants to draw, imagined how it would look like and he even has drawn the first straight line. But something went wrong. Apparently the line turned out to be not the one he needed.\n\nBut Vasya has already got the solution for this problem. He plans to rotate the detail in his mind in such a way, that the line he was going to draw would become the line he had actually drawn. Help Vasya find out what rotation he should make for this.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31373","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tConsider a non-negative integer x$x$ stored in 32$32$ bits of memory: x=b31⋅231+b30⋅230+…+b2⋅22+b1⋅21+b0⋅20$$x = b_{31} \\cdot 2^{31} + b_{30} \\cdot 2^{30} + \\ldots + b_{2} \\cdot 2^{2} + b_{1} \\cdot 2^{1} + b_{0} \\cdot 2^{0}$$ where each bit bi$b_{i}$ can take two values 0$0$ and 1$1$ independently of other bits.\n\nWe perform a sequence of operations with this integer, possibly an empty one. In one operation, we can either increase the number by one or reverse the bits constituting it: swap 31$31$-st bit and 0$0$-th bit, swap 30$30$-th bit and first bit, …$\\ldots$, swap 16$16$-th bit and 15$15$-th bit. We can perform any number of any of these two operations in any order.\n\nWhat is the minimum possible number of operations required to transform a zero to the given integer n$n$?\n\nThe increasing by one is carried out modulo 232$2^{32}$, which means that, if the current number is equal to 232−1$2^{32} - 1$, increasing it by one produces a zero.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31356","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe surface of recently discovered planet i1c5l is a perfectly shaped sphere with radius R$R$. Earth’s aerospace forces sent a research module Waldemar-63 that was supposed to land on the planet’s surface at point A$A$. However, due to miscalculation, Waldemar-63 got to point B$B$ instead. Fortunately, Waldemar series are equipped with a train of wheels that will help in getting to the initial destination point. Nevertheless, power capacity is quite limited so it is important to get to point A$A$ by minimal distance run.\n\nA major complication is that some point O$O$ on the surface of the planet radiates waves of unknown origin. The waves spread inside the radius r$r$ (the distance is measured on the surface). As the previous 62 missions show, any device that gets into the radiation area instantly breaks down. Thus, Waldemar-63’s route should avoid the radiation area. Find the minimal distance that the device has to undertake from B$B$ to A$A$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31389","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAndroid Vasya reads the book \"Amusing physics for the smallest children\". Recently he has read a chapter about uniformly accelerated motion and decided to set up some experiments. For this purpose, Vasya made a mechanical turtle, that could be provided with a different acceleration by a remote control.\n\nVasya launched his turtle into the lobby, changing its acceleration several times. After plotting a graph of a piecewise linear velocity function v1(t)$v_1(t)$ he repeated the experiment. Then he has got a piecewise linear continuous function v2(t)$v_2(t)$ and plotted its graph too.\n\nBefore the third try Vasya has realized that it was a bad idea to plot v1(t)$v_1(t)$ and v2(t)$v_2(t)$ on the same graph. Because of this, it was not clear which segments belong to which function. Help Vasya to restore graphs, keeping in mind that both experiments lasted the same time T$T$ and both times the turtle covered the same distance, which is the length of the lobby.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31374","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\nI'm just gonna shake, shake, shake, shake, shake. I shake it off, I shake it off.\n\n\nTaylor Swift, \"Shake It Off\"\n\n\nPaul Vitti owns one of the most famous New-York mafia cafe-restaurants \"The Godfather\". We know that its regular customers visit the cafe every day at the same time: i$i$-th customer enters the restaurant at the moment ti$t_i$ (measured in minutes from the opening).\n\nEach morning, Paul decides which dish will become the soup of the day (sometimes it's not even a soup, but new yorkers are too busy to care about such little things). As a result, cooking one portion of j$j$-th day meal takes Dj$D_j$ minutes.\n\nRegular customers are so regular that they always order one portion of soup of the day as soon as they enter the cafe. Time is money, so when a customer gets his meal, he eats it momentarily and immediately runs on his business. There are always enough chefs and stoves in the kitchen, so every order starts to be cooked at once.\n\nAll customers know each other, so they shake hands when they meet. Additionally, everybody must shake Paul's hand upon entering. When an entering customer shakes hand of another customer who is already waiting for his meal, the latter one looks at his watch, and his anger becomes equal to the time he already waited in the cafe today. In the morning, everybody is in good mood, so their anger is equal to zero. If one customer is leaving and another one is entering, they still have time for a handshake.\n\nPaul thoroughly analyzes his customers' behavior. For each day, help him to find such pair of customers that after their handshake, one of their anger values is maximum at that day. After that, he will decide to hire faster chefs, or to eliminate angry customers.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31406","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t당신은 폴더 구조를 손쉽게 탐색할 수 있는 트리 탐색기 기능을 개발하고 있습니다.\n\n폴더에는 1$1$번부터 N$N$번까지 번호가 붙어 있습니다. 폴더는 트리 형태의 계층 구조를 이루고 있어서, 다른 폴더를 하위 폴더로 가질 수 있습니다. 어떤 폴더가 포함하는 폴더란, 그 폴더의 하위 폴더 및 하위 폴더가 포함하는 폴더를 가리킵니다. 1$1$번 폴더는 최상위 폴더로, 다른 모든 폴더를 포함하고 있습니다.\n\n트리 탐색기는 목록에 1$1$번 폴더의 하위 폴더들을 표시합니다. (1$1$번 폴더는 표시하지 않습니다.) 폴더는 펼치거나 접을 수 있습니다. 처음에는 모든 폴더가 접혀 있는 상태입니다. 폴더를 펼치면 그 하위 폴더들이 펼친 폴더 바로 아래에 들여쓰기되어 표시됩니다. 폴더를 접으면 포함된 모든 폴더가 목록에서 사라집니다. 폴더를 접었다가 다시 펼쳤을 때, 포함된 모든 폴더는 이전의 접힘/펼침 상태를 유지합니다. (그림 1)\n\n\n\n(그림 1) 폴더를 펼치고 접는 예제. ▽은 펼쳐진 폴더를, ▶은 접힌 폴더를 나타냅니다.\n\n당신은 트리 탐색기에 커서 기능을 추가하려고 합니다. 커서는 처음에 1$1$번 폴더의 첫 번째 하위 폴더를 가리키고 있습니다. 당신은 두 가지 명령어를 구현해야 합니다.\n\n\n\tmove k$k$ : 커서를 k$k$만큼 아래로 이동합니다. (k$k$가 음수라면 −k$-k$만큼 위로 이동합니다.) 커서를 이동하다가 목록의 시작이나 끝에 도달하면 더이상 이동하지 않습니다. (그림 2)\n\ttoggle : 커서가 가리키는 폴더를 접거나 펼칩니다. 폴더가 접혀 있었다면 펼치고, 펼쳐져 있었다면 접습니다.\n\n\n\n\n(그림 2) move 명령어를 사용하는 예제\n\n주어진 Q$Q$개의 명령어를 모두 수행하는 프로그램을 작성하세요.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31375","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn this problem, you have to construct a bipartite graph which has the following properties:\n\n\n\tThe number of vertices in the first part is d$d$.\n\tThe number of vertices in the second part is d−2$d - 2$.\n\tThe number of edges is at most 3d$3 d$.\n\tFor all bipartite graphs constructed by removing two vertices from the first part, there is a perfect matching.\n\n\nRecall that a bipartite graph is a graph where the vertices are divided into two parts so that each edge connects a vertex from the first part and a vertex from the second part. A perfect matching is a collection of edges such that each vertex of the graph is an end of exactly one edge from that collection.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31357","content":"문제\n\nThe sequence of calculations in arithmetic expressions is usually set by a certain arrangement of parentheses. For example, \n(3⋅(2+1))⋅(4−5)\n$(3 \\cdot (2+1)) \\cdot (4-5)$. After deleting all the elements from the expression except parentheses remaining symbols form a parentheses sequence \n(())()\n$(())()$. Let’s assume that adding character <<\n0\n$0$>> does not corrupt the sequence. Let’s call such sequence a disperse parentheses sequence. Also this can be defined as follows:\n\nAn empty line is a disperse parentheses sequence.\nIf \nS\n$S$ and \nT\n$T$ --- disperse parentheses sequences, then lines \n0S,S0,(S)\n$0S, S0, (S)$ and \nST\n$ST$ are also disperse parentheses sequences.\n\nThe depth of disperse parentheses sequence is the maximum difference between the number of opening and closing parentheses in the sequence prefix. (The prefix of line \nS\n$S$ is the line, which can be obtained from \nS\n$S$ by deleting symbols from the tail of the line. For example, the prefixes of line «\nABCAB\n$ABCAB$» are lines <<>>, <<\nA\n$A$>>, <<\nAB\n$AB$>>, <<\nABC\n$ABC$>>, <<\nABCA\n$ABCA$>> and <<\nABCAB\n$ABCAB$>>). Thus, the depth of the sequence «\n(0)(0())0\n$(0)(0())0$» equals two (prefix «\n(0)(0(\n$(0)(0($» contains three openinig and one closing parentheses).\n\nCalculate the number of possible disperse parentheses sequences \nn\n$n$ symbols long, that have a depth \nk\n$k$."},{"problemId":"31407","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t헤네시스 오솔길의 좌우로 늘어진 길이 4L$4L$의 필드에 주황버섯이 N$N$마리 있습니다. 이 주황버섯들은 모든 버섯들의 어머니와 같은 존재, 머쉬맘의 명령을 받고 모였습니다.\n\n\n\n처음에 i$i$번 주황버섯은 필드의 왼쪽 끝에서 4Pi+1$4P_i+1$만큼 떨어진 곳에 있으며, 주황버섯은 정해진 왼쪽 혹은 오른쪽 방향을 바라보고 있습니다. (1≤i≤N)$(1 \\le i \\le N)$ 주황버섯은 매 초마다 다음 규칙을 따라 이동합니다.\n\n\n\t주황버섯은 자기가 바라보는 방향으로 1$1$만큼 이동합니다.\n\t이동 후에 같은 위치에 있는 주황버섯이 두 마리 이상이라면, 모여있는 모든 주황버섯은 다음 시각부터 방향을 바꿔 반대 방향으로 이동합니다.\n\t주황버섯이 필드 끝에 도달한다면, 주황버섯은 필드에서 벗어나게 됩니다.\n\n\n머쉬맘은 아래의 상황에서 주황버섯들에게 방향을 바꿀 것을 명령할 수 있습니다.\n\n\n\t모든 주황버섯이 움직이기 전인 0$0$초 째에.\n\t주황버섯 한 마리가 필드를 빠져나갈 때.\n\n\n머쉬맘이 명령을 내리면 모든 주황버섯들의 이동 방향의 좌우가 바뀝니다.\n\n머쉬맘은 주황버섯들을 이끌고 헤네시스를 침공하려고 합니다. 따라서 헤네시스가 있는 방향인 왼쪽으로 빠져나가는 주황버섯의 수를 최대화하고 싶습니다. 필드의 왼쪽 끝에서 빠져나오는 주황버섯 수의 최댓값과, 이 때 어떤 방식으로 명령해야 하는지 출력하세요.\n\n L$L$ 과 Pi$P_i$가 정수라면 어떤 시점이든 두 마리 이상의 주황버섯이 한 번에 필드를 빠져나가거나, 주황버섯이 필드를 빠져나갈 때 두 마리 이상의 주황버섯이 만나는 경우가 없다는 것을 증명할 수 있습니다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31420","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t다음과 같은 방식으로 알파벳 소문자로 이루어진 문자열을 이용해 그래프를 만들 수 있다.\n\n\n\t알파벳 소문자 a부터 z까지에 대응되는 정점을 만든다.\n\t길이가 L$L$인 문자열 S$S$를 S1S2S3⋯SL$S_1S_2S_3\\cdots S_L$로 나타냈을 때, L−1$L-1$ 이하인 모든 양의 정수 i$i$에 대해 Si→Si+1$S_i \\to S_{i+1}$인 간선을 그래프에 추가한다. 이때 같은 간선이 여러 개일 경우 한 개만 추가한다.\n\n\n알파벳 소문자에 대응되는 정점들로 이루어진 그래프와 문자열 T$T$가 주어졌을 때, 위 변환 과정을 통해 주어진 그래프와 동일한 그래프가 만들어지는 T$T$의 부분 문자열의 개수를 구하시오.\n\n여기서 부분 문자열이란, 문자열의 앞뒤에서 원하는 길이만큼 잘라서 얻을 수 있는 길이 1$1$ 이상의 문자열을 의미한다. 예를 들어 abcde라는 문자열이 있을 때, cd나 abc는 부분 문자열이지만, bd는 문자열의 앞 뒤에서 어떤 길이로 잘라내도 얻어낼 수 없으므로 부분 문자열이 아니다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31390","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tOnce a week android Vasya attends his PE classes. His trainer believes that an ability to think has to be trained as well as physical skills. That is why the trainer often gives his group some tasks which are not quite easy to complete.\n\nToday's task was the following one. Initially n$n$ androids stood in one line. The trainer distributed among them different numbers in a decimal notation. All numbers were from 1$1$ to n$n$ according to the order in which the androids stood, from left to right. On the trainer's command students should re-form the line in a new order. Any two neighboring androids in the new line should meet one of the following conditions:\n\n\n\tthe sum of digits in the left android's number is less than the sum of digits in the right android's number;\n\tthe sums of digits in their numbers are equal and the left android's number is less than the right one's.\n\n\nThe group was completing the task very slowly. But Vasya found it very boring as he was the first in the line and didn't have to change his place.\n\nWhile the androids were re-forming, Vasya decided to determine how many of them didn't need to change their places. Help him to count this.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31376","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\nA long time ago in 2009...\n\n\nIn the village Zaykino, heavy rain is common. After such rain, the river Dubrovka which can usually be just stepped over, overflows. To be able to get across the flooded river, the villagers want to build a floating bridge. Luckily, after construction of a bath-house which belongs to a businessman who settled nearby, there are some logs left.\n\nAll remaining logs have the same thickness. There are x$x$ logs of length a$a$ and y$y$ logs of length b$b$.\n\nThe bridge will consist of l$l$ rows, each of which will be composed of one or more logs. Unfortunately, the last saw in Zaykino drowned in Dubrovka during the previous overflow and disappeared, so the logs can not be cut into pieces.\n\nThe chief engineer wants to build a bridge of maximum possible width. The width of a bridge is determined by the minimum width of a row of logs in it.\n\nFor example, if the villagers want to build a bridge of seven rows, and there are six logs of length 3$3$ and ten logs of length 2$2$, then they can build a bridge of width 5$5$.\n\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31358","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\"Tortoff\" Inc. makes your favorite chocolate products. For your convenience we produce chocolate exclusively in the shape of convex polygon. You can break it into pieces along any non-intersecting diagonals. According to our expert surveys the tastiest pieces of chocolate are triangular. Any customer can help us improve the quality of our products. It is important for us to know the number of ways our exclusive chocolate can be broken into exactly k$k$ triangular parts.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31359","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe Large Wood Database is created to securely store and paint any existing tree. Update for LWDB provides new functionality, so it is time to think over the graph theory. A weighed tree is stored in the LWDB. In the query language for LWDB Management System (LWDB MS) two types of queries are available:\n\n\n\t<<1$1$ v$v$ d$d$ c$c$>> --- paint all tree-vertices at the distance not exceeding d$d$ from the vertice v$v$ in color c$c$. Initial color for any vertices is 0$0$.\n\t<<2$2$ v$v$>> --- return the color of the vertice v$v$.\n\n\nIt is required to prototype LWDB MS and respond to all user’s queries.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31408","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t중대장 만식이의 부대는 당직 근무표를 만들어 당직 근무 스케줄을 관리한다. 당직 근무표에는 총 N$N$일의 당직 근무 스케줄이 작성되어 있으며, 각 날짜에 한 명씩 당직을 서는 병사의 번호가 작성되어 있다. 당직 근무 이후에는 병사에게 충분한 휴식을 제공해야 하므로, 이틀 연속으로 당직 근무를 서는 것은 엄격히 금지된다.\n\n만식이는 금지 사항을 위반하지 않기 위해, 병사들의 당직 근무 순서를 원하는 만큼 맞바꿔 당직 근무표를 개선하고자 한다. 동일한 병사가 이틀 연속으로 당직을 서지 않도록 당직 근무표를 개선할 수 있는지 확인해 주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31391","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAndroid Vasya prepares a research work in Biology. In this work he studies the class of arachnoid. Vasya is not interested in spiders themselves, his work is mostly concentrated on the webs made by different species of spiders.\n\nVasya has already found out how the web is made. It is a set of points --- the web knots, connected with each other by the so-called fibres. One may imagine the web knots as coplanar points. The web fibres are line segments, connecting the knots. An important property of these segments is that they cross only in the knots.\n\nVasya wants to determine which spiders make webs with the highest quality. For this purpose he defined the stickiness of the web as amount of different traps in it. A trap is a polygon with no self-crossings and self-tagencies, where knots of the web are vertexes and fibres are edges.\n\nVasya has analysed several webs with 16 knots. As a result, he has discovered that stickiness of those webs is between 5000$5\\,000$ and 300000$300\\,000$. And now he is interested in finding out how a web with 16 knots and stickiness more than 300000$300\\,000$ can look like.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31377","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThis is an interactive problem.\n\nLittle Misha plays a child's game with a robot. In this game, the robot stands on a field which is divided into 3×3$3 \\times 3$ squares and surrounded by borders. The game begins at the center squares and consists in making ten actions. Each action is either declamation of a phrase or an attempt to move into one of the neighboring squares. Declamation is used to wait, or simply for amusement.\n\nOne of the squares is special, but Misha does not know in advance which one. The robot reports when it moves into the special square. The goal of the game is to move into the special square precisely during the tenth action.\n\nTo communicate with the robot, Misha uses text input and output. The following commands are recognized:\n\n\n\techo phrase  --- declamation of phrase,\n\tmove north  --- moving one square to the north,\n\tmove east  --- moving one square to the east,\n\tmove south  --- moving one square to the south,\n\tmove west  --- moving one square to the west.\n\n\nFor each declamation command, the robot loudly reads the given phrase, and also prints it back in text. During a declamation, the robot does not move. The robot is guaranteed to correctly handle phrases which consist of characters with ASCII codes from 32$32$ to 126$126$ inclusive and are at most 256$256$ characters long.\n\nFor each movement command, the robot prints back one of the four words:\n\n\n\tbump if instead of moving, the robot hit a barrier, in which case, it remains on the same square,\n\tmoved if the robot successfully moved into a common square,\n\tfound if the robot moved into the special square during one of the first nine actions,\n\twin if the robot moved into the special square during the tenth action.\n\n\nHelp Misha to play this game in such a way that, during the tenth action, the robot prints the desired word win.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31421","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t프라이팬 위에는 N$N$개의 호떡이 일렬로 놓여 있다. 각각의 호떡은 앞면이 흰색, 뒷면이 갈색이다. 처음에 모든 호떡은 앞면이 보이는 상태이다. 이때, 호떡 요리사인 현준이는 다음 절차에 따른 작업을 최대 N$N$번 수행할 수 있다.\n\n\n\t x$x$번째와 (x+1)$(x+1)$번째 호떡에 보이는 색이 같도록 정수 x$x$를 고른다. (1≤x≤N−1)$(1 \\le x \\le N-1)$ \n\t x$x$번째 호떡에 보이는 색이 흰색이라면 1$1$번째부터 x$x$번째까지의 호떡을 모두 뒤집는다. 반대로 x$x$번째 호떡에 보이는 색이 갈색이라면 (x+1)$(x+1)$번째부터 N$N$번째까지의 호떡을 모두 뒤집는다.\n\n\n현준이는 작업을 수행해 자신이 원하는 색깔의 호떡 배열을 만들고 싶다. 현준이가 원하는 배열을 얻을 수 있는지 판단하고, 얻을 수 있다면 그 방법 중 하나를 아무거나 찾아서 현준이에게 알려주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31378","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n“I have a rule,” — said the manager, — “always do only half of the work.”\n\n“Why do you have such rule?” — asked Cheburashka. — It’s simple, — said Ivan Ivanovich. — If I’ll do all the work and agree with everything, then everybody will say that I’m too kind and that you can do anything under my command. Otherwise, if I’ll do no work at all and decline everything, I will be considered lazy and basically worthless. So, doing only half of the work is ideal because nobody can say anything bad about me. Do you understand now?\n\n\nE. Uspenskiy, “Gena the Crocodile and his Friends”\n\n\nGeologists of Flatland are planning an important research. For this purpose, they prepared n$n$ sets of points, and are going to make measurements at these points. Each set consists of four distinct points, defined by their two-dimensional coordinates.\n\nThe prepared sets must be approved by m$m$ managers. Each manager chooses a rectangle with sides parallel to coordinate axes and approves measurements at all points inside the rectangle or on its border.\n\nA manager is called fantastic if for each given set of points, he approves exactly half of the points. Determine for each manager if he is fantastic or not.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31379","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tOne of the squares of the town in far-away Oriental country is art mosaic panel consisting of multicolored tiles. The most attractive square feature for tourists is that sometimes some set of tiles is extracted from the mosaic panel and replaced by tiles of another color, thus the mosaic tracery has changed.\n\nSquare surface is modelled by the peace of square plane and every tile is the square with side of length one on the plane. Mosaic piece that is planned to output is defined by following algorithm. At the first is marked any tile, then any another that have common side with the first, then any from residual tiles that have common side with one of the already taken tiles and so on. Becouse the painter entrusted with new picture drawing lives in other town the tile desription had been writed before outputting them. All points of square grid that are the corners of at least one of the extracting multicolored tiles were numbered from 1$1$ to N$N$. After that the sequence of all pairs of neighbour points, that is either their x$x$-coordinates are equal and the absolute value of difference of y$y$-coordinates is one or their y$y$-coordinates are equal and the absolute value of difference of x$x$-coordinates is one, had been writed.\n\nHowever before that description have been got to the painter it was been fallen into hands of mathematicians. As a result of their interest for various graph transformations the points turned out renumbered in chaotic order although their numbers are still different numbers from 1$1$ to N$N$ and pair of points in sequence are neighbours.\n\nThus is needed program for painter that reconstructs from this description initial coordinates of mosaic corners. With all this going on may be multiple variants but program may output any of possible variants becouse rotation or reflection is not a problem for painter.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31409","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t도훈이네 부대의 전화기에는 착신 전환이라는 기능이 있다. 착신 전환이란 전화기에 걸려 오는 전화를 다른 전화기로 대신 연결하는 기능이다. 가령, 전화기 A$A$가 전화기 B$B$로 착신 전환을 했다면, 누군가가 전화기 A$A$에 전화를 걸었을 때 전화기 B$B$에 전화가 걸려 오게 된다. 착신 전환은 전화기마다 최대 하나의 전화기로만 설정할 수 있다.\n\n그러나 해당 기능에는 큰 문제가 있는데, 착신 전환이 꼬이게 되면 일부 전화기가 먹통이 된다는 것이다! 예를 들어, 전화기 A$A$가 전화기 B$B$로, 전화기 B$B$가 전화기 C$C$로 착신 전환을 걸어 둔 상태에서 전화기 C$C$가 전화기 A$A$에 착신 전환을 걸어 두면 세 전화기 중 어떤 전화기에 전화를 걸어도 신호 대기 상태가 무한히 유지되며, 세 전화기 모두 먹통이 된다.\n\n이 사실에 깊게 감명받은 도훈이는, 일부 전화기들의 착신 전환 상태를 바꿔 부대 내의 전화기 모두를 먹통으로 만들려는 사악한 계획을 세웠다! 부대 내에는 1$1$번부터 N$N$번까지 총 N$N$대의 전화기가 있으며, 각 전화기는 ai$a_i$번 전화기로 착신 전환이 되어 있는 상태이다. 만약 ai=i$a_i = i$라면, i$i$번 전화기에는 착신 전환이 걸려 있지 않은 상태임을 의미한다.\n\n하지만 전화기들의 착신 전환 상태를 너무 많이 바꾸면 간부님께 걸릴 것이 분명하므로, 착신 전환 상태를 바꿀 전화기 개수를 최소로 해야 한다. 도훈이를 위해, 착신 전환 상태를 바꿔야 하는 최소 전화기 개수와 착신 전환 상태를 어떻게 바꿔야 하는지 구해 주자. 만약 가능한 착신 전환 상태가 여러 가지라면, 그중 아무거나 구해 주자. 모든 전화를 먹통으로 만드는 것이 항상 가능함을 증명할 수 있다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31392","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAndroid Vasya attends his Astronomy classes. Today on the laboratory work he had to count out the obliquity angle of sun rays. Help Vasya do this using the following facts.\n\n\n\tThe Earth orbit is a circle with the center in the center of the Sun. The Earth evenly moves along it counter clockwise, if to watch at the plane of the Erath orbit from the North Pole. A complete circle is made for exactly 365 days.\n\tThe Earth is a full sphere, rotating round its axis counter clockwise, if to watch at it from the North Pole. The Earth axis of rotation digresses from the perpendicular to the plane of the Earth orbit for 23.439281 degrees.\n\tThe meredian where Vasya is located is the nearest meredian to the Earth orbit's center at each midday. The period from one midday to the next one lasts exactly one day, i.e. 24 hours. The moment of summer solstice falls at midday of 21 of June.\n\tAt each moment of time sun rays can be considered parallel to the segment which connects the Earth center with the Earth's orbit center.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31410","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t부대에 미확인 오염 물질이 발생해 위기에 빠졌다! 오염 물질은 부대 내의 수직선 위의 서로 다른 N$N$개의 위치에 발생했으며, 그중 i$i$번째 오염 물질의 오염도는 pi$p_i$이며 xi$x_i$ 위치에 발생했다. 오염 물질을 정화하기 위해서는 제독병이 오염 물질의 위치까지 이동하여 제독 장비를 사용해 오염도 이상의 제독제를 뿌려야 한다. 이를 위해 제독병은 서둘러 제독 장비에 제독제를 충전하기로 했다.\n\n그러나 제독제를 충전하러 가던 중 실수로 제독 장비를 떨어뜨려 밑부분에 금이 가버렸고, 이 때문에 제독 장비를 사용할 때마다 금이 점점 커져 1$1$분마다 제독 장비를 사용했던 횟수만큼의 제독제가 제독 장비에서 흘러내릴 것이다. 흘러내린 제독제는 더 이상 오염 물질을 정화하는 데 사용할 수 없다.\n\n제독병이 제독을 시작할 수직선 위의 위치는 임의로 정할 수 있으며, 시작할 위치에서 가까운 순서대로 오염 물질을 정화하려 한다. 시작 위치와의 거리가 같은 오염 물질이 있다면, 거리가 같은 오염 물질의 정화 순서는 임의로 정할 수 있다. 제독병은 1$1$분에 1$1$만큼의 거리를 이동할 수 있으며, 제독병이 제독 장비를 사용하면 현재 제독병의 위치에 있는 오염 물질에 제독제를 뿌릴 수 있다. 제독 장비를 한 번 사용할 때 뿌릴 수 있는 제독제의 양에는 제한이 없으며 시간이 소요되지 않는다.\n\n제독병은 미확인 오염 물질을 분석하기 위해 아무 곳이나 한 곳을 남겨 두고 나머지 N−1$N-1$개의 오염 물질을 제독을 시작할 위치에서 가까운 순서대로 정화하려고 하며, 이를 위해 충전해야 할 제독제의 양을 최소화하고자 한다. 제독병을 위해 금이 간 제독 장비를 사용하여 N−1$N-1$개의 오염 물질을 정화하기 위해 충전해야 할 최소 제독제의 양을 계산해 주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31422","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t음이 아닌 정수로 이루어진 길이 N$N$의 수열 A1,A2,⋯,AN$A_1, A_2, \\cdots, A_N$이 주어진다.\n\n ∧,∨,⊕$\\land, \\lor, \\oplus$를 각각 Bitwise AND, OR, XOR 연산자로 정의하자. 다음 세 값을 998244353$998\\,244\\,353$으로 나눈 나머지를 각각 구하여라. 998244353$998\\,244\\,353$은 소수이다.\n\n ∑i=1N∑j=iN(Ai∧Ai+1∧⋯∧Aj),∑i=1N∑j=iN(Ai∨Ai+1∨⋯∨Aj),∑i=1N∑j=iN(Ai⊕Ai+1⊕⋯⊕Aj)\\[\\sum_{i=1}^{N} \\sum_{j=i}^{N} \\left(A_i \\land A_{i+1} \\land \\cdots \\land A_j\\right), \\qquad \\sum_{i=1}^{N} \\sum_{j=i}^{N} \\left(A_i \\lor A_{i+1} \\lor \\cdots \\lor A_j\\right), \\qquad \\sum_{i=1}^{N} \\sum_{j=i}^{N} \\left(A_i \\oplus A_{i+1} \\oplus \\cdots \\oplus A_j\\right)\\] \n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31393","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAndroid Vasya prepares a project in Urban geography. The aim of the project is to improve the infrasructure of the city he lives in.\n\nNow the city consists of n$n$ districts, some of which are connected by roads. Using these roads one can get from any district to any other district of the city by car. Vasya thinks that such big amount of roads makes citizens use their own cars instead of walking or cycling. He wants to close as many roads for cars as possible and turn them into boulevards. Of course, Vasya wants to keep the possibility to get from any district to any other district of the city by car using roads.\n\nNow citizens pay for using roads, and prices for different roads may vary very much. Vasya thinks that leaving open some expensive and some cheap roads at the same time is not a good idea beacuse it can increase social tension in the city. That's why he wants to minimize the price spread between the most expensive and the cheapest roads. Help Vasya choose the roads to keep open.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31423","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t극단적인 출산율 감소로 인해 신촌 지역 N$N$개 대학교가 하나의 학교로 통합되었다.\n\n기나긴 회의 끝에, 통합된 학교의 이름은 N$N$개 대학교의 이름을 이어 붙여서 정해졌다. 회의에서 통합된 학교의 이름을 정한 방법은 다음과 같다.\n\n N$N$개 대학교의 이름 s1,s2,⋯,sN$s_1, s_2, \\cdots, s_N$을 일렬로 나열한다. 이후 다음의 과정을 N−1$N - 1$번 반복한다.\n\n\n\t si,sj$s_i, s_j$가 빈 문자열이 아닌 서로 다른 두 정수 i,j$i, j$를 고른다.\n\t si$s_i$의 뒤쪽에 sj$s_j$를 이어 붙인다.\n\t sj$s_j$를 빈 문자열로 바꾼다.\n\n\n모든 과정이 끝난 뒤에는 빈 문자열이 아닌 sk$s_k$가 하나 남게 되며, 이때 sk$s_k$가 통합된 학교의 이름이 된다.\n\n N$N$개 대학교의 이름 s1,s2,⋯,sN$s_1, s_2, \\cdots, s_N$과 회의에서 고른 i,j$i, j$가 순서대로 주어질 때, 회의를 통해 정해진 통합된 학교의 이름을 구하는 프로그램을 작성해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31460","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t코코는 0$0$부터 9$9$까지의 숫자가 새겨진 초콜릿을 많이 갖고 있다. 코코는 이 초콜릿을 가지고 큰 수를 만들어서 한별이에게 선물하려고 한다.\n\n코코는 한별이가 팰린드롬 수, 특히 11$11$을 좋아한다는 사실을 알고 있기 때문에, 11$11$의 배수인 팰린드롬 수를 만들고 싶다. 팰린드롬 수는 왼쪽에서 오른쪽으로 읽은 것과 오른쪽에서 왼쪽으로 읽은 것이 서로 같은 수를 말한다. 예를 들어, 9$9$, 11$11$, 4774$4774$, 13531$13531$은 팰린드롬 수이고, 1232$1232$, 1100$1100$은 팰린드롬 수가 아니다.\n\n코코를 도와 11$11$의 배수이면서 팰린드롬인 N$N$자리의 음이 아닌 정수를 하나 찾아주자. 각 숫자가 새겨진 초콜릿은 충분히 많다고 가정한다. 0$0$을 제외한 수는 숫자 0$0$으로 시작할 수 없다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31394","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAt last the first term at the University came to its finish. Android Vasya has already passed all the exams and wants to know if he gets a scholarship. There is the following practice of giving scholarship to students at the University:\n\n\n\tif a student has got satisfactory marks, the scholarship is not given,\n\tif a student has passed through the examination period with only excellent marks, he gets a personal scholarship,\n\tif a student doesn't get a personal scholarship and his average mark is not less than 4.5$4.5$, he gets a high scholarship,\n\tif a student gets neither high nor personal scholarship and doesn't have satisfactory marks, he gets a common scholarship.\n\n\nA satisfactory mark corresponds to value 3, a good mark corresponds to value 4, and an excellent mark corresponds to value 5. An average mark for a student is the average value of all the marks this student got in his exams.\n\nHelp Vasya find out which scholarship he gets.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31411","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t용범이는 보라매컵에 문제를 출제하기 위해 서로 다른 N$N$가지 종류의 알고리즘 문제들을 각각 K$K$개씩, 총 N×K$N\\times K$개의 문제를 만들었다. 그중 i$i$번째 알고리즘의 j$j$번째 문제의 난이도는 dij$d_{ij}$이다. 그러나 만든 문제를 모두 내기에는 대회 시간이 부족했기에, 서로 다른 N$N$개의 알고리즘마다 각각 하나의 문제씩 총 N$N$개의 문제만 내고자 한다.\n\n또한 용범이는 문제의 난이도가 급격하게 상승하는 것을 방지하기 위해, 난이도 커브를 최소화하고자 한다. 난이도 커브는 대회의 i$i$번 문제의 난이도를 xi$x_i$라 할 때 |x1−x2|+|x2−x3|+⋯+|xN−1−xN|$\\left\\vert x_1 - x_2 \\right\\vert + \\left\\vert x_2 - x_3 \\right\\vert + \\cdots + \\left\\vert x_{N-1} - x_N \\right\\vert$라고 정의한다. 단, N=1$N = 1$일 때의 난이도 커브는 0$0$으로 정의한다.\n\n용범이를 도와 N$N$개의 문제들의 순서를 적절히 배치할 때 난이도 커브의 최솟값을 구해주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31440","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\nStudy nature: 자연을 탐구하고 세상의 문제를 발견하는 인재.\n\n\n위 문장은 KSA 비전 2040에서 공개된 모토의 일부다.\n\n하지만 본 문제의 출제자는 KSA를 졸업했으므로, 남의 문제를 베껴오기로 하였다. 본 문제는 히스토그램에서 가장 큰 직사각형과 쿼리 (16977)를 베껴와 몇 글자만 바꾼 문제다.\n\n히스토그램은 직사각형 여러 개가 아래쪽으로 정렬되어 있는 도형이다. 각 직사각형은 너비가 1$1$로 일정하지만, 높이는 서로 다를 수도 있다. 예를 들어, 다음 그림은 높이가 3,5,8,8,4,7$3, 5, 8, 8, 4, 7$인 직사각형으로 이루어진 히스토그램이다.\n\n\n\n히스토그램에서 아래와 같은 쿼리 Q$Q$개를 수행해보자.\n\n\n\t lr$l \\, r$: l$l$번째 직사각형부터 r$r$번째 직사각형까지만 있을 때, 가장 넓이가 큰 직사각형의 넓이를 출력한다.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31461","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t코코네 마을은 초콜릿 가게가 많이 있는 것으로 유명하다. 이 마을에는 1≤x≤N$1\\le x\\le N$, 1≤y≤2$1\\le y\\le 2$인 각 정수 x$x$, y$y$마다 좌표 (x,y)$(x,y)$ 위치에 초콜릿 가게가 하나씩 있다. 이 중에는 코코와 한별이의 가게도 있으며, 코코의 가게는 (a,b)$(a,b)$, 한별이의 가게는 (c,d)$(c,d)$에 있다. 코코네 마을의 도로는 조금 특이해서, x$x$좌표의 차이와 y$y$좌표의 차이가 모두 1$1$ 이하인 모든 두 가게 사이에는 도로가 놓여 있어 한 가게에서 다른 가게로 이동할 수 있다.\n\n아래 그림은 N=5$N=5$이고 코코네 가게는 (1,1)$(1, 1)$, 한별이네 가게는 (5,2)$(5, 2)$에 있는 경우의 예시이다.\n\n\n\n코코는 한별이와 함께할 초콜릿 성지순례 코스를 계획하고 있다. 올바른 성지순례 코스는 다음과 같이 정의한다.\n\n\n\t코코의 가게에서 시작해서 도로를 통해 이동하여 한별이의 가게에서 끝난다.\n\t어떤 초콜릿 가게가 있는 곳에 도착하면 반드시 그 가게를 방문하며, 각 초콜릿 가게는 최대 한 번만 방문한다.\n\n\n코코는 동네에 있는 모든 초콜릿 가게에서 파는 초콜릿의 맛을 점수로 매겨 놓았다. 성지순례 코스의 점수는 방문한 모든 초콜릿 가게에서 파는 초콜릿의 점수의 합이며, 코코와 한별이의 가게도 포함한다. 코코를 위해 최고의 성지순례 코스의 점수를 계산해 주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31424","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t철수와 영희는 N$N$개의 카드로 구성된 카드 뭉치와 칠판을 가지고 최대공약수 카드 게임을 진행한다.\n\n\n\n각 카드는 1$1$번부터 N$N$번까지 번호가 매겨져 있고 i$i$번 카드에는 양의 정수 Ai$A_i$가 적혀 있으며 칠판에는 2$2$ 이상의 정수 X$X$가 적혀 있다. 게임은 철수부터 시작해서 아래의 과정을 수행하며 턴을 진행한다.\n\n\n\t카드 뭉치에서 카드를 하나 고른다. 이때 칠판에 적힌 수와 플레이어가 고른 카드에 적힌 수의 최대공약수가 1$1$이면 안 된다.\n\t칠판에 적힌 수와 카드에 적힌 수의 최대공약수를 칠판에 새로 적고, 원래 칠판에 적힌 수는 지운다.\n\t플레이어가 고른 카드는 카드 뭉치에서 제외한다.\n\n\n자신의 턴에 카드 뭉치에서 고를 수 있는 카드가 없을 때 (더 이상 카드가 없거나 어떤 카드를 고르더라도 칠판에 적힌 수가 1$1$이 되는 경우) 해당 플레이어는 패배하게 된다. 철수와 영희는 이 게임에서 최선의 전략을 알고 있고 이를 활용하여 게임에 참여한다. 게임을 시작하기 전 칠판에 적힌 수와 카드의 조합이 주어졌을 때 승자를 판단해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31441","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tKSA 학생인 종현이는 KSA의 가을 학교 축제에서 축제용 가상화폐 거래를 활성화하기 위해, 탐색 게임을 만들었다.\n\n탐색 게임은, 게임을 시작할 때 사전에 정해진 정수 X(1≤X≤N)$X (1 \\le X\\le N)$의 값을 적절한 질문을 통해 맞히는 게임이다.\n\n매 질문마다, 사용자는 서로 다른 N$N$ 이하의 양의 정수를 K$K$개 이하로 선택하여 입력한다.\n\n\n\t입력한 값 중에 X$X$가 있는 경우, 게임이 종료된다.\n\t그렇지 않은 경우, 방금 입력한 정수 중 X$X$보다 작은 것의 개수가 사용자에게 주어진다.\n\n\n게임이 종료될 때까지 위 과정이 반복된다. 게임 동안 n$n$회 질문한 경우 최종 점수는 (K+1)n−1$(K+1)^{n-1}$점이 된다.\n\n여러분은 게임에서 가상화폐를 벌어 종현이를 울리고 모든 간식과 기념품을 쓸어가고자 하는 해커다. 탐색 게임을 수행하여 얻는 점수의 기댓값을 최소화하는 전략을 찾아, 그 기댓값을 출력하자.\n\n단, 정답 값인 X$X$는 사용자 입력 이전에 정해지며, X$X$가 i$i$일 확률은 PiP1+⋯+PN$\\cfrac{P_i}{P_1 + \\cdots + P_N}$이다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31462","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t코코네 초콜릿 가게에서는 밸런타인데이 특별 상품으로 정육각형 3$3$개를 삼각형 모양으로 붙인 초콜릿을 판매하려고 한다. 코코는 같은 크기의 정육각형 N(N+1)2$\\frac{N(N+1)}{2}$개를 삼각형 모양으로 붙인 형태의 틀에 이 초콜릿들을 빈틈없이 넣어 포장하려고 한다. 그리고 이를 조금 더 예뻐 보이게 하기 위해, 위로 뾰족한 방향으로 배치된 초콜릿은 빨간색, 반대 방향의 초콜릿은 파란색으로 개별 포장을 하기로 했다. 포장이 완료된 상품은 겉에서 볼 때 각각의 육각형이 빨간색인지 파란색인지만 알 수 있고, 어느 칸들이 같은 조각인지는 알 수 없다.\n\n\n\n코코네 가게에 놀러 온 한별이는 완성된 상품을 구경하다가, 다른 모양의 초콜릿이 들어 있는 것으로 보이는 상품을 보게 되었다. 한별이를 도와서 주어진 상품이 잘못되었는지 판별하여 코코에게 알려주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31412","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t군수품 창고에 1$1$번부터 N$N$번까지 번호가 매겨진 N$N$개의 군수품 박스가 번호 순서대로 일렬로 늘어서 있으며, 그중 i$i$번 박스 안에는 ai$a_i$개의 군수품이 들어있다. 군수품 창고 정리를 맡은 부대에는 1$1$번부터 M$M$번까지 번호가 매겨진 M$M$개의 분대가 있으며, 그중 j$j$번 분대에 소속된 병사는 bj$b_j$명이다.\n\n군수품 정리를 위해 부대의 지휘관은 부관에게 군수품 박스 N$N$개를 연속한 번호의 박스로 이루어진 M$M$개 이하의 그룹으로 나누고, 부대에서 박스 그룹의 개수만큼의 분대를 차출해 각 박스 그룹을 차출한 분대별로 하나씩 맡아 그 분대의 병사들이 박스 그룹의 군수품을 모두 정리하는 방법을 활용하라고 지시했다. 이때 각 박스 그룹은 최소 1$1$개의 군수품 박스를 포함해야 한다.\n\n부관은 각 분대의 병사들이 함께해야 할 작업을 하지 않고 다른 사람에게 떠넘길 것을 우려하여 각 병사가 정리할 군수품의 개수를 미리 배정해 주기로 했다. 이때 부관은 최대한 병사들에게 공평하게 작업을 분배하기 위해, 가장 많은 군수품을 정리할 병사가 정리하게 될 군수품의 개수를 최소화하도록, 지휘관이 지시한 방법을 활용하면서 각 병사가 정리할 군수품의 개수를 배정하려 한다.\n\n부관의 의도대로 각 병사가 정리할 군수품의 개수를 모두 배정했을 때, 가장 많은 군수품을 정리할 병사가 정리하게 될 군수품의 개수를 구해주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31395","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t길이가 N$N$인 수열 A1,⋯,AN$A_1, \\cdots, A_N$이 주어집니다. 수열의 모든 수는 서로 다른 1$1$ 이상 N$N$ 이하의 수입니다. 아래 조건을 모두 만족시키는 (i,j)$(i, j)$ 정수쌍의 개수를 구하세요.\n\n\n\t 1≤i≤j≤N$1 \\le i \\le j \\le N$.\n\t A$A$의 i$i$번째 수부터 j$j$번째 수까지가 오름차순으로 배열되어있다. 즉, i≤k<j$i \\le k < j$를 만족하는 모든 정수 k$k$에 대해 Ak<Ak+1$A_k < A_{k+1}$.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31413","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t드디어 병역의 의무를 질 나이가 된 용진이는 선진병영을 선도하는 대한민국 공군병 모집에 지원하고자 한다. 대한민국 공군 모집병으로 합격하기 위해선 가산점이 필요한데, 최근 높아진 공군의 인기 탓에 봉사활동 혹은 헌혈을 통해 M$M$점 이상의 가산점을 모아야 한다.\n\n현재 공군 지원일까지는 N$N$일이 남았으며, 그중 i$i$일에는 si$s_i$점의 가산점을 얻을 수 있는 봉사활동에 참여할 수 있다. 헌혈은 1$1$일부터 N$N$일까지 아무 날짜에 할 수 있으며, 헌혈하는 경우 A$A$점의 가산점을 획득한다. 단, 헌혈을 하는 경우 충분한 휴식을 위해 헌혈한 날을 포함하여 헌혈 이후 D$D$일 동안 헌혈하거나 봉사활동에 참여할 수 없다.\n\n헌혈이 무서웠던 용진이는 헌혈을 최대한 적게 하며 가산점을 M$M$점 이상 모으고자 한다. 용진이를 도와 공군병 모집 마감일까지 M$M$점 이상의 가산점을 모으기 위한 최소 헌혈 횟수를 구해주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31442","content":"문제\n\n \nN\n$N$개의 \n0\n$0$과 \nN\n$N$개의 \n1\n$1$로 이루어진 길이 \n2N\n$2N$의 수열 \nA\n$A$가 있을 때, 다음과 같은 작업을 \n0\n$0$회 이상 시행하여 \nA\n$A$에 \nN\n$N$이 존재하게 할 수 있으면 그런 수열 \nA\n$A$를 좋은 수열이라고 하자.\n\n \nA\n$A$에서 연속한 \n4\n$4$개의 정수를 골라 순서대로 \nx\n$x$, \ny\n$y$, \nz\n$z$, \nw\n$w$라고 하고, 현재 작업 진행 전 \nA\n$A$의 크기를 \nL\n$L$이라 하자.\n \nx\n$x$, \ny\n$y$, \nz\n$z$, \nw\n$w$을 삭제하고 그 위치에 \nw\n$w$, \nx+y\n$x+y$를 삽입한다.\n즉, \nA1,A2,⋯,x,y,z,w,⋯,AL\n$A_1, A_2, \\cdots, x, y, z, w, \\cdots, A_L$을 \nA1,A2,⋯,w,x+y,⋯,AL\n$A_1, A_2, \\cdots, w, x+y, \\cdots, A_L$로 바꾼다.\n\n \nN\n$N$개의 \n0\n$0$과 \nN\n$N$개의 \n1\n$1$로 이루어진 길이 \n2N\n$2N$의 수열 \nB\n$B$가 주어진다. 다음과 같은 쿼리를 적용할 때마다 수열 \nB\n$B$가 좋은 수열인지 판별하여라.\n\n \nlr\n$l\\, r$: \nl≤i≤r\n$l\\le i\\le r$인 모든 \ni\n$i$에 대해 \nBi\n$B_i$를 반전시킨다. 즉, \nBi=1\n$B_i=1$이면 \n0\n$0$으로, \nBi=0\n$B_i=0$이면 \n1\n$1$로 바꾼다. 이때, \n[l,r]\n$[l,r]$ 구간에서 \n1\n$1$의 개수와 \n0\n$0$의 개수는 같다."},{"problemId":"31463","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t코코는 심심할 때면 초콜릿 뒤집기 게임을 즐겨 한다. 초콜릿 뒤집기 게임은 앞뒤가 서로 다른 동전 모양의 초콜릿을 가지고 하는 1$1$인용 게임으로, 다음과 같이 진행된다.\n\n\n\t초콜릿을 앞면이나 뒷면이 보이도록 일렬로 늘어놓는다. 이 상태를 초기 상태라고 하자.\n\t앞면이 보이는 초콜릿을 하나 집어 먹고, 그 초콜릿과 왼쪽이나 오른쪽으로 이웃한 초콜릿을 뒤집는다. 앞면이었던 초콜릿을 뒤집으면 뒷면이 되고, 뒷면이었다면 앞면이 된다. 이웃한 초콜릿은 2$2$개, 1$1$개, 0$0$개일 수 있다. 이웃이 2$2$개일 경우, 초콜릿을 집어 먹은 후에도 그 둘은 서로 이웃하지 않는다.\n\t2번 과정을 반복하여 초콜릿을 모두 먹으면 승리한다. 1$1$개 이상의 초콜릿이 남아있는 상태에서 2번 과정을 수행할 수 없으면 패배한다.\n\n\n\n\n코코가 이 게임을 하는 것을 본 한별이는 아래와 같은 문제를 냈다. 코코를 도와 이 문제를 해결해 주자.\n\n\n\t주어진 초기 상태에서 몇 개의 초콜릿을 원하는 대로 뒤집을 수 있을 때, 초콜릿 뒤집기 게임에서 승리하는 방법이 있는 초기 상태의 수는 몇 가지일까?\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31396","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이사를 온 은하는 마침내 M$M$대의 전자기기와 N$N$대의 멀티탭을 모두 새 집에 옮겼습니다. 멀티탭의 길이는 무한합니다.\n\n새 집에는 K$K$개의 벽면 콘센트가 있습니다. (K≤M)$(K \\le M)$ 은하는 가져온 멀티탭을 활용해 전자기기들에 전기를 연결하려고 합니다. 어떤 멀티탭을 다른 멀티탭 소켓에 꽂아도 됩니다. 다만 일부 기기는 전력 사용량이 많아서, 전기가 콘센트로부터 기기까지 일정 수 초과의 멀티탭을 거치는 경우 전자기기에 과부하가 걸려 불이 나게 될 수도 있습니다.\n\n이런 상황에서 최대한 많은 대수의 전자기기에 전기를 공급받을 수 있게 할 수 있나요?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31425","content":"문제\n\n때는 3022년, 옛날 옛적에 국렬이와 지환이가 산 작은 땅은 1000년이라는 긴 시간을 거쳐 \nN\n$N$행 \nM\n$M$열의 거대한 격자 모양 땅으로 발전하였다. 이를 물려받은 후손 도훈이는 땅을 관리하기가 버거워짐을 느끼고 \nB\n$B$ 나라 사람들에게 판매하기로 결심했다.\n\n \nB\n$B$ 나라에서는 모든 수를 \nB\n$B$진법으로 표기하는 독특한 수 체계를 사용한다. 또한 두 수를 더할 때도 일반적인 덧셈과는 다른 방법으로 계산한다. 두 \nB\n$B$진법 수 \nX\n$X$와 \nY\n$Y$를 더할 때, 각 자리의 덧셈 결과가 \nB\n$B$ 이상일 경우 받아올림 하지 않고 나머지를 그대로 사용한다. 즉 \nX\n$X$의 \nt\n$t$번째 자리에 해당하는 수가 \nxt\n$x_t$, \nY\n$Y$의 \nt\n$t$번째 자리에 해당하는 수가 \nyt\n$y_t$일 때 \nZ=X+Y\n$Z=X+Y$의 \nt\n$t$번째 자리에 해당하는 수 \nzt=(xt+yt)modB\n$z_t=(x_t+y_t) \\bmod B$이다. 땅을 판매하기 위해서는 고객들과의 원활한 소통이 필수이기 때문에, 도훈이 역시 땅의 가치를 매길 때 이 수 체계를 그대로 사용하려 한다. 이 받아올림 없는 \nB\n$B$진수 덧셈을 기호 \n⊕\n$\\oplus$로 표기하자.\n\n도훈이는 광활한 토지의 가치를 한 칸씩 정하다 이를 모두 일일이 정해 주는 것은 무리라고 생각했다. 따라서, 네 개의 정수 \np,q,r,s\n$p, q, r, s$를 정한 후 \ni\n$i$번째 행 \nj\n$j$번째 열에 해당하는 칸의 가치 \nAij\n$A_{ij}$를 \n(p×i+q)⊕(r×j+s)\n$(p \\times i+q) \\oplus (r \\times j+s)$로 정했다. \n×\n$\\times$와 \n+\n$+$는 일반적인 정수의 덧셈과 곱셈임에 유의하자.\n\n각 칸의 가치를 정한 직후, 땅 구매를 원하는 고객 \nK\n$K$명이 찾아왔다. \nl\n$l$번째 고객은 \n[al,cl]×[bl,dl]\n$[a_l, c_l] \\times [b_l, d_l]$에 해당하는 직사각형 영역의 땅을 모두 구매하길 원하며, 이때의 땅의 가치는 \n\n\n\n\n⨁i=alcl⨁j=bldlAij\n$\\bigoplus\\limits_{i=a_l}^{c_l} \\bigoplus\\limits_{j=b_l}^{d_l} A_{ij}$이다. 고객 응대에 지친 도훈이를 위해 각 질문에 대한 답을 계산해 주자. 이때 계산 결과는 \nB\n$B$진법으로 표기하여야 한다."},{"problemId":"31443","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n준영이는 운동회를 준비하는 친구들을 위해 자신이 가지고 있는 초코바를 쪼갠 뒤 나누어 주려고 한다.\n\n준영이에게는 처음에 가로 길이 N$N$, 세로 길이 M$M$인 직사각형 모양의 초코바 조각이 하나 있으며, 초코바 조각 중 하나를 골라 더 작은 초코바 조각 2$2$개로 쪼개는 시행을 0$0$회 이상 반복할 수 있다. 시행이 모두 끝난 뒤 모든 초코바 조각은 직사각형 모양이어야 하고 각 변의 길이가 정수여야 한다.\n\n기쁨은 나누면 배가 된다는 속담답게, 준영이가 얻는 총 기쁨은 시행이 모두 끝난 뒤 남은 초코바 조각들의 크기의 곱이다. 가로 길이가 X$X$이고 세로 길이가 Y$Y$인 초코바 조각의 크기는 X×Y$X \\times Y$로 정의한다.\n\n이때, 준영이가 얻을 수 있는 최대 기쁨을 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31464","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t추리 소설 “초콜릿 괴도 레나”를 감명 깊게 읽은 코코는 이 소설의 명장면을 따라 해 보기로 했다. 구체적인 방법은 다음과 같다.\n\n\n\t1단계: 먼저 N×N$N\\times N$ 크기의 사각 격자 형태의 초콜릿을 준비한다. 이 초콜릿은 1×1$1\\times 1$ 단위로 원하는 곳에서 떼어낼 수 있게 되어 있으며, 0$0$개 이상의 단위 초콜릿이 제거된 상태이다. 이때, 남아있는 단위 초콜릿은 4$4$개 이상이며, 한 조각을 이루어야 한다. 상하좌우로 이웃한 두 단위 초콜릿은 서로 연결되어 있으며, 서로 연결된 단위 초콜릿들의 집합을 하나의 조각이라고 한다.\n\t2단계: 이 초콜릿에서 다음의 조건을 충족하도록 하나의 단위 초콜릿을 떼어 먹는다.\n\t\n\t\t이 단위 초콜릿을 떼어낸 후에도 남아있는 초콜릿은 하나의 조각을 이루지만, 그 이후에 서로 이웃한 임의의 두 단위 초콜릿 사이를 자르면 2$2$개의 조각으로 나누어진다.\n\t\n\t\n\t3단계: 레나의 명대사를 외친다. “이번엔 봐줬지만, 다음에는 반드시 초콜릿을 조각내 줄 거야.”\n\n\n코코는 1단계의 조건을 충족하는 초콜릿을 준비해 놓았지만, 2단계의 조건을 충족하려면 어느 지점에 있는 단위 초콜릿을 떼어내야 할지 고민에 빠졌다. 코코를 도와주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31414","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t운전병 해찬이의 활약 덕분에 A국은 B국과의 전쟁에서 승리할 수 있었다. 그러나 A국 역시 전쟁으로 인해 큰 피해를 입었기 때문에, A국은 언제 침략해 올지 알 수 없는 B국에 대비하기 위해 군대를 재정비하려고 한다.\n\nA국에는 N$N$개의 지역이 있으며, 전쟁으로 인해 무너진 교통망을 복구하기 위해 각 지역에서 다른 지역으로 향하는 양방향 도로를 하나씩 지었다. 그중 i$i$번째 지역에서 지은 도로는 di$d_i$번째 지역으로 이동할 수 있는 양방향 도로이다.\n\n또한 B국의 침략에 대비하기 위해 각 지역에 부대를 주둔시키려고 하는데, 부대를 불필요하게 많이 주둔시키면 효용성이 감소하므로 효용성이 최대가 되도록 부대를 각 지역에 효율적으로 배치하고자 한다. 이때, 부대의 효용성은 해당 부대에서 하나의 도로만 거쳐서 이동할 수 있는 지역들 중 부대를 주둔시키지 않은 서로 다른 지역의 개수로 정의한다.\n\n각 부대들의 효용성의 합이 최대가 되게 부대를 배치했을 때의 효용성의 합을 구해주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31397","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t루타비스의 수호자, 시간술사 반반은 모든 음식을 반으로 먹는 것을 즐깁니다. 비록 후라이드 양념 반반 치킨을 먹지는 않지만, 중식은 항상 짬짜면을, 피자집에서는 항상 하프 앤 하프 피자를 주문합니다.\n\n\n\n생일을 맞은 반반은 그의 동료인 어릿광대 피에르에게서 볼록다각형 모양의 케이크를 하나 선물받았습니다. 반반은 이 케이크를 일직선으로 한 번 잘라서 반으로 나눠 먹고 싶습니다. 특히 나눠진 후의 케이크 밑면의 면적과 둘레가 똑같도록 하고 싶습니다.\n\n반반이 원하는 대로 케이크를 두 조각으로 나눌 수 있을까요?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31465","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t초콜릿 종류 맞히기는 다음과 같이 진행된다.\n\n먼저 크기가 N×N$N\\times N$인 정사각형 모양의 틀과 여러 종류의 초콜릿을 준비하고, 틀의 각 칸에 초콜릿을 하나씩 넣는다. 초콜릿의 종류는 하나의 알파벳 대문자로 나타낼 수 있다.\n\n그리고 종이에 초콜릿 틀을 어떻게 움직일지 미리 적는다. 틀을 움직이는 방법은 시계 방향으로 90$90$도 회전(R), 반시계 방향으로 90$90$도 회전(L), 가로 방향으로 뒤집기(H), 세로 방향으로 뒤집기(V)가 있다. 이러한 명령의 나열은 길이 M$M$의 문자열 S$S$로 나타낼 수 있다.\n\n\n\n이렇게 두 가지가 준비되었으면, 한 사람이 두 정수 r$r$과 c$c$를 외친다. 다른 사람은 초콜릿 틀을 S$S$에 의해 움직인 결과에서 r$r$행 c$c$열에 오는 초콜릿의 종류를 맞히면 된다.\n\n코코는 이 게임에서 코코 대신 초콜릿의 종류를 맞혀주는 로봇을 만들었다. 이에 맞서 한별이는 S$S$의 l$l$번째에서 r$r$번째까지의 명령을 모두 명령 x$x$로 바꿀 수 있는 로봇을 만들어 왔다. 코코의 로봇이 한별이의 로봇을 이길 수 있도록 새로운 프로그램을 만들어 주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31426","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이 문제는 투 스텝 문제입니다. 채점 과정과 첫 번째 실행, 두 번째 실행도 꼼꼼히 읽어 문제를 파악하시기를 바랍니다.\n\n\n지난 2023년 2월 25일, 정체불명의 조직은 신촌방위본부 건물에 직접 타격을 실시하였다.\n\n신촌방위본부 사령관은 화재로부터 많은 인원을 대피시켰지만, 건물들은 심각하게 파괴되었다.\n\n\n신촌방위본부에는 N$N$개의 건물과 건물들을 잇는 N−1$N-1$개의 양방향 통로가 있으며, 임의의 서로 다른 두 건물을 통로만을 사용하여 오갈 수 있다. 또한, 임의의 건물에 연결된 통로는 최대 3$3$개뿐이다. 즉, 신촌방위본부의 건물과 통로는 정점의 차수가 3$3$을 넘지 않는 트리 구조를 이룬다. 또한, 각 건물은 민트색 혹은 보라색으로 칠해져 있다.\n\n당신은 더 큰 위험에 대비하고자 하는 페인트공이다. 건물 중 정확히 한 곳에는 지하 벙커가 있고, 당신은 이 지하 벙커를 폭격 속에서도 찾아갈 수 있도록 흔적을 남기기로 결심하였다.\n\n당신은 최대 30$\\mathbf{30}$번, 건물의 색깔을 민트색에서 보라색으로, 혹은 보라색에서 민트색으로 바꿀 수 있다.\n\n2024년 2월 17일, 정체불명의 조직은 무차별 폭격을 통해 건물 간의 연결 관계와 건물의 색깔 외에는 아무것도 파악할 수 없는 폐허를 만들었다. 당신은 생존자들과 함께 지하 벙커로 이동해야 한다.\n\n최대 30$30$번의 색깔 변경으로 폭격 이후 상황에서 지하 벙커를 찾는 전략을 구상하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31415","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tUFO의 대한민국 침공이 시작됐다! 총 N$N$대의 UFO가 대한민국 영공에 침입했으며, 그중 i$i$번째 UFO는 정수 좌표 (xi,yi)$(x_i, y_i)$에서 포착되었다. UFO들은 관측된 시점 이후 1$1$초마다 순간이동하며, 그중 i$i$번째 UFO는 1$1$초마다 다른 정수 좌표로 (dxi,dyi)$(dx_i, dy_i)$만큼 순간이동한다. 동일한 위치에 서로 다른 UFO들이 존재할 수도 있다.\n\n대한민국 공군은 UFO를 격파하기 위해 x$x$축 혹은 y$y$축에 평행하게 직선형 레이저 빔을 설치하고자 한다. 레이저 빔은 축에 평행하게 무한히 뻗어나가며, 레이저 빔 위로 지나간 UFO는 즉시 파괴된다. UFO는 순간이동으로 움직이기 때문에, 순간이동 이전의 위치와 순간이동 이후 위치 사이에 레이저 빔이 설치되어 있는 경우에는 UFO가 파괴되지 않는다. 레이저 빔은 UFO가 관측된 즉시 가동되며, 정수 시간 T$T$초 동안 가동된 후 UFO들이 T$T$초에 순간이동하기 직전에 작동을 정지한다.\n\n그러나 현재 가동할 수 있는 레이저 빔은 단 하나뿐이었기에, Q$Q$명의 작전 참모들이 각자 레이저 빔을 설치할 위치를 하나씩 제시했다. 대한민국의 영공을 수호하기 위해, 각 작전 참모들이 제시한 위치에 레이저 빔을 가동한 경우 레이저 빔이 작동을 정지하기 전까지 파괴할 수 있는 UFO의 대수를 구해주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31444","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n월간 향유회의 특별 행사로 참가자 N$N$명이 두 팀으로 나뉘어 줄다리기하기로 했다! Aij$A_{ij}$는 i$i$번 참가자와 j$j$번 참가자 간의 팀워크 수치를 의미한다.\n\n줄다리기는 청팀과 백팀으로 나누어 진행하는데, 운영진은 모든 참가자가 하나의 팀에 속하고 두 팀 모두에 한 명 이상이 속하도록 팀을 나누려고 한다.\n\n이때, 같은 팀에 속하는 서로 다른 두 참가자 간의 팀워크 수치의 최솟값이 가장 크도록 팀을 나누려고 한다. 고뇌에 빠진 운영진을 대신해서 그 값이 얼마인지 계산해 보자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31466","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t N$N$마리의 초콜릿 개구리들이 코코랜드에서 한별랜드로 이동하려고 한다. 코코랜드와 한별랜드 사이에는 강이 하나 있으며, 초콜릿은 물에 닿으면 녹기 때문에 코코랜드에서 한별랜드로 가려면 N$N$개의 징검다리를 이용해 강을 건너야 한다. 각각의 징검다리에는 1$1$부터 N$N$까지의 번호가 순서대로 붙어 있다. 편의상 코코랜드 쪽 강변을 0$0$, 한별랜드 쪽 강변을 N+1$N+1$이라고 하자.\n\n초콜릿 개구리들도 1$1$부터 N$N$까지 번호가 붙어 있으며, 0$0$번 지점에 아래에서 위로 N$N$번부터 1$1$번까지 순서대로 쌓여 있다. 개구리는 한 번에 한 마리만 이동할 수 있으며, 여러 마리의 개구리가 세로로 쌓여 있으면 그 중 맨 위의 개구리만 이동할 수 있다. 또한, i$i$번 지점에 있던 개구리는 한 번의 이동으로 i+1$i+1$번 또는 i+2$i+2$번으로만 이동할 수 있으며, 뒤로 돌아갈 수는 없고, 번호가 작은 개구리 위에 번호가 큰 개구리가 올 수 없다.\n\n한별랜드에는 결계가 쳐져 있어서, N$N$번 개구리부터 1$1$번 개구리까지 번호가 감소하는 순으로 입장하지 않으면 초콜릿 개구리에 걸린 마법이 모두 풀려 버린다. 초콜릿 개구리들은 무사히 모두 한별랜드로 갈 수 있을까?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31445","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n월간 향유회에서 N$N$명의 사람들이 달리기 시합을 하려고 한다. 각 사람에게는 1$1$부터 N$N$까지의 서로 다른 번호가 부여되어 있다. 각 사람의 달리기 실력은 모두 다르며, 모든 시합에서 순위는 항상 실력순으로 결정된다.\n\n두 사람의 상대적인 실력을 나타내는 정보 M$M$개가 주어진다. 모든 정보는 모순되지 않게 주어지며, A가 B보다 빠르고 B가 C보다 빠르다면 A 또한 C보다 빠르다. 이때, 한 명 이상의 사람들을 뽑아서 달리기 시합을 시키려고 한다. 주어진 정보만으로 모든 사람의 순위를 정확하게 예상할 수 있도록 뽑는 경우의 수를 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31467","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t추리 소설 “초콜릿 괴도 레나”를 감명 깊게 읽은 코코는 이 소설의 명장면을 따라 해 보기로 했다. 구체적인 방법은 다음과 같다.\n\n\n\t1단계: 먼저 N×N$N\\times N$ 크기의 사각 격자 형태의 초콜릿을 준비한다. 이 초콜릿은 1×1$1\\times 1$ 단위로 원하는 곳에서 떼어낼 수 있게 되어 있으며, 0$0$개 이상의 단위 초콜릿이 제거된 상태이다. 이때, 남아있는 단위 초콜릿은 4$4$개 이상이며, 한 조각을 이루어야 한다. 상하좌우로 이웃한 두 단위 초콜릿은 서로 연결되어 있으며, 서로 연결된 단위 초콜릿들의 집합을 하나의 조각이라고 한다.\n\t2단계: 이 초콜릿에서 다음의 조건을 충족하도록 하나의 단위 초콜릿을 떼어 먹는다.\n\t\n\t\t이 단위 초콜릿을 떼어낸 후에도 남아있는 초콜릿은 하나의 조각을 이루지만, 그 이후에 서로 이웃한 임의의 두 단위 초콜릿 사이를 자르면 2$2$개의 조각으로 나누어진다.\n\t\n\t\n\t3단계: 레나의 명대사를 외친다. “이번엔 봐줬지만, 다음에는 반드시 초콜릿을 조각내 줄 거야.”\n\n\n코코는 1단계의 조건을 충족하는 초콜릿을 준비해 놓았지만, 2단계의 조건을 충족하려면 어느 지점에 있는 단위 초콜릿을 떼어내야 할지 고민에 빠졌다. 코코를 도와주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31398","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t은하는 열심히 일한 덕에 드디어 새 차를 뽑았습니다! 시운전으로 일직선 도로를 따라 차를 타고 목적지로 이동하려 합니다. 목적지까지 거리가 꽤 되기 때문에, 중간중간 주유소에서 연료를 넣으려고 합니다. 시운전 중에는 다음과 같은 조건을 지켜야 합니다.\n\n\n\t i$i$번째 주유소는 길의 원점으로부터 오른쪽으로 xi$x_{i}$킬로미터 떨어진 위치에 있으며, 이 주유소에서 차에 넣을 수 있는 연료는 리터 당 단가가 pi$p_{i}$이고 총 ai$a_{i}$리터만큼의 연료가 있습니다.\n\t주유소에서는 연료를 ai$a_{i}$리터 이하로 원하는 만큼 주유할 수 있습니다.\n\t각 주유소에서 주유한 뒤 차에 들어 있는 연료의 양이 차의 연료 용량인 F$F$리터를 넘겨서는 안 됩니다.\n\t차는 1$1$리터의 연료로 1$1$킬로미터를 움직일 수 있습니다.\n\t새 차는 시운전 전에는 연료가 없습니다. 따라서 차의 시작 지점은 첫 번째 주유소입니다.\n\t목적지는 길의 원점으로부터 오른쪽으로 X$X$킬로미터 떨어진 위치입니다.\n\n\n은하는 열심히 번 돈을 연료에 쓰는 것은 아까워, 목적지까지 최소 비용으로 이동하려 합니다. 여러분은 은하를 도와 주어야 합니다!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31399","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t뽜밤뽜밤-! 아리스는 메이드 용사로 전직했습니다!\n\n밀레니엄 사이언스 스쿨 엔지니어부의 히비키는 튜링 머신과 비슷한 원리로 작동하는 로봇 청소기를 발명했습니다.\n\n히비키는 로봇 청소기로 H×W$H \\times W$ 직사각형 격자 모양의 게임개발부 부실을 청소하려고 합니다. 격자칸의 좌표는 (r,c)$(r,c)$로 나타낼 수 있으며, 아래로 갈수록 r$r$이 증가하고 오른쪽으로 갈수록 c$c$가 증가합니다. 가장 왼쪽 위 칸의 좌표는 (0,0)$(0,0)$, 오른쪽 아래 칸의 좌표는 (H−1,W−1)$(H-1,W-1)$입니다.\n\n처음에 모든 칸은 먼지로 뒤덮여 있습니다. 로봇 청소기는 격자 한 칸 크기이며, 바라보는 방향으로 전진하거나 제자리에서 회전할 수 있습니다.\n\n로봇 청소기의 전원을 켜면 다음과 같이 작동합니다. 먼저 H×W$H \\times W$ 크기의 규칙표 A$A$와 B$B$를 만듭니다. 규칙표의 각 칸은 청소할 영역의 격자칸에 대응됩니다. 규칙표에는 회전 각도가 적혀 있습니다.\n\n이후 로봇 청소기는 매 단위 시간마다 다음과 같은 이동을 반복합니다.\n\n\n\t현재 칸에 먼지가 있다면 먼지를 제거합니다.\n\t방금 먼지를 제거했다면 규칙표 A$A$를, 먼지를 제거하지 않았다면 규칙표 B$B$를 참조합니다. 규칙표에서 현재 좌표에 적힌 만큼 시계방향으로 회전합니다.\n\t바라보는 방향으로 한 칸 전진합니다.\n\n\n이동을 마친 후에, 로봇 청소기가 영역 밖으로 벗어났다면 작동을 중지합니다. 또한, 지금부터 위의 과정을 아무리 반복해도 더이상 먼지를 제거할 수 없는 경우에도 작동을 중지합니다.\n\n메이드 용사로 전직한 아리스는 히비키의 로봇청소기를 보고, 용사 수행을 위해 로봇 청소기와 똑같은 원리로 동작하여 게임개발부 부실을 청소하려고 합니다. 방의 구조와 아리스의 처음 위치, 그리고 규칙표가 주어집니다. 아리스가 청소를 시작하고 마칠 때까지 이동한 횟수를 출력하세요.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31446","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n유틸은 운동회 준비를 위해 운동장에 경계선을 그리려고 한다. 운동장은 꼭짓점이 N$N$개이고 어떤 내각도 180∘$180^{\\circ}$가 아닌 단순다각형 P$P$ 모양이며, 넓이는 S$S$이다. 또한, 운동장의 각 꼭짓점의 x$x$좌표와 y$y$좌표는 0$0$ 이상 109$10^9$ 이하의 정수여야 한다. 유틸이 그릴 수 있는 운동장의 모양을 하나 찾아 주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31468","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t코코네 초콜릿 가게에서는 밸런타인데이 특별 상품으로 정육각형 3개를 삼각형 모양으로 붙인 초콜릿을 판매하려고 한다. 코코는 같은 크기의 정육각형 N(N+1)2$\\frac{N(N+1)}{2}$개를 삼각형 모양으로 붙인 형태의 틀에 이 초콜릿들을 빈틈없이 넣어 포장하려고 한다. 그리고 이를 조금 더 예뻐 보이게 하기 위해, 위로 뾰족한 방향으로 배치된 초콜릿은 빨간색, 반대 방향의 초콜릿은 파란색으로 개별 포장을 하기로 했다. 포장이 완료된 상품은 겉에서 볼 때 각각의 육각형이 빨간색인지 파란색인지만 알 수 있고, 어느 칸들이 같은 조각인지는 알 수 없다.\n\n\n\n수학 고수인 코코는 N$N$을 12$12$로 나눈 나머지가 0$0$, 2$2$, 9$9$, 11$11$일 때에만 틀을 초콜릿으로 채울 수 있음을 증명했지만, 실제로 초콜릿을 어떻게 배치할지 고민하고 있다. 코코를 도와 초콜릿을 포장해 주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31427","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t2025년, 신촌의 다섯 대학교인 서강대, 숙명여대, 연세대, 이화여대, 홍익대는 신촌에서 원활하게 통행하기 위한 도로망을 구축하고 관리하기로 결정하였다. 신촌은 N$N$개의 정점으로 이루어져 있고, 그 위에 서로 다른 두 정점을 연결하는 방향 없는 도로를 M$M$개 건설하였다. 임의의 두 정점을 직접적으로 잇는 도로는 최대 한 개만 존재하고, 어떤 두 정점을 선택하더라도 그 두 정점을 연결하는 경로가 존재함이 보장된다.\n\n각 도로는 다섯 학교 중 한 학교가 담당하여 관리한다. 도로를 관리하는 데에는 매년 관리비가 필요한데, 어떤 도로의 관리비는 그 도로를 관리하는 학교에 따라 결정된다. 즉, 서강대가 관리하는 도로는 모두 관리비가 동일하며, 이는 다른 학교 또한 마찬가지이다.\n\n그런데, 2125년부터 각 학교의 예산이 부족해져 관리비가 유동적으로 바뀌게 되었다. 그래서 다섯 학교는 어떤 두 정점을 선택하더라도 관리된 도로만을 사용해 그 두 정점을 연결하는 경로가 존재하도록 도로를 관리하고, 나머지 도로는 한 해 동안 관리하지 않기로 합의하였다. 이제 여러분은 매년 각 학교의 도로 관리비를 입력받아, 합의한 대로 도로를 관리하기 위한 관리비의 합의 최솟값을 출력해야 한다. 다섯 대학교가 비용을 절약할 수 있도록 도와주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31469","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t한별이네 초콜릿 가게에서는 밸런타인데이 특별 상품으로 육각형 모양의 초콜릿에 아몬드를 얹은 아몬드 초콜릿을 판매하려고 한다. 육각형 초콜릿의 내각은 모두 120$120$도이며, 각 변의 길이는 정수이다. 하나의 아몬드는 각 변의 길이가 1$1$인 정삼각형 두 개를 변끼리 붙인 모양이다. 아몬드들은 서로 겹치거나 초콜릿을 벗어나지 않고 초콜릿을 완전히 덮어야 한다.\n\n아몬드 초콜릿이 예뻐 보이게 하기 위해, 한별이는 육각형의 각 꼭짓점을 포함하는 두 삼각형을 덮도록 6$6$개의 아몬드를 이미 배치해 놓았다.\n\n\n\n초콜릿의 나머지 부분을 채우는 방법의 수를 구해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31447","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n N$N$개의 지점이 N−1$N-1$개의 길로 연결되어 있는 트리 형태의 코스가 있다. 지점들은 1$1$부터 N$N$까지 각각 하나씩 번호가 붙어있다. N$N$명의 선수들은 각 지점에 한 명씩 배치되고, i$i$번 지점에 있는 선수는 무게가 Wi$W_i$인 눈덩이를 굴리며 모두 같은 도착 지점을 향해 최단 경로로 나아간다. 어떤 선수가 무게 w$w$의 눈덩이를 굴리며 길 하나를 지나려면 w$w$만큼의 노력이 필요하다.\n\n여러분은 다음과 같은 방법으로 대회를 개최하려 한다.\n\n\n\t각 지점의 눈덩이 무게 Wi$W_i$를 Li$L_i$ 이상 Ri$R_i$ 이하의 원하는 정수로 정한다.\n\t Wi$W_i$를 모두 정한 뒤, 도착 지점을 다음과 같이 정한다. 모든 선수가 도착 지점에 도달하기까지 들인 노력의 합이 가장 작아지도록 하는 지점 C$C$를 도착 지점으로 택한다. 이러한 조건을 만족하는 도착 지점은 여러 개 있을 수 있다.\n\n\n각 지점의 눈덩이 무게를 적절히 정할 때, 도착 지점이 될 수 있는 정점들을 모두 찾아보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31470","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t코코는 가로 길이 X$X$, 세로 길이 Y$Y$인 직사각형 모양의 초콜릿을 갖고 있다. 이 초콜릿은 1×1$1\\times 1$ 크기의 단위 정사각형으로 나누어져 있다.\n\n코코는 이 초콜릿과 여러 개의 ㄱ나이트를 가지고 ㄱ나이트 게임을 하려고 한다. ㄱ나이트는 체스에서 사용하는 나이트의 변형으로, 한 번에 오른쪽이나 왼쪽으로 x$x$칸, 위나 아래로 y$y$칸 떨어진 칸으로 이동할 수 있다. ㄱ나이트는 이동할 때 다른 칸에 있는 말의 방해를 받지 않는다. 목적지 칸이 초콜릿의 범위를 벗어나는 경우에는 그곳으로 이동할 수 없다.\n\nㄱ나이트 게임은 초콜릿 위에 다음의 규칙을 지키면서 최대한 많은 ㄱ나이트를 올리는 게임이다.\n\n\n\t초콜릿의 한 칸에는 최대 하나의 ㄱ나이트를 올릴 수 있다.\n\t어떤 ㄱ나이트가 한 번에 이동할 수 있는 칸에 다른 ㄱ나이트가 있으면 안 된다.\n\t초콜릿은 뒤집거나 회전할 수 없다.\n\n\n코코가 초콜릿에 ㄱ나이트를 최대 몇 개까지 올릴 수 있는지 계산해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31416","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n\n현대오토에버의 가상 검증 기술은 차량·시스템·제어기를 가상화하고 가상 주행 환경, 검증 도구 등을 제공해 기능별 검증, 기능 간 연계 검증, 시스템 단위 검증을 하드웨어 없이 가상으로 진행할 수 있도록 하는 기술이다. 가상 검증은 조기 검증을 통한 품질 확보와 실제 검증이 불가한 악조건 검증 시뮬레이션을 가능하게 한다. 또한 차량의 컴퓨팅 복잡도가 상승하는 SDV 시대에 가상 검증 기술은 다른 차원의 잠재적 SW 품질 리스크를 고려하여 차량의 안정성과 성능을 확보할 수 있는 효과적인 검증 방법이다.\n\n\n현대오토에버의 숙련 연구원인 도훈이와 신입 연구원인 상혁이는 차종 A$A$와 B$B$의 가상 검증 업무를 담당하고 있다. 두 차종 A$A$와 B$B$에 대해 가상 검증 시뮬레이션을 1$1$회 수행하는 데 각각 TA,TB$T_A, T_B$의 시간이 소요된다. 또한 품질 확보를 위해 차종 A$A$와 B$B$에 대해 테스트가 필요한 가상 검증 항목은 각각 VA,VB$V_A, V_B$개이며, 한 번의 가상 검증 시뮬레이션으로 하나의 가상 검증 항목을 테스트할 수 있다.\n\n도훈이와 상혁이는 각자 수행할 시뮬레이션 항목을 잘 분배하여 가상 검증을 수행하고자 한다. 숙련 연구원인 도훈이는 차종 A,B$A, B$의 가상 검증을 수행할 수 있지만, 신입 연구원인 상혁이는 차종 A$A$의 가상 검증만 수행할 수 있다. 도훈이와 상혁이는 한 번에 하나의 가상 검증 시뮬레이션을 수행할 수 있으며, 두 명이서 같은 가상 검증 항목을 시뮬레이션할 수 없고, 가상 검증 시뮬레이션을 수행한 뒤 다음 시뮬레이션을 준비하는 데 소요되는 시간은 없다고 가정한다. 또한 가상 검증 시뮬레이션은 수행 도중 중단할 수 없다.\n\n두 차종의 가상 검증 시뮬레이션을 모두 마쳤을 때 업무를 완료할 수 있다. 도훈이와 상혁이가 가상 검증 업무를 완료하는 데 소요되는 시간의 최솟값을 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31428","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t엘리스 트랙은 2020년부터 시작한 KDT(K-Digital Training) 교육이며 Cloud 트랙, SW 엔지니어 트랙, IOT 트랙, AI 트랙 총 4가지 트랙이 있다.\n\n누적 1000명 이상의 수료생을 배출하였고, 현업에서 활동하는 많은 수료생이 존재하는 엘리스 트랙을 신청할 시 성수/부산 엘리스랩을 이용할 수 있다. 또한, 현직 개발자의 멘토링을 직접 받을 수 있는 시간이 보장되며, 모든 트랙이 2개 이상의 실무와 비슷한 프로젝트를 수행 및 발표하여 피드백을 받을 수 있다. 그 외에 개발 블로그 챌린지, 스터디, 성수낙낙 오프라인 출석챌린지, 네트워킹 세션 등이 추가로 제공된다. 교육 수료 후 6개월간 취업 지원 프로그램이 제공되며, 대표적으로는 이력서 특강, 포트폴리오 특강, 직무 특강, 기술면접 특강 등이 진행된다.\n\n\n\n헬로빗은 이러한 엘리스 트랙에 매력을 느껴 친구들 N$N$명을 모아 같이 엘리스 트랙에 지원하려 한다. 헬로빗의 친구들과 헬로빗이 지원하는 트랙에 대한 정보가 주어질 때, 헬로빗이 지원하는 트랙과 같은 트랙을 지원하는 헬로빗의 친구들은 총 몇 명이 있는지 출력하는 프로그램을 작성해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31448","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tParticipating in the Olympics requires training, e.g., climbing from deep valleys to high peaks. Hence, you decided to go out for a hike in which you would be continuously walking on an upward slope, with the largest possible elevation gain.\n\nYou have noted the altitude of several remarkable points through which your hike would go: these altitudes are pairwise distinct integers A1,A2,…,AN$A_1, A_2, \\dots , A_N$. The slope between the k$k$ th and (k+1)$(k + 1)$ th remarkable points is upward if Ak<Ak+1$A_k < A_{k+1}$, and downward if Ak>Ak+1$A_k > A_{k+1}$ . Given this list of altitudes, what is the maximal elevation gain of a continuously upward slope on your hike?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31471","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t코코는 심심할 때면 초콜릿 뒤집기 게임을 즐겨 한다. 초콜릿 뒤집기 게임은 앞뒤가 서로 다른 동전 모양의 초콜릿을 가지고 하는 1$1$인용 게임으로, 다음과 같이 진행된다.\n\n\n\t초콜릿을 앞면이나 뒷면이 보이도록 일렬로 늘어놓는다. 이 상태를 초기 상태라고 하자.\n\t앞면이 보이는 초콜릿을 하나 집어 먹고, 그 초콜릿과 왼쪽이나 오른쪽으로 이웃한 초콜릿을 뒤집는다. 앞면이었던 초콜릿을 뒤집으면 뒷면이 되고, 뒷면이었다면 앞면이 된다. 이웃한 초콜릿은 2$2$개, 1$1$개, 0$0$개일 수 있다. 이웃이 2$2$개일 경우, 초콜릿을 집어 먹은 후에 그 둘은 서로 이웃하게 된다.\n\t2번 과정을 반복하여 초콜릿을 모두 먹으면 승리한다. 1$1$개 이상의 초콜릿이 남아있는 상태에서 2번 과정을 수행할 수 없으면 패배한다.\n\n\n\n\n코코가 이 게임을 하는 것을 본 한별이는 아래와 같은 문제를 냈다. 코코를 도와 이 문제를 해결해 주자.\n\n\n\t주어진 초기 상태에서 몇 개의 초콜릿을 원하는 대로 뒤집을 수 있을 때, 초콜릿 뒤집기 게임에서 승리하는 방법이 있는 초기 상태의 수는 몇 가지일까?\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31449","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe Olympic football tournament has started and, of course, France is going to win by a landslide, thus killing all the suspense. Or is it? Until now, only ties happened: not very exciting...\n\nTo hype the event, you would like every remaining match not to be a tie, and among all such configurations, you would like to find one which minimises the difference between the best score and the worst score. Remember that the score of a team is the number of its won matches minus its lost matches.\n\nGiven the list of remaining matches, find such an optimal configuration of matches.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31417","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t메모리 제한에 유의하여라.\n\n좌표평면 위에 N$N$개의 점이 있다.\n\n이 점들 중 서로 다른 세 개를 골라서 만들 수 있는 삼각형의 세 개의 높이 중 가장 짧은 것의 최솟값을 구하여라.\n\n세 점이 한 직선 위에 있어 삼각형의 높이가 0이 될 수 있음에 유의하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31472","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t갈래는 이번에 구입한 정사각형 모양의 색종이가 너무 커서 마음에 들지 않아 색종이를 반으로 자르려 한다.\n\n정확히 가로를 이등분하고 난 후의 색종이 절반의 넓이 W$W$가 주어질 때, 처음 색종이의 둘레를 구해보자! 처음 색종이의 한 변의 길이는 짝수다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31473","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t시현이의 방구석에 핑크색 머리카락과 하늘색 머리카락이 각각 N$N$개씩 떨어져 있었다!\n\n시현이는 이것들이 단비 양의 머리카락이라고 확신했다.\n\n시현이가 열심히 머리카락들의 길이를 잰 결과 i$i$번째 핑크색 머리카락의 길이는 Ai$A_i$였고, i$i$번째 하늘색 머리카락의 길이는 Bi$B_i$였다. (1≤i≤N)$(1 \\leq i \\leq N)$ \n\n열심히 머리카락들의 길이를 재고 나니 시현이는 |a∑i=1NAi−b∑i=1NBi|$\\left | a\\sum_{i=1}^N A_i - b\\sum_{i=1}^N B_i \\right|$를 최소화할 수 있는 −1000000$-1\\,000\\,000$ 이상 1000000$1\\,000\\,000$ 이하의 0$0$이 아닌 정수 a$a$와 b$b$가 무엇인지 궁금해졌다.\n\n시현이의 궁금증에 대신 답해주자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31480","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t여행을 다니던 무대소녀 나나는 어느 날 갈래 나라를 발견하게 된다. 갈래 나라는 N$N$개의 도시로 이루어져 있는데, i$i$ (2≤i≤N$2 \\leq i \\leq N$)번째 도시와 ⌊i2⌋$\\left \\lfloor \\frac{i}{2} \\right \\rfloor$번째 도시를 잇는 양방향 도로가 존재한다. 이때 N=2k−1$N = 2^k - 1$를 만족하는 양의 정수 k$k$가 존재한다. 즉, 갈래 나라는 포화 이진 트리 구조를 이룬다. \n\n나라의 구조와 이름으로 미루어 보았을 때, 양갈래 머리를 한 사람이 많을 것이라 생각한 나나는, 갈래 나라의 국민들을 보고 충격을 받게 된다. 양갈래 머리를 한 사람이 아무도 없었던 것이다! 아무것도 모르던 시절로 돌아갈 수 없는 가슴을 찌르는 충격을 받은 나나는 무대소녀로서의 본분을 잠시 버리고 양갈래 바이러스 개발에 몰두하여 총 Q$Q$개 종류의 양갈래 바이러스를 제작하는데 성공하였다. \n\n각 바이러스에는 위력 p$p$와 전염력 d$d$가 존재하는데, 이는 바이러스가 초기에 뿌려진 도시에서 거리가 d$d$이하인 도시들은 위력이 p$p$인 바이러스에 감염된다는 뜻이다. 도시 a$a$에서 도시 b$b$까지의 거리는 a$a$에서 b$b$로 가기 위해 거쳐야 하는 도로 개수의 최솟값으로 정의된다.\n\n도시의 감염도는 나나가 모든 바이러스를 뿌린 후 현재까지 감염된 바이러스 위력의 합으로 정의된다. 하나의 도시는 2종류 이상의 바이러스에 감염될 수 있다.\n\n나나가 모든 바이러스를 다 뿌렸을 때, 각 도시의 감염도를 출력하라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31450","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYour friend is a kindergarten teacher. Since the Olympic Games in Paris are approaching, he wants to teach the kids about different aspects of sports competitions. As part of this idea, he plans to have one day when kids receive medals for their behaviour in kindergarten. For example, he would give out a medal for the kid who shares their toys the most, or for the kid who encourages their playmates most creatively. To ensure kids are not offended at the end of the day, the teacher wants no kid to get fewer medals than another. The teacher tells you the number of medals he prepared and the number of kids, and he asks you to say whether it is possible to give out all of these medals to the kids so that they each get the same number of medals.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31429","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n[그림] SUAPC 2023 Summer 스코어보드 (링크)\n\nSUAPC는 신촌지역 5개 대학(서강, 숙명, 연세, 이화, 홍익)의 학부생 및 대학원 1년 차를 대상으로 하는 프로그래밍 대회다. 대회 문제는 서울 리저널의 문제 출제 경향을 따르며 제한 시간 동안 얼마나 많은 문제를 정확하게 풀 수 있는지를 평가하여 순위를 결정한다. 위의 사진은 SUAPC 2023 Summer의 스코어보드다.\n\n문제를 많이 푼 팀이 고순위로 결정되며, 동일 수의 문제를 푼 팀이 다수 있는 경우 푼 문제들의 페널티(= (첫 정답을 제출한 시간) + (첫 정답을 받기 전까지 오답을 제출한 횟수) × 20)의 합이 작은 순으로 순위가 결정된다. 위 사진의 스코어보드상에서 가장 오른쪽에 적힌 수가 각 팀이 푼 문제들의 페널티의 합을 의미한다.\n\n양의 정수 N$N$이 주어졌을 때, SUAPC 2023 Summer에서 N$N$등을 한 팀이 푼 문제 수와 푼 문제들의 페널티의 합을 구하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31451","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tFive in a Row, also called Gomoku, is a board game played with Go pieces (black and white stones). The winner is the first player to form an unbroken line of five stones of their color horizontally, vertically, or diagonally.\n\nDuring leisure time at the Olympics, athletes and coaches also enjoy playing this game for recreation. Nevertheless, today they are playing a more advanced version in a K$K$-dimensional board instead of a traditional 2$2$-dimensional board. Stones A, B, C, D, E are considered as five in a row if, for every integer i$i$ such that 1≤i≤K$1 \\le i \\le K$, we have:\n\n A[i]−B[i]=B[i]−C[i]=C[i]−D[i]=D[i]−E[i]=$A[i] - B[i] = B[i] - C[i] = C[i] - D[i] = D[i] - E[i] =$ one of {−1,0,1}$\\{-1, 0, 1\\}$.\n\nHere, A[i]$A[i]$ is the coordinate of the stone A$A$ on the i$i$ th dimension.\n\nDue to the complexity of the board, they sometimes get overwhelmed. Therefore you are asked to write a referee program that takes all the moves made by one player in chronological order and calculates after placing which stone we see five in a row for the first time.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31474","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t시현이 카페에 양갈래 손님들이 들어가려고 한다. \n\n양갈래 손님들은 양갈래를 너무 좋아하는 나머지 두 명씩 모여 있어 총 인원은 짝수이다.\n\n시현이 카페에는 두 명씩 앉을 수 있는 테이블이 충분히 많이 있고, 양갈래 손님들은 한 테이블에 두 명씩 앉기로 하였다.\n\n그런 양갈래 손님들을 맞이하게 된 시현이는 갑자기 궁금증이 생겼다.\n\n손님들이 앉는 경우의 수를 세는 조건이 다음과 같을 때, 양갈래 손님들이 모두 앉을 수 있는 방법의 수는 몇 가지가 있을까?\n\n\n\t테이블의 좌석을 구분하지 않는다.\n\t\n\t\t한 테이블에서 손님 A와 손님 B가 앉는 경우, 손님 B와 손님 A가 앉는 경우는 같은 경우이다.\n\t\n\t\n\t각각의 테이블 또한 구분하지 않는다.\n\t\n\t\t1번 테이블에 손님 A, B가 앉고, 2번 테이블에 손님 C, D가 앉는 것과, 1번 테이블에 손님 C, D가 앉고, 2번 테이블에 손님 A, B가 앉는 것은 서로 같은 경우이다.\n\t\n\t\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31481","content":"문제\n\n\"음 심심한걸? 어디 장난칠 대상이 없나?\"\n\n\"오 저기 마침 수열이 보이네? 한 번 재밌게 만들어 보자!\"\n\n출제자의 레이더에 걸려버린 우리의 친구, 수열 \nA\n$A$.\n\n출제자의 레이더에 걸린 모든 것은 제 모습을 찾기 힘들다고 전해진다... 이번엔 \nA\n$A$가 걸려버렸으니...\n\n출제자는 악행으로 유명하여 무슨 장난을 치는지, 어떤 순서로 치는지도 전부 알려져 있다.\n\n출제자는 다음과 같은 3가지 방법으로 장난을 친다.\n\n1 \ni\n$i$: \ni\n$i$번째에 있는 수를 제거한다. 이 수를 제거하여 \nA\n$A$의 원소들의 인덱스가 변경될 수 있다.\n2 \ni\n$i$ \nr\n$r$: 앞에서부터 \ni−r\n$i-r$번째 부터 \ni+r\n$i+r$번째까지의 모든 수에서 \ni−r\n$i-r$부터 \ni+r\n$i+r$번째 사이의 수 중 최솟값을 뺀다.\n3 \ni\n$i$ \nr\n$r$: 앞에서부터 \ni−r\n$i-r$번째 부터 \ni+r\n$i+r$번째까지의 모든 수에 \ni−r\n$i-r$부터 \ni+r\n$i+r$번째 사이의 수 중 최댓값을 더한다.\n\n게다가 출제자는 장난을 치면서도 궁금증이 생겼다! 다음과 같이 \nA\n$A$의 범위를 말해주면 우리의 수열은 3번째로 큰 수를 알려줘야 한다!\n\n4 \nl\n$l$ \nr\n$r$: 앞에서부터 \nl\n$l$번째 부터 \nr\n$r$번째까지 범위를 말해준다. 그러면 \nAl\n$A_l$, \nAl+1\n$A_{l+1}$, ..., \nAr\n$A_r$ 원소 중 3번째로 큰 값을 알려준다. 단, 같은 수는 하나로 세고, 3번째로 큰 수가 존재하지 않는다면 -1을 대답한다.\n\n \nA\n$A$는 장난을 당하는 중이라서 자신의 수열을 살펴볼 수 없다. 따라서 우리가 대신 알려주도록 하자!"},{"problemId":"31418","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t가로 W$W$칸 세로 H$H$칸의 격자 모양 스펀지가 있다. 이 스펀지는 1×1$1 \\times 1$ 크기의 칸들로 나누어져 있으며 곳곳에 구멍이 뚫려 있어 바이러스가 이동할 수 있는 특이한 성질이 있다.\n\n바이러스는 1$1$초마다 스펀지 바깥으로 벗어나지 않는 선에서 자신이 위치한 칸의 상하좌우 및 대각선 8$8$칸으로 이동하거나, 자신이 위치한 칸에 가만히 있을 수 있다. 한 칸에 바이러스는 여러 마리 존재할 수 있으며, 모양이 다르기 때문에 구분이 가능하다.\n\n\n\nraa는 바이러스들을 관찰하다 T$T$초 후 가능한 서로 다른 바이러스 분포의 수가 궁금해졌다. 두 바이러스 분포의 어떤 바이러스의 위치가 다를 경우 두 분포는 다르다. raa를 도와 그 수를 구하자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31419","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t 0$0$ 이상 N$N$ 이하의 정수로 이루어진 길이 N$N$의 배열 A$A$가 있다.\n\nJiro는 값이 0$0$인 모든 원소를 1$1$ 이상 N$N$ 이하의 정수로 바꾸려고 한다. 이때, 바꾼 배열은 아래 조건에 맞아야 한다.\n\n\n\t 1$1$ 이상 N$N$ 이하의 각 정수 x$x$에 대하여, 배열 A$A$에 x$x$가 등장하는 횟수는 x$x$ 이하이다.\n\n\nJiro가 조건에 맞게 만들 수 있는 배열의 가짓수를 998244353$998 \\, 244 \\, 353$으로 나눈 나머지를 구하시오. 998244353$998\\,244\\,353$은 소수이다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31452","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tGiving in to the lobby of the International Toddlers Association, and with the full support of the International Exhausted Parents Association, the 2024 Olympic Committee decided to inaugurate the Toddlers Olympics, a special and massively attended event.\n\nThe Wooden Blocks Stacking contest is one of the main trials thereof, intended towards dramatically challenging contestants’ strength, patience, and hand-to-eye coordination.\n\nFor this contest, participants are given N$N$ equal-depth wooden blocks B1,B2,…,BN$B_1, B_2, \\dots , B_N$, having integer height and width (measured in centimetres). The purpose of the contest is to obtain a complete stack containing all of these N$N$ blocks. The winner is the toddler achieving this truly impressive result in the least amount of time. To build the complete stack, contestants are allowed to build partial stacks, i.e., stacks containing consecutive blocks Bi,Bi+1,…,Bj$B_i , B_{i+1}, \\dots , B_j$ from bottom to top, in that order; in particular, each block is a partial stack containing exactly one block, and a stack is complete when it contains all the blocks. Moreover, the contestants must comply with the following rules:\n\n\n\tStacks are built against a wall. Thus, when placing the block Bi+1$B_{i+1}$ on top of the block Bi$B_i$, both blocks are perfectly aligned depth-wise, with their front and back borders perfectly aligned. Moreover, the left border of Bi+1$B_{i+1}$ must be either perfectly aligned with the left border of Bi$B_i$, or shifted left or right by an integer amount of centimetres.\n\tAt each step, participants must place a partial stack containing blocks Bj,Bj+1,…,Bk$B_j , B_{j+1}, \\dots , B_k$ on top of another partial stack containing blocks Bi,Bi+1,…,Bj−1$B_i , B_{i+1}, \\dots , B_{j-1}$.\n\tEach (partial or complete) stack ever formed must be stable: a stack containing the blocks Bi,Bi+1,…,Bj$B_i , B_{i+1}, \\dots , B_j$ is stable if, for any block Bk$B_k$ such that i≤k≤j−1$i \\le k \\le j - 1$, the center of gravity of the sub-stack formed by the blocks Bk+1,…,Bj$B_{k+1} , \\dots , B_j$ does not project strictly outside of the block Bk$B_k$.\n\n\nYou have somehow managed to get the dream job of surveillance assistant in the Wooden Blocks Stacking trial. Although the contest is in itself intense and exciting, your tireless brain issues an additional challenge: you wonder, given the sequence of N$N$ blocks, how many possible configurations can be obtained for the complete stack? Since this may be a very large number, you further wish to count these configurations modulo the prime number 1000000007$1\\, 000\\, 000\\, 007$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31430","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이 문제는 투 스텝 문제이다. 한 번 채점할 때 참가자의 프로그램을 2번 실행하는 형식의 문제이다. 각 실행은 일반적인 문제와 같이 진행되지만, 두 실행은 서로 독립적이다.\n\n갑과 을은 주어진 음이 아닌 두 정수 A,B$A,B$의 합을 구하려고 한다. 두 정수의 합을 구하는 과정은 다음과 같다.\n\n\n\t갑에게 음이 아닌 두 정수 A$A$와 B$B$가 주어진다.\n\t갑은 소문자 알파벳으로 구성된 길이가 13$13$인 문자열을 만든다.\n\t을에게는 갑이 만든 문자열이 주어진다. 단, 을에게는 A,B$A,B$의 값이 주어지지 않는다.\n\t을은 주어진 문자열을 통해 A+B$A+B$를 구해야 한다.\n\n\n갑과 을이 이러한 과정을 통해 A+B$A+B$를 구할 수 있는 프로그램을 작성하자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31482","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe Olympic Games in Paris are almost here, and you are thrilled! You and four of your friends managed to get five of the rare tickets for sports climbing even though all tickets were sold out in less than two hours! While waiting for the games to start, you decide to do something fun to keep your mind off the wait: play your favourite card game.\n\nThe card deck contains four standard suits of different colours: silver (S), white (W), emerald (E), and red (R), as well as one trump suit coloured cyan (C). That is, the Cyan cards outrank all other cards. There are N$N$ cards of each suit, numbered from 1$1$ to N$N$. This means that, in total, the deck comprises 5N$5N$ cards. At the beginning of the game, the deck is randomly distributed between the five players, such that each player gets N$N$ cards.\n\nBefore you start playing, you want to organise your cards such that all cards of the same suit are next to each other in increasing order, and the trump cards appear at the end (also in increasing order). When you receive your cards, they appear in your hand as a sequence. To organise them, you perform a sequence of actions, where in each action you take one card out of your hand and put it back in your hand at another position (between two cards, before the first card, or after the last card).\n\nYou cannot help but wonder: what is the minimum number of actions you need to take in order to organise your hand?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31475","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t양갈래 배열이란 직사각형 형태의 2차원 배열의 한 변의 중심에서 시작해서 달팽이 껍질 모양으로 양 쪽으로 퍼져나가는 배열을 의미한다.\n\n예시를 보자.\n\n아래는 3×5$3 \\times 5$ 크기의 2차원 배열의 위쪽 변의 중심에서 시작한 양갈래 배열이다.\n\n\n\n아래는 4×7$4 \\times 7$ 크기의 2차원 배열의 아래쪽 변의 중심에서 시작한 양갈래 배열이다.\n\n\n\n아래는 3×4$3 \\times 4$ 크기의 2차원 배열의 왼쪽 변의 중심에서 시작한 양갈래 배열이다.\n\n\n\n아래는 5×5$5 \\times 5$ 크기의 2차원 배열의 오른쪽 변의 중심에서 시작한 양갈래 배열이다.\n\n\n\n위쪽 변, 아래쪽 변, 왼쪽 변, 오른쪽 변은 각각 양갈래 배열의 1$1$번째 행, N$N$번째 행, 1$1$번째 열, M$M$번째 열을 말한다.\n\n출력할 배열의 행의 개수, 열의 개수, 시작 위치가 주어질 때 양갈래 배열을 출력해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31431","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tPython은 간결하고 가독성이 높은 문법으로 알려진 고급 프로그래밍 언어로, 다양한 분야에서 사용되며 커뮤니티와 생태계가 풍부한 언어로 알려져 있다. Python은 데이터 분석, 인공지능, 웹 개발 등 다양한 영역에서 널리 활용되고 있다.\n\nPython 코드는 아래의 요소로 이루어져 있다.\n\n\n\t라인 (Line)은 Python 코드의 한 행을 나타낸다. 이 문제에서, 각 라인은 ‘헤더’ 또는 ‘심플문’ 중 하나이다.\n\t블록 (Block)은 반복문과 조건문 등을 구성한다. 여러 개의 라인으로 구성되어 있으며, 헤더와 바디로 구분된다.\n\t블록의 구분을 위해 각 라인 앞에 0$0$개 이상의 탭 문자를 삽입하며, 이 탭 문자를 인덴트 (Indent)라고 부른다. 라인 앞의 탭 문자 개수를 인덴트 레벨 (Indent Level)이라고 부른다. 본 문제의 모든 예시에서는 모든 탭 문자를 공백 문자 4$4$개로 표기한다.\n\t헤더 (Header)는 블록을 시작하는 부분으로, 정확히 한 라인으로 구성된다.\n\t심플문 (Simple Statement)은 라인 중 헤더에 해당하지 않는 것을 의미한다.\n\t바디 (Body)는 블록의 안쪽 영역에 해당하는 부분으로,  1$1$개 이상의 라인으로 구성된다.\n\n\n올바른 Python 코드는 아래의 조건 중 적어도 하나를 만족한다.\n\n\n\t인덴트 레벨이 0$0$인 심플문으로만 이루어진 코드이다.\n\t인덴트 레벨이 0$0$인 헤더로 시작하며, 헤더 이하에 1$1$라인 이상의 코드가 있다. 헤더를 제거하고 남은 부분의 인덴트 레벨을 모두 1$1$씩 감소시키면 올바른 Python 코드가 된다. 이때 이 코드는 블록이 되며, 헤더를 제외한 부분의 코드는 모두 블록의 바디가 된다.\n\t올바른 Python 코드 두 개를 이어 붙인 코드이다.\n\n\n아래는 올바르지 않은 Python 코드의 예시와, 각각이 조건을 만족하지 않는 이유이다.\n\n\n\t\n\t\t\n\t\t\t\n\t\t\ta=1\n    b=3\nc=5\n\t\t\t\n\t\t\t심플문으로만 구성된 코드이지만, 인덴트 레벨이 모두 0$0$이 아니다.\n\t\t\n\t\t\n\t\t\t\n\t\t\tfor i in range(n):\nfor x in a:\n    print(s)\n\n\t\t\t\n\t\t\t첫 번째 블록의 바디가 1$1$라인 이상의 코드를 포함하지 않는다.\n\t\t\n\t\t\n\t\t\t\n\t\t\tfor i in range(n):\n        for j in range(n):\n            print(i+j)\n\t\t\t\n\t\t\t첫 번째 라인에 헤더가 존재하지만, 헤더를 제거한 후 남은 부분의 인덴트 레벨을 모두 1$1$씩 감소시켜도 올바른 코드가 되지 않는다.\n\t\t\n\t\n\n\n다음은 사용자로부터 정수 n$n$을 입력받아 문자 '*'로 구성된 직각삼각형을 출력하는 올바른 Python 코드의 예시이다.\n\n\n\t\n\t\t\n\t\t\t\n\t\t\t1| n = int(input())\n2| a = []\n3| for i in range(1, n+1):\n4|     s = \"\"\n5|     for j in range(i):\n6|         s += \"*\"\n7|     a.append(s)\n8| for s in a:\n9|     print(s)\n\n\t\t\t\n\t\t\n\t\n\n\n오늘날 많은 코드 에디터들은 Code Folding 기능을 제공한다. Code Folding이란 특정한 블록에서 바디에 해당하는 부분을 숨겨 헤더만 보이게 하는 기능으로, 긴 코드를 읽기 편리하게 해준다. 엄밀히 말해, Code Folding 기능은 다음과 같이 정의된다.\n\n초기에 모든 블록은 펴진 상태이다. 코드에 어떤 블록이 있을 때, Code Folding 기능을 사용해 그 블록을 접거나 펼 수 있다. 블록을 접을 때, 블록의 바디에 해당하는 라인은 모두 보이지 않게 된다. 또한, 그 블록을 포함하는 다른 어떤 블록을 접더라도, 그 블록의 접힌 상태는 유지된다.\n\n예를 들어, 위에서 제시된 코드의 두 번째 블록을 접으면 다음과 같이 보인다. 블록의 바디에 해당하는 6$6$번 라인이 보이지 않는 것을 확인할 수 있다.\n\n\n\t\n\t\t\n\t\t\t\n\t\t\t1| n = int(input())\n2| a = []\n3| for i in range(1, n+1):\n4|     s = \"\"\n5|     for j in range(i): ...\n7|     a.append(s)\n8| for s in a:\n9|     print(s)\n\n\t\t\t\n\t\t\n\t\n\n\n이어서, 코드의 첫 번째 블록을 접으면 다음과 같이 보인다. 블록의 바디에 해당하는 4$4$, 5$5$, 6$6$, 7$7$번 라인이 모두 보이지 않는 것을 확인할 수 있다.\n\n\n\t\n\t\t\n\t\t\t\n\t\t\t1| n = int(input())\n2| a = []\n3| for i in range(1, n+1): ...\n8| for s in a:\n9|     print(s)\n\n\t\t\t\n\t\t\n\t\n\n\n이때, 다시 첫 번째 블록을 펴더라도 하위 블록의 접힌 상태는 그대로 유지된다. 즉, 마지막 예시에서 접었던 블록을 다시 펼치더라도 그 전 예시와 동일하게 두 번째 블록의 접힌 상태가 유지되며, 6$6$번 라인은 여전히 보이지 않는다.\n\n올바른 Python 코드가 주어졌을 때, Code Folding 기능을 수행하고 실시간으로 보이는 코드의 라인 개수를 출력하는 프로그램을 작성해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31476","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t블롭들은 늘 새로움을 추구해 왔다. 이번에도 블롭들은 새로운 느낌을 원하였고, 이에 블롭들은 매일매일 하늘에 기도하게 된다.\n\n이 기도를 들은 토카는 블롭들에게 양갈래 머리를 하사하였으며, 블롭들은 대 양갈래 시대를 맞게 된다.\n\n\n\n양갈래 블롭\n\n그러나, 일부 블롭들은 거기서 더 새로운 헤어 스타일을 추구하였고, 이들은 그들의 머리를 묶어 포니테일 블롭이 된다.\n\n\n\n포니테일 블롭의 등장에 슬퍼하는 양갈래 블롭들\n\n처음에는 이상한 블롭 취급을 하며 넘길 수 있는 수준이었지만, 그 수가 점차 하나둘씩 늘어나더니 어느덧 그 수는 양갈래 블롭들과 비슷한 상태가 되었다.\n\n양갈래 블롭들과 포니테일 블롭들은 서로를 싫어하는 감정이 격화되어 결국 '머릿결 전쟁'이 발발하게 된다!\n\n블롭들은 평화를 좋아했기 때문에, 유혈이 낭자하는 전쟁보다는 서로 겨루어 합을 보는 전쟁을 치르기로 합의했고, 이에 토카는 경기 장소로 '양갈래 굴'을 채택하였다. 양갈래 굴은 한때 블롭들의 핵심적인 채광지였고, 광산업이 활발하던 당시에는 입구에서부터 깊이 D$D$까지 총 2D−1$2^D-1$개의 방으로 구성된 완전 이진 트리의 형태를 띠고 있었고, i$i$번 방과 ⌊i2⌋(2≤i≤2D−1)$\\left \\lfloor \\frac{i}{2} \\right \\rfloor(2 \\le i \\le 2^D-1)$번 방을 잇는 길목이 있었다.\n\n그러나 양갈래 굴은 광산업의 쇠퇴로 사용되지 않은 지 오래되어 길목 N$N$군데가 파손되어 탐색을 위해 지나다닐 수 없게 되었다.\n\n하지만, 전쟁은 치러져야 했었기 때문에 결국 갈 수 없는 방을 제외한 모든 방을 가장 빠르게 탐색하는 세력이 승리하는 것으로 전쟁을 치르기로 하였다.\n\n블롭들은 기본적으로 한 방에서 인접한 다른 방까지 가는 데에 걸리는 시간이 U$U$이며, 양갈래 블롭들과 포니테일 블롭들은 서로 다른 탐색 방법을 채택하였다.\n\n양갈래 블롭들은 분기점에 놓일 때마다 세력을 반으로 나누어 탐색하는 방법을 채택하였다. 세력은 언제든지 나눌 때 충분히 많은 양의 블롭이 있어서 나눌 수 있다. 하지만 한 번 나눌 때마다 나눠진 세력이 한 방에서 인접한 다른 방까지 가는 데에 걸리는 시간도 T$T$만큼 증가하게 된다.\n\n양갈래 블롭들은 동시다발적으로 탐색을 진행하기 때문에, 탐색하는 데에 가장 오래 걸린 팀의 총 탐색 시간을 양갈래 블롭들의 탐색 시간으로 간주한다.\n\n포니테일 블롭들은 다 같이 빠르게 한 곳으로 탐색하는 방법을 채택하였다. 분기점이 나타나면, 왼쪽을 우선시하여 탐색한다. 또한 포니테일 블롭들은 더 이상 탐색할 방이 없다면 위로 돌아간다. 이때도 탐색 시간이  U$U$ 만큼 소모됨에 유의한다.\n\n각각의 블롭들은 길목을 탐색할 때마다 각각의 탐색 시간만큼 지나고 그 외의 시간은 무시한다. 모든 방을 탐색한 즉시 탐색이 끝나게 된다.\n\n이해를 돕기 위해 아래 예제를 준비하였다. 왼쪽이 양갈래 블롭들이 탐색하는 방법, 오른쪽이 포니테일 블롭들이 탐색하는 방법이다.\n\n\n\n그렇게 전쟁이 선포되고 탐색이 시작되었다! 이 전쟁에서 어느 세력이 승리할지 구해보도록 하자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31477","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t평화로운 양갈래의 마을에 위기가 닥쳐왔다! 덩굴에 독이 퍼져 양갈래가 있는 곳으로 옮겨지고 있다!\n\n독은 양갈래의 방을 제외하고, 정확히 한 개의 덩굴로 연결된 방에서부터 옮겨진다.\n\n모든 방의 쌍 사이에는 1$1$개 이상의 덩굴을 지나는 유일한 경로가 존재하며, 덩굴은 총 N−1$N-1$개가 존재한다. 각 덩굴의 끝과 끝은 각각의 방에 강하게 연결되어 있어 양갈래의 방까지 독이 스며들지 않도록 덩굴을 잘라야 한다.\n\n또한, 덩굴을 자르기 위해서는 덩굴의 두께 V$V$의 힘이 든다. 양갈래의 방까지 독이 가지 않게 덩굴을 잘라야 양갈래를 구할 수 있다. 덩굴을 자르는 데에는 많은 힘이 들기에, 시현이는 가능한 한 적은 힘을 들이며 덩굴을 자르고 싶다.\n\n시현이를 도와 덩굴을 자르기 위해 필요한 힘의 합의 최솟값을 구해주자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31483","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAlice is attending a sport event with many national teams and one thing is important to her: supporting every country.\n\nThere are N$N$ countries represented and she has two ways to support a country: either have the flag drawn on her or have a pin with the name of the country. Alice has a list containing, for each country, the colours needed to make its flag. A total of M$M$ colours that may appear across all flags and, in Alice’s list, each colour is conveniently represented as an integer between 1$1$ and M$M$.\n\nEach crayon and pin cost 1$1$, but her budget is tight. . . Can you help her find the minimum she can spend to support everyone?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31432","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t사악한 소수의 추종자들이 KSA 학생들에게 열 가지의 숫자 중 일부를 말할 수 없는 저주를 걸어 버렸다.\n\n당신은 남은 N$N$가지의 숫자만으로 소수가 아닌 수를 만들어서 KSA를 구해야 한다. 숫자는 중복해서 사용할 수 있으며, 만들어진 수는 1012$10^{12}$ 이하의 음이 아닌 정수여야 한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31478","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t트윈과 포니가 서로 퀴즈를 내고 있다.\n\n\n\t포니: 오늘이 월요일이면 12$12$일 뒤에는 무슨 요일일까?\n\t트윈: 토요일!\n\t포니: 그러면 34$3^{4}$일 뒤는?\n\t트윈: 음... 금요일?\n\t포니: 그러면 654321$6^{54^{321}}$일 뒤에는? 543216$\\frac{54^{321}}{6}$일 뒤에는?\n\t트윈: 장난해??\n\n\n포니의 장난에 트윈은 퀴즈를 풀다 말고 냅다 집으로 가버렸다. 그러나 마지막에 정답을 들어버렸고 포니가 어떻게 빨리 풀었는지 문득 궁금해졌다.\n\n트윈을 위해 K$K$요일이 주어지면 ABC$A^{B^{C}}$일 뒤와 BCA$\\frac{B^{C}}{A}$일 뒤에는 무슨 요일인지 알 수 있는 프로그램을 제작해 보자. 포니가 L$L$요일이라고 한 답이 맞는지도 판별하자!\n\n편의를 위해 월요일은 0$0$, 화요일은 1$1$, 수요일은 2$2$, 목요일은 3$3$, 금요일은 4$4$, 토요일은 5$5$, 일요일은 6$6$으로 주어진다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31484","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tTwo Olympics spectators are waiting in a queue. They each hold a copy of the metro map of Paris, and they devised a little game to kill time. First, player A thinks of a metro line (chosen uniformly at random among all metro lines) that player B will need to guess. In order to guess, player B repeatedly asks whether the line stops at a metro station of her choice, and player A answers truthfully. After enough questions, player B will typically know with certainty which metro line player A had in mind. Of course, player B wants to minimise the number of questions she needs to ask.\n\nYou are given the map of the N$N$ metro lines (numbered from 1$1$ to N$N$), featuring a total of M$M$ metro stations (numbered from 0$0$ to M−1$M - 1$) and indicating, for each line, those stations at which the line stops. Please compute the expected number of questions that player B needs to ask to find the answer, in the optimal strategy.\n\nIn other words, given a strategy S$S$, note QS,j$Q_{S,j}$ the number of questions asked by the strategy if the metro line in the solution is line j$j$. Then, note\n\n ES=E[QS]=1N∑j=1NQS,j$$E_S = \\mathbb{E}[Q_S] = \\frac{1}{N}\\sum_{j=1}^{N}{Q_{S,j}}$$ \n\nthe expected value of QS,j$Q_{S,j}$ assuming that j$j$ is uniformly chosen from the set of all metro lines. Your task is to compute minS$\\min_S$ ES$E_S$.\n\nIf it is not always possible for player B to know which line player A had in mind with certainty, output not possible.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31479","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t미적분을 하던 다익망가는 견딜 수 없는 난이도에 문득 '인테그랄(∫$\\int$)이 양갈래 미소녀가 아닐까?' 하는 망상에 빠져버렸다! 그리하여 다익망가는 망상의 힘으로 인테그랄 양을 만들어내게 되었다!\n\n다익망가는 인테그랄 양의 탄생을 무척이나 좋아하였고, 인테그랄 양의 특성을 분석하기 시작했다. 인테그랄 양은 주변에 보이는 수식을 안아준다. 그리고 이 수식은 기쁨에 겨워 두 번 적분된다!! 우리는 이 기쁨에 겨운 수식을 양갈래를 적분한다는 의미로 양( 2$2$ )갈래 → 갈래 제곱식이라고 부르기로 하였다.\n\n인테그랄 양이 하는 적분은 부정적분이며, 두 번 적분한다는 것의 의미는 부정적분이 두 번 시행된다는 것을 의미한다. 즉, 처음 적분할 때 식은 주어지는 다항식을 적분한 결과 뒤에 적분 상수를 뜻하는 C$C$가 추가되며, 두 번째 적분에서는 다른 적분 상수 D$D$를 사용하여 적분됨을 나타낸다.\n\n하지만 문제가 있다. 인테그랄 양이 수식을 껴안는 것을 너무나도 좋아하는 나머지, 원래의 수식을 알 수가 없다는 것이다! 결국 원래의 수식과 갈래 제곱식이 뒤죽박죽 섞여버렸고, 인테그랄 양은 죄책감에 우울해하고 있다.\n\n다익망가는 인테그랄 양이 우울해하는 모습은 보고 싶지 않기에, 갈래 제곱식과 임의의 수식 하나를 골라 이 수식이 갈래 제곱식이 되기 전의 올바른 수식인지 구해보려고 한다. 하지만 다익망가는 \"수학 시러!\"를 외치며 도망가 버렸다!\n\n당신은 다익망가가 내심 인테그랄 양을 도와주고 싶어한다는 사실을 알고 있다. 다익망가를 도와서 수식을 안았을 때 갈래 제곱식이 되는지 판별해보자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31433","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tKSAAC 운영진은 모두 KSA를 사랑하기 때문에 다음과 같은 조건을 만족하는 문자열을 좋아한다.\n\n문자열의 길이를 N$N$이라고 할 때, 1≤i≤N$1\\leq i\\leq N$인 모든 i$i$에 대하여\n\n\n\t i$i$를 3$3$으로 나눈 나머지가 1$1$이면 i$i$번째 문자는 K이다.\n\t i$i$를 3$3$으로 나눈 나머지가 2$2$이면 i$i$번째 문자는 S이다.\n\t i$i$를 3$3$으로 나눈 나머지가 0$0$이면 i$i$번째 문자는 A이다.\n\n\n문자열에는 다음과 같은 시행을 0$0$회 이상 수행할 수 있다.\n\n\n\t존재하는 아무 문자를 한 개 제거한다.\n\t맨 앞에 아무 문자를 한 개 추가한다.\n\t맨 뒤에 아무 문자를 한 개 추가한다.\n\n\n주어진 문자열 X$X$에 적절한 시행을 하여 X$X$를 X$X$와 길이가 같으면서 KSAAC 운영진이 좋아하는 문자열로 바꾸려고 한다. 이때 필요한 시행의 최소 횟수를 구하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31500","content":"문제\n\n이 문제는 N진수 곱셈 (HUGE)와 \nA\n$A$와 \nB\n$B$의 길이 제한만 다른 문제이다.\n\n \nN\n$N$진법으로 표현된 두 정수 \nA\n$A$, \nB\n$B$를 곱하는 프로그램을 작성하자.\n\n \nA\n$A$와 \nB\n$B$를 표현할 때 각 자리의 수는 ASCII 순서대로 배치하는데, \n0\n$0$은 \n33\n$33$번에 해당하는 문자인 !로, \n1\n$1$은 \n34\n$34$번에 해당하는 문자인 \"로, ..., \ni\n$i$는 \n33+i\n$33+i$번에 해당하는 문자로 표현한다. 음수를 표현하는 문자는 ~(ASCII 코드 \n126\n$126$번)로 \nN\n$N$이 양수일 때만, 맨 앞 글자에 최대 한 번 나타난다.\n\n각 자리를 표기하기 위한 ASCII 문자 대응표\n\n아래는 앞에서 서술한 대로 수를 표현한 예시이다. 이해를 돕기 위해 각 자리의 숫자를 대괄호를 감싸 표기하였다.\n\n \n[1][2][5](10)=\n$[1][2][5]_{(10)}=$ \"#&\n\n \n−[1][2][16](27)=\n$-[1][2][16]_{(27)}=$ ~\"#1\n\n \n[9][0][12](−15)=\n$[9][0][12]_{(-15)}=$ *!-\n\n \n[43][52][44][40](69)=\n$[43][52][44][40]_{(69)}=$ LUMI\n\n \nN\n$N$은 음의 정수일 수 있으며, 음의 정수 진법에 대한 설명은 힌트를 참조한다."},{"problemId":"31458","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t코코의 초콜릿 가게에서 파는 초콜릿은 달달하기로 유명하다. 그래서 코코는 아래와 같은 경고문을 가게 앞에 붙이려고 한다.\n\n!!초콜릿 중독 주의!!\n\n이 문구를 유심히 보던 코코는 느낌표 사이의 문장을 지우고 그 자리에 수를 넣으면 일종의 수식이 된다는 사실을 깨달았다. 이 수식을 계산해 보자.\n\n이 문제에서 계산할 수식은 정수 하나와 0$0$개 이상의 느낌표로 이루어져 있다. 정수는 0$0$ 또는 1$1$이며, 느낌표는 정수의 앞이나 뒤에 올 수 있다. 이 수식을 계산하는 규칙은 다음과 같다.\n\n\n\t n!$n!$은 n$n$의 팩토리얼이다. 0!=1$0!=1$, 1!=1$1!=1$로 정의된다.\n\t !n$!n$은 n$n$의 논리 반전(logical not)이다. !0=1$!0=1$, !1=0$!1=0$으로 정의된다.\n\t팩토리얼이나 논리 반전이 중첩되어 있으면 중첩된 횟수만큼 계산하며, !n!$!n!$과 같이 둘 다 사용된 경우에는 팩토리얼을 먼저 계산한다. 예를 들어, !!n!!=!(!((n!)!))$!!n!!=!(!((n!) !))$이다.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31459","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t코코는 가로 길이 X$X$, 세로 길이 Y$Y$인 직사각형 모양의 초콜릿을 갖고 있다. 이 초콜릿은 1×1$1\\times 1$ 크기의 단위 정사각형으로 나누어져 있다.\n\n코코는 이 초콜릿과 여러 개의 ㄱ나이트를 가지고 ㄱ나이트 게임을 하려고 한다. ㄱ나이트는 체스에서 사용하는 나이트의 변형으로, 한 번에 오른쪽으로 x$x$칸, 아래로 y$y$칸 떨어진 칸으로 이동할 수 있다. ㄱ나이트는 이동할 때 다른 칸에 있는 말의 방해를 받지 않는다. 목적지 칸이 초콜릿의 범위를 벗어나는 경우에는 그곳으로 이동할 수 없다.\n\nㄱ나이트 게임은 초콜릿 위에 다음의 규칙을 지키면서 최대한 많은 ㄱ나이트를 올리는 게임이다.\n\n\n\t초콜릿의 한 칸에는 최대 하나의 ㄱ나이트를 올릴 수 있다.\n\t어떤 ㄱ나이트가 한 번에 이동할 수 있는 칸에 다른 ㄱ나이트가 있으면 안 된다.\n\t초콜릿은 뒤집거나 회전할 수 없다.\n\n\n코코가 초콜릿에 ㄱ나이트를 최대 몇 개까지 올릴 수 있는지 계산해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31485","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are in charge of a team of sorted gymnastics. This new discipline involves teams of N$N$ members. Each team member dresses with a different colour (a number from 1$1$ to N$N$) and holds a coloured flag. Flags have unique colours, also numbered from 1$1$ to N$N$. A performance consists of exactly K$K$ steps. At each step, two members exchange their flags. You are free to choose the initial configuration of the flags. The only constraint is that, at the end of the performance, each participant must hold the flag corresponding to the colour of his outfit.\n\nBeing the team captain, you would like the performance to be as unpredictable as possible. You consider T$T$ possible initial configurations of flags among the team members, and wonder: in how many ways can the team perform the task for each of these initial configurations?\n\nFor each of the given T$T$ initial configurations, compute the number of possible ways to do the performance. As the answers may be very large, return them modulo the prime number 1000000007$1\\, 000\\, 000\\, 007$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31501","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이 문제는 DP (Large)와 문제의 수 제한, 질문의 수 제한, 문제의 난이도 제한이 다른 문제이다.\n\nDP는 DYNAMIC Porani의 약자이다.\n\nDYNAMIC한 포라니는 가능한 문제를 DYNAMIC하게 푸는 것을 좋아한다. DYNAMIC한 문제 풀이란 문제의 번호와 난이도가 모두 증가하도록 가능한 한 많이 푸는 것이다.\n\n방학을 맞은 포라니는 알고리즘 능력 향상을 위해 선배로부터 추천 문제 셋을 받았다. 나태한 포라니는 모든 문제를 풀고 싶지 않다. 만약 선배로부터 어떤 문제를 풀라는 지시를 받았을 때, 그 문제를 포함하여 DYNAMIC하게 문제를 풀었을 경우 몇 문제를 풀어야 하는지 알려주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31434","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t에릭은 방학 동안 너무 심심한 나머지, 당근 클릭 게임이라는 게임을 직접 만들어서 플레이하기로 했다.\n\n이 게임에서 초기에 에릭은 당근을 0$0$개 가지고 있고, s$s$가 1$1$인 상태로 게임을 시작한다.\n\n그 후, 매초 다음 두 가지의 행동 중 하나를 할 수 있다.\n\n\n\t마우스를 클릭하고 당근을 s$s$개 얻는다.\n\t정수 i$i$(1≤i≤N)$(1 \\le i \\le N)$를 고르고, 당근 Ai$A_i$개를 지불하여 i$i$번째 스피드 효과를 구매한다. 구매 직후, s$s$가 Bi$B_i$만큼 증가한다. (이전에 구매한 스피드 효과를 다시 구매하는 것도 가능하다.)\n\n\n\n\n게임을 개발하느라 에너지를 모두 소모해 버린 에릭을 위해 게임을 K$K$초 플레이한 후 당근을 최대 몇 개까지 가지고 있을 수 있는지 알려주자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31486","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tParis is so crowded with tourists during the Olympic games! You want to escape the city and go on a hike on a linear trail path. Every kilometre on that trail, including at start and end, is a milestone, on which is written the stone’s altitude. The slope between two consecutive stones is constant, and no two stones have the same altitude.\n\nPlanning to come back with your friends, you try to identify the point of the hike at which you had the nicest view. The beauty of a point of view is defined as the distance (measured in kilometres) between your position and the previous position, on your hike, that was at the same altitude. If such a previous position fails to exist, it means that you can see the city and its smog, and the beauty of that view is zero.\n\nYou have listed the altitudes of the milestones. What is the maximal beauty on your hike?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31502","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t토카는 어쩌다 마주친 아름다운 한별 선배에게 마음을 빼앗겨 버리고 말았다! 말을 걸고 싶었지만 그럴 자신이 없었던 토카는 한별 선배에게 말을 걸 만한 명분을 찾기 시작했다. 평소에 만화를 많이 읽던 토카는 그 명분을 만들 방법을 한 만화책에서 찾아냈다! 만화 속 남자 주인공과 여자 주인공이 등굣길에 벚꽃 아래에서 서로 부딪혔던 사건을 계기로 친해졌다는 내용을 보고 직접 따라 하기로 결심했다.\n\n토카네 동네에는 벚나무가 없기 때문에 대신 은행나무가 있는 곳에서 시도하고자 한다. 토카네 동네는 1$1$부터 N$N$까지의 번호가 붙은 N$N$개의 은행나무와 양 끝에 은행나무가 심어진 M$M$개의 도로로 구성되어 있다. 모든 도로는 양방향 이동이 가능하며, 임의의 두 은행나무 사이를 항상 이동할 수 있다. 서로 다른 두 은행나무를 잇는 도로가 둘 이상일 수도 있다.\n\n토카는 한별 선배 집 앞 은행나무의 번호와 등교하는 방법에 대해서 알아냈다. 한별 선배는 탁 트인 곳을 좋아해서 한 은행나무에서 인접한 다른 은행나무로 갈 때 연결된 도로가 가장 많은 은행나무로, 만약 그러한 은행나무가 여러 그루 있으면 가장 큰 번호를 가진 은행나무로 이동한다. 하지만 도로가 많은 길만 따라가다 보면 같은 도로만 빙빙 돌 수 있기 때문에 학교로 가는데 거치는 은행나무 수가 가장 적은 경로로 이동한다. 따라서 더 많은 도로가 연결된 은행나무라 하더라도 거치는 은행나무 수를 최소화할 수 없다면 그쪽으로는 향하지 않는다.\n\n토카는 한별 선배와 같이 있는 시간을 길게 만들기 위해서 한별 선배가 등굣길에 지나치는 은행나무 중 토카네 집에서 가장 빨리 도착할 수 있는 은행나무에서, 만일 그런 은행나무가 여러 그루라면 번호가 가장 작은 은행나무 앞에서 부딪힌다는 계획을 세웠다. 김칫국을 마시고 있는 토카를 대신해 당신이 토카와 한별 선배가 부딪힐 운명의 은행나무를 알려 줘야 한다!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31487","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tProgramming competitions are fun and exciting. Programming should be an Olympic sport! At least, this is what we believe. However, when we suggested this to some of our friends, they did not seem to share our excitement. So, we decided to suggest a combined sport that will be more interesting to watch. Programming-trampoline-athlon! (we are still working on the name.)\n\nThe idea is as follows. This is a team sport, where each team comprises of 3$3$ members. The team has at its disposal 1$1$ hour, 1$1$ computer, and 1$1$ trampoline. At all times, there must be at most one team member using the computer and at least one team member jumping the trampoline. At the beginning of the competition, the team is given 6 programming problems, and 6$6$ trampoline elements (exercises). The team decides how to partition the trampoline elements between its members, such that each team member has to perform 2$2$ of the given elements on the trampoline. The programming tasks are solved cooperatively by the team members, but no one member can spend more than 25$25$ minutes on the computer in total. The scoring is comprised of two parts, which are added together:\n\n\n\tThe programming score ranges between 0$0$ and 60$60$. The team receives 10$10$ points for every correctly solved problem.\n\tThe trampoline score ranges between 0$0$ and 40$40$. Each of the 6$6$ trampoline elements receives a score from the judges that ranges between 0$0$ and 10$10$. The final trampoline execution score is determined by dropping the highest and lowest of the 6$6$ scores, and then adding up the remaining 4$4$ scores.\n\n\nBefore we pitch this new sport to the International Olympic Committee, we want everything to be ready in order to show them just how serious we are. Thus, each team should receive a medal when no more than two other teams obtained a strictly higher score. However, in order to cope with a recent shortage of medals, the jury was instructed to make sure that there would be no more than 1000$1\\, 000$ teams deserving a medal. We ask you to write a program that determines the medallists, given the performance of the different teams.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31435","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이 문제는 인터랙티브 문제이다.\n\n\n\n한별이와 우빈이는 같은 기숙사 방을 배정받게 되었다. 그런데 한별이와 같은 방을 쓰기 부끄러웠던 우빈이는 한별이가 들어오기 전 문에다가 비밀번호 장치를 설치해 버렸다. 장치를 풀기 위해선 0≤xi<998244353$0 \\leq x_{i} < 998\\,244\\,353$를 만족하는 N$N$개의 정수 x1,x2,⋯,xN$x_{1},x_{2},\\cdots,x_{N}$를 알아내야 한다. 그러나 츤데레인 우빈이는 한별이의 프로그래밍 실력이 뛰어난지 알아보기 위하여 다음의 함수를 제공하였다. 한별이는 N$N$개의 원하는 정수 a1,a2,⋯,aN$a_{1},a_{2},\\cdots,a_{N}$을 골라 그 함숫값 f(a1,a2,⋯,aN)$f(a_{1},a_{2},\\cdots,a_{N})$을 알아낼 수 있다.\n\n 0$0$ 이상 998244353$998\\,244\\,353$ 미만의 정수들의 집합을 M$\\mathbb{M}$이라고 할 때, 함수 f:M×M×⋯×M⏞N times→M$f: {\\overbrace{\\mathbb M \\times \\mathbb M \\times \\cdots \\times \\mathbb M}^{N\\text{ times}}} \\rightarrow \\mathbb{M}$은 다음과 같이 정의된다: f(a1,a2,⋯,aN)=(a1x1+a2x2+⋯+aNxN)mod998244353$$f(a_{1},a_{2},\\cdots,a_{N})=(a_{1}x_{1}+a_{2}x_{2}+\\cdots+a_{N}x_{N}) \\bmod 998\\,244\\,353$$ \n\n단, 함수는 최대 N$N$번만 사용할 수 있으며, 모든 함수 사용을 통틀어서 a1,a2,…,aN$a_{1}, a_{2}, \\ldots, a_{N}$는 전부 달라야 한다. 즉, 함수를 k$k$번 사용했다면 kN$kN$개의 인자가 모두 달라야 한다.\n\n이제 비밀번호를 구하여 우빈이를 놀래켜 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31503","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이 문제는 DP (Small)과 문제의 수 제한, 질문의 수 제한, 문제의 난이도 제한이 다른 문제이다.\n\nDP는 DYNAMIC Porani의 약자이다.\n\nDYNAMIC한 포라니는 가능한 문제를 DYNAMIC하게 푸는 것을 좋아한다. DYNAMIC한 문제 풀이란 문제의 번호와 난이도가 모두 증가하도록 가능한 한 많이 푸는 것이다. \n\n방학을 맞은 포라니는 알고리즘 능력 향상을 위해 선배로부터 추천 문제 셋을 받았다. 나태한 포라니는 모든 문제를 풀고 싶지 않다. 만약 선배로부터 어떤 문제를 풀라는 지시를 받았을 때, 그 문제를 포함하여 DYNAMIC하게 문제를 풀었을 경우 몇 문제를 풀어야 하는지 알려주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31488","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tFrance is a country of gastronomy. For a dish, both the taste and plating are important. Nevertheless, when different people evaluate a dish, some focus more on taste and some focus more on plating. At the Olympic Village dining hall, there are N$N$ dishes, numbered from 1$1$ to N$N$; each dish has a score on its taste and a score on its plating. There are also M$M$ persons, numbered from 1$1$ to M$M$; each person has a weight on taste and a weight on plating. One person’s final score of a dish is the weighted average of the dish’s scores on taste and plating.\n\nThe chefs at the Olympics want to provide everyone with their favourite dish on the evening of the closing ceremony. Your task is to calculate everyone’s favourite dish. If multiple dishes tie for the highest score as a person’s favourite, choose the one with the smallest number.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31504","content":"문제\n\n \nN\n$N$개의 양의 정수로 구성된 수열 \nA\n$A$가 있다. 수열의 각 원소의 값은 \nN\n$N$을 초과할 수 없으며, 비내림차순으로 정렬되어 있다. 또한 수열에는 값이 같은 원소가 \n2\n$2$개 이상 있을 수 있다.\n\n그리고 \nA\n$A$에 의해 결정되는 길이 \nN\n$N$의 수열 \nB\n$B$를 다음과 같이 정의한다.\n\n \nbi=aai\n$$b_i = a_{a_{i}}$$ \n\n여기서 \n1≤i≤N\n$1 \\le i \\le N$인 모든 \ni\n$i$에 대해, \nai\n$a_i$는 \nA\n$A$의 \ni\n$i$번째 원소를, \nbi\n$b_i$는 \nB\n$B$의 \ni\n$i$번째 원소를 나타낸다.\n\n이때, \nA=B\n$A = B$가 되도록 하는 수열 \nA\n$A$를 정렬된 프랙탈 수열이라고 하자.\n\n문제를 어렵게 만들기 위해, 여기에 제약사항을 하나 추가해 보자. 수열 \nA\n$A$에서 \nK\n$K$개의 원소를 선택해 각각 지정한 값으로 고정하려고 한다. 고정된 값들은 이후 수정할 수 없다.\n\n \nN\n$N$과 제약사항에 대한 정보가 주어졌을 때, 길이가 \nN\n$N$인 서로 다른 정렬된 프랙탈 수열의 개수를 \nM\n$M$으로 나눈 나머지를 구해보자."},{"problemId":"31489","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tFor the first time, breakdance will be featured in the Olympics. And you get to participate! Well, you get to participate to the jury. . . More precisely, you get to build the table in front of which the jury will be seated: still, that is an impressive feat, congratulations!\n\nActually, the top of the table is already built: it is plane, has constant width and constant density, and its shape consists in the interior of an N$N$-sided non-crossing polygon P1P2…PN$P_1P_2 \\dots P_N$ in which no three vertices are collinear (i.e., no line goes through three vertices or more). You have three table legs of same length and negligible width. Your task is to place them at distinct corners of the table so that the table remains stable when standing on these legs. In other words, you must choose three vertices Pi$P_i$, Pj$P_j$ and Pk$P_k$ of the polygon such that the centre of gravity of the polygon lies in the interior of the triangle PiPjPk$P_iP_jP_k$ (and not on its boundary).\n\nIn how many different ways can you do this? If two ways of placing legs differ only by a permutation of the legs, they are not counted as different ways.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31436","content":"문제\n\nKSA의 일부 학생들은 자신이 좋아하는 분야만 더 깊게 파려 하는 경향이 있다. 민우가 시험 기간 동안 공부해야 하는 과목 \nN\n$N$개를 순서대로 \n1,2,⋯,N\n$1, 2, \\cdots, N$이라 번호를 붙이고 과목 \ni\n$i$의 공부량을 음이 아닌 정수 \nsi\n$s_i$라 하자.\n\n민우는 각 \ni\n$i$에 대해, 과목 \ni\n$i$를 적어도 과목 \nAi\n$A_i$만큼 공부하고 싶어 한다. 즉, \nsi≥sAi\n$s_i \\geq s_{A_i}$여야 한다. (\nAi\n$A_i$의 값이 \ni\n$i$일 수 있다.)\n\n민우는 총 학점이 \n∑i=1NBisi\n$\\sum_{i=1}^N B_i s_i$에 비례한다고 믿는다. 시험을 망치기도, 공부를 과하게 하기도 싫어하므로 \nX≤∑i=1NBisi≤Y\n$X \\leq \\sum_{i=1}^N B_i s_i \\leq Y$가 성립하도록 하고 싶어 한다.\n\n \nN\n$N$, \nX\n$X$, \nY\n$Y$의 값과 \nA1,⋯,AN\n$A_1, \\cdots, A_N$, \nB1,⋯,BN\n$B_1, \\cdots, B_N$가 주어졌을 때, 위 조건을 만족하는 공부 계획의 수를 구하여라.\n\n다시 말해서 다음 조건을 만족하는 수열 \ns\n$s$의 개수를 구하여라.\n\n수열의 길이는 \nN\n$N$이며, 음이 아닌 정수로 구성된다.\n \nsi≥sAi\n$s_i \\geq s_{A_i}$이다.\n \nX≤∑i=1NBisi≤Y\n$X \\leq \\sum_{i=1}^N B_i s_i \\leq Y$이다."},{"problemId":"31540","content":"문제\n\n2024년 3월 9일 제4회 MatKor Cup이 개최된다. 이번 MatKor Cup에는 총 \nn\n$n$명이 참가했고, 각 참가자는 \n1\n$1$번부터 \nn\n$n$번까지의 번호가 붙어있다.\n\n이번 대회 운영진인 준혁이는 어떤 참가자가 우승할 지에 대해 자신을 제외한 운영진끼리 베팅을 하도록 했다. 베팅 결과 ‘\ni\n$i$번 참가자가 우승한다’에 \nai\n$a_i$원의 금액이 걸렸고, 총 \ns=a1+a2+⋯+an≠0\n$s=a_1+a_2+\\cdots +a_n\\ne 0$원의 금액이 걸렸다. 실제로 \ni\n$i$번째 사람이 우승할 확률은 베팅 금액에 비례하는 \nais\n$\\frac{a_i}{s}$이다. 우승자는 반드시 한 명이다.\n\n도박을 싫어해 베팅에 참여하지 않은 종우는 자신이 공평하게 배당을 나눌 수 있다고 말했다. 그 결과, 종우가 배당을 정하기로 했다.\n\n \ni\n$i$번 참가자의 배당이 \nbi\n$b_i$라고 할 때, 배당 상수 \nm\n$m$과 \nt\n$t$에 대해 배당의 총합이 \nt=b1m+b2m+⋯+bnm\n$t=b_1^m+b_2^m+\\cdots +b_n^m$가 되도록 \nbi\n$b_i$들을 정하고자 한다. 이때 두 배당 상수는 양의 정수이고, 각 참가자의 배당은 음이 아닌 실수이다.\n\n만약 \nk\n$k$번 참가자가 우승한다면, 준혁이는 \nk\n$k$번 참가자에 베팅한 사람들이 건 돈의 \nbk\n$b_k$배를 각각 배당금으로 지급한다. 즉, \nk\n$k$번 참가자가 우승할 경우 받은 \ns\n$s$원에서 \nakbk\n$a_kb_k$원을 배당금으로 지급하므로, 초기에 비해 \ns−akbk\n$s-a_kb_k$원을 벌게 된다. 만약 이 값이 음수라면, 그 절댓값만큼의 돈을 잃게 된다.\n\n종우는 준혁이가 도박 운영을 통해 돈을 버는 것을 못마땅하게 생각해 준혁이가 최대한 돈을 벌지 못하게 하고 싶다. 참가자별로 걸린 금액과 배당 상수가 주어질 때 종우를 도와 준혁이가 버는 금액의 기댓값이 최소가 되도록 배당을 조정해 보자."},{"problemId":"31490","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAlice and Bob are discussing penalty shoot-outs and their randomness: “We might as well be throwing dice to determine the winner!”, Alice said. And so they started simulating penalty shoot-outs by each throwing dice, summing the points indicated on their dice, and comparing these sums. The player with the largest sum wins; in case both sums are equal, there is a tie.\n\nBut even in such situations, some player might have an edge over their opponent, depending on which dice they throw. Thus, just by looking at the dice they are about to throw, Alice and Bob want to determine who has the better edge.\n\nAlice has M$M$ fair dice, with A1,A2,…,AM$A_1, A_2, \\dots , A_M$ sides. For all integers k$k$ and ℓ$\\ell$ such that 1≤k≤M$1 \\le k \\le M$ and 1≤ℓ≤Ak$1 \\le \\ell \\le A_k$, the k$k$ th die of Alice has a probability 1/Ak$1/A_k$ of showing its face numbered ℓ$\\ell$. Then, Alice’s score is the sum of the numbers displayed by her M$M$ dice. Similarly, Bob has N$N$ fair dice, with B1,B2,…,BN$B_1, B_2, \\dots , B_N$ sides.\n\nGiven these dice, Alice has a probability PA$\\mathbb{P}_A$ of having a strictly larger score than Bob, and Bob has a probability PB$\\mathbb{P}_B$ of having a strictly larger score than Alice. Which probability is the largest one?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31505","content":"문제\n\n이 문제는 N진수 곱셈 (tiny)와 \nA\n$A$와 \nB\n$B$의 길이 제한만 다른 문제이다.\n\n \nN\n$N$진법으로 표현된 두 정수 \nA\n$A$, \nB\n$B$를 곱하는 프로그램을 작성하자.\n\n \nA\n$A$와 \nB\n$B$를 표현할 때 각 자리의 수는 ASCII 순서대로 배치하는데, \n0\n$0$은 \n33\n$33$번에 해당하는 문자인 !로, \n1\n$1$은 \n34\n$34$번에 해당하는 문자인 \"로, ..., \ni\n$i$는 \n33+i\n$33+i$번에 해당하는 문자로 표현한다. 음수를 표현하는 문자는 ~(ASCII 코드 \n126\n$126$번)로 \nN\n$N$이 양수일 때만, 맨 앞 글자에 최대 한 번 나타난다.\n\n각 자리를 표기하기 위한 ASCII 문자 대응표\n\n아래는 앞에서 서술한 대로 수를 표현한 예시이다. 이해를 돕기 위해 각 자리의 숫자를 대괄호를 감싸 표기하였다.\n\n \n[1][2][5](10)=\n$[1][2][5]_{(10)}=$ \"#&\n\n \n−[1][2][16](27)=\n$-[1][2][16]_{(27)}=$ ~\"#1\n\n \n[9][0][12](−15)=\n$[9][0][12]_{(-15)}=$ *!-\n\n \n[43][52][44][40](69)=\n$[43][52][44][40]_{(69)}=$ LUMI\n\n \nN\n$N$은 음의 정수일 수 있으며, 음의 정수 진법에 대한 설명은 힌트를 참조한다."},{"problemId":"31541","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n이 문제는 1차원 돌 게임 2와 굵은 글씨로 적힌 부분만 다릅니다.\n\n\n동우와 재우는 1×n$1\\times n$ 모양의 직선형 격자판에서 처음에 한 칸에 한 개씩 돌을 올려 둔 상태로 게임을 진행하려 한다.\n\n게임은 동우부터 시작해 턴을 번갈아 가면서 돌을 가져간다. 즉, 동우는 홀수 번째 턴에, 재우는 짝수 번째 턴에 진행한다.\n\n\n\t첫 번째 턴에는 1$1$개의 칸을 골라 그곳에 놓인 돌을 가져간다.\n\t두 번째 턴부터는 직전 턴에 상대방이 가져간 돌의 개수가 x$x$개라면, 돌이 놓여 있는 연속한 x+1$x+1$개의 칸을 골라 그 영역에 놓인 모든 돌을 가져간다.\n\t돌을 가져갈 때마다, 돌을 가져간 칸(들)을 기준으로 남은 돌들이 두 부분으로 나누어진다면, 놓인 돌의 개수가 더 적은 부분에 놓인 돌을 모두 버린다. 두 부분에 놓인 돌의 개수가 같다면 한 부분을 선택해 놓인 돌을 모두 버린다. 두 부분으로 나누어지지 않고 한 부분만 있는 경우 버리지 않는다.\n\t자신의 턴에 조건에 맞게 돌을 가져가지 못한다면 그 사람이 패배하며, 상대방이 승리한다.\n\n\n둘 다 승리하기 위해 최선의 플레이를 한다면 누가 이기는지 출력하시오.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31491","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tFreshly arrived on the market, retailer YAOGS (Yet Another Olympic Goodies Seller) sells very expensive Olympics-themed items. To make themselves better known to the public, they halfheartedly decide to give away some of these items via a contest: the first person to answer correctly the question “How many circles are there in the Olympic Games logo?” can thus gain up to P very expensive but equally valued items.\n\nTo spice things up (and spend less), YAOGS however opts for an additional challenge, as follows. The P$P$ available items are positioned along some, but possibly not all of the alleys of YAOGS’s headquarters; each alley can thus contain 0$0$, 1$1$, or more items. For reasons unknown, these alleys form a connected, undirected, acyclic graph (i.e., a tree) with N$N$ nodes, numbered from 0$0$ to N−1$N - 1$.\n\nThe winner knows N$N$ but has no idea about either the tree structure or the items’ placement. Once goodies are placed, her task is to choose a start node m$m$ and an end node n$n$. She can then collect all the items on the (unique) path from m$m$ to n$n$ in the tree.\n\nYAOGS decides to cleverly place the goodies so that they minimise the maximum number of items that can possibly be collected. Assuming they properly carry out this task, what is the maximum number of items the winner can collect?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31520","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe kth$k^{\\text{th}}$ Champernowne word is obtained by writing down the first k$k$ positive integers and concatenating them together. For example, the 10th$10^{\\text{th}}$ Champernowne word is 12345678910$12345678910$.\n\nGiven a positive integer n$n$, determine if it is a Champernowne word, and if so, which word.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31437","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tKSA의 남학생 기숙사인 견우관과 여학생 기숙사인 직녀관 사이에는 두 기숙사를 잇는 통로인 오작교가 있다. 오작교에는 크사냥이라 불리는 냥냥이와 삼색이 두 마리 고양이가 살고 있다.\n\n왼쪽부터 냥냥이, 삼색이, 그리고 두 고양이가 함께 있는 모습이다.\n\n\n\t\n\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\n\n\n고양이를 사랑하는 지민이는 냥냥이와 삼색이를 원하는 위치로 유인해 완벽한 구도의 사진을 찍으려고 한다. 오작교는 정수 0,1,2,⋯,N−1,N$0,1,2,\\cdots,N-1,N$을 포함하는 수직선이라고 할 때, 견우관은 0$0$, 직녀관은 N$N$에 위치해 있다. 지민이와 고양이들은 정수 점 위에만 머무를 수 있다.\n\n 0$0$초부터 시작해 다음 과정이 번갈아 가며 반복된다.\n\n\n\t지민이가 오작교 위 원하는 한 점으로 이동한다. 이 단계는 1$1$초가 걸린다.\n\t고양이들이 규칙에 따라 제각각 이동한다. 이 단계는 0$0$초가 걸린다.\n\n\n단, 삼색이는 지민이를 할퀼 수도 있기 때문에 지민이는 삼색이가 있는 점으로는 이동할 수 없다.\n\n냥냥이와 삼색이가 움직이는 규칙은 다음과 같다.\n\n\n\t사람을 좋아하는 냥냥이는 매초 지민이가 있는 점으로 1$1$만큼 다가온다. 냥냥이는 지민이와 같은 점에 있다면 곁을 맴돌며 그 점에 머문다.\n\t사람을 무서워하는 삼색이는 매초 지민이가 있는 점으로부터 1$1$만큼 도망친다.\n\t다행히 삼색이는 냥냥이와 사이가 좋아서 함께 같은 점에 머무를 수 있다.\n\n\n또한 고양이들이 기숙사로 들어가면 안되므로 견우관 입구(0$0$)나 직녀관 입구(N$N$)에 오지 못하게 해야 한다. 지민이는 기숙사 입구로 이동할 수 있다.\n\n고양이 두 마리가 모두 원하는 위치에 있는 순간 이동을 멈추고 사진을 찍을 수 있다.\n\n오작교의 길이 N$N$, 냥냥이와 삼색이의 처음 위치 A$A$와 B$B$, 지민이가 원하는 냥냥이와 삼색이의 위치 C$C$와 D$D$가 주어진다. 지민이를 도와 원하는 구도의 사진을 찍기 위해 어떻게 이동해야 하는지 알려주는 프로그램을 작성해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31542","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n이 문제는 1차원 돌 게임 1과 굵은 글씨로 적힌 부분만 다릅니다.\n\n\n동우와 재우는 1×n$1\\times n$ 모양의 직선형 격자판에서 처음에 한 칸에 한 개씩 돌을 올려 둔 상태로 게임을 진행하려 한다.\n\n게임은 동우부터 시작해 턴을 번갈아 가면서 돌을 가져간다. 즉, 동우는 홀수 번째 턴에, 재우는 짝수 번째 턴에 진행한다.\n\n\n\t첫 번째 턴에는 1$1$개의 칸을 골라 그곳에 놓인 돌을 가져간다.\n\t두 번째 턴부터는 직전 턴에 상대방이 가져간 돌의 개수가 x$x$개라면,  1$1$ 이상 x+1$x+1$ 이하의 정수 y$y$를 하나 골라서, 돌이 놓여져 있는 연속한 y$y$개의 칸을 골라 그 영역에 놓인 모든 돌을 가져간다.\n\t돌을 가져갈 때마다, 돌을 가져간 칸(들)을 기준으로 남은 돌들이 두 부분으로 나누어진다면, 놓인 돌의 개수가 더 적은 부분에 놓인 돌을 모두 버린다. 두 부분에 놓인 돌의 개수가 같다면 한 부분을 선택해 놓인 돌을 모두 버린다. 두 부분으로 나누어지지 않고 한 부분만 있는 경우 버리지 않는다.\n\t자신의 턴에 조건에 맞게 돌을 가져가지 못한다면 그 사람이 패배하며, 상대방이 승리한다.\n\n\n둘 다 승리하기 위해 최선의 플레이를 한다면 누가 이기는지 출력하시오.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31492","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tTwo team leaders get to assemble their teams by choosing team members among a set of players that are numbered from 1$1$ to N$N$. The leaders take turns, each picking the k$k$ th player among the remaining ones, according to their ideas of which one of the remaining players would be the best addition to their teams.\n\nGiven the choices of the two leaders (the first team leader starts first), please compute the list of players in each team.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31543","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t한 변의 길이가 N=2050$N=2\\,050$인 정사각형 모양의 격자판이 있다.\n\n서진이는 이 N2$N^2$개의 격자들에 원하는 대로 격자 당 최대 하나의 돌을 채울 수 있다. 이때 서진이는 짝수를 싫어하기 때문에 다음과 같은 규칙으로 돌을 채우고자 한다.\n\n어떤 양의 정수 K$K$가 주어졌을 때, K=a×b$K=a\\times b$를 만족하는 모든 양의 정수 a$a$, b$b$에 대해, 격자판 내의 격자들을 골라 만들 수 있는 a×b$a\\times b$ 형태의 직사각형을 생각하자. 이렇게 고를 수 있는 모든 직사각형에 대해, 해당 직사각형의 K$K$개의 격자 중 돌이 들어있는 격자의 개수를 직사각형의 값이라고 하자. 서진이는 짝수를 싫어하기 때문에 직사각형의 값이 짝수인 조건을 만족하는 직사각형이 단 하나도 존재하지 않도록 하고 싶다.\n\n이 조건을 만족하도록 N×N$N\\times N$크기의 정사각형 판에 돌을 채워보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31506","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou're given a string consisting of the characters A, B, and C. The string contains the same count of A, B, and C characters.\n\nA string is beautiful if\n\n\n\tIts length is divisible by 3$3$.\n\tThe string can be split evenly into contiguous substrings of size 3$3$, where each substring has one A, one B, and one C, in any order.\n\n\nFor example: ABCCBA is a beautiful string, but ABCAB and CCBAAB are not beautiful.\n\nGiven a string, you want to partition it into subsequences (not necessarily contiguous) such that each subsequence is a beautiful string.\n\nFor example, for the string ABACBCAACCBB, we can do the following:\n\nAB   CA C B\n  ACB  A C B\n\nThis partitions the string into two subsequences ABCACB and ACBACB, both of which are beautiful strings.\n\nFor the given string, find the minimum number of subsequences you can partition it into such that each subsequence is beautiful. It can be proven that there is always at least one such partition for all possible inputs that satisfy the input constraints.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31521","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAshley and Brandon are playing a game where they roll a six-sided dice four times. Each integer from 1$1$ to 6$6$ is on one face of the dice and all values are equally likely to appear. Each time they roll the dice, they write down the value that shows on the top face of the dice, eventually forming a four-digit integer.\n\nAshley wins if all four digits in the integers are different. Otherwise, Brandon wins.\n\nThe dice has been rolled from 1$1$ to 3$3$ times so far. Compute the number of different ways to roll the remaining times such that Ashley wins, and the number of different ways to roll the remaining dice such that Brandon wins. Two ways are different if the integers formed are different - for example, rolling a 1$1$, then a 2$2$, then a 3$3$, then a 4$4$ forms the integer 1234$1234$, and is different from rolling a 1$1$, then a 2$2$, then a 4$4$, then a 3$3$, which would form the integer 1243$1243$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31438","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t수학2 기말을 망쳐 B0를 받은 한별이는 최근 개방된 KSA 예지관에서 \"사인은 B0\" 노래만 부르고 있다고 한다. \n\n\n\"아나타노 아이도루 사인와 B0!\"\n\n\n한별이는 노래의 박자에 맞춰 (N+1)×(N+1)$(N+1)\\times (N+1)$ 크기의 격자 위에서 댄스를 추기 시작한다.\n\n정수 A$A$, B$B$, C$C$, N$N$이 주어졌을 때, (Ax+By+C)N$(Ax+By+C)^{N}$에서 xiyj$x^{i}y^{j}$의 계수를 Mi,j$M_{i,j}$이라고 하자. 한별이는 처음에 (0,0)$(0,0)$ 칸에서 시작하여 다음에 따라 이동할 수 있다. \n\n\n\t만약 Mi,j+1$M_{i,j+1}$이 Mi,j$M_{i,j}$ 이상인 경우, 한별이는 (i,j)$(i,j)$에서 (i,j+1)$(i,j+1)$으로 이동할 수 있다. \n\t만약 Mi+1,j$M_{i+1,j}$이 Mi,j$M_{i,j}$ 이상인 경우, 한별이는 (i,j)$(i,j)$에서 (i+1,j)$(i+1,j)$으로 이동할 수 있다. \n\n\n이때 움직일 수 있는 최장 경로의 길이를 출력하자. 경로의 길이는 한별이가 움직인 횟수와 같다. \n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31439","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t선형대수학 공부를 하다가 질려버린 KSA 학생들은 아래 문제를 떠올렸다.\n\n정수 N$N$이 주어졌을 때, 다음 조건을 만족하는 수열이 존재하는지 판별하고, 그러한 수열이 존재한다면 그중 아무거나 찾아보자.\n\n\n\t수열은 길이가 N$N$인 순열이다. 즉, 1$1$ 이상 N$N$ 이하의 정수들이 정확히 한 번씩 등장한다.\n\t수열의 모든 길이가 2$2$ 이상인 연속부분수열 S$S$에 대해 max(S)−min(S)$\\max(S) - \\min(S)$의 값은 소수가 아니다.\n\n\n어떤 수열 B$B$의 앞에서부터 0$0$개 이상의 원소를 지우고 뒤에서부터 0$0$개 이상의 원소를 지워서 수열 A$A$를 만들 수 있다면 수열 A$A$를 수열 B$B$의 연속부분수열이라고 부른다.\n\n그러나 KSA 학생들은 소수를 구별할 수 없는 병에 걸려 당신에게 이 문제를 해결해줄 것을 요청했다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31507","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tCharlie is managing a classroom. The seats in the classroom are arranged in a grid with rows and columns. Each student has a distinct height.\n\nA configuration of students to seats is acceptable if the following conditions are met:\n\n\n\tEach student is assigned to exactly one seat.\n\tThe students are seated in increasing order of height from left to right in each row.\n\n\nThe students are initially seated in an acceptable arrangement. Charlie wants to rearrange students into a potentially different acceptable arrangement. To do this, he can swap any two students. However, he wants to ensure that the configuration stays acceptable after each swap.\n\nHelp Charlie devise a strategy to move the students from the original arrangement to his preferred arrangement. You don't need to minimize the number of swaps, but you are limited to at most 104$10^4$ swaps.\n\nIt can be proven that this is always possible for all possible inputs that satisfy the input constraints.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31493","content":"문제\n\nComing back home after triumphally winning your long-coveted trophy, you discover that it was shattered to pieces in your trunk. It just remains to repair it.\n\nYour trophy had the shape of a rectangle of size \n3×N\n$3 \\times N$, for some integer \nN≥1\n$N \\ge 1$, thereby consisting of \n3\n$3$ lines and \nN\n$N$ columns, containing a total of \n3N\n$3N$ unit squares. It was broken into \nK\n$K$ pieces, the \nk\n$k$ th piece being a rectangle of size \nAk×Bk\n$A_k \\times B_k$ for some integers \nAk\n$A_k$ and \nBk\n$B_k$ such that \n1≤Ak≤Bk≤3\n$1 \\le A_k \\le B_k \\le 3$. Such pieces may have been rotated, or even flipped, in the havoc that is your trunk.\n\nAs the first step towards repairing your trophy, you should reassemble them in the form of a rectangle of size \n3×N\n$3 \\times N$. More precisely, you have drawn, on a sheet of paper, a \n3×N\n$3 \\times N$ rectangle on which you will place your \nK\n$K$ pieces, and you need to know, for all integers \ni≤3\n$i \\le 3$ and \nj≤N\n$j \\le N$, which piece will cover the unit square on the \ni\n$i$ th line and \nj\n$j$ th column of your rectangle."},{"problemId":"31544","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t준혁이는 1$1$부터 N$N$까지의 수가 적힌 공을 각각 M$M$개씩 가지고 있다. 그리고 같은 숫자가 적힌 M$M$개의 공들은 모두 색이 다르다. 준혁이는 N$N$의 약수 중 K$K$를 하나 정하고 자신이 가진 N×M$N\\times M$개의 공들 중 한 개 이상의 공을 뽑아 적힌 수의 합이 K$K$의 배수가 되도록 하는 경우의 수를 구하고자 한다.\n\n준혁이가 뽑은 공들 중 하나라도 색깔 혹은 적힌 수가 다르면 다른 경우로 센다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31522","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are running a programming contest that features n$n$ problems of distinct difficulties. You wish to announce ahead of time that the problems are ordered in such a way that, if the problems are divided into k$k$ sections numbered 1$1$ through k$k$, each with exactly nk$\\frac{n}{k}$ problems, and problem p$p$ is assigned to section ⌈kpn⌉$\\left \\lceil \\frac{kp}{n} \\right \\rceil$, then for every pair of sections i$i$ and j$j$ with i<j$i < j$, every problem in section i$i$ is easier than every problem in section j$j$. Note that k$k$ must be greater than 1$1$ and be a factor of n$n$.\n\nHowever, you have just sent your problems to the printer so the order cannot be changed. For what values of k$k$ would this claim be true?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31508","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe International Consortium of Popular Candies (ICPC) is hosting a prestigious candy festival for candy lovers worldwide. The consortium has asked n$n$ candy factories to produce candies for the event. Each of the n$n$ factories has produced some quantity of a unique type of candy.\n\nPacks of candies will be given to the participants at the festival. A candy pack must consist of exactly k$k$ candies of different types. Two candy packs may contain different sets of k$k$ candies.\n\nThere may be unavoidably some leftover candies given the quantities of candies that the n$n$ factories have already produced. The ICPC does not want to waste any of the candies produced, and is willing to create extra packs of candy to ensure this. The ICPC can order any of the n$n$ factories to produce additional candies. What is the minimum quantity of additional candies that must be ordered, so that there will be no leftover candies after packing?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31494","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe opening ceremony for the Olympic Games will take place on the river with teams on boats. The layout of the athletes on top of the boat has been designed in a very specific way: for each team, the N$N$ athletes (conveniently numbered from 1$1$ to N$N$) are arranged as a binary tree.\n\nThe organiser has also designed the pre-order traversal, post-order traversal, and a (possibly empty) consecutive part of the in-order traversal of the binary tree that each team must follow.\n\nNow, to make sure there are enough tree layouts so that each team can have a distinct one, you are asked to calculate the quantity of different possible in-order traversals, say T$T$, modulo the prime number 999999937$999\\, 999\\, 937$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31545","content":"문제\n\n하늘이는 최근 입대하였다. 하늘이의 선임은 하늘이가 사회에서 코딩하다 온 것을 알고, 하늘이에게 다음과 같이 ”최소 스패닝 트리 다시 그리기 놀이”를 알려 주었다.\n\n먼저 선임이 후임에게 무향 연결 그래프 \nG\n$G$를 준다. 이때, \nG\n$G$를 구성하는 간선의 가중치는 모두 \n106\n$10^6$이하의 양의 정수이다.\n후임은 \nG\n$G$에서 그릴 수 있는 서로 다른 최소 스패닝 트리 중 동일한 확률로 최소 스패닝 트리 \nT\n$T$를 하나 고른다.\n선임은 \n1\n$1$부터 \n106\n$10^6$까지 차례대로 각각 독립적으로, 정수 \nx\n$x$를 \n1x\n$\\frac{1}{x}$의 확률로 후임에게 말한다. 즉, \n1\n$1$은 반드시 말하므로, 최소 \n1\n$1$개 이상 \n106\n$10^6$개 이하의 수를 말한다.\n후임은 선임이 \nx\n$x$를 말하면 \nT\n$T$에서 가중치가 \nx\n$x$인 간선을 모두 지운다. \nT\n$T$에서 간선들이 지워진 상태를 \nT′\n$T^\\prime$이라고 하자.\n후임은 \nT′\n$T^\\prime$에, 원래 그래프 \nG\n$G$에 있는 간선을 \n0\n$0$개 이상 추가하여 다시 \nG\n$G$의 최소 스패닝 트리를 만든다.\n\n하늘이는 이 놀이를 듣고, 새로 그릴 수 있는 최소 스패닝 트리의 개수가 몇 개인지 궁금해졌다. 선임이 후임에게 주는 그래프 \nG\n$G$가 주어졌을 때, ”최소 스패닝 트리 다시 그리기 놀이”를 통해 그릴 수 있는 최소 스패닝 트리의 개수의 기댓값을 구해보자."},{"problemId":"31509","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIt's final exam season and Ashley is heading to her favorite library to cram for finals.\n\nThe library has a dedicated floor for studying where there are r$r$ rows of c$c$ tables evenly spaced. Each table only has room for one student, and some students have already arrived and claimed their favorite tables.\n\nBecause the floor is usually very quiet, it is possible to hear sounds from other students who are nearby -- for example, frustrated typing on a laptop keyboard or nervous leg shaking. Specifically, if one student is studying at the table in row i1$i_1$ and column j1$j_1$, and another student is studying at the table in row i2$i_2$ and column j2$j_2$, it is possible for the two students to hear sounds from each other if and only if (i1−i2)2+(j1−j2)2≤d$\\sqrt{(i_1 - i_2)^2 + (j_1 - j_2)^2} \\le d$.\n\nWith this, Ashley wants to find an empty table where she can hear as few other students as possible. Compute the minimum number of students that Ashley can hear if she selects her table optimally.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31523","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are given a tree where each node is annotated with a character from ()[]{}. A path is a sequence of one or more nodes where no node is repeated and every pair of adjacent nodes is connected with an edge. A path is balanced if the characters at each node, when concatenated, form a balanced string. A string is balanced if it satisfies the following definition:\n\n\n\tAn empty string is balanced.\n\tIf s$s$ is a balanced string, then ( s$s$ ), [ s$s$ ], and { s$s$} are balanced strings.\n\tif a$a$ and b$b$ are balanced strings, then ab$ab$ (a$a$ concatenated with b$b$) is a balanced string.\n\n\nCompute the number of balanced paths over the entire tree.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31495","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t토카는 문자열을 출력하는 파이썬 코드를 작성하는 것에 자신감이 있었다. 어느 날 Hello, World!를 출력해달라는 요청을 받은 토카는 자신있게 코드를 작성했지만, 큰따옴표를 찍지 않는 치명적인 실수로 인해 컴파일 에러를 받고 말았다!!\n\n\n\n컴파일 에러를 받은 토카의 코드\n\n토카는 이로 인해 자신감을 잃어버려 문자열 출력을 멀리하고 있다. 당신은 토카의 자신감을 회복시켜 주기 위해 문자열을 입력받았을 때 정확한 문자열인지 판독하는 프로그램을 작성하고자 한다. 정확한 문자열은 문자열의 시작과 끝이 큰따옴표로 이루어져 있으며 큰따옴표를 제외한 문자가 포함되어 있는 문자열을 뜻하는 말로, 대표적으로는 \"Hello, World!\"가 있다. 즉, 큰따옴표로 시작하지 않거나 끝나지 않은 Dijkstra나 A\"b등의 문자열은 정확한 문자열이 아니다. 이제 토카의 문자열이 정확한 문자열인지 판독하는 코드를 작성하여 보자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31546","content":"문제\n\n이 문제는 재우의 재수강 1과 굵은 글씨로 적힌 부분과 제한 조건만 다릅니다.\n\n재우는 제2회 MatKor Cup에서 수영 과목의 F를 막지 못해 결국 재수강을 하게 되었다. 재우는 이번 학기에는 성실히 수영 수업에 임했고, 이제 최종 평가만을 남겨두었다. 최종 평가는 다음과 같이 진행된다.\n\n먼저 수영장을 2차원 좌표계로 표현할 수 있다. 수영장은 왼쪽 아래의 점을 \n(0,0)\n$(0,0)$, 오른쪽 위의 점을 \n(w,h)\n$(w,h)$로 하는 각 변이 \nx\n$x$축 혹은 \ny\n$y$축과 평행한 직사각형이다. 여기서 “수영 가능 영역”이란 직사각형의 네 변과 그 변들로 둘러싸인 영역을 의미한다.\n\n수영장에는 \nn\n$n$개의 레인이 있고, 각 레인은 \nx\n$x$축과 평행한 선으로 구분되어 있다. 구체적으로, \n0=a0<a1<a2<⋯<an=h\n$0=a_0<a_1<a_2<\\cdots <a_n=h$일 때, \ni\n$i$번째 레인은 \nai−1≤y<ai\n$a_{i-1}\\le y<a_{i}$인 구간이다. 단, 마지막인 \nn\n$n$번째 레인은 \nan−1≤y≤an\n$a_{n-1}\\le y\\le a_n$인 구간으로 정의한다.\n\n이 수영장은 최첨단 시스템이 적용되어, 레인별로 물의 밀도가 다르다. 따라서 재우가 이동하는 속도는 어떤 레인에서 수영하느냐에 따라 달라진다. 구체적으로 \ni\n$i$번째 레인의 물의 밀도가 \npi\n$p_i$일때, 재우는 \n1\n$1$만큼을 이동하는 데 \npi\n$p_i$초가 소요된다. 이때, \nx\n$x$축에서 먼 레인일수록 물의 밀도는 감소한다. 즉, \np1>p2>⋯>pn\n$p_1>p_2>\\cdots >p_n$을 만족한다.\n\n재우는 최종 평가를 진행할 때 \n(0,0)\n$(0,0)$에서 출발해 수영 가능 영역에서 수영을 통해서만 이동하여 도착점에 도착해야 한다. 도착점은 \n(w,d)\n$(w,d)$로 수영장의 오른쪽 세로 변 위에 있다. 재우는 출발점에서 출발해서 도착점에 도착할 때까지 걸리는 최단 시간을 알고 싶다.\n\n재우는 수영 가능 영역에서 자유롭게 이동할 수 있다고 할 때, 답을 구해보자."},{"problemId":"31510","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tEddy is planning a cross-country trip across n$n$ different cities. There are n−1$n-1$ roads connecting the cities. Each road connects two cities and is bidirectional. The roads are laid out such that it is possible to travel between any two cities using only roads.\n\nEddy wants to plan a trip so that he visits each city exactly once. He may start or end at any city. It might not be possible to visit each city exactly once using only roads. Luckily, Eddy can take a flight between any two cities that aren't directly connected by a road. Eddy would like to take exactly k$k$ flights during his trip.\n\nHelp Eddy plan his trip.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31496","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t게임 \"마인크래프트\"를 하고 있던 토카와 그의 친구 돌돌이는 집을 짓기 위해 나무를 찾아다녔다. 돌돌이는 특히 바닥의 재질로 자작나무 목재를 사용하고 싶어서 이를 찾아다녔으나, 슬프게도 정글 지형 한복판에서 게임이 시작되었기에 한참을 돌아다녀도 자작나무를 찾을 수 없었다. 힘든 탐험에 지친 돌돌이는 집으로 겨우 귀환하여 주변의 정찰 결과를 짤막하게 읊조렸다.\n\n\n\"음⋯ 자작나무가 없소~\"\n\n\n그러자 마법처럼 이름에 자작나무를 뜻하는 단어 S$S$를 포함하는 게임의 아이템들이 전부 게임 속에서 삭제되어 버렸다. 토카와 돌돌이는 게임의 아이템이 몇 개 없어도 게임을 충분히 할 수 있었지만, 이윽고 상자 속에 있던 아이템 N$N$개 중 일부의 이름에 자작나무가 포함되었다는 사실을 깨달았다. 다행히 아이템들을 잘 분류해 놓아서 쉽게 외울 수 있던 돌돌이는 상자 속 아이템의 이름과 수량을 기억하고 있었다. 이를 바탕으로 삭제된 아이템의 총 수량이 몇 개인지 구해보자.\n\n단어란 영어 소문자로만 이루어진 문자열을 말한다. 아이템 이름은 한 개 이상의 단어로 이루어져 있고, 단어와 단어는 구분자 _로 구분된다. 아이템 이름이 단어 S$S$를 포함한다는 것은, 아이템 이름을 이루는 단어들 중에 S$S$와 일치하는 단어가 있다는 뜻이다. 예를 들어 단어 S$S$가 stone일 때, stone_axe에는 S$S$가 포함되고, cobblestone에는 S$S$가 포함되지 않는다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31524","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tImagine you are holding an n×n×n$n \\times n \\times n$ cube, which is split up into n3$n^3$ smaller cubes labeled from 1 to n3$n^3$. The orientation of the axes is left-to-right for the x$x$-axis, back-to-front for the y$y$-axis, and bottom-to-top for the z$z$-axis. For example, a 2×2×2$2 \\times 2 \\times 2$ cube is labeled as such:\n\nBottom layer (z=1$z=1$):\n\n1 2 \n3 4\n\nTop layer (z=2$z=2$):\n\n5 6 \n7 8\n\n\nIn the context of a 2×2×2$2 \\times 2 \\times 2$ cube:\n\n\n\tCube 1 is at (1, 1, 1).\n\tCube 2 is at (2, 1, 1).\n\tCube 3 is at (1, 2, 1).\n\tCube 5 is at (1, 1, 2).\n\n\nEach time you rotate the cube at slice k$k$ along one of the x$x$-, y$y$-, and z$z$- axes, you are rotating the (k+1)$(k+1)$th layer along the corresponding axis, as well as all the layers after k$k$ in the increasing direction of that axis.\n\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31547","content":"문제\n\n우”영”이와 현”철”이는 영철버거 돈 마리네 세트를 걸고 내기를 한다. 현철이는 제2회 MatKor Cup의 DAGame에서 다음과 같은 게임을 만들었다.\n\n \nN\n$N$개의 노드와 \nM\n$M$개의 간선으로 이루어진 DAG(사이클이 없는 방향 그래프)가 있다. \nK\n$K$개의 말이 각각 노드 중 하나에 놓여 있다. 모든 노드마다 놓을 수 있는 말의 개수에는 제한이 없으며, 각각의 말은 색깔을 가지고 있다. 또한, 각 노드는 \n0\n$0$번부터 \nN−1\n$N-1$번의 번호를 가지며, 각 색깔은 \n0\n$0$ 이상 \n32\n$32$ 미만의 정수로 표현된다. 모든 색깔에 대하여 특정 색깔을 가진 말은 최대 두 개뿐이다. 우영이부터 차례를 번갈아 가며 다음 행동을 취한다.\n\n한 개의 말을 선택하여 그래프 상에서 나가는 방향의 간선을 골라 다음 노드로 옮긴다.\n같은 색깔의 말이 같은 노드에 존재하는 순간 서로 업혀 다음 이동부터 같이 움직이게 되고, 색이 다른 말끼리는 항상 영향을 주지 않는다.\n\n게임 시작 전부터 말이 업히는 경우가 존재할 수도 있다. 자신의 차례에 더 이상 행동을 할 수 없는 사람이 지게 된다.\n\n이 내기가 고려대학교의 명물이 되자, 영철버거를 찾는 손님들이 누가 이길지를 두고 내기를 하기 시작했다. 하지만 언제나 정답을 예측할 수 있으므로 불공평하다는 단점이 있었다.\n\n이를 알게 된 현철이는 제3회 MatKor Cup의 DAGame Extreme에서 각 말의 위치를 색깔에 따라 다른 암호를 사용하여 암호화하였다. 하지만 본인이 만든 암호를 우영이가 너무나 쉽게 풀어버려 더 복잡하게 바꾸었다.\n\n현철이는 이번에도 각 말의 위치를 색깔에 따라 다른 암호를 사용하여 암호화하였으며, 색깔 \nc\n$c$에 대응하는 암호는 \nH0(c)\n$H_0(c)$와 \nH1(c)\n$H_1(c)$을 통해 표현할 수 있다. 여기서 \nH0(c)\n$H_0(c)$와 \nH1(c)\n$H_1(c)$는 각각 \n32\n$32$ 미만의 음이 아닌 정수로 이루어진 길이 \n256\n$256$의 배열이며, 각각의 \ni\n$i$번째 원소를 \nH0(c)[i]\n$H_0(c)[i]$, \nH1(c)[i]\n$H_1(c)[i]$로 표현한다. 또한 암호를 정하기 위해 정해진 \nA\n$A$가 필요한데, \nA\n$A$는 \n256\n$256$행 \n32\n$32$열(각각 \n0\n$0$행, \n0\n$0$열 부터 시작한다)의 정수 배열로, \ni\n$i$번째 행 \nAi\n$A_i$는 각각 \n0\n$0$ 이상 \n32\n$32$ 미만의 정수로 이루어진 순열(모든 원소가 정확하게 \n1\n$1$번 존재하는 배열)이다. 여기서 \nAi\n$A_i$의 \nj\n$j$열 원소를 \nAi[j]\n$A_i[j]$라고 한다.\n\n현철이는 어떤 순열을 이용하여 암호화할지 고를 수 있는데, 어떤 말의 위치가 \nv\n$v$, 색깔이 \nc\n$c$일 때, 이 정보를 \ni\n$i$번째 순열을 이용해 암호화하면, \nEi(v,c)=Ai[v⊕H0(c)[i]]⊕H1(c)[i]\n$E_i(v,c) =A_i[v\\oplus H_0(c)[i]]\\oplus H_1(c)[i]$의 식을 통해 암호화된다. 여기서 \n⊕\n$\\oplus$는 비트 단위 XOR 연산자이다.\n\n또한 현철이는 연속된 여러 개의 순열을 통해 암호화를 여러 번 할 수 있다. 이 경우 이전 순열을 통해 암호화한 결과를 다음 순열을 통한 암호화의 입력으로 사용한다. 즉, 최종적으로 \nt\n$t$번째 말이 \nvt\n$v_t$번 정점에 있고, \nct\n$c_t$번 색을 가질 때, 이 정보를 \ni\n$i$번 순열부터 \nj(≥i)\n$j(\\ge i)$번 순열까지를 활용하여 암호화하면 \nE[t]=Ej(Ej−1(⋯(Ei+1(Ei(vt,ct),ct),ct),⋯),ct)\n$E[t] =E_j\\left( E_{j-1}\\left( \\cdots\\left( E_{i+1}\\left( E_i\\left( v_t,c_t \\right),c_t \\right),c_t\\right),\\cdots\\right),c_t \\right)$의 정수가 나오게 된다.\n\n현철이는 게임 하나가 주어지면, 암호화에 사용할 연속한 순열들을 정한 뒤, 모든 말에 대해 같은 순열을 적용하여 암호화한다.\n\n현철이는 초기 말의 상태를 보고 이를 암호화한다. 이후 선공인 우영이에게 게임을 플레이할 DAG, 각 말들의 색과 암호화된 정보를 알려준다. 우영이는 현철이의 컴퓨터를 해킹해 암호문에 사용하는 순열들의 정보를 알아냈다. 또한 현철이가 해킹에 대비하여 매 게임을 시작하기 전, \n256\n$256$개의 순열 \nAi\n$A_i$들 중 하나를 골라 다른 순열로 업데이트한다는 것을 알아내었으며, 어떤 순열을 바꾸는지도 알아내었다. 또한 현철이가 \nAi\n$A_i$ 중 하나를 업데이트하면, 현철이의 최첨단 암호화 시스템은 전 자동으로 \nH0\n$H_0$와 \nH1\n$H_1$의 모든 배열을 무작위로 다시 설정한다. 그러나, \nH\n$H$에 대한 정보는 알아내지 못하였다. 이때 현철이가 매 게임이 시작하기 전 업데이트한 정보는 이후 게임에도 계속 유지된다.\n\n우영이는 이 정보를 통해 두 명 모두 최선의 전략으로 게임을 했을 때, 선공인 자신이 이길 확률을 구하고자 한다. 우영이가 이길 확률은 다음과 같이 정해진다.\n\nDAG와 게임의 말들의 색이 정해졌을 때, 각 말이 각 칸에 위치할 확률은 동일하며, 말의 위치는 서로 독립적으로 정해진다고 하자. 즉, 말의 초기 상태에 대한 총 \nNK\n$N^K$ 가지의 초기 상태에 대해 확률이 모두 같다고 하자.\n암호문을 결정하는 \nH0\n$H_0$, \nH1\n$H_1$에 대하여, 총 \n32\n$32$가지의 색깔에 대해 독립적으로, \nH0\n$H_0$, \nH1\n$H_1$ 각각 \n256\n$256$개의 \n32\n$32$미만의 음이 아닌 정수를 정할 확률이 같다고 가정하자. 즉, 색 하나당 \nH0\n$H_0$, \nH1\n$H_1$이 각각 \n32256=21280\n$32^{256}=2^{1280}$ 가지 경우의 수를 가지며, 즉, 총 \n((21280)2)32=281920\n$\\left( \\left( 2^{1280} \\right)^2 \\right)^{32}=2^{81920}$가지의 \nH\n$H$에 대해 확률이 모두 같다고 하자.\n\n즉, 총 \n281920NK\n$2^{81920}N^K$가지의 경우의 수 중 주어진 암호문을 만들어 내는 경우의 수를 \nX\n$X$, 이 중 두 사람 모두 최선의 플레이를 할 때, 우영이가 이기는 경우의 수를 \nY\n$Y$라고 할 때, \nYX\n$\\frac{Y}{X}$을 우영이가 이길 확률이라 한다.\n\n이제 우영이와 현철이는 이 게임을 총 \nQ\n$Q$번 할 것이다. 각 게임마다 우영이가 이길 확률을 구해보자."},{"problemId":"31497","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이 문제는 인터랙티브 문제이다.\n\n지문을 쓰기 시작한 12월 22일은 dbrua1222의 생일이다! 아무도 자신의 생일을 몰라 슬퍼진 dbrua1222는, 인터랙터에게 오늘 생일인 사람의 이름을 1$1$개 알려주었다. 하지만 이 인터랙터는 결함이 있어 최대 한 번, 오늘이 생일인 사람을 오늘이 생일이 아니라고 거짓말할 수 있다.\n\n이제 인터랙터로부터 오늘 생일인 사람이 누구인지 알아내 보자!\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31511","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are browsing a website that lists items for sale. The website has a paging UI that displays a fixed number of items per page, one page at a time.\n\nFor example, if there are 55$55$ items and the page displays exactly 20$20$ at a time, then there are 3$3$ pages in total. Items 1$1$ through 20$20$ are on page 1$1$, items 21$21$ through 40$40$ are on page 2$2$, and items 41$41$ through 55$55$ are on page 3$3$. \n\nYou may navigate and select items using these UI elements:\n\n\n\tA checkbox for every item on the current page.  After you click a checkbox, a selected item becomes unselected, and an unselected item becomes selected. You cannot click a checkbox for an item that is not on the current page.\n\tA \"Select All\" button. All unselected items on the current page become selected after you click this button.\n\tA \"Deselect All\" button. All selected items on the current page become unselected after you click this button.\n\tA \"Next Page\" button. Clicking it navigates to the next page and increments the current page number by one. This button is disabled on the last page.\n\tA \"Previous Page\" button. Clicking it navigates to the previous page and decrements the current page number by one. This button is disabled on the first page.\n\n\nThe website has pre-selected some items for you based on its machine learning recommendation algorithm. The recommendation may or may not work for you. You know exactly the items that you want to purchase, which may differ from the pre-selected items. What is the minimum number of checkbox and button clicks required to select exactly the items you actually want?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31560","content":"문제\n\nFarmer John has \nN\n$N$ (\n1≤N≤2⋅105\n$1\\le N\\le 2\\cdot 10^5$) patches of grass in a line, where patch \ni\n$i$ has a level of bacteria that differs by \nai\n$a_i$ from that of healthy grass (\n−1015≤ai≤1015\n$-10^{15}\\le a_i \\le 10^{15}$). For example, if \nai=−3\n$a_i = -3$, then patch \ni\n$i$ has a level of bacteria 3 lower than normal, and would need exactly 3 additional units of bacteria added to raise it to the point where it is considered healthy.\n\nFarmer John wants to ensure every patch of grass is corrected to have a healthy level of bacteria. Conveniently, he owns two brands of pesticide that he can spray on his field, one that adds bacteria and one that removes bacteria. When Farmer John sprays either type of pesticide, he stands in patch \nN\n$N$ (the rightmost patch) and selects a power level \nL\n$L$ for his sprayer (\n1≤L≤N\n$1 \\leq L \\leq N$).\n\nThe sprayer has the most impact on patches near Farmer John, with diminishing effect farther away. If Farmer John chooses the pesticide that adds bacteria, then \nL\n$L$ units of bacteria will be added to patch \nN\n$N$, \nL−1\n$L-1$ units to patch \nN−1\n$N-1$, \nL−2\n$L-2$ units to patch \nN−2\n$N-2$, and so on. Patches \n1…N−L\n$1 \\ldots N-L$ will receive no bacteria, since the sprayer isn't set to a level powerful enough to reach them. Similarly, if Farmer John chooses the pesticide that removes bacteria, then \nL\n$L$ units of bacteria will be removed from patch \nN\n$N$, \nL−1\n$L-1$ units will be removed from patch \nN−1\n$N-1$, and so on. Again, patches \n1…N−L\n$1 \\ldots N-L$ will be unaffected.\n\nFind the minimum number of times Farmer John has to apply his sprayer such that every patch of grass has the recommended value of bacteria for healthy grass. It is guaranteed that the answer is at most \n109\n$10^9$.\n\nNote that the large size of integers involved in this problem may require the use of 64-bit integer data types (e.g., a \"long long\" in C/C++)."},{"problemId":"31498","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t장난기 많은 도발꾼 토카는 오늘도 친구인 돌돌이를 도발하고 말았다. 돌돌이는 도발에 넘어갔고, 죽일 듯이 토카를 쫓아오기 시작했다! 토카는 돌돌이로부터 무사히 도망치기 위해 집까지 돌아가 문을 잠가야 한다. 토카는 집과 A$A$만큼 떨어진 곳에 있고, 돌돌이는 토카와 같은 방향으로 집과 A+C$A + C$만큼 떨어져 있다. 집, 토카, 돌돌이는 직선상에 놓여있다.\n\n토카는 집을 향해 사력을 다하여 이동하고, 한 번 이동할 때 B$B$만큼 이동한다. 하지만 토카는 체력이 좋지 않기 때문에, 한 번 이동하고 난 뒤 이동할 수 있는 거리가 K$K$씩 줄어든다. 만약 토카의 이동할 수 있는 거리가 0$0$ 이하가 되면, 토카는 그 자리에서 움직이지 못하게 된다.\n\n돌돌이는 토카를 잡으러 한 번 이동할 때 D$D$만큼 이동한다. 매 이동에 걸리는 시간은 같고, 둘의 이동은 동시에 일어난다. 만약 한 번의 이동이 끝났을 때 돌돌이가 토카와 같은 위치에 있거나, 둘이 동시에 집에 도착하거나, 돌돌이가 토카를 앞지른 경우에만 토카는 돌돌이에게 잡힌 것이 된다. 단, 이동하기 시작할 때 같은 위치에 있는 경우는 잡힌 것으로 보지 않는다. 토카가 잡히거나 집에 도착하기 전까지 둘은 이동을 멈추지 않으며, 잡히지 않고 집에 먼저 도착하면 토카는 문을 잠글 수 있다. 토카와 돌돌이는 이동할 때 집을 향해 곧장 직선으로 이동한다.\n\n이를 지켜보던 당신은 문득 토카가 잡히지 않고 집에 도착하여 목숨을 구할 수 있을지 궁금해졌다. 토카가 무사히 집에 도착할 수 있는지 구해보도록 하자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31499","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t N$N$개의 서로 다른 양의 정수로 구성된 수열 A$A$가 있다. 이 수열을 오름차순으로 정렬한 수열을 B$B$라 하자. 그리고 B$B$에 의해 결정되는 길이 N$N$의 수열 C$C$를 다음과 같이 정의한다.\n\n ci={bbiif 1≤bi≤N0otherwise$$c_i =     \\begin{cases}      {b_{b_{i}}} & \\text{if }{1 \\le b_i \\le N}\\\\      {0} & \\text{otherwise}\\\\    \\end{cases}$$ \n\n여기서 1≤i≤N$1 \\le i \\le N$인 모든 i$i$에 대해, bi$b_i$는 B$B$의 i$i$번째 원소를, ci$c_i$는 C$C$의 i$i$번째 원소를 나타낸다.\n\n이때, B=C$B = C$가 되도록 하는 수열 A$A$를 프랙탈 수열이라고 하자. N$N$과 M$M$이 주어졌을 때, 길이가 N$N$인 서로 다른 프랙탈 수열의 개수를 M$M$으로 나눈 나머지를 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31548","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t곧 국방의 의무를 다할 하늘이를 위해 MatKor 부원 M$M$명이 N$N$개의 전구를 이용하는 공연을 계획하고 있다. 전구는 1$1$번부터 N$N$번까지 번호가 있고, 부원도 1$1$번부터 M$M$번까지 번호가 있다. 각 전구는 꺼짐, 어둡게 켜짐, 밝게 켜짐 세 가지 상태 중 하나이다.\n\n\n\n전구마다 아래와 같은 스위치를 조작해 상태를 바꿀 수 있다. 꺼짐, 어둡게 켜짐, 밝게 켜짐 각각의 상태에서 스위치를 왼쪽으로 돌리면 밝게 켜짐, 꺼짐, 어둡게 켜짐의 상태가 되며, 꺼짐, 어둡게 켜짐, 밝게 켜짐 각각의 상태에서 스위치를 오른쪽으로 돌리면 어둡게 켜짐, 밝게 켜짐, 꺼짐이 된다.\n\n\n\n각 부원들은 자신의 순서에 각자 정해진 행동을 한다. 여기서 정해진 행동이란 부원마다 0$0$개 이상의 정해진 전구에 대해 스위치를 각각 정해진 방향으로 한 번씩 돌리는 것을 의미한다. 각 부원마다 조작할 스위치는 정해져 있으며, 각 부원이 전구마다 스위치를 돌리는 방향도 정해져 있다. 한 부원이 한 전구의 스위치를 여러 번 조작하는 경우는 없다.\n\n처음에 전구는 모두 꺼짐 상태이다. 이제 1$1$초마다 한 명씩 부원을 배정해 총 K$K$초 동안 공연을 진행할 것이다. 부원들은 순서대로 자신의 차례에 자신에게 정해진 행동을 한다. K$K$초가 지난 후 다시 전구가 모두 꺼짐 상태가 되도록 부원을 배정하는 방법의 수를 구해보자. 한 부원이 여러 번 배정되어도 되며, 한 번도 배정되지 않아도 된다. 순서가 다른 경우는 다른 경우로 센다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31512","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tFor the purposes of this problem: A matrix is a binary matrix if all its entries are 0$0$ or 1$1$. A matrix is a banded binary matrix if its rows and columns satisfy the following properties:\n\n\n\tEvery row has at least one 1$1$.\n\tEvery column has at least one 1$1$.\n\tAll 1$1$s in each row are contiguous.\n\tFor row i$i$, if si$s_i$ is the leftmost column that has a 1$1$ entry and ti$t_i$ is the rightmost column that has a 1$1$ entry, then it must satisfy si≥si−1$s_i \\ge s_{i-1}$ and ti≥ti−1$t_i \\ge t_{i-1}$ for i>1$i > 1$.\n\n\nDetecting banded binary matrices is an important method used in various fields like biology, paleontology, and linguistics to unearth clusters in data sets. Unfortunately, a group called the Immoral Cartel of Pure Cozeners (ICPC) has decided to do the unthinkable: manipulate data! The ICPC wishes to present their groundbreaking scientific results, but the scientific community will not take their results seriously because their matrices may not be banded. To have publishable results, they want to toggle some cells such that their data is a banded binary matrix.\n\nThe ICPC gives you its raw data, represented as a binary matrix. They want to toggle some cells (meaning, change a 0$0$ to a 1$1$ or a 1$1$ to a 0$0$) so that the resulting matrix is a banded binary matrix, as defined above. What is the fewest number of toggles needed to turn the given matrix into a banded binary matrix?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31561","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t근성은 공대 7호관 옆 카페에서 자바칩 프라푸치노를 주문하려다 문득 생각이 나 카페 직원에게 물어보았다.\n\n\nc++칩 프라푸치노는 없나요?\n\n\n근성의 황당한 질문을 들은 카페 직원은 화가 나서 근성을 바로 앞에 있는 시계탑 분침에 묶어버렸다.\n\n그러자 시계탑의 분침이 근성의 무게로 인해 이상하게 돌아가기 시작했다. 분침은 정확히 다음 순서를 매시간 반복한다.\n\n\n\t매시간 정각에 분침은 12시 방향을 가리킨다.\n\t매시간 정각부터 15분까지 분침은 시계 방향으로 정상적인 분침의 회전 속도의 2$2$배로 움직인다. 즉, 15$15$분 간 분침은 12시 방향에서 시계 방향으로 6시 방향까지 움직인다.\n\t매시간 15분에 분침은 6시 방향을 가리킨다.\n\t매시간 15분부터 다음 시간 정각까지 분침은 시계 방향으로 정상적인 분침의 회전 속도의 23$\\frac{2}{3}$배로 움직인다. 즉, 45$45$분 간 분침은 6시 방향에서 시계 방향으로 12시 방향까지 움직인다.\n\n\n\n\n정상적인 시계탑의 분침은 매시간 정각에 정확히 12시 방향을 가리키며, 1$1$시간에 한 바퀴를 시계 방향으로 일정한 회전 속도로 움직인다.\n\n바뀐 시계탑의 시침은 정상적인 시계탑과 똑같이 돌아가기 때문에 문제가 없었으나, 사람들은 지금이 몇 분인지 헷갈리기 시작했다.\n\n바뀐 시계탑을 보고 올바른 시각을 구해 사람들에게 알려주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31513","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAn IT company has formed an on-call team of software engineers who will manage their backend services and make sure that these services run without interruption. When services go down, for each service that is down the on-call team must dispatch one member who is familiar with that service to take care of its issue. One team member can handle at most one service at a time. The company wants to evaluate the robustness level of the on-call team, which is defined as the maximum value k$k$ such that any k$k$ services that go down simultaneously can be handled by the on-call team.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31262","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tЗа първия учебен ден Светла получила подарък раница със секретна ключалка. За да си отвори раницата, тя трябвало да въведе правилно паролата за ключалката. Паролата се състои от 6 (шест) символа - 3 (три) цифри и 3 (три) главни латински букви, като вторият, четвъртият и шестият символи са цифри, а първият, третият и петият символи - главни латински букви. Цифрите, които участват в паролата, са подредени от голямо към малко число, а буквите – в реда, в който са в латинската азбука.\n\nЗа нещастие, Светла запомнила цифрите и буквите, които образуват паролата, но забравила в каква последователност са. Сега тя се нуждае от вашата помощ, за да си отвори раницата.\n\nНапишете програма gift, която намира паролата за отключване на раницата.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31514","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are editing a list of spreadsheet cells. Initially all cells are empty. You can perform two types of operations:\n\n\n\tSelect a consecutive range of cells and change their values to a positive integer of your choice. All these cells get the same value after this operation.\n\tSelect a consecutive range of cells and delete their values. All these cells become empty after this operation.\n\n\nGiven the final cell values that you would like to have in the spreadsheet, calculate the minimum number of editing operations required to obtain those values.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31515","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou're given some points, paired with an equal number of line segments. All points are strictly above the x-axis. Each line segment lies completely on the x-axis. None of the line segments share any common points.\n\nYou would like to draw some new line segments -- one for each given point/line segment pair. The ith$i^{\\text{th}}$ drawn segment must connect point i$i$ to its corresponding line segment i$i$. The correspondence between point i$i$ and line segment i$i$ is fixed, you cannot rearrange which point connects to which line segment.\n\nNo two drawn segments may strictly intersect, but it is allowed to have one drawn segment touching another drawn segment at an endpoint.\n\nYou would like to find the minimum total length of all drawn segments, or determine that it is impossible to draw such segments.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31525","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYour running club has some serious runners and some casual runners. You schedule several training runs with a mixture of serious runners and casual runners. Serious runners run at a faster pace than casual runners, and will leave them behind.\n\nYou want all the runners to become serious runners, so when you schedule training runs, you carefully choose the number of serious and casual runners who will participate. You know that when there are x$x$ serious runners and y$y$ casual runners in a training run, if xx+y$\\frac{x}{x+y}$ is greater than or equal to a threshold ab$\\frac{a}{b}$, then after the run, all y$y$ casual runners, feeling the pressure to keep up with the serious runners become serious runners moving forward.\n\nCompute the minimum number of training runs you need to convert all members of the club into serious runners.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31264","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t성현이네 부대의 24-1분기 사격 훈련이 시작되었다!\n\n성현이네 부대의 사격 훈련장에는 N$N$개의 표적이 있으며, 그중 i$i$번째 표적의 점수는 si$s_i$이다. 점수가 si$s_i$인 표적을 맞히기 위해선 사격 실력이 최소 si$s_i$ 이상이어야 한다. 만약 해당 표적을 성공적으로 맞혔다면, 표적의 점수만큼 사격 점수를 획득하며 사격 실력도 동일한 만큼 증가한다.\n\n이번 사격 훈련에서는 최대 M$M$번 사격할 수 있으며, 성현이가 진급에 성공하기 위해서는 획득한 사격 점수의 총합이 A$A$점 이상이어야 한다.\n\n사격 훈련을 시작하기 전 초기 사격 점수는 0$0$점이다. 성현이는 항상 자신이 맞힐 수 있는 표적 중 얻을 수 있는 사격 점수가 가장 높은 표적을 맞히며, 동일한 표적을 여러 번 맞히는 것도 가능하다.\n\n진급이 절실했던 성현이는 사격 훈련이 시작하기 전 초기 사격 실력이 어느 정도여야 진급에 성공할 수 있을지 궁금해하고 있다. 성현이를 위해, 진급에 성공하기 위한 초기 사격 실력의 최솟값을 구해주자. 항상 진급에 성공할 수 있는 경우만 입력으로 주어진다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31526","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tEddy is planning his garden, which can be represented as a grid. He wants his garden to have exactly one plant in each column. To make sure that plants do not compete for resources, if two plants are in adjacent columns, they must be in different rows.\n\nCompute the number of different ways he can place plants in his garden to respect the above conditions. Two ways are different if one square has a plant in one arrangement but does not have a plant in the other. Because the number of ways may be large, output the number of ways modulo 998244353$998\\,244\\,353$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31562","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t윤수와 정환은 「전주 듣고 노래 맞히기」라는 게임을 할 예정이다. 「전주 듣고 노래 맞히기」는 주어진 노래의 전주를 듣고 먼저 제목을 맞히는 사람이 점수를 얻어 최종적으로 점수가 더 많은 사람이 이기는 게임이다. 절대 음감을 가진 윤수는 노래의 첫 네 음만 듣고도 어떤 노래든 바로 맞힐 수 있다. 따라서, 정환은 윤수를 이기기 위해 첫 세 음만으로 노래를 맞히게 해주는 프로그램을 만들려고 한다. 우선 정환이 알고 있는 노래 제목, 음이름 등을 데이터로 만든 뒤 프로그램을 구현하기 시작했다. 예를 들어, 다음은 TwinkleStar(반짝반짝 작은 별)의 악보 중 일부이다.\n\n\n\n위 악보를 박자와 관계없이 음이름으로 표현하면 CCGGAAG가 된다.\n\n윤수를 이기기 위해서는 이 프로그램이 첫 세 음인 CCG만으로 노래 제목인 TwinkleStar를 출력할 수 있어야 한다. 또한, 세상의 모든 노래를 아는 윤수와 다르게 정환은 음을 아는 노래가 N$N$개뿐이다. 그래서 프로그램에 N$N$개의 노래의 정보를 저장해 놓을 것이다. 만약 저장된 노래 중 입력한 첫 세 음으로 시작하는 노래가 여러 개 있어 무슨 노래인지 정확히 알 수 없는 경우 ?를 출력하고, 입력한 첫 세 음에 맞는 저장된 노래가 없을 경우 !를 출력한다.\n\n정환을 도와서 첫 세 음만으로 본인이 음을 아는 노래를 맞히는 프로그램을 완성하자. 이 프로그램은 대문자와 소문자를 구분한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31563","content":"문제\n\n길이가 \nN\n$N$인 정수 수열 \n[A1,A2,…,AN]\n$[A_1,A_2,\\dots,A_N]$이 주어진다. 이때 다음 쿼리를 수행하는 프로그램을 작성해보자.\n\n \n1\n$1$ \nk\n$k$: 수열을 오른쪽으로 \nk\n$k$만큼 회전시킨다. 즉, \nA1\n$A_1$의 값은 \nAN−k+1\n$A_{N-k+1}$, \nA2\n$A_2$의 값은 \nAN−k+2\n$A_{N-k+2}$, \n…\n$\\dots$, \nAk\n$A_k$의 값은 \nAN\n$A_N$, \nAk+1\n$A_{k+1}$의 값은 \nA1\n$A_1$, \nAk+2\n$A_{k+2}$의 값은 \nA2\n$A_2$, \n…\n$\\dots$, \nAN\n$A_N$의 값은 \nAN−k\n$A_{N-k}$로 동시에 변한다.\n \n2\n$2$ \nk\n$k$: 수열을 왼쪽으로 \nk\n$k$만큼 회전시킨다. 즉, \nA1\n$A_1$의 값은 \nAk+1\n$A_{k+1}$, \nA2\n$A_2$의 값은 \nAk+2\n$A_{k+2}$, \n…\n$\\dots$, \nAN−k\n$A_{N-k}$의 값은 \nAN\n$A_N$, \nAN−k+1\n$A_{N-k+1}$의 값은 \nA1\n$A_1$, \nAN−k+2\n$A_{N-k+2}$의 값은 \nA2\n$A_2$, \n…\n$\\dots$, \nAN\n$A_N$의 값은 \nAk\n$A_k$로 동시에 변한다.\n \n3\n$3$ \na\n$a$ \nb\n$b$: 수열의 \na\n$a$번째 수부터 \nb\n$b$번째 수의 합을 출력한다. 즉, \n∑i=abAi\n$\\sum_{i=a}^b A_i$를 출력한다."},{"problemId":"31549","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBessie is taking a vacation in a network of N$N$ (2≤N≤104$2\\le N\\le 10^4$) islands labeled 1…N$1\\dots N$ connected by M$M$ bidirectional bridges, each of which connects two islands (N−1≤M≤3/2(N−1)$N-1\\le M\\le 3/2(N-1)$). It is guaranteed that the bridges form a connected simple graph (in particular, no two bridges connect the same pair of islands, and no bridge connects an island to itself).\n\nIt is also guaranteed that no bridge lies on more than one simple cycle. A simple cycle is a cycle that does not contain repeated islands.\n\nBessie starts at island 1$1$, and travels according to the following procedure. Supposing she is currently at island i$i$,\n\n\n\tIf there are no bridges adjacent to island i$i$ that she has not yet crossed, she ends her vacation.\n\tOtherwise, with probability pi(mod109+7)$p_i\\pmod{10^9+7}$, she ends her vacation.\n\tOtherwise, out of all bridges adjacent to island i$i$ that she has not yet crossed, she chooses one uniformly at random and crosses it.\n\n\nFor each island, output the probability that she ends her vacation at that island, modulo 109+7$10^9+7$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31550","content":"문제\n\nBessie is having fun playing a famous online game, where there are a bunch of cells of different labels and sizes. Cells get eaten by other cells until only one winner remains.\n\nThere are \nN\n$N$ (\n2≤N≤5000\n$2\\le N\\le 5000$) cells in a row labeled \n1…N\n$1\\dots N$ from left to right, with initial sizes \ns1,s2,…,sN\n$s_1,s_2,\\dots,s_N$ (\n1≤si≤105\n$1\\le s_i\\le 10^5$). While there is more than one cell, a pair of adjacent cells is selected uniformly at random and merged into a single new cell according to the following rule:\n\nIf a cell with label \na\n$a$ and current size \nca\n$c_a$ is merged with a cell with label \nb\n$b$ and current size \ncb\n$c_b$, the resulting cell has size \nca+cb\n$c_a+c_b$ and label equal to that of the larger cell, breaking ties by larger label. Formally, the label of the resulting cell is \n\t\n\t\n\t\n{aca>cbbca<cbmax(a,b)ca=cb.\n$\\begin{cases} a & c_a > c_b \\\\ b & c_a < c_b \\\\ \\max(a,b) & c_a = c_b \\end{cases}.$ \n\nFor each label \ni\n$i$ in the range \n1…N\n$1\\dots N$, the probability that the final cell has label \ni\n$i$ can be expressed in the form \naibi\n$\\frac{a_i}{b_i}$ where \nbi≢0(mod109+7)\n$b_i\\not\\equiv 0\\pmod{10^9+7}$. Output \naibi−1(mod109+7)\n$a_ib_i^{-1}\\pmod{10^9+7}$."},{"problemId":"31551","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tFarmer John has N$N$ cows on his farm (2≤N≤2⋅105$2 \\leq N \\leq 2\\cdot 10^5$), conveniently numbered 1…N$1 \\dots N$. Cow i$i$ is located at integer coordinates (xi,yi)$(x_i, y_i)$ (1≤xi,yi≤N$1\\le x_i,y_i\\le N$). Farmer John wants to pick two teams for a game of mooball!\n\nOne of the teams will be the \"red\" team; the other team will be the \"blue\" team. There are only a few requirements for the teams. Neither team can be empty, and each of the N$N$ cows must be on at most one team (possibly neither). The only other requirement is due to a unique feature of mooball: an infinitely long net, which must be placed as either a horizontal or vertical line in the plane at a non-integer coordinate, such as x=0.5$x = 0.5$. FJ must pick teams so that it is possible to separate the teams by a net. The cows are unwilling to move to make this true.\n\nHelp a farmer out! Compute for Farmer John the number of ways to pick a red team and a blue team satisfying the above requirements, modulo 109+7$10^9+7$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31552","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tFarmer John and his Q$Q$ (1≤Q≤2⋅105$1 \\leq Q \\leq 2 \\cdot 10^5$) cows are in Manhattan on vacation, but the cows have escaped and are now walking around freely in the city! Manhattan is huge – so huge that its N$N$ (1≤N≤2⋅105$1 \\le N \\le 2 \\cdot 10^5$) roads stretch infinitely in the x$x$-y$y$ plane, but conveniently, those roads all run perfectly horizontally or vertically. Each horizontal and vertical road can be modeled by an equation of the form y=ci$y = c_i$ or x=ci$x = c_i$, where ci$c_i$ is an integer in the range 0$0$ to 109$10^9$ inclusive.\n\nFarmer John knows exactly where each cow started walking and how long ago they escaped. Cows are very predictable, so each of them walks according to the following pattern:\n\n\n\tThey only walk north (+y$+y$) or east (+x$+x$) at one unit per second.\n\tIf they are currently on a single road, they continue walking along the road's direction.\n\tIf they are at the intersection of two roads, they walk north if they have been walking for an even number of seconds and east otherwise.\n\n\nGiven the layout of Manhattan and the information for each cow, help Farmer John determine where his cows are now!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31527","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are organizing a recreational rugby tournament. A rugby team has 15$15$ distinct roles, numbered 1$1$ to 15$15$. Each team in the tournament must have exactly 15$15$ players, each fulfilling one of the roles. Although several groups of friends showed up to play in the tournament, none of the groups are large enough to form a complete team. You would like to create teams by merging some pairs of groups together.\n\nEach group has between 1$1$ and 14$14$ players (inclusive) and you know that each player has exactly 2$2$ potential roles they could play on a team. Determine the maximum number of valid teams you can form. A team is valid if it is made of exactly two groups, it has exactly 15$15$ players (no more, no fewer), and every role on the team is played by a different player able to play that role. A group cannot be part of more than one team.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31265","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t작전과장 승서는 부대의 24-1분기 훈련 계획을 구성하여야 한다. 이를 위해 승서는 훈련 계획에 포함할 훈련들을 선정해야 한다.\n\n훈련은 N$N$가지의 훈련 상황으로 분류되어 있으며, i$i$번째 훈련 상황은 di$d_i$개의 훈련으로 이루어져 있다. i$i$번째 훈련 상황의 j$j$번째 훈련에 소요되는 시간은 tij$t_{ij}$이다.\n\n승서는 모든 상황에 대해 완벽한 대비를 하고 싶기 때문에 각 훈련 상황에서 적어도 하나의 훈련을 골라 훈련 계획에 넣으려고 한다. 또한, 훈련 계획에 포함된 훈련들의 시간 총합은 M$M$시간을 초과할 수 없으며 각 훈련은 한 번만 진행할 수 있다.\n\n완벽한 전투대비태세 유지를 위해, 승서는 위 조건 아래에서 훈련 시간의 총합이 최대가 되도록 훈련 계획을 구성하고자 한다. 조건을 만족하는 최대 훈련 시간을 구해 국군 장병들의 완벽한 전투대비태세 유지를 도와주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31553","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tFarmer John is hiring a new herd leader for his cows. To that end, he has interviewed N$N$ (2≤N≤109$2 \\leq N \\leq 10^9$) cows for the position. After each interview, he assigned an integer \"cowmpetency\" score to the candidate ranging from 1$1$ to C$C$ (1≤C≤104$1 \\leq C \\leq 10^4$) that is correlated with their leadership abilities.\n\nBecause he has interviewed so many cows, Farmer John has forgotten all of their cowmpetency scores. However, he does remembers Q$Q$ (1≤Q≤min(N−1,100)$1 \\leq Q \\leq \\min(N - 1, 100)$) pairs of numbers (ai,hi)$(a_i, h_i)$ where cow hi$h_i$ was the first cow with a strictly greater cowmpetency score than cows 1$1$ through ai$a_i$ (so 1≤ai<hi≤N$1 \\leq a_i < h_i \\leq N$).\n\nFarmer John now tells you the Q$Q$ pairs of (ai,hi)$(a_i, h_i)$. Help him count how many sequences of cowmpetency scores are consistent with this information! It is guaranteed that there is at least one such sequence. Because this number may be very large, output its value modulo 109+7$10^9 + 7$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31516","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are tasked with creating a secret sequence of integers that is difficult to guess.\n\nThe sequence is subject to the following constraints:\n\n\n\tThe first number in the sequence must be 0$0$.\n\tThe last number in the sequence must be 100000$100\\,000$.\n\tEach number in the sequence must be either 1$1$ or 2$2$ greater than the one preceding it.\n\n\nAt first, all you need to reveal is the length of the sequence.\n\nThen, an adversary will guess the numbers in the sequence one at a time.\n\n\n\tIf the guessed number is in your sequence, you must reveal exactly where in the sequence it appears.\n\tIf the guessed number is not in your sequence, you must simply reveal that it is not in the sequence. This is considered a \"miss\".\n\n\nNote that because you are not forced to write down the sequence in advance, you can \"cheat\" by changing the sequence you have in mind, so long as it does not contradict the information you have revealed so far. It turns out that under these conditions, you can always force the adversary to get 33333$33\\,333$ misses before they can guess every number in your sequence. Your job is to write a program that does so.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31564","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t윤수는 파티로 가는 길에 악랄한 종현에게 당해 육각타일미로에 빠졌다. 미로는 일정한 크기의 정육각형 타일로 구성된 N$N$행 M$M$열의 격자 형태로 이루어져 있다. 같은 열에 위치한 두 칸을 비교했을 때, 짝수 번째 행의 칸은 홀수 번째 행의 칸보다 반 칸 오른쪽에 위치해 있다. 다음 그림은 N=4$N=4$이고 M=7$M=7$인 육각타일미로를 나타낸 것이다.\n\n\n\n윤수는 항상 (0,0)$(0,0)$에서 출발하며 탈출구는 항상 (N−1,M−1)$(N-1, M-1)$에 존재한다. 종현은 윤수의 탈출을 막기 위해 K$K$개의 장애물을 타일 위에 두었다. 윤수는 타일 위에서는 인접한 타일로 이동할 수 있지만 장애물이 있는 타일로는 이동할 수 없다. 두 타일이 하나의 변을 공유한다면 서로 인접하다고 한다.\n\n윤수는 서둘러 파티를 가고 싶기 때문에 미로를 탈출할 수 있는 최단 경로를 찾으려고 한다. 최단 경로는 육각타일미로에서 탈출구까지 가장 적은 개수의 타일을 지나는 경로를 말하는데, 이때 시작하는 타일은 포함하지 않고 탈출구가 있는 타일은 포함한다. 윤수가 탈출구에 도달하기 위한 최단 경로의 타일의 개수를 알아보자. \n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31554","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBessie is trying to sort an array of integers using her own sorting algorithm. She has a pile of N$N$ (1≤N≤2⋅105)$(1 \\leq N \\leq 2\\cdot 10^5)$ integers a1,a2,…,aN$a_1,a_2,\\dots,a_N$ (1≤ai≤1011)$(1 \\leq a_i \\leq 10^{11})$ that she will put in a separate array in sorted order. She repeatedly finds the minimum integer in her pile, removes it, and adds it to the end of the array. It takes Bessie p$p$ seconds to find the minimum integer in a pile of p$p$ integers.\n\nFarmer John instructed some of the other cows in the farm to help Bessie with her task, but they are quite lazy, so Bessie uses that to her advantage. She divides the integers into two piles: Bessie pile and Helper pile. For every integer in Bessie's pile, she performs her algorithm as normal. For every integer in the helper pile, she assigns it to a different helper cow. Farmer John has a large farm, so Bessie can get as many helper cows as she wants. If a helper receives the integer ai$a_i$, Bessie instructs that cow to nap for ai$a_i$ seconds, and add their integer to the end of the array immediately when they wake up. If Bessie and a helper add an integer to the array at the same time, Bessie's integer will get added first since she is the leader. If more than one helper gets assigned the same integer, they will add copies of that integer to the array at the same time.\n\nHelp Bessie divide her integers so that the final array is sorted and the time it takes to sort the array is minimized.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31266","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t설날을 맞아, 도훈이네 부대에서 축구 대회를 개최한다고 한다! 도훈이는 팀의 감독으로서, 팀에 소속될 11$11$명의 선수를 선발하는 역할을 맡게 되었다.\n\n팀에 선발할 선수는 각각 공격수, 미드필더, 수비수, 골키퍼의 네 가지 포지션 중 하나로 등록되어야 하며, 각 포지션에는 반드시 최소 한 명씩은 선발해야 한다. 단, 골키퍼는 한 명만 선발해야 한다.\n\n도훈이의 팀에 지원한 선수들은 지원서에 각각 공격수, 미드필더, 수비수, 골키퍼에 대한 선호도 ai$a_i$, bi$b_i$, ci$c_i$, di$d_i$를 작성하여 제출했다. 팀의 만족도는 각 선수들이 선발된 포지션에 대한 선호도의 합이다. 도훈이는 해당 정보를 바탕으로, 팀 선발 조건에 맞게 팀의 만족도를 최대화하는 방식으로 선수들을 선발하고자 한다. 도훈이를 위해, 팀 선발 조건에 맞게 11$11$명을 선발한 경우 팀의 만족도의 최댓값을 구해주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31517","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAshley is training for a programming contest on Brandon's Online Judge. Brandon's Online Judge has a new feature which allows Ashley's coach, Tom, to load a list of problems for Ashley.\n\nTom has curated some problems for Ashley to work on. Each problem has two integers as a lower skill bound and an upper skill bound. Each programmer has an integer skill level. If someone with a skill level between the lower and upper bounds of a problem (inclusive), and they solve that problem, then his/her skill level goes up by 1$1$.\n\nAshley will train on Tom's curated list of problems as follows -- she will look at the first problem on the list and either solve it or skip it. She will repeat this for every problem on the list in the order Tom loaded the problems. Once she has skipped a problem, she can never go back to it.\n\nCompute the maximum skill level Ashley can have if she chooses to solve or skip problems optimally.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31528","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tWrite what you know! The judges for a certain programming competition have n$n$ problems and are trying to prepare a contest using k$k$ of them.\n\nThe judges have tagged each problem with a list of topics needed to solve that problem. To not overly punish teams for not knowing a specific topic, for any given topic, at most half of the problems on the contest can have that topic.\n\nCompute the number of distinct contests the judges can prepare. Two contests are different if there is a problem that appears in one contest but not the other. In particular, the order of the problems in the contest does not matter.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31555","content":"문제\n\nFarmer John is hiring a new herd leader for his cows. To that end, he has interviewed \nN\n$N$ (\n2≤N≤105\n$2 \\leq N \\leq 10^5$) cows for the position. After interviewing the \ni\n$i$th candidate, he assigned the candidate an integer \"cowmpetency\" score \nci\n$c_i$ ranging from \n1\n$1$ to \nC\n$C$ inclusive (\n1≤C≤109\n$1 \\leq C \\leq 10^9$) that is correlated with their leadership abilities.\n\nBecause he has interviewed so many cows, Farmer John does not remember all of their cowmpetency scores. However, he does remembers \nQ\n$Q$ (\n1≤Q<N\n$1 \\leq Q < N$) pairs of numbers \n(aj,hj)\n$(a_j, h_j)$ where cow \nhj\n$h_j$ was the first cow with a strictly greater cowmpetency score than cows \n1\n$1$ through \naj\n$a_j$ (so \n1≤aj<hj≤N\n$1 \\leq a_j < h_j \\leq N$).\n\nFarmer John now tells you the sequence \nc1,…,cN\n$c_1, \\dots, c_N$ (where \nci=0\n$c_i = 0$ means that he has forgotten cow \ni\n$i$'s cowmpetency score) and the \nQ\n$Q$ pairs of \n(aj,hj)\n$(a_j, h_j)$. Help him determine the lexicographically smallest sequence of cowmpetency scores consistent with this information, or that no such sequence exists! A sequence of scores is lexicographically smaller than another sequence of scores if it assigns a smaller score to the first cow at which the two sequences differ.\n\nEach input contains \nT\n$T$ \n(1≤T≤20)\n$(1 \\leq T \\leq 20)$ independent test cases. The sum of \nN\n$N$ across all test cases is guaranteed to not exceed \n3⋅105\n$3 \\cdot 10^5$."},{"problemId":"31580","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t2017년 7월 17일, 위대한 예언가 zigui의 예언에 따라 지구는 멸망할 것이다. 하지만 스피노자가 그랬던가, 내일 지구가 멸망하더라도 사과나무를 심을 거라고.\n\n구사과는 지구멸망을 자축하기 위해 지구멸망 하루 전인 7월 16일에 특별한 사과나무를 심을 것이다. 이 사과나무는 맨 처음에 아래 그림과 같이 땅 위에 새싹이 있으며 N$N$개의 사과가 공중에 매달려 있다.\n\n\n\n구사과는 특수 레이저 건을 이용해서 사과나무를 자라게 할 수 있다. 맨 처음에는 구사과가 새싹에 주황색 레이저를 쏘고, N$N$개의 사과 중 하나에 하늘색 레이저를 쏜다. 그러면 새싹과 사과 사이에 줄기가 난다. 구사과가 레이저를 한 번 쏜 이후의 모습은 아래 그림에서 왼쪽 그림과 같다. 그 이후로도 구사과는 계속 줄기를 추가할 수 있다. 사과나무를 이루고 있는 사과 또는 새싹 부분에 주황색 레이저를 쏘고 사과나무를 이루고 있지 않은 사과에 하늘색 레이저를 쏘면 그 두 지점 사이에 줄기가 생긴다. 4$4$개의 줄기가 생긴 사과나무에서 줄기를 하나 더 만드는 예는 아래 그림에서 오른쪽 그림과 같다. 만약 연결할 두 부분이 모두 사과나무를 이루고 있거나 모두 사과나무 이외이면 연결되지 않는다.\n\n\n\n구사과는 아래 그림과 같이 자신이 원하는 사과나무의 모양을 하나 정해놓았다. 여기서 구사과가 정한 사과나무의 줄기의 수는 항상 N$N$개이다.\n\n\n\n신기하게도 구사과가 이런 방식으로 사과나무를 기르면 연보라색 줄기가 나타나서 반짝반짝 빛난다. 구사과는 각 줄기마다 예상 광도를 구해서 양의 정수로 나타냈는데, 재미있게도 줄기들의 광도는 모두 다르다.\n\n구사과는 사과나무를 기를 때, 매 순간마다 자신이 만들 수 있는 줄기들 중 광도가 가장 높은 줄기를 선택하여 그 줄기를 기를 것이다. 구사과의 계획에 따르면, N$N$개의 줄기를 기르는 순서는 아래 그림에서 괄호로 표기되어 있다.\n\n\n\n허나, 구사과가 깜빡하여 졸고 있는 동안 이미 사과나무가 자라 몇 개의 줄기가 생겼다. 이 줄기들은 모두 새싹과 사과를 연결하고 있으며 각 줄기가 연결하는 사과는 모두 다르다. 아래 그림에서 왼쪽 그림은 사과나무가 자란 형태로 가능한 예 중 하나이다. 왼쪽 그림의 사과나무에서 구사과가 가지를 더 자라게 하면 오른쪽 그림과 같은 형태가 된다.\n\n\n\n사과나무에서 이미 자란 줄기들은 일반적인 갈색 줄기이므로, 빛이 나지 않는다. 따라서 사과가 다 자랐을 때 사과나무의 광도는 구사과가 추가로 기른 줄기들의 광도의 합이다. 또, 사과나무의 에너지는 사과나무의 광도의 제곱이다.\n\n아직 구사과는 잠에서 깨지 않았다. 당신은 우선 사과나무가 자랐을 수 있는 가능한 모든 형태에 대해, 구사과가 가지를 더 자라게 했을 때 만들어지는 최종 사과나무의 광도와 에너지를 구해 그 합을 구해야 한다. 그런 다음 구사과를 깨워서 합을 알려주어 상황의 급박함을 알려주려고 한다.\n\n당신은 최대한 빠른 시간 안에 사과나무의 광도와 에너지의 합을 구해야 한다. 사과나무에서 줄기가 더 자라기 전에 어서 사과나무의 광도와 에너지의 합을 구하는 프로그램을 작성하자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31565","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t영도는 국방의 의무를 다하기 위해 대한민국 육군에 입대했다. 고된 훈련병 생활과 후반기 교육을 마치고 자대 배치를 받고 나니, 자대에는 먼저 입대한 친구 종현이 있었다.\n\n영도는 아무리 생각해도 종현이 먼저 전역하는 것이 마음에 들지 않았다. 그래서 아래의 제도와 규정을 활용해서 종현보다 먼저 전역할 계획을 세웠다.\n\n\n\t조기 전역: 모아놓은 휴가를 말년에 전역일을 앞당기는 데 사용할 수 있다.\n\t군기교육대: 징계를 받아 군기교육대에 가게 되면, 군기교육대에 있던 기간만큼 전역이 늦춰진다.\n\t임기제 부사관: 임기제 부사관에 지원하여 6$6$개월에서 48$48$개월까지 전문하사로 부대에 남아 국가 안보에 조금 더 이바지할 수 있다. 임기제 부사관 지원서에서의 1$1$개월은 30$30$일로 계산된다.\n\t\n\t\t영도와 종현의 부대는 인력이 부족해서, 임기제 부사관 지원서를 여러 장 중복해서 제출할 수 있다. 이 때, 복무 기간은 기간 제한의 영향을 받지 않고 누적된다. \t\t만약 48$48$개월 전문하사 지원서를 두 장 작성하고 제출한다면 96$96$개월을 복무하게 된다.\n\t\n\t\n\n\n영도는 이 제도와 규정들을 적절하게 활용하여 영도의 전역일을 앞당기거나 종현의 전역일을 늦추려고 한다. 계획을 남에게 들켰다간 오히려 본인의 전역일이 늦춰질 수 있어서, 영도는 계획을 몰래 실행할 수 있는 여유 내에서 계획을 계속하려고 한다.\n\n모아놓은 휴가를 모두 사용해도 영도의 전역일은 입대일을 역전하지 않는다고 가정한다. 영도는 최대한으로 얻을 수 있는 휴가로 조기 전역을 하더라도, 계획을 세우는 날 이후에 전역한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31518","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tEddy is overseeing construction of some new slot machines. His slot machines consist of three wheels, each of which can show one of several different digits. When activated, each wheel shows a random digit. The goal is for all wheels to be able to show the digit 7$7$.\n\nA slot machine is good if each wheel is capable of showing the digit 7$7$, and bad otherwise. For a given slot machine, determine if it is good or bad.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31519","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tGeoffry is preparing an a cappella composition where he sings the entire song by himself.\n\nEach note of the song has a pitch between 0$0$ and 109$10^9$. Because of the varying pitches in the song, Geoffry will record himself singing multiple times. In a single recording, he will pick some subset of the notes to sing and he will sing exactly those notes. To avoid straining his voice too much, within a single recording, there is a limit to the difference between the maximum pitch and the minimum pitch among the notes he sings.\n\nCompute the minimum number of times that Geoffry can record himself singing the song and each note is sung in at least one of the recordings.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31529","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMat Street에 사는 재우와 재현이는 2024년에도 외로운 하루를 보내고 있다. 동우는 이런 둘이 안쓰러워 마찬가지로 Kor Avenue에 사는 자신의 여사친 두 명과 2 대 2 미팅을 잡아주었다. Mat Street는 가로, Kor Avenue는 세로 방향의 도로이다. Mat Street와 Kor Avenue는 MatKor 사거리에서 수직으로 만나며, 각자 사는 집은 정확하게 Mat Street 혹은 Kor Avenue 위에 위치한다. 집이 정확히 사거리 위에 있을 수도 있다.\n\n첫 미팅이 끝나고 재우와 재현이는 서로 다른 한 명씩 마음이 맞았다. 동우는 누가 누구와 마음이 맞았는지 궁금해 여러 정보를 물어보았다. 그 결과 여기서 재우, 재현이, 재우가 마음에 드는 사람, 재현이가 마음에 드는 사람의 집을 순서대로 A$A$, B$B$, C$C$, D$D$라고 할 때 동우는 다음 정보를 알아냈다.\n\n\n\t AB―$\\overline{AB}$와 CD―$\\overline{CD}$는 MatKor 사거리를 포함한다.\n\n\n\n\n\n\t AC―2+BD―2$\\overline{AC}^2+\\overline{BD}^2$의 값은 X$X$이고, AB―2+CD―2$\\overline{AB}^2+\\overline{CD}^2$의 값은 Y$Y$이다.\n\n\n \n\n\n\tMatKor 사거리가 집일 수도 있으며, 이 경우도 선분에 포함된다. 또한, 같은 아파트에 살 수 있기 때문에, 집이 같은 위치에 있을 수도 있다.\n\n\n재우는 이러면 식이 대칭적이므로 자신이 마음에 든 사람이 특정되지 않는다고 생각하였다.\n\n재현이는 동우에게 다음에도 같이 만나 더블데이트를 하기로 했다고 자랑했다. 이때, 남자는 남자끼리, 여자는 여자끼리 먼저 각각 중간 지점, 즉 AB―$\\overline{AB}$와 CD―$\\overline{CD}$의 중점 M$M$과 N$N$에서 만나서 오기로 했다고 한다.\n\n\n\n동우는 이를 듣고 곰곰이 생각하더니 다음과 같이 이야기했다.\n\n\n그럼 MN―2$\\overline{MN}^2$은 W$W$겠네.\n\n\n이 말을 듣고 재우와 재현이는 매우 놀랐다. 마치 동우가 자신들이 마음에 들어 하는 여자가 누군지 안 것 같았기 때문이다. X$X$, Y$Y$를 통해 W$W$를 구해보자.\n\n모든 점은 평면 위에 있다고 가정하며, 거리의 정의는 직선거리를 기준으로 한다. 단, 두 점이 일치하는 경우 거리가 0$0$임에 유의하자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31556","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are playing your favorite mobile game and you are trying to farm potions so that you may have a chance at defeating the legendary cow boss. The game map is a series of N$N$ (2≤N≤105)$(2 \\leq N \\leq 10^5)$ rooms labeled 1…N$1\\dots N$ connected by N−1$N-1$ edges that form a tree.\n\nYou can explore the map by making a series of \"traversals\". A traversal is a simple path from room 1$1$ to any other room in the tree. Once you finish one traversal, you can start another traversal from room 1$1$. The map is complete once every one of its rooms is visited by at least one traversal. Your main goal is to complete the map in the minimum number of traversals.\n\nYour secondary goal is to farm as many potions as possible. Before a traversal begins, a potion will spawn at some room in the map. You can pick up the potion by visiting the room that the potion spawned at in the current traversal. If you do not pick up the potion, then it will disappear once the current traversal ends, so you cannot pick it up in future traversals.\n\nAs you are a smart programmer, after looking at the game files, you were able to figure out where the potions will appear before your next N$N$ traversals. If you complete the map in the minimum number of traversals, what is the maximum amount of potions that you can farm from the map?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31557","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBessie has woken up on a strange planet. In this planet, there are N$N$ (1≤N≤104$1\\le N\\le 10^4$) months, with a1,…,aN$a_1, \\ldots, a_N$ days, respectively (1≤ai≤4⋅109$1\\leq a_i \\leq 4 \\cdot 10^9$, all ai$a_i$ are integers). In addition, on the planet, there are also weeks, where each week is L$L$ days, with L$L$ being a positive integer. Interestingly, Bessie knows the following:\n\n\n\tFor the correct L$L$, each month is at least 4$4$ weeks long.\n\tFor the correct L$L$, there are at most 3$3$ distinct values of aimodL$a_i\\bmod L$.\n\n\nUnfortunately, Bessie has forgotten what L$L$ is! Help her by printing the sum of all possible values of L$L$.\n\nNote that the large size of integers involved in this problem may require the use of 64-bit integer data types (e.g., a \"long long\" in C/C++).\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31267","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t전역 전까지 시간 외 근무 지옥에서 벗어나지 못한 준민이는, 결국 전역을 앞두고 남은 일들을 후임병인 민욱이에게 넘겨주고 말았다. 민욱이가 준민이에게 넘겨받은 작업은 총 N$N$개이며, 각 작업은 ti$t_i$만큼의 작업량이 필요하고 각 작업의 데드라인은 di$d_i$일이다. 이때, 준민이에게 넘겨받은 작업들 중 데드라인이 동일한 작업은 없다고 한다.\n\n민욱이의 근무는 월요일부터 시작하며, 평시 근무는 월요일부터 금요일까지만, 시간 외 근무는 모든 요일에 진행할 수 있다. 평시 근무와 시간 외 근무는 각각 하루에 최대 한 번씩 진행할 수 있으며, 진행할 때마다 원하는 작업 하나를 골라 1$1$의 작업량을 처리할 수 있다.\n\n후임병까지도 시간 외 근무를 해야 한다는 사실이 마음 아팠던 준민이는, 간부님 몰래 작업들의 데드라인을 조작하고자 한다. 데드라인을 1$1$회 조작하면 원하는 작업의 데드라인을 1$1$일 늘릴 수 있으며, 간부님에게 들키지 않기 위해 최대 K$K$번까지만 데드라인을 조작하고자 한다. 또한, 준민이가 데드라인을 조작하고 갔다는 사실을 간부님께 들키지 않기 위해, 민욱이는 모든 작업들을 초기 데드라인이 더 이른 순서대로 완료하기로 했다. \n\n준민이가 데드라인을 최대 K$K$번 조작한 경우, 민욱이가 해야 하는 최소 시간 외 근무 일수를 구해주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31558","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tFarmer John has an important task - figuring out what type of hay to buy for his cows.\n\nFarmer John's N$N$ cows (2≤N≤105$2 \\le N \\le 10^5$) are numbered 1$1$ through N$N$ and each cow likes exactly one type of hay hi$h_i$ (1≤hi≤N$1 \\le h_i \\le N$). He wants all his cows to like the same type of hay.\n\nTo make this happen, Farmer John can host focus groups. A focus group consists of getting all cows in a contiguous range numbered i$i$ to j$j$, inclusive, together for a meeting. If there is a type of hay that more than half the cows in the group like, then after the focus group finishes meeting, all cows end up liking that type of hay. If no such type of hay exists, then no cows change the type of hay they like. For example, in focus group consisting of a range of 16 cows, 9 or more of them would need to have the same hay preference to cause the remaining cows to switch their preference to match.\n\nFarmer John wants to know which types of hay can become liked by all cows simultaneously. He can only host one focus group at a time, but he can run as many focus groups as necessary to get all cows to like the same type of hay.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31559","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBessie has mastered the art of turning into a cannonball and bouncing along a number line of length N$N$ (1≤N≤105)$(1 \\leq N \\leq 10^5)$ with locations numbered 1,2,…,N$1,2,\\dots,N$ from left to right. She starts at some integer location S$S$ (1≤S≤N)$(1 \\leq S \\leq N)$ bouncing to the right with a starting power of 1$1$. If Bessie has power k$k$, her next bounce will be at a distance k$k$ forward from her current location.\n\nEvery integer location from 1$1$ to N$N$ is either a target or a jump pad. Each target and jump pad has an integer value in the range 0$0$ to N$N$ inclusive. A jump pad with a value of v$v$ increases Bessie's power by v$v$ and reverses her direction. A target with a value of v$v$ will be broken if landed on with a power of at least v$v$. Landing on a target does not change Bessie's power or direction. A target that is broken will remain broken and Bessie can still bounce on it, also without changing power or direction.\n\nIf Bessie bounces for an infinite amount of time or until she leaves the number line, how many targets will she break?\n\nIf Bessie starts on a target that she can break, she will immediately do so. Similarly, if Bessie starts on a jump pad, the pad's effects will be applied before her first jump.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31581","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t지수는 독일에 유학을 가있는 동안 열렬한 수학 퍼즐 마니아 조슈아 뮐러와 친해졌다. 조슈아는 수학 퍼즐 중에서 마방진(Zauberquadrat)과 스도쿠(Sudoku)를 좋아하는데, 조슈아의 말에 의하면 ‘사람들이 스도쿠는 언제 풀어도 재미있다고 생각하지만, 마방진은 쉬운 풀이 방법이 잘 알려져 있어서 잘 풀지 않는다.’라고 한다.\n\n마방진의 정의는 다음과 같다.\n\n\n\t마방진의 게임판은 N×N$N \\times N$ 크기의 격자 모양이다.\n\t게임판의 각 칸에는 1$1$ 이상 N2$N^2$ 이하의 정수를 정확히 한 번씩 써야 한다.\n\t게임판의 N$N$개의 가로줄과 N$N$개의 세로줄, 2개의 대각선에 대하여 각 영역에 있는 수들의 합이 항상 같아야 한다.\n\n\n스도쿠의 정의는 다음과 같다.\n\n\n\t스도쿠의 게임판은 N2×N2$N^2 \\times N^2$ 크기의 격자 모양이며, 게임판은 N×N$N \\times N$ 크기의 작은 게임판 N2$N^2$개로 쪼개져있다.\n\t게임판의 각 칸에는 1$1$ 이상 N2$N^2$ 이하의 정수를 쓸 수 있다.\n\t게임판의 N2$N^2$개의 가로줄과 N2$N^2$개의 세로줄, N2$N^2$개의 작은 게임판에 대하여 각 영역에는 1$1$ 이상 N2$N^2$ 이하의 정수들이 정확히 한 번 나타나야 한다.\n\n\n조슈아는 사람들에게 마방진의 위대함을 알리기 위해서 마방진을 스도쿠와 접목시키려고 한다. 조슈아는 N2×N2$N^2 \\times N^2$ 스도쿠에서 N2$N^2$개의 작은 게임판들이 모두 마방진이 되게 퍼즐을 만들 생각을 해보았다. 조슈아는 N=3$N = 3$이면 이런 퍼즐을 만드는 것이 불가능하다는 것을 쉽게 알 수 있었다. 잠시 후 조슈아는 자신의 조건을 만족시키는 16×16(N=4)$16 \\times 16 (N = 4)$ 퍼즐을 쉽게 만들었다.\n\n조슈아는 지수에게 자신의 조건을 만족하는 16×16$16 \\times 16$ 퍼즐을 만들어보라고 한다. 지수는 현재 연구실에서 인턴을 하느라 바쁘므로, 지수 대신 당신이 16×16$16 \\times 16$ 퍼즐을 만들어보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31566","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n안녕하신가! 힘세고 강한 아침, 만일 내게 물어보면 \n\n나는 영도\n\n\n근성은 매일 아침 개발 문서를 읽으며 하루를 시작한다. 한국어 문서를 다 읽은 근성은 해외 문서를 읽기 시작했지만, 세상의 다양한 언어로 작성된 개발 문서를 보고 눈앞이 아득해지기 시작했다. 이를 본 영도는 근성을 도와주고자 N$N$개 언어 간 번역을 일부 제공하는 '정영도 봇'(이하 봇)을 만들었다.\n\n\n\n봇은 프로토타입이기에 특이한 번역 로직을 지니고 있다.\n\n\n\t각 언어는 1$1$ 이상 N$N$ 이하의 중복되지 않는 고유 번호를 가진다. \n\t봇은 일부 (A,B)$(A,B)$ 언어 쌍에 대한 데이터를 가지고 있다. 여기서 A$A$와 B$B$는 언어의 고유번호를 의미한다.\n\t변환은 어떤 언어로 이루어진 문구를 다른 언어로 이루어진 문구로 바꾸는 과정을 의미한다. A$A$번 언어로 이루어진 문구를 B$B$번 언어로 이루어진 문구로 변환하기 위해서는 (A,B)$(A,B)$ 언어 쌍에 대한 데이터를 봇이 가지고 있어야 한다. 이때, (A,B)$(A,B)$와 (B,A)$(B,A)$는 다른 언어 쌍이다.\n\t'A$A$번 언어로 이루어진 문구를 B$B$번 언어로 이루어진 문구로 바꾸는 변환'은 'A$A$번 언어를 B$B$번 언어로 바꾸는 변환'과 같이 간략하게 표현할 수 있다.\n\t변환 시에는 비용이 든다.\n\t A$A$번 언어를 B$B$번 언어로 번역하는 것은 한 번 이상의 변환을 거쳐 A$A$번 언어를 B$B$번 언어로 바꾸는 것을 의미하고, 이 과정에서 거치는 일련의 변환들을 경로라 표현한다.\n\n\n근성은 봇의 성능을 테스트하기 위해 s$s$번 언어가 있을 때 특정 k$k$번 언어가 포함된 변환을 거치지 않고 e$e$번 언어로 번역이 가능한지, 가능하다면 번역의 여러 경로의 비용 중 최소 비용은 얼마인지 여러 번 물어보기 시작했다. 근성의 질문에 답하기 위해 입력값을 하나하나 집어넣던 영도는 진절머리가 나 버렸고, 봇의 번역 가능 여부와 최소 비용을 구하는 프로그램을 만들어야겠다고 생각했다. 하지만 영도는 봇을 만드는 데 너무 많은 힘을 쏟은 나머지 또 다른 프로그램을 만들 힘이 남아있지 않았다.\n\n영도를 위해 봇의 번역 가능 여부와 최소 비용을 구하는 프로그램을 만들어주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31268","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t현재 A국과 B국 두 나라는 서로 전쟁 중이다. A국의 운전병 해찬이는 조국의 승리를 위해 출발 부대에서 도착 부대로 물자를 조달하는 임무를 맡았다.\n\nA국에는 1$1$부터 N$N$까지 번호가 매겨진 N$N$개의 부대가 존재하며 각 부대는 도로로 연결되어 있다. 또한, 각 도로를 지나갈 때는 일정한 시간이 소요된다.\n\n각 부대들은 보안을 위해 들어오는 차량을 검문하며, 이때 검문시간 ti$t_i$가 소요된다. 다만 출발 부대와 도착 부대에는 미리 공문이 내려가 있기 때문에 검문시간이 소요되지 않는다.\n\nB국은 A국의 각 부대를 목표로 삼아 습격하며 이때 습격받은 부대는 보안이 강화되어 검문시간이 증가한다. 또한 B국은 한 번 공격 목표가 다른 부대로 바뀌면 이후 이전에 목표로 삼았던 부대들은 다시 공격하지 않는다.\n\n다음과 같은 Q$Q$개의 쿼리가 주어질 때 해찬이를 도와 A국의 승리를 도와주자.\n\n\n\t 1$1$ r$r$ c$c$: B국이 r$r$번 부대를 공격하여 r$r$번 부대의 검문시간이 c$c$만큼 증가한다.\n\t 2$2$ a$a$ b$b$: a$a$번 부대에서 b$b$번 부대로 가는 최소 시간을 출력한다. 도달할 수 없다면 -1을 출력한다.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31530","content":"문제\n\nAVL 트리는 해당 트리를 만든 Adelson-Velsky와 Landis의 이름을 딴 트리이다.\n\nAVL 트리를 정의하기 위해 먼저 노드별로 ”균형값”을 정의한다. 어떤 노드의 균형값이란, 해당 노드의 왼쪽 서브트리의 높이를 \nhl\n$h_l$, 오른쪽 서브트리의 높이를 \nhr\n$h_r$이라고 할 때, \nhr−hl\n$h_r-h_l$을 의미한다. 이때, 왼쪽 혹은 오른쪽 자식이 없다면 해당 방향의 서브트리의 높이는 \n0\n$0$으로 생각한다. 원래 AVL트리는 모든 노드의 균형값이 \n−1\n$-1$, \n0\n$0$, \n1\n$1$ 중 하나이다.\n\nMatKor 자료구조 세미나를 들은 민재는 자신의 이름도 넣어 AVLM 트리를 개발하려고 한다. 민재는 기존 AVL 트리에서 노드들의 균형값이 될 수 있는 \n−1\n$-1$, \n0\n$0$, \n1\n$1$ 중 일부만을 허용하고자 한다. 그래서 \n{−1,0,1}\n$\\{-1,0,1\\}$의 공집합이 아닌 부분집합 \nS\n$S$를 정해, ”리프 노드를 제외한 모든 노드의 균형값이 \nS\n$S$의 원소 중 하나인 트리”를 새로 정의해 AVLM 트리라는 이름을 붙였다. 이때, 리프 노드는 반드시 균형값이 \n0\n$0$이므로, 이는 예외로 두었다.\n\n집합 \nS\n$S$와 AVLM 트리의 높이 \nh\n$h$가 주어졌을 때, 높이 \nh\n$h$로 가능한 트리의 모양이 몇 개 있는지 구해보자.\n\n노드 하나만 존재하는 트리의 높이를 \n1\n$1$이라고 생각한다."},{"problemId":"31567","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t「Move or Block!」 게임은 N$N$칸의 일자형 게임보드에서 할 수 있는 2$2$인용 보드게임이다. 게임보드의 각 칸은 비어 있거나 벽이 세워져 있으며, 비어 있는 칸 중 하나에 두 플레이어가 움직일 수 있는 하나의 말을 올려두고 게임을 시작한다. 게임은 두 명의 플레이어가 턴을 번갈아 가면서 진행한다.\n\n각 플레이어는 자신의 턴이 되었을 때 말의 인접한 칸에 모두 벽이 세워져 있으면 패배한다. 아니라면 아래 두 가지 행동 중 하나를 선택하여 한 번 플레이하고 턴을 넘긴다.\n\n\n\t말을 비어 있는 인접한 칸 중 하나로 움직인다.\n\t비어 있는 칸을 하나 골라 벽을 세운다.\n\n\n민규와 윤수가 「Move or Block!」 게임을 하려 한다. 주어진 게임보드에서 두 플레이어 모두 최적의 방법으로 게임을 진행했을 때 이기는 플레이어를 출력한다. 게임은 민규가 먼저 시작한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31582","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t어젯밤 동민이와 빈이와 산하는 오랜만에 바비큐 파티를 열어 고기를 구워먹었다. 야외에서 하는 바비큐 파티인 만큼 이들은 그릴 위에서 고기를 구워먹었다. 그릴은 40×40$40 \\times 40$ 크기의 격자 모양이다.\n\n\n\n셋 중에서 맏형인 동민이는 정육점에서 완전히 같은 모양의 고기 세 조각을 사서 고기를 회전하거나 뒤집지 않고 서로 겹치지 않게 고기를 놓았다. 동민이는 그릴의 철사에 가려 구워지지 않는 부위가 없기를 바랐기 때문에 고기를 격자에 딱 맞게 놓았다. 위 그림은 동민이의 조건에 맞게 고기를 올려놓은 모습이다. (그림에서 ‘ㅇ’의 정반대편에 ‘ㅅ’가 있다)\n\n동민이는 고기를 뒤집을 시간이 되어 고기를 뒤집으려고 했다. 동민이는 고기 조각 하나를 집어서 위아래 혹은 좌우로 뒤집으려고 했는데, 자신의 고기 조각을 집어서 뒤집으려고 보니 고기를 겹치지 않게 놓을 수 있는 곳이 없었다. 동민이는 빈이나 산하의 고기 조각을 집어서 뒤집으려고 보니, 역시나 고기를 놓을 수 있는 곳이 없었다. 동민이는 결국 고기 세 조각을 한 번에 집어서 뒤집었다.\n\n다음날 동민이는 어제 먹은 고기의 모양이 기억이 나질 않는다. 동민이는 고기를 뒤집을 때 해프닝이 일어났다는 사실을 어렴풋이 기억하여 어제 고기를 구웠을 때 고기의 배치를 유추해보자 한다. 고기를 정확히 하나만 뒤집는 방법이 없도록 고기를 배치하는 방법을 구하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31269","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThis year, for the first time, the Eurokod is being held, an international competition in writing beautiful and readable code!\n\nThere are n$n$ contestants participating in the competition, labeled with numbers from 1$1$ to n$n$, and each of them has written a code.\n\nTheir codes are evaluated by an association of computer scientists. The association consists of a president and members of the association. The president awards points to codes in one way, and the members of the association award points in another way.\n\nPresident’s points:\n\nThe president will rank the codes from the most beautiful to the least beautiful (in his opinion). The first code will be awarded n$n$ points, and each subsequent code will be awarded one point less than the previous one.\n\nMembers of the association’s points:\n\nEach member of the association will vote for the code he considers the most beautiful. After each member of the association has voted, the codes will be ranked in descending order according to the number of votes they received from the members of the association. The first code (the one with the most votes) will be awarded n$n$ points, and each subsequent code will be awarded one point less than the previous one.\n\nTotal points:\n\nThe total number of points for each code is equal to the sum of the points awarded by the president and the number of points awarded by the members of the association.\n\nYour task is to print the order of codes in descending order according to the number of points.\n\nIf more codes have the same number of points, then the better ranked one is the one that has won more points from the members of the association.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31600","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAs you may know, pho is one of the most common dishes in Hanoi. It contains a special kind of flour noodles, meat (usually beef or chicken), and green onions dipped in a tasty broth. Vietnamese people enjoy pho for breakfast, lunch, dinner, and even light meals. For tourists, trying pho is a must, especially in the cold of Hanoi.\n\nYou own a phở bò (beef pho) restaurant in Vietnam with n$n$ tables, numbered 1$1$ to n$n$. The 2024 ICPC Asia Pacific Championship contestants are currently in your restaurant. Each contestant is initially seated at one of the tables and there is at least one contestant initially seated at each table.\n\nEach contestant would like to order one of the two most well-known kinds of pho: phở tái (pho with medium-rare beef) or phở chín (pho with well-done beef). The initial state of table i$i$ is represented by the binary string Si$S_i$. The length of S_S_$S_$i is the number of contestants initially seated at table i$i$. The j$j$-th character of Si$S_i$ is 0$0$ if the j$j$-th contestant initially seated at the table would like to order a phở tái, and 1$1$ if the contestant would like to order a phở chín.\n\nTo make it easier to track the orders, the restaurant wants the contestants seated at the same table to have the same order. That is, for each table, at least one of the following must be true:\n\n\n\tAll of the contestants seated at that table would like to order a phở tái.\n\tAll of the contestants seated at that table would like to order a phở chín.\n\n\nTo satisfy this requirement and the contestants’ orders, you want to move zero or more contestants to a different table. The destination table must be one of the n$n$ tables. In other words, you must not add new tables. There is no limit to the number of contestants that can be seated at the same table. After moving the contestants, the following condition should be satisfied by each table: either there is no contestant seated at that table or all contestants seated at that table would like to order the same dish.\n\nSince moving contestants takes some time, you would like to compute the minimum number of contestants you need to move.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31601","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tSymmetrical figures are beautiful—and they are the subject of this task. A region in a 2D plane is convex if, for every pair of points p$p$ and q$q$ in the region, the segment connecting p$p$ and q$q$ is entirely included in the region. Also, a region in a 2D plane is point-symmetric if, when you rotate the region by 180$180$ degrees around a certain point, the rotated region exactly matches the original region.\n\nYou are given a convex polygon in a 2D plane with n$n$ vertices, numbered from 1$1$ to n$n$ in counterclockwise order. Vertex i$i$ has coordinates (xi,yi)$(x_i , y_i)$. No three vertices are collinear. Determine whether there exists a convex, pointsymmetric region containing all of the n$n$ vertices on its boundary. If one or more such regions exist, compute the minimum area among all of them.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31270","content":"문제\n\nVrsar is a small coastal town consisting of \nn\n$n$ hills. Surprisingly, all the hills, when viewed from the sea, are arranged one behind the other so that the \ni\n$i$-th hill is \nxi\n$x_i$ meters away from the sea. At the top of each hill, there is an ice rink. All ice rinks open simultaneously every day, but they do not close at the same time: the \ni\n$i$-th ice rink is open for \nti\n$t_i$ minutes.\n\nIva and Mia have come to Vrsar and will be here for \nm\n$m$ days. Iva and Mia love ice skating and want to skate every day they spend in this town. At the beginning of the \ni\n$i$-th day, they are \nai\n$a_i$ meters away from the sea, and their ice-skating adventure starts at the same time as the ice rinks open. To reach an ice rink, they must walk to it, moving at a speed of one meter per minute. They can walk both to the left and to the right. If they are at a position where there is a hill, they can climb the hill and reach the ice rink on top of it, or they can bypass it without climbing.\n\nThey are in very good shape, so they can climb the hill without spending extra time. Once they reach the top, they can skate as much as they want or until the ice rink closes. Going downhill is not as easy as going up. Recently, it rained, and the ground is slippery, so it takes si minutes for them to descend the \ni\n$i$-th hill. After descending from a hill, they can continue walking towards the next ice rink.\n\nThe illustration shows the first example.\n\nIva and Mia are at the starting point at position \n1\n$1$. They walk for \n2\n$2$ minutes to the ice rink on the hill at position \n3\n$3$ and ice skate there for \n5\n$5$ minutes. Then they descend from the hill (in \n0\n$0$ minutes), continue walking for \n3\n$3$ minutes to the ice rink on the hill at position \n6\n$6$, and ice skate there for \n1\n$1$ minute. In total, they have ice skated for \n5+1=6\n$5 + 1 = 6$ minutes.\n\nIva and Mia are interested in determining the maximum number of minutes they can ice skate each day. In one day, they can visit any number of ice rinks. Since they want to spend more time skating and less time calculating, they have turned to you for help. Help them solve this problem!\n\nNote: If Iva and Mia at the beginning of the day are at the same position as a hill, they are at the bottom of the hill, and so they have to climb it if they want to ice skate on the ice rink on top of it."},{"problemId":"31568","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n근성은 나무에 관심이 많다.\n\n\n드루이드 근성은 나무를 관리하는 산림의 수호자이다. 근성이 관리하는 나무는 트리 형태를 이루고 있으며, 얼마나 관리가 잘 됐는지 무려 N$N$개나 되는 정점을 가지고 있다. 근성은 모든 정점을 소중하게 여겨서 N$N$개의 정점들에 각각 1$1$에서부터 N$N$까지의 고유한 정점 번호를 일일이 매겨놓았다.\n\n어느 날, 근성의 멋진 나무를 항상 시기해 오던 사악한 악당 영도가 근성의 나무에 불을 지르고 말았다! 근성이 나무를 최대한 온전히 보존하기 위해서는, 나무가 완전히 타서 없어지기 전에 나무의 각 정점에 저장된 데이터들을 최대한 많이 복제해야 한다.\n\n초기에 영도는 a$a$번 정점을 불태웠고, 근성은 불에 타지 않은 b$b$번 정점 위에 서 있다. 근성은 불에 타지 않은 정점 위에서 다음 행동 중 하나를 선택하여 수행할 수 있다.\n\n\n\t복제하기: 근성이 현재 정점에서 데이터를 복제한다. 이 행동은 시간을 소모하지 않는다. 단, 데이터를 이미 복제한 정점에서는 다시 데이터를 복제할 수 없다.\n\t이동하기: 근성이 현재 정점에서 간선을 따라 이웃한 불에 타지 않은 정점 중 한 곳으로 이동한다.\n\t기다리기: 근성이 현재 정점에서 이동하지 않고 대기한다.\n\n\n만약 근성이 이동하기 또는 기다리기를 선택했다면, 수행하는 시간 동안 불타는 정점과 이웃한 관계에 있는 아직 불타지 않는 정점들로 불이 옮겨 붙는다.\n\n만약 근성이 다음 행동으로 불타는 정점 위에 있게 된다면, 그 즉시 근성은 더 이상의 나무 보존 작업을 포기하고 나무에서 탈출할 것이다. 근성이 정점에 도착함과 동시에 해당 정점으로 불이 옮겨붙는다면 근성은 해당 정점에서 데이터를 복제할 수 없다.\n\n당신이 해야 할 일은 근성이 탈출하기 전까지 데이터를 복제할 수 있는 나무의 정점 개수의 최댓값을 구하여 근성에게 알려주는 것이다. 산림의 수호자 근성이 최대한 많은 데이터를 보존할 수 있도록 도와주자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31583","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이제 막 C언어 수업을 마친 파릇파릇한 새내기 승희와 비니는 함수컵에 참가하기로 결정하였다. 불행히도, 함수컵의 난이도는 둘이서 풀기엔 매우 어려웠기 때문에 이 둘은 심심풀이로 함수컵의 문제에 대해서 이야기하기 시작했다.\n\n\n승희: 이번 함수컵의 문제는 왜 ABC순이 아닐까?\n\n비니: ABC순이 아니면...... 뭔가 첫 글자에 숨어있는 암호가 있지 않을까?\n\n승희: 흠, ‘P, L, 2, Z, G, O, B, 1, T, O, A, 포’...... 뭔가 있어 보이는데, 무언가 보이기도 하는 것 같고.\n\n비니: 그냥 한글로 읽어보자. ‘플리즈(PL2Z) 고(GO) 비원(B1) 투(TO) 에이포(A포)’?!\n\n승희: B1에서 A4로 가라는 것이 뭔 말이지?\n\n\n승희가 의문을 품은 상태로 옆을 돌아본 순간, N×N$N \\times N$ 크기 격자 모양의 보드게임이 떡하니 생겼다. 보다시피 B행 1열에 말이 놓여있고 A행 4열에 깃발이 놓여있으며 대각선 칸에 물이 배치되었다. 물이 교묘하게 배치되었기 때문에 말을 상하좌우로 이동하여 물을 지나지 않고 깃발이 있는 곳으로 갈 수 없다.\n\n\n\n조금의 시간이 지나 승희와 비니는 게임판의 한 행이나 한 열을 통째로 들어낼 수 있다는 것을 깨닫고 게임판을 뒤섞기 시작했다. 승희는 게임판의 두 행을 들어내서 위치를 바꾸어 다시 끼우고, 비니는 게임판의 두 열을 들어내서 위치를 바꾼다.\n\n승희와 비니가 게임판을 몇 번 바꾸니 게임판의 상태는 아래와 같이 변했다.\n\n\n\n이번에는 B1에 있는 말이 무난하게 A4로 갈 수 있다. B1에 있는 말이 A4로 가는데 필요한 이동횟수는 최소 5이다. 승희와 비니가 게임판을 바꿀 때마다 B1에서 A4로 가는 경로는 계속 바뀐다.\n\n승희와 비니는 자신들이 게임판을 바꿀 때마다 B1에서 A4까지 가는 가장 빠른 경로가 어떻게 바뀌는지 알아보려고 한다. 승희와 비니를 도와 게임판을 바꿀 때마다 최단거리가 어떻게 변하는지 구하는 프로그램을 작성하여라. 편의상 Z행 이후의 행들은 AA행, AB행, …, AZ행, BA행, …, ZZ행, AAA행, AAB행, … 순으로 표기한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31602","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThere are n$n$ cities in Asia-Pacific, numbered from 1$1$ to n$n$. The 2024 ICPC Asia Pacific Championship is held in Hanoi, which is city n$n$.\n\nThere are m$m$ bidirectional roads, numbered from 1$1$ to m$m$, connecting some pairs of cities. Road i$i$ connects cities ui$u_i$ and vi$v_i$ and takes ti$t_i$ units of time to travel in either direction. Each road connects different cities and different roads connect different pairs of cities.\n\nYou live in city 1$1$. You would like to travel to city n$n$ to attend the contest through a sequence of roads, and then travel back to city 1$1$ through a sequence of roads. Traveling through the same route is boring, so you would like the routes in both traversals to be different. Two routes are considered different if the set of distinct roads traversed through one route is different from the set of distinct roads traversed through the other route.\n\nIn each traversal, it is possible to pass through the same city or road multiple times. It is also possible to continue traversing after reaching the destination city (i.e., city 1$1$ or city n$n$). The traversal time is the sum of the travel times of the roads passed through in the traversal. If a road is passed through multiple times in the traversal, then the travel time of the road is also counted multiple times accordingly.\n\nDetermine the minimum total traversal time to do both traversals satisfying the requirements above, or indicate if the requirements cannot be satisfied.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31569","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t길이가 N$N$인 정수 수열 A1,A2,…,AN$A_1,A_2,\\dots,A_N$이 주어진다. 이때 다음 쿼리를 수행하는 프로그램을 작성해보자.\n\n\n\t 1$1$ l$l$ r$r$ x$x$: Ai⊕Aj⊕Ak=x$A_i \\oplus A_j \\oplus A_k = x$ (l≤i<j<k≤r)$(l \\le i < j < k \\le r)$를 만족시키는 순서쌍 (i,j,k)$(i,j,k)$가 존재한다면 1, 존재하지 않으면 0을 출력한다. 여기서 ⊕$\\oplus$는 Bitwise XOR 연산을 의미한다.\n\t 2$2$ l$l$ r$r$ x$x$: l≤i≤r$l \\le i \\le r$인 모든 i$i$에 대해 Ai$A_i$를 (Ai+x)mod64$(A_i+x)\\bmod 64$로 바꾼다.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31584","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t친한 친구 민형이와 선율이가 재미있는 게임을 한다. 게임은 아래와 같이 N$N$개의 버튼과 N−1$N-1$개의 전구가 있는 게임판에서 이루어진다. 여기서 N$N$은 항상 짝수이다.\n\n\n\n게임은 민형이와 선율이가 번갈아 버튼을 누르는 방식으로 진행된다. 매 순간마다, 민형이와 선율이는 이때까지 눌리지 않은 버튼 중에서 하나를 골라 누른다. 선율이가 버튼을 누르면 민형이가 방금 전에 눌렀던 버튼과 선율이가 누른 버튼 사이에 있는 모든 전구의 상태가 바뀐다. (꺼져있는 전구는 켜지고, 켜있는 전구는 꺼진다.)\n\n처음에는 모든 전구가 꺼져있다. 이 상태에서 민형이가 2번째 버튼을 누르고 선율이가 4번째 버튼을 누르면 게임판의 상태가 아래와 같이 바뀐다.\n\n\n\n여기에서 민형이가 3번째 버튼을 누르고 선율이가 5번째 버튼을 누르면 게임판의 상태가 아래와 같이 바뀐다.\n\n\n\n민형이와 선율이가 N$N$개의 버튼을 모두 누르면 게임이 끝난다. 게임이 끝난 후, 켜진 전구가 꺼진 전구보다 더 많으면 선율이가 이기고, 그 이외에는 민형이가 이긴다.\n\n선율이는 게임의 긴장감을 조성하기 위해 진 사람이 민형, 선율 둘을 포함한 16명의 친구들에게 치킨을 쏘겠다는 제안을 했다. 알다시피 16명분의 치킨은 매우 비싸기 때문에 선율이가 게임에서 진다면 기껏 파격적인 제안을 했다가 거액을 내야 하는 대참사가 일어날 수 있다. 선율이가 이길 수 있도록 전략을 짜는 프로그램을 작성하여라. 물론 선율이가 이길 수 있는 전략은 항상 존재한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31531","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t무한히 긴 직선 위에 공 N$N$개가 놓여 있다. 각 공은 정지해 있거나, 왼쪽으로 움직이거나, 오른쪽으로 움직인다. 초기 공들의 위치는 모두 다르다.\n\n리듬게임 장인인 현제는 공들이 계속 움직이다가 다른 공과 충돌하는 모습을 보며 일정한 리듬이 있다고 생각하다 게임을 만들었다. 처음에는 0$0$점으로 시작하며, 공들끼리 충돌할 때 다음과 같이 점수를 얻고 공들의 상태가 바뀐다.\n\n\n\t왼쪽으로 움직이던 공과 오른쪽으로 움직이던 공이 충돌하면, 두 공 모두 진행 방향이 반대로 바뀌게 된다. 이 경우 1$1$점을 얻는다.\n\n\n\n\n\n\t움직이던 공과 정지해 있던 공이 충돌하면, 움직이던 공은 그 자리에 정지하며, 정지해 있던 공은 움직이던 공이 이동하던 방향으로 움직인다. 이 경우 2$2$점을 얻는다.\n\n\n​​​​​​​\n\n\n\t왼쪽으로 움직이던 공과 정지해 있던 공, 오른쪽으로 움직이던 공이 동시에 충돌하면, 왼쪽으로 움직이던 공과 오른쪽으로 움직이던 공은 모두 진행 방향이 반대로 바뀌게 되며, 정지해 있던 공은 계속 정지해 있는다. 이 경우 5$5$점을 얻는다.\n\n\n​​​​​​​\n\n한 번의 충돌이 여러 조건을 만족할 경우, 점수가 가장 높은 조건만 적용된다.\n\n공이 더 이상 충돌하지 않을 만큼의 시간이 지났을 때 총점을 구해보자. 여기서 총점은 얻은 점수의 합이다.\n\n움직이는 공들은 모두 1$1$의 속력을 유지하며, 충돌 이후 새로 움직이는 공의 속력도 마찬가지이다. 공은 길이나 부피가 무시할 만큼 작아 없다고 가정하며, 충돌을 제외하고는 공의 운동 방향, 속력 등의 상태가 유지된다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31620","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tN 個のライトが横一列に並んでおり，左から順に 1 から N までの番号が付けられている．それぞれのライトの色は赤，緑，青のいずれかである．ライトの色は文字列 S によって表され，ライト i (1 ≦ i ≦ N) の色は，S の i 文字目が R のとき赤，G のとき緑，B のとき青である．最初すべてのライトは点灯している．\n\nJOI 君は点灯しているライトが 1 つ以上ある限り，以下の 3 種類の操作を好きな順番で好きな回数行うことができる．操作を 1 回も行わなくても構わない．\n\n\n\tA 円を払って点灯しているライトの中で最も左にあるものを消灯する．\n\tB 円を払って点灯しているライトの中で最も右にあるものを消灯する．\n\tC 円を払って点灯しているライトを 1 つ選び，好きな色へ点灯し直す．\n\n\nJOI 君は，遠くからこのライトの列を見たときにきれいな白色に見えるようにしたい．そのためには，点灯しているライトを左から見たときの色の並びが RGBRGB...RGB のように RGB（赤緑青）の繰り返しになっている必要がある．ただし，1 つも点灯しているライトが存在しない場合も RGB の繰り返しであるとみなす． GBRGBR や RGBRG などの色の並びは条件を満たさないことに注意せよ．\n\nライトと操作に必要な金額の情報が与えられたとき，点灯しているライトの色の並びを RGB の繰り返しにするために必要な金額の最小値を求めるプログラムを作成せよ．\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31603","content":"문제\n\nYour friend wants to quiz you. You are given a rooted tree with \nn\n$n$ nodes, numbered from \n1\n$1$ to \nn\n$n$. For every node \ni\n$i$, its parent is node \npi\n$p_i$, except for the root (the node without a parent) which has \npi=0\n$p_i = 0$. Node \nu\n$u$ is an ancestor of node \nv\n$v$ if either \nu=v\n$u = v$, or node \nu\n$u$ is an ancestor of the parent of node \nv\n$v$ (if it exists).\n\nWe say that node \nz\n$z$ is a common ancestor of nodes \nx\n$x$ and \ny\n$y$ if node \nz\n$z$ is an ancestor of both nodes \nx\n$x$ and \ny\n$y$. We say that node \nz\n$z$ is the lowest common ancestor of nodes \nx\n$x$ and \ny\n$y$ if it is a common ancestor of nodes \nx\n$x$ and \ny\n$y$, and every common ancestor of nodes \nx\n$x$ and \ny\n$y$ is also an ancestor of node \nz\n$z$. We denote the lowest common ancestor of nodes \nx\n$x$ and \ny\n$y$ by \nLCA(x,y)\n$LCA(x, y)$. In particular, \nLCA(x,x)=x\n$LCA(x, x) = x$.\n\nYour friend would like to run the following pseudocode:\n\nlet L be an empty array\nfor x = 1 to n\n  for y = 1 to n\n    append ((x - 1) * n * n + (LCA(x, y) - 1) * n + (y - 1)) to L\nsort L in non-decreasing order\n\n\nYour friend has \nq\n$q$ questions, numbered from \n1\n$1$ to \nq\n$q$. In question \nj\n$j$, you are given an integer \nkj\n$k_j$ and asked to find the \nkj\n$k_j$-th element of the array \nL\n$L$. Note that \nL\n$L$ is \n1\n$1$-indexed, so the indices range from \n1\n$1$ to \nn2\n$n^2$, inclusive. To pass the quiz, you have to answer all of the questions."},{"problemId":"31271","content":"문제\n\nSilvia is at the Milano Centrale railway station and she noticed that the station has a lot of platforms. She thought that there are too many of them, so she decided to check how many of them are actually needed.\n\nSilvia also noticed an interesting fact that holds at this station: the schedule of arrivals and departures repeats every two days, and additionally, the schedule is such that all \nn\n$n$ trains arrive at the station on one day, and leave the station on the other day. Note that in this way no train will leave before all trains have arrived.\n\nThe platforms at the station are long enough so that all \nn\n$n$ trains can be lined up one after another on the same platform. However, if train \nx\n$x$ enters the platform first, and then train \ny\n$y$, then train \nx\n$x$ cannot leave the platform before train \ny\n$y$.\n\nThe illustration shows a possible train schedule on the platforms in the second sample test.\n\nThe labels on the train '\ni\n$i$ : \nai\n$a_i$/\nbi\n$b_i$' denote that the \ni\n$i$-th train will arrive \nai\n$a_i$-th at the station on the first day, and leave the station \nbi\n$b_i$-th on the second day.\n\nThe train (\n2\n$2$ : \n1\n$1$/\n2\n$2$) cannot leave the platform before the train (\n4\n$4$ : \n5\n$5$/\n1\n$1$).\n\nSilvia is interested in what is the minimum number of platforms needed so that all trains can be lined up on the platforms, without the possibility that a train cannot leave the platform because there is a train in front of it that has not yet left."},{"problemId":"31272","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tComing to Szeged, Mr. Malnar is, as usual, obliged to get acquainted with the local culture, and thus try all traditional meals, culinary specialties, and local drinks.\n\nWe can imagine Szeged as n$n$ interesting locations numbered from 1$1$ to n$n$ connected by n−1$n - 1$ bidirectional roads in such a way that there is a path using roads between every pair of interesting locations. Amazingly, Mr. Malnar needs exactly one minute to walk across each road. Time spent walking in an interesting location is negligible.\n\nMr. Malnar has a list of m$m$ restaurants he would like to visit. It consists of m$m$ positive integers where the i$i$-th number represents an interesting location near which there is the i$i$-th restaurant.\n\nOne problem is that Mr. Malnar must eat an ice cream in a pastry shop right after dining in a restaurant. Another problem is that he refuses to visit the same pastry shop twice.\n\nLuckily, he came prepared as he is familiar with m$m$ pastry shops whose locations he remembers as a list of m$m$ positive integers where the i$i$-th number represents an interesting location near which is the i$i$-th pastry shop.\n\nMr. Malnar is tired from his travel and doesn’t want to walk more than he has to, so he asks you to calculate how much will he have to walk and offer the order of visiting restaurants and pastry shops, as he is capable of navigating between them without help.\n\nMr. Malnar is currently at an interesting location number 1$1$ and must return to it at the end of his walk.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31585","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t N$N$마리의 정령들이 원형으로 둘러앉아서 색칠놀이를 하려고 한다. 각 정령들은 1,2,⋅⋅⋅,N$1, 2, \\cdot\\cdot\\cdot, N$번의 번호가 붙어있고, i$i$번 정령의 색은 i$i$이다.\n\n\n\n각 정령들은 시계방향을 기준으로 다음 위치에 있는 정령을 바라보고 있으며 항상 자신이 바라보는 정령을 색칠한다. A$A$번 색을 가진 정령이 다른 정령을 색칠한다면, 그 정령의 색은 현재 A$A$번 정령의 색과 똑같아진다. 위 그림에서 1번 정령이 4번 정령을 색칠하면 4번 정령의 색이 노란색(1번 색)이 된다.\n\n유현이는 정령들과 같이 있으며, 재율이는 다른 곳에 있다. 재율이는 메신저로 유현이와 소통하여 정령들을 모두 1번 색으로 칠하려고 한다.\n\n재율이는 유현이를 통해 정령들에게 앞에 있는 정령을 색칠하라는 지시를 내릴 수 있다. 그러면 각 정령들은 자신의 앞에 있는 정령을 자신의 색으로 칠한다. 허나 유현이는 한 번에 최대 한 마리의 정령에게만 지시를 내릴 수 있다.\n\n\n\n앞선 상황에서 3번 정령에게 지시를 내리면 왼쪽 그림과 같은 상황이 되며, 그 후 4, 5번 정령에게 지시를 내리면 오른쪽 그림과 같은 상황이 된다.\n\n재율이는 유현이에게 특정 색 정령이 있는지 물어볼 수 있다. 그러면 유현이는 정령이 모여있는 모습을 대강 보고 ‘있다’, ‘없다’ 중 한 가지 대답을 한다. 유현이는 한 번에 여러 색을 셀만큼 머리가 좋지 않기 때문에 오직 한 종류의 색에 대해서만 개수를 셀 수 있다. 정령을 세는데 시간이 꽤 걸리므로 그 사이에 정령들은 자기 본연의 색으로 돌아온다. 위 상황에서 재율이가 노란 정령이 있는지 물어본다면 유현이는 ‘노란 정령이 있다’라고 답을 하며, 정령을 센 후 1, 2, 3, 4, 5번 정령들은 노랑, 보라, 초록, 파랑, 빨강으로 변한다. 유현이가 색깔을 세기 전까지는 정령의 색이 변하지 않으므로 유현이의 대답이 틀릴 가능성은 없다.\n\n유현이가 정령들의 배치 상황을 찍어서 재율이에게 보내면 좋을 테지만, 유현이가 남은 모바일 데이터가 얼마 없어서 그럴 수 없다. 즉, 재율이는 정령들의 배치 상황을 모르는 상태에서 모든 정령들을 1번 색으로 바꿔야 한다.\n\n재율이를 도와 모든 정령들을 1번 색으로 바꾸는 프로그램을 짜보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31604","content":"문제\n\nYou are given \nn\n$n$ integers \na1,a2,…,an\n$a_1, a_2, \\dots , a_n$. You have a sequence of \nn\n$n$ integers \nB=(b1,b2,…,bn)\n$B = (b_1, b_2, \\dots , b_n)$ which initially are all zeroes.\n\nIn one operation, you choose two different indices \ni\n$i$ and \nj\n$j$, then simultaneously\n\nreplace \nbi\n$b_i$ with \nbi⊕ai⊕aj\n$b_i \\oplus a_i \\oplus a_j$, and\nreplace \nbj\n$b_j$ with \nbj⊕ai⊕aj\n$b_j \\oplus a_i \\oplus a_j$.\n\nNote that \n⊕\n$\\oplus$ represents the bitwise XOR operation, which returns an integer whose binary representation has a \n1\n$1$ in each bit position for which the corresponding bits of either but not both operands are \n1\n$1$. For example, \n3⊕10=9\n$3 \\oplus 10 = 9$ because \n(0011)2⊕(1010)2=(1001)2\n$(0011)_2 \\oplus (1010)_2 = (1001)_2$.\n\nYou want to compute the number of different possible sequences \nB\n$B$ you can obtain after performing zero or more operations. Since this number might be huge, calculate this number modulo \n998244353\n$998\\, 244\\, 353$.\n\nTwo sequences of length \nn\n$n$ are considered different if and only if there exists an index \ni\n$i$ (\n1≤i≤n\n$1 ≤ i ≤ n$) such that the \ni\n$i$-th element of one sequence differs from the \ni\n$i$-th element of the other sequence."},{"problemId":"31570","content":"문제\n\nIOI 나라는 특이하게도 정\nN\n$N$각형 모양의 섬에 세워졌다. \nN\n$N$개의 각 꼭짓점에 해당하는 위치마다 지역이 있으며, 이 지역들은 반시계 순서로 \n0,1,…,N−1\n$0, 1, \\dots , N - 1$의 번호가 붙어 있다. IOI 나라의 도로망은 다음과 같은 두 종류의 도로로 이루어진다:\n\n해변 도로: 해변 도로는 정\nN\n$N$각형의 인접한 꼭짓점에 해당하는 지역 사이를 연결하는 \nN\n$N$개의 도로이다. 다시 말해, 모든 정수 \n0≤i≤N−2\n$0 ≤ i ≤ N - 2$에 대해 \ni\n$i$번 지역과 \ni+1\n$i + 1$번 지역을 잇는 도로가 존재하며, \nN−1\n$N - 1$번 지역과 \n0\n$0$번 지역을 잇는 도로가 존재한다.\n육지 도로: 해변 도로로 직접 연결되어 있지 않은 두 지역을 선분 형태로 연결하는 육지 도로들이 총 \nN−3\n$N - 3$개 존재한다. 이 때, 각 육지 도로들은 끝점을 제외하고는 서로 만나지 않는다. 즉, 정\nN\n$N$각형에서 교차하지 않는 서로 다른 대각선 \nN−3\n$N - 3$개에 해당한다.\n\n한편, \nK\n$K$개의 지역을 잇는 어떤 도로망에 대해, 도로의 집합 \nT\n$T$가 다음 조건을 만족할 때 \nT\n$T$를 트리라고 한다.\n\n \n|T|=K−1\n$|T| = K - 1$ \n \nT\n$T$에 포함된 도로만 이용해서 모든 지역 사이를 이동할 수 있다.\n\n트리는 모든 지역을 연결하므로 운송에서 매우 중요한 역할을 차지한다. 하지만, 트리의 도로를 사용할 수 없을 때 이용할 수 있는 또 다른 트리가 있다면 안정성에 크게 도움이 될 것이다. 이에 도로망에 두 트리 \nT1\n$T_1$와 \nT2\n$T_2$가 존재하여 \nT1∩T2=∅\n$T_1 \\cap T_2 = ∅$를 만족할 때, 즉 어떠한 도로도 겹치지 않는 두 트리가 존재할 때, 그 도로망을 좋은 도로망이라고 정의한다.\n\nIOI 나라에서는 다음과 같이 새로운 지역과 도로를 건설하는 방안을 통해 좋은 도로망을 구축하고자 한다.\n\n지역 건설: 지역 \na\n$a$, \nb\n$b$, \nc\n$c$에 대해 \na\n$a$와 \nb\n$b$ 사이, \nb\n$b$와 \nc\n$c$ 사이, \nc\n$c$와 \na\n$a$ 사이를 직접 잇는 도로가 모두 존재할때, 세 지역이 이루는 삼각형의 내심에 새로운 지역 \nd\n$d$를 만들고, \na\n$a$와 \nd\n$d$ 사이, \nb\n$b$와 \nd\n$d$ 사이, \nc\n$c$와 \nd\n$d$ 사이를 도로로 연결한다. 새로운 지역 \nd\n$d$의 번호는 \nN\n$N$부터 순서대로 붙여진다. 동일한 세 지역에 대해서 지역 건설을 두 번 이상 할 수 없다. 다시 말해, 지역 건설에서 사용한 집합 \n{a,b,c}\n$\\{a, b, c\\}$ 는 매 건설마다 서로 달라야 한다.\n\nIOI 나라에서는 지역 건설을 여러 번 할 수 있지만, 가능한 적은 횟수의 지역 건설을 통해 겹치지 않는 두 트리가 존재하는 좋은 도로망으로 바꾸고자 한다. 좋은 도로망이 되기 위해서는 기존의 \nN\n$N$개 지역뿐만 아니라 새로 건설된 지역도 연결하는 겹치지 않는 두 트리가 존재해야 함에 주의하라. 여러분은 IOI 나라를 도와 도로망 문제를 해결해야 한다. 지역 건설의 횟수를 최소화하지 않아도 부분 점수를 받을 수 있음에 유의하라."},{"problemId":"31621","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tJOI 庭園は縦 N 行，横 N 列のマス目状に区切られた正方形の形をしている． 上から i 行目 (1 ≦ i ≦ N)，左から j 列目 (1 ≦ j ≦ N) のマスは区画 (i, j) と呼ばれている．\n\nJOI 庭園は土壌にあまり恵まれていないため，各区画には特定の 1 種類の色の花を，最大 1 本しか植えることができない． 具体的には，区画 (i, j) には Ai, j = R のとき赤，Ai, j = Y のとき黄，Ai, j = B のとき青の色の花を最大 1 本しか植えることができない．\n\nここで，この庭園の管理者である K 理事長は，航空写真を撮った時の見栄えを良くするため，次の手順で花を植えようと思っている．\n\n\n\t大きさを表す整数 r を決める．ただし 0 ≦ r ≦ (N-1) ÷ 2 を満たさなければならない．\n\t中心を表す区画 (x, y) を決める．ただし r+1 ≦ x ≦ N-r，r+1 ≦ y ≦ N-r を満たさなければならない．\n\t色 c0, c1, c2, …, cr をそれぞれ赤・黄・青の中から選んで決める．\n\tそれぞれの区画 (x', y') について，d = |x'-x| + |y'-y| に応じて以下の規則で花を植える．ただし，|t| は t の絶対値を表す．\n\t\n\t\td ≦ r であるならば，区画 (x', y') には色 cd の花を植える．\n\t\td > r であるならば，区画 (x', y') には花を植えない．\n\t\n\t\n\n\n庭園の大きさ，各区画に植えることができる花の色の情報が与えられたとき，K 理事長が植えることができる花の数の最大値を求めるプログラムを作成せよ．\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31605","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tZack’s Zergonomics Zegree has taught him that the optimal way to display items in a store is to stack them into a zig-zag pattern.\n\nZack needs to display n$n$ boxes lined up on the storefront, each one containing an action figure. These boxes can be stacked on top of one another, and they are identical and indistinguishable from each other. His goal is to decide the number of stacks, and then stack up the boxes such that each stack is non-empty, and the numbers of boxes in the stacks form a zig-zag sequence.\n\nFormally, if there are s$s$ (s≥1$s ≥ 1$) stacks numbered 1$1$ to s$s$ from left to right, and stack i$i$ contains ai$a_i$ boxes, then the following conditions must be satisfied:\n\n\n\t ai≥1$a_i ≥ 1$ for each i$i$ from 1$1$ to s$s$,\n\t a1+a2+⋯+as=n$a_1 + a_2 + \\dots + a_s = n$, and\n\tat least one of the following is true:\n\t\n\t\t a1<a2>a3<a4>…$a_1 < a_2 > a_3 < a_4 > \\dots$, or\n\t\t a1>a2<a3>a4<…$a_1 > a_2 < a_3 > a_4 < \\dots$ \n\t\n\t\n\n\nFor example, for n=6$n = 6$, there are 12$12$ ways as illustrated by Figure M.1.\n\n\n\nFigure M.1: All 12$12$ possible ways for n=6$n = 6$.\n\nFind the number of different ways Zack can stack n$n$ boxes modulo 998244353$998\\, 244\\, 353$.\n\nTwo ways are considered the same if and only if the number of stacks is the same, and pairs of stacks at the same positions have the same number of boxes.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31586","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t진우는 함수컵 예비소집에 나온 도시와 비트코인 문제를 보고 아래와 같은 코드로 문제를 풀었다.\n\n\n#include <stdio.h>\n\nint N, M, arr[301][301];\n\nbool solve() {\n    ... // 중략\n}\n\nint main() {\n    scanf(\"%d%d\", &N, &M);\n    for(int i=0; i<N; i++) {\n        for(int j=0; j<M; j++) {\n            scanf(\"%d\", &arr[i][j]);\n        }\n    }\n    puts(solve() ? \"Yes\" : \"No\");\n    return 0;\n}\n\n\n \n\n진우가 코드를 제출한 후 채점 결과를 기다렸다가 틀렸습니다 결과를 보고 충격을 받았다. 진우는 4시간 동안 '맞았는데 왜 틀리지?'를 중얼거리면서 고민하다가, N$N$과 M$M$을 반대로 입력했다는 것을 깨달았다. 결국 진우는 N$N$과 M$M$을 입력하는 부분만 바꿔서 맞았습니다!! 를 받았다.\n\n이러는 진우를 본 명준이는 이 문제를 C모 사이트 대회에 내면 재미있겠다는 생각이 들었다. 명준이는 프리테스트(Pretest, 대회 도중에 제공하는 데이터)에는 약한 데이터만을 넣어두어서 진우가 틀린 코드를 냈을 때 맞았습니다!! 결과를 보고 방심했다가 시스템 테스트(Systest, 대회 이후에 추가로 채점하는 데이터)에서 결과가 바뀌는 것을 기대하고 있다.\n\n명준이는 진우의 코드를 통과시키는 약한 데이터를 제작하려고 한다. 명준이는 우선 N×M$N \\times M$개의 격자 값을 모두 0으로 초기화했다. 이제 명준이는 격자의 일부 값을 1로 바꾸려는데 명준이의 컴퓨터는 별로 좋지 않기 때문에 각 격자의 값을 1로 바꾸는 데 좀 시간이 걸린다. r$r$행 c$c$열의 값을 1로 바꾸기 위해서는 tr,c$t_{r,c}$ 만큼의 시간이 필요하다.\n\n명준이는 답이 No인 약한 데이터는 금방 만들었으나 답이 Yes인 약한 데이터는 만드는 데 너무 많은 시간이 걸린다. 어쩔 수 없이 명준이는 당신에게 도움을 요청했다! 명준이를 도와 약한 데이터를 최대한 빨리 만드는 프로그램을 작성하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31273","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tVito lives in a city with n$n$ parks labeled from 1$1$ to n$n$. The parks are connected with n−1$n - 1$ roads such that there is a path between any two pairs of parks. Every park has some beauty value, beauty value of i$i$-th park is vi$v_i$.\n\nLast night Vito decided to wander around the city in such a way that after he visits a park he chooses a random road with equal probability and visits a park to which that road leads. But before he started his journey he looked through the window of his skyscraper and saw that on every road there is either a blue or a red snake. Blue snakes attack all people traveling from the park with a lower label to a park with a higher one, a red snakes attack everyone traveling from a park with higher label to lower. As Vito doesn’t want to get attacked by a snake he decided to change his plans by considering only roads on which he will not get attacked by a snake when choosing a random road. Since he likes long walks he will not stop on his journey until there is at least one road he can safely pass.\n\nAnd while Vito walks down the stairs of his skyscraper he completely forgot on which road is red or blue snake so he wonders: If on every road there is an equal probability of a blue or a red snake, what is the expected beauty of my journey which starts in the i$i$-th park?\n\nBeauty of path is the sum of beauties of parks visited on that journey. Expected beauty of journey is defined as the sum of product of beauty of a path and probability Vito takes that path, for every possible path.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31532","content":"문제\n\n이 문제는 선형 회귀는 너무 쉬워 4와 문제에서 사용하는 식의 차수만 다릅니다.\n\n유림이는 선형 회귀에 자신이 있다. 그래서 MatKor 동아리에서 선형 회귀에 관한 수업을 할 때 집중하지 않았다. 당시 강사였던 동우는 이를 못마땅하게 여겨 유림이에게 과제로 선형 회귀는 너무 쉬워 1과 선형 회귀는 너무 쉬워 2를 내주었고, 유림이는 두 문제를 쉽게 풀었다.\n\n기존의 일반적인 선형 회귀 문제는 다음과 같다. 데이터 \n(x1,y1),(x2,y2),⋯,(xn,yn)\n$(x_1,y_1) ,(x_2,y_2) ,\\cdots ,(x_n,y_n)$이 주어졌을 때, 이를 가장 잘 설명하는 일차함수 \ny=ax+b\n$y=ax+b$를 찾는 문제이다. 여기서 주어진 점들 \n(xi,yi)\n$(x_i,y_i)$에 대해 \nxi\n$x_i$를 통해 얻는 추정치 \nyi^=axi+b\n$\\hat{y_i} =ax_i+b$로 정의하고, 실제 \nyi\n$y_i$에서 예측치인 \nyi^\n$\\hat{y_i}$를 뺀 값 \nyi−yi^\n$y_i-\\hat{y_i}$를 잔차 \nϵi\n$\\epsilon_i$로 정의한다.\n\n선형 회귀 문제는 이 잔차 제곱의 합이 \n0\n$0$에 가장 가깝게, 즉 \n\n\n\n\nf2(a,b)=∑i=1nϵi2=∑i=1n(yi−axi−b)2\n$f_2(a,b) =\\displaystyle\\sum_{i=1}^n\\epsilon_i^2=\\displaystyle\\sum_{i=1}^n(y_i-ax_i-b)^2$이 최소가 되도록 하는 실수 \na\n$a$와 \nb\n$b$를 찾는 문제이다.\n\n동우는 여기에서 더 발전시켜 잔차 \nk\n$k$제곱의 합 즉, \n\n\n\n\nfk(a,b)=∑i=1nϵik=∑i=1n(yi−axi−b)k\n$f_k(a,b) =\\displaystyle\\sum_{i=1}^n\\epsilon_i^k=\\displaystyle\\sum_{i=1}^n(y_i-ax_i-b)^k$이 \n0\n$0$에 가장 가깝게 하는 실수 \na\n$a$와 \nb\n$b$을 구하는 문제를 냈다.\n\n이 문제를 풀던 유림이는 너무 어려워서 동우에게 조금만 쉽게 바꿔 달라고 하자 동우는 조금 고민하다 다음과 같은 조건을 추가한다. ”\nk=3\n$k=3$일 때만 구해. 그리고 \ny\n$y$절편이 정해져 있을 때 기울기만 정해. 또, 모든 점의 \nx\n$x$좌표는 양의 정수, \ny\n$y$좌표도 정수라고 가정하자.”\n\n이제 유림이가 풀 문제는 다음과 같다. 주어진 \nb\n$b$에 대해 \n\n\n\n\nf3(a)=∑i=1nϵi3=∑i=1n(yi−axi−b)3\n$f_3(a) =\\displaystyle\\sum_{i=1}^n\\epsilon_i^3=\\displaystyle\\sum_{i=1}^n(y_i-ax_i-b)^3$이 \n0\n$0$에 가장 가깝게 하는 실수 \na\n$a$를 \na3\n$a_3$이라고 할 때, \na3\n$a_3$을 구하면 된다."},{"problemId":"31571","content":"문제\n\nKOI 사가 출시한 점프 게임은 일렬로 나열된 \nN\n$N$개의 발판을 여러 번의 점프를 통해서 통과하는 게임이다. 구체적으로, 수직선 상에 \nN\n$N$개의 발판이 존재하며, 각 발판들은 왼쪽에서 오른쪽으로 \n0,1,…,N−1\n$0, 1, \\dots , N - 1$의 번호가 매겨져 있다. 맨 처음 게임의 주인공은 가장 왼쪽 발판인 \n0\n$0$번 발판에 있으며, \n0\n$0$의 점수로 시작한다.\n\n모든 \n0≤i≤N−1\n$0 ≤ i ≤ N - 1$에 대해, \ni\n$i$번 발판 위에서 주인공은 걷기 혹은 점프 중 하나의 행동을 선택한다. 주인공이 걷기를 선택한다면, 주인공은 \ni+1\n$i + 1$번 발판으로 이동하며, 점수의 변동은 없다. 주인공이 점프를 선택한다면, 주인공은 \ni+K\n$i + K$번 발판으로 이동하며, 점수가 \nA[i]\n$A[i]$만큼 증가한다. 이 때의 \nK\n$K$는 미리 정해진 수이다. 게임은 주인공이 \nN−1\n$N - 1$번 발판의 오른쪽으로 가면 게임이 성공적으로 종료된다. 게임에서 이는, \nN,N+1,…\n$N, N + 1, \\dots$번 발판에 도달하는 것으로 처리된다 - 번호가 \nN\n$N$ 이상인 발판은 실제로 존재하지 않지만, \nN−1\n$N -1$번 발판의 오른쪽이라는 의미로 간주된다. 게임의 목표는, 주인공을 적절히 조종하여 점수를 최대화하고 게임을 종료하는 것이다.\n\n인터넷 방송을 취미로 하는 상혁이는 이따금씩 KOI 사의 점프 게임을 하고는 한다. 상혁이는 이 게임을 나름대로 재미있게 즐기는 편이지만, 방송의 시청자들에게는 아쉽게도 그다지 좋은 반응을 받지 못하고 있다. 점프 게임이 시청자들에게 인기를 끌지 못 하는 이유는, 게임이 대단히 어렵고 지루하기 때문이다. 첫 번째로, 이 게임의 발판의 개수는 자그마치 \n1012\n$10^{12}$개에 달할 수 있다. 두 번째로, KOI 사의 훌륭한 개발자들도 이 정도로 많은 발판을 모두 디자인 할 수는 없어서, 다소 단순한 방법으로 각 발판을 구성하였다. KOI 사의 개발자들은 초기 모든 \nA[i]\n$A[i]$를 \n0\n$0$으로 설정한 후, \nQ\n$Q$번에 걸쳐서 다음과 같은 연산을 수행한다: 각 \nj\n$j$ (\n0≤j≤Q−1\n$0 ≤ j ≤ Q - 1$) 에 대해, 개발자들은 어떠한 구간 \n0≤L[j]≤R[j]≤N−1\n$0 ≤ L[j] ≤ R[j] ≤ N -1$를 골라 \nA[L[j]],A[L[j]+1],A[L[j]+2],…,A[R[j]]\n$A[L[j]], A[L[j] + 1], A[L[j] + 2], \\dots , A[R[j]]$을 \n1\n$1$씩 증가시켰다. 모든 연산을 마친 이후의 배열 \nA\n$A$가, 게임에서 각 발판에서 점프를 선택했을 때 얻는 점수가 된다.\n\n컴퓨터 과학에 관한 영상을 제작하는 당신은 KOI 사의 점프 게임을 최대의 점수로 종료하는 방법에 대한 영상을 만드는 생각을 하였다. 당신은 이 영상이 상혁이의 인터넷 방송을 즐기는 팬들을 대상으로 큰 인기를 끌 것이라고 생각하고 있지만, 효율적인 알고리즘이 존재하기에는 너무나도 거대한 크기의 게임이라는 것이 걱정이다. 모든 어려움을 이겨내고, 주어진 \n5\n$5$시간 안에 이 게임의 최고가 되어 보자."},{"problemId":"31274","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tЕдин от интересните факти за Ели е, че тя гледа телевизия. Нещо повече, тя следи на пръв поглед безмислени предавания, от типа на „Ало, Къщата”. Всъщност причината да го гледа е един от чаровните водещи на предаването – Косьо. В предаването се задават поредица лесни (особено пък за Ели) въпроси, на които хората се радват, че могат да отговорят и съответно се обаждат по телефона (правейки продуцентите на предаването, а съответно и водещите му, по-богати (и още по-привлекателни за Елеонора)).\n\nЕдна от загадките гласи следното: Какво е общото между числата 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768? Повечето от вас могат да си помислят, че това са първите няколко естествени степени на двойката, други биха предположили, че това е геометрична прогресия с фактор 2, трети биха измислили нещо друго. Всъщност една такава редица има много решения, като водещите могат да изберат коя от тях е „вярната” чак в края на предаването, така че никой от обадилите се да не спечели.\n\nПримерно, едно възможно решение би било: това е редица от числа, в които никоя цифра не се повтаря. Наистина, във всяко от горните числа, всяка цифра участва по най-много веднъж в десетичния запис на числото. След получаването на този неочакван отговор, Ели се замисля колко такива числа всъщност има? Например следващите няколко степени на двойката не са такива (65536, 131072, 262144, 524288), но пък следващото 1048576 отново е, докато 2097152 и 4194304 не са... Като цяло тези числа са сравнително непредсказуеми (е, до някъде ☺).\n\nЕли ви задава следната модифицирана задача: за даден интервал [A, B], определете колко цели числа от интервала отговарят на условието да нямат повтаряща се цифра в десетичния си запис. Числата също така не трябва да имат водещи нули. Напишете програма unique, която решава поставената задача.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31572","content":"문제\n\nKOI사에서는 알고리즘 대회를 홍보하기 위한 새로운 이벤트를 만들었다! 이벤트에 참가하기 위해서는 KOI사만이 알고 있는 비밀 수열 \nS\n$S$가 팰린드롬인지 판별해야 한다.\n\n수열을 뒤집었을 때의 결과가 원래의 수열과 같아지는 수열을 팰린드롬이라고 한다. 즉, 길이가 \nN\n$N$인 수열 \nS\n$S$가 팰린드롬이라는 것은, 모든 \n0≤i≤N−1\n$0 ≤ i ≤ N - 1$에 대해 \nS[i]=S[N−1−i]\n$S[i] = S[N - 1 - i]$이라는 것과 같다. 예를 들어, \n[1,2,3,2,1]\n$[1, 2, 3, 2, 1]$, \n[1,2,2,1]\n$[1, 2, 2, 1]$은 팰린드롬이지만 \n[1,2,3,1]\n$[1, 2, 3, 1]$, \n[1,2,2]\n$[1, 2, 2]$는 팰린드롬이 아니다.\n\n당신은 처음에 비밀 수열 \nS\n$S$의 길이 \nN\n$N$을 알고 있다. 또한, \nS\n$S$는 \n1\n$1$ 이상 \n5000\n$5\\, 000$ 이하의 정수로 이루어진 수열임도 알고 있다. 이벤트 참가자들을 돕기 위해, KOI사는 특별 제작한 두 가지 기계를 제공한다.\n\ncount_pair 기계에는 서로 다른 세 개의 수 \nx\n$x$, \ny\n$y$, \nz\n$z$를 입력해야 한다. 이때 기계는 \nS[x]\n$S[x]$, \nS[y]\n$S[y]$, \nS[z]\n$S[z]$ 중 같은 쌍의 개수를 반환한다. 예를 들어, \nS[x]=S[y]=S[z]\n$S[x] = S[y] = S[z]$ 일 경우 기계는 3을 반환한다.\nfind_character 기계에는 하나의 정수 \nx\n$x$와 정수들의 목록 \nY\n$Y$를 입력해야 한다. 이때 기계는 \nS[x]=S[y]\n$S[x] = S[y]$인 \ny\n$y$가 목록 \nY\n$Y$에 있다면 \n1\n$1$, 없으면 \n0\n$0$을 반환한다.\n두 가지 기계에 입력되는 모든 수는 반드시 \n0\n$0$ 이상 \nN−1\n$N - 1$ 이하의 정수여야 한다.\nfind_character 기계에 입력한 \nY\n$Y$의 크기의 합은 \nN\n$N$ 이하여야 한다.\n\n당신은 적은 횟수로 기계를 사용하여 비밀 수열 \nS\n$S$가 팰린드롬인지 판별해야 한다."},{"problemId":"31622","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tJOI 王国は N 個の都市からなる王国であり，これらの都市には 1 から N までの番号が付けられている． JOI 王国には，これらの都市を結ぶ一方通行の高速道路が M 本あり，1 から M までの番号が付けられている． 高速道路 i (1 ≦ i ≦ M) を通ると都市 Ai から都市 Bi に移動することができ，通行にかかる時間は Li である．\n\nそれぞれの高速道路を通るたびに，通行料金が発生する． 高速道路 i の通行料金は最も安い時で Ci だが，JOI 王国の労働者は皆時間外労働を嫌うため，ある基準となる時刻 0 から離れれば離れるほど通行料金が増えてしまう． 具体的には，都市 Ai を時刻 t に出発して高速道路 i を通行した場合，通行料金は定数 K を用いて Ci + K × |t| と表される． ただし，|t| は t の絶対値を表す．\n\n都市 1 に住んでいるあなたは，友達の住む都市 N へ出かける計画を立てている． あなたは高速道路を通って都市 1 から都市 N まで移動したいので，まずはそれが可能かどうか確かめ，可能ならば通行料金の総和が最小でいくらになるかも求めたい． ただし，移動経路や各都市を出発するタイミングは自由に決めることができる． 特に，都市 1 を負の時刻に出発したり，高速道路を通行せずどこかの都市に留まっている時間があったりしてもよい．\n\n高速道路の情報および定数 K が与えられたとき，高速道路を通って都市 1 から都市 N まで移動することが可能かどうか判定し， 可能な場合は通行料金の総和の最小値を求めるプログラムを作成せよ．\n\nなお，この問題の制約の下では，高速道路を通って都市 1 から都市 N まで移動することが可能な場合，通行料金の総和の最小値は必ず整数になることが証明できる．\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31606","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tリンゴが X 個，ミカンが Y 個，バナナが 3 個ある．リンゴとミカンとバナナが合わせて何個あるかを求めよ．\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31275","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tДадена е таблица, съставена от n + 1 реда и n стълба. В първия ред на таблицата са записани цели положителни числа, а на следващите n реда са пресметнати и записани съответно вторите, третите и т. н. степени на числата от първия ред.\n\nНапример, в следващата таблица n = 4 и тя съдържа степените на числата 3, 5, 2 и 1 до петата им степен:\n\n\n\t\n\t\t\n\t\t\t3\n\t\t\t5\n\t\t\t2\n\t\t\t1\n\t\t\n\t\t\n\t\t\t9\n\t\t\t25\n\t\t\t4\n\t\t\t1\n\t\t\n\t\t\n\t\t\t27\n\t\t\t125\n\t\t\t8\n\t\t\t1\n\t\t\n\t\t\n\t\t\t81\n\t\t\t625\n\t\t\t16\n\t\t\t1\n\t\t\n\t\t\n\t\t\t243\n\t\t\t3125\n\t\t\t32\n\t\t\t1\n\t\t\n\t\n\n\nНапишете програма power, която събира числата от диагонала на таблицата (както е показан на фигурата с получерен шрифт) и извежда резултата по модул, който е зададен като цяло положително число m.\n\nЗа примера, ако m = 3, тогава резултатът ще бъде 1, защото остатъкът при делене с 3 на сумата 9+125+16+1 е равен на 1.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31573","content":"문제\n\nKOI 도시는 지난 코로나19 대유행으로 많은 피해를 겪었기 때문에, 향후 발생할 수 있는 팬데믹 상황에 철저히 대비하려고 한다. 이를 위해, KOI 도시는 현재의 도시 구조가 바이러스에 어느 정도로 취약한지를 분석하고자 한다.\n\nKOI 도시는 \nN\n$N$개의 지점과 \nN−1\n$N - 1$개의 양방향 도로로 이루어져 있으며, 임의의 서로 다른 두 지점을 도로만을 사용하여 오갈 수 있다. 즉, 도시의 도로망은 트리 구조를 이룬다. 각 지점은 \n0\n$0$ 이상 \nN−1\n$N - 1$ 이하의 서로 다른 정수로 구분된다. 도시의 도로망이 트리이기 때문에, 두 지점 \nu\n$u$, \nv\n$v$에 대해서, \nu\n$u$번 지점에서 \nv\n$v$번 지점으로 이동하는 단순 경로는 유일하다. 이 유일한 경로의 간선의 개수를 \nu\n$u$와 \nv\n$v$의 거리 라고 정의하자.\n\nKOI 도시에는 \nM\n$M$명의 사람들이 살고 있다. 모든 \n0≤j≤M−1\n$0 ≤ j ≤ M - 1$에 대해, \nj\n$j$번 사람은 \nP[j]\n$P[j]$번 지점에 살고 있으며, 해당 지점에서 거리가 \nD[j]\n$D[j]$ 이하인 지점을 오갈 수 있다.\n\nKOI 도시의 바이러스학자들은, 두 사람 간에 바이러스가 전파되는 과정을 다음과 같이 모델링하였다. 모든 \n0≤v≤N−1\n$0 ≤ v ≤ N - 1$에 대해, \nv\n$v$번 지점의 전파 시간은 \nC[v]\n$C[v]$라는 양의 정수로 표현된다. \nj\n$j$번 사람이 시각 \nt\n$t$에 처음으로 바이러스에 감염되었다고 하고, \nj\n$j$번 사람에게서 바이러스를 전파받을 사람을 \nk\n$k$번 사람이라고 하자. \nw\n$w$번 지점을 \nj\n$j$번 사람과 \nk\n$k$번 사람이 공동으로 오갈 수 있다면 – 다시 말해, \nw\n$w$번 지점과 \nP[j]\n$P[j]$번 지점의 거리가 \nD[j]\n$D[j]$ 이하고 \nw\n$w$번 지점과 \nP[k]\n$P[k]$번 지점의 거리가 \nD[k]\n$D[k]$ 이하라면, \nw\n$w$번 지점은 전파의 매개체가 된다.\n\n만약에 전파의 매개체가 되는 지점이 없다면, \nk\n$k$번 사람은 \nj\n$j$번 사람으로부터 직접 바이러스에 감염되지 않는다. (물론 다른 사람을 통하여 간접적으로 감염될 수는 있다) 전파의 매개체가 되는 지점이 있다면, 그러한 지점 중 전파 시간을 최소화하는 지점의 번호를 \nx\n$x$라고 하자. \nk\n$k$번 사람이 만약 시각 \nt+C[x]\n$t + C[x]$에 바이러스에 감염되지 않았다면, \nk\n$k$번 사람은 그 시각에 \nj\n$j$번 사람에 의해 바이러스에 감염된다. 바이러스는, 모든 서로 다른 사람의 쌍 \n0≤j,k≤M−1\n$0 ≤ j, k ≤ M - 1$, \nj≠k\n$j \\ne k$에 대해 이러한 식으로 확산한다.\n\n위와 같은 모델링 하에서, KOI 도시의 연구진들은 \n0\n$0$번 사람이 시각 \n0\n$0$에 바이러스에 감염되었을 때, 다른 사람들이 바이러스에 언제 감염되는지를 계산하려고 한다. 당신은, 모든 \n0≤j≤M−1\n$0 ≤ j ≤ M -1$에 대해, \nj\n$j$번 사람이 처음으로 바이러스에 감염되는 시각을 계산해야 한다. 단, 만약 \nj\n$j$번 사람이 바이러스에 감염되지 않는다면, 그 시각을 \n−1\n$-1$ 이라고 기록해야 한다."},{"problemId":"31587","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t요식업체 오즈푸드는 궁극의 요리 'Oriental P.A.D.A.K'(이하 파닭)를 개발했다. 파닭은 누구나 좋아하는 음식인 치킨에 아삭한 식감의 파를 얹은 후 동양의 맛이 나는 '오리엔탈 간장소스' 를 부어서 먹는 음식이다.\n\n오즈푸드의 홍보대사 세형이와 성준이는 친구들을 불러서 파닭을 시식하고 있다. 세형이는 오즈푸드의 매뉴얼대로 '오리엔탈 간장소스'를 부었는데 이 사소한 행동이 싸움으로 번지기 시작하였다. 성준이는 모든 요리를 소스에 찍어먹는 취향이어서 세형이의 행동에 기겁을 했다. 더불어 성준이를 따르던 추종자(속칭 찍먹파)들이 모두 세형이를 비난했다. 그러자 세형의 추종자(속칭 부먹파)들은 모두 성준이를 비난했다.\n\n성준이는 '꾸물대면 소스가 더 번지니 빨리 먹자!'를 외치며 찍먹파 친구들에게 파닭을 빨리 먹도록 재촉하였다. 이에 맞서 세형이도 부먹파 친구들에게 파닭을 빨리 먹으라고 닦달하였다. 찍먹파 친구들은 소스가 닿지 않은 치킨 조각을 집어서 소스를 찍어서 먹으며, 부먹파 친구들은 소스가 닿은 치킨 조각을 집어서 먹는다. 세형이와 성준이를 포함한 모든 친구들은 초마다 최대 치킨 한 조각을 먹을 수 있으며 먹을 수 있는 치킨 조각이 있다면 항상 한 조각을 집어먹는다.\n\n'Oriental P.A.D.A.K'은 N$N$행 M$M$열 격자 모양의 상자 안에 담겨 있어서 각 격자에 치킨 한 조각이 들어있다. 세형이가 이미 소스를 부었기 때문에 K$K$개의 치킨 조각은 이미 소스에 적셔있다. 소스는 1초마다 격자의 상, 하, 좌, 우 사방으로 퍼지면서 치킨 조각을 적신다. 치킨 조각이 없는 곳에 있는 소스도 1초마다 똑같은 방식으로 퍼진다. 소스는 친구들이 조각을 집어먹은 후 퍼진다. 즉, 시간 순서대로 따지면 친구들이 치킨 조각을 먹음 → 소스가 퍼짐 → 친구들이 치킨 조각을 먹음 → … 순서대로 진행된다.\n\n부먹파 친구들은 세형이를 포함해서 총 B$B$명이며 찍먹파 친구들은 성준이를 포함해서 총 Z$Z$명이다. 성준이는 찍먹파 친구들이 어떤 조각을 집느냐에 따라 먹을 수 있는 치킨 조각의 수가 달라진다는 것을 깨달았다. 성준이를 도와 찍먹파 친구들이 치킨 조각을 얼마나 많이 먹을 수 있는지 구하는 프로그램을 작성하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31607","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t3 つの正の整数 A, B, C が与えられる．\n\nこのうちある 1 つの値がそれ以外の 2 つの値の和になっているなら 1 を，そうでないなら 0 を出力せよ．\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31533","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n1세대 WARBOY제품\n\n\nFuriosa AI에서 출시한 NPU(Neural Processing Unit)인 WARBOY는 세계적으로 가장 우수한 성능을 가진 NPU 중 하나로 인정받고 있다. 특히 1세대 제품 WARBOY는 이미지 분류와 객체 검증 등 영상 처리 가속에 있어 매우 빠른 속도를 제공한다. Furiosa AI는 올해 2세대 제품인 Renegade를 출시할 예정이다.\n\nGPU가 그래픽을 처리하기 위한 목적으로 만들어진 기능을 AI에도 사용한다면, NPU는 구조 자체가 AI에 최적화되어 있다. Furiosa AI의 WARBOY 제품은 이미 전세계적으로 가장 공신력 있는 AI 반도체 벤치마크 대회인 ’엠엘퍼프(MLPerf)’에서 이미지 분류, 객체 검증 등의 영상 처리 가속 속도 항목에서 가장 좋은 결과를 보여주었다.\n\n\n재현이와 우영이는 각자 컴퓨터를 한 대씩 가지고 있다. 두 사람은 MatKor의 활동을 위해 두 개의 영상 처리 작업을 해야 하는데, 각자의 컴퓨터로 하나의 작업을 하는데 걸리는 시간은 각각 m$m$, n$n$이다.\n\n이를 지켜보던 종우는 두 명에게 Renegade 제품 하나를 주었다. 컴퓨터에 이 제품을 탑재하면 작업 속도를 a$a$배로 만들어 준다.\n\n재현이와 우영이는 두 컴퓨터 중 하나에만 Renegade 제품을 탑재할 수 있으며, 한 컴퓨터에서 동시에 최대 한 개의 영상 처리 작업을 할 수 있다. 하나의 영상 처리 작업을 하는 도중에는 이 작업을 멈출 수 없다.\n\n재현이와 우영이가 가장 빠르게 영상 처리 작업을 모두 마치기 위해 소요되는 시간을 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31623","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tPresident K is taking on the role of adjusting the room temperature of the officers’ room. He wants to make the officers as comfortable as possible.\n\nNow there are N$N$ officers in the room. Each officer is numbered from 1$1$ to N$N$, and the appropriate temperature for officers i$i$ (1≤i≤N$1 ≤ i ≤ N$) is Ai$A_i$ degrees when (s)he is not wearing jackets. For each officer, the appropriate temperature drops by T$T$ degrees every time (s)he wears a jacket. In other words, when the officer i$i$ is wearing k$k$ jackets, her/his appropriate temperature is Ai−kT$A_i − kT$ degrees.\n\nWhen the room temperature is x$x$ degrees and the appropriate temperature of a certain officer is y$y$ degrees, the discomfort index of the officer is expressed as |x−y|$|x − y|$. Note that |t|$|t|$ represents the absolute value of t$t$. Each officer wears the appropriate number of jackets of 0$0$ or more to minimize discomfort index, depending on the room temperature.\n\nHere, president K decided to call the maximum discomfort index among all officers as room’s unpleasantness, and set the room temperature so that the room’s unpleasantness was minimized. Note that the room temperature must be an integer.\n\nWrite a program which, given information about the officers and the appropriate temperature, calculates the minimum room’s unpleasantness.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31276","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tКрасиви” ще наричаме числа, които са образувани от равни по дължина части от повтарящи се цифри, т.е. ако числото започва с цифрата X повторена k пъти, то след това е разположена някаква друга (различна от X) цифра Y, повторена отново k пъти, след което може да следва някаква различна от Y цифра (може да е отново X) повторена k пъти и т.н. Например, числата 112233, 111222111, 123, 1 са “красиви”, докато 11223, 11122111, 1233 - не са.\n\nНапишете програма prettynum, която, по зададена редица от N цифри, намира найголямото „красиво” число, цифрите на което са последователни елементи на дадената редица.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31574","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t N$N$마리의 개미가 각자 전 재산을 끌어 모아서 1BTC의 비트코인을 샀다 비트코인은 개미 모두의 것이기 때문에 개미들은 비트코인을 돌려가면서 관리하려고 한다.\n\n개미들은 모두 길이 L$L$인 막대에 서 있으며 왼쪽 또는 오른쪽을 바라보고 있다. 막대의 가장 왼쪽 끝 지점의 좌표는 이며 가장 오른쪽 끝 지점의 좌표는 L$L$이다. 개미들은 모두 정수 좌표에 서 있으며 같은 곳에 있는 개미는 없다.\n\n개미들은 자신이 바라보는 방향으로 1초에 1만큼 가는 속도로 움직이고 있다. 개미가 막대의 끝으로 가면 방향을 바꿔서 다시 걸으며, 두 개미가 서로 만난 경우(두 개미가 같은 좌표에 있는 경우)에는 두 개미 모두 방향을 바꾼다. 만약 비트코인을 가진 개미가 다른 개미와 만난다면, 개미는 비트코인을 건네주고 방향을 바꾼다. 개미가 방향을 바꾸거나 비트코인을 양도하는 데에는 시간이 걸리지 않는다.\n\n\n\n위 그림과 같이 네 마리의 개미가 비트코인을 가지고 있는 경우를 생각해보자. 잠깐의 시간이 지나면 아래 그림과 같은 상황이 벌어진다.\n\n\n\n보다시피, 첫 번째 개미와 두 번째 개미는 서로 만난 상태이며 네 번째 개미는 막대의 끝까지 갔다. 따라서 세 번째 개미를 제외한 모든 개미가 방향을 바꾼다.\n\n\n\n이 상황에서 약간의 시간이 지나면, 세 번째 개미와 네 번째 개미가 서로 만난다. 세 번째 개미가 비트코인을 가지고 있으므로, 세 번째 개미가 네 번째 개미에게 비트코인을 준 후 방향을 바꾼다.\n\n\n\n개미들은 T$T$초 후에 어떤 개미가 비트코인을 갖고 있을지 알아보려고 한다. 개미들의 정보가 주어졌을 때 T$T$초 후에 비트코인을 갖고 있는 개미의 번호를 구하는 프로그램을 작성하여라. 단 개미들은 매우 작아서 점으로 간주해도 무방하다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31608","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t整数 N と，2 つの長さ N の 文字列 S, T が与えられる．S と T のハミング距離を出力せよ．\n\nここで S と T のハミング距離とは，S の i 文字目と T の i 文字目が異なるような i (1 ≦ i ≦ N) の個数である．\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31277","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tЧисловата редица a1, a2, ..., aN се състои само от числата 1, 2, 4 и 8 (някои от тези числа могат и да не участват в редицата). Напишете програма seq, която отговаря на следните два въпроса:\n\n\n\tкаква е дължината (като брой елементи) на най-дългата подредица, състояща се от последователни елементи с една и съща стойност?\n\tкакъв е броят на четворките аi, аi+1, ai+2, ai+3 от последователни елементи в редицата, които съдържат и четирите числа 1,2,4 и 8, разположени в произволен ред?\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31588","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t민식이는 OJUZ 시에서 자취하고 있다. OJUZ 시는 N$N$개의 지역과 M$M$개의 양방향 도로로 이루어져 있으며 N$N$개의 지역 중 K$K$개의 지역에는 할인마트가 위치해있다. 지역의 번호는 1$1$ 이상 N$N$ 이하의 정수이며 특정한 두 지역을 직접 연결하는 도로는 최대 하나 있으며 모든 도로의 두 끝 지역은 다르다. 또한 임의의 지역에서 다른 지역으로 가는 방법이 항상 존재한다.\n\n민식이는 자기 일과가 끝나면 할인마트로 가서 요리재료와 간식거리를 산 후 자취방에 돌아온다. 민식이는 꽤 똑똑하기 때문에 항상 가장 빠른 길로 할인마트에 가서 물건을 산다. 허나, 어떤 경우에는 몇 개의 할인마트가 문을 닫을 때가 있다. 할인마트가 문을 닫으면 기존에 민식이가 가던 방법이 무용지물이 될 수 있다. 민식이는 자신이 자주 가던 할인마트가 문을 닫으면 어떤 할인마트로 가야 하는지 몰라 난감해한다.\n\n민식이를 도와 매 순간 어떤 할인마트로 가야 하는지 구하는 프로그램을 작성하여라. 단, 민식이가 할인마트에서 집까지 가는 시간은 무시한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31609","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t0 以上 9 以下の整数からなる，長さ N の数列 A = (A1, A2, …, AN) が与えられる．数列 A に少なくとも 1 回現れている整数をすべて，小さい順に出力せよ．\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31624","content":"문제\n\nThere are \nN\n$N$ stations in JOI Kingdom, numbered from \n1\n$1$ to \nN\n$N$. There are \nM\n$M$ train lines in JOI Kingdom, numbered from \n1\n$1$ to \nM\n$M$. The train line \ni\n$i$ (\n1≤i≤M\n$1 ≤ i ≤ M$) connects station \nAi\n$A_i$ and station \nBi\n$B_i$ bi-directionally, and requires \nCi\n$C_i$ minutes for travel.\n\nYou, a minister of JOI Kingdom, decided to construct a new train line as follows.\n\nYou choose integers \nu\n$u$ and \nv\n$v$, which satisfy \n1≤u<v≤N\n$1 ≤ u < v ≤ N$. You construct a new train line, which connects station \nu\n$u$ and station \nv\n$v$ bi-directionally, and requires \nL\n$L$ minutes for travel. Note that you can choose \n2\n$2$ integers such that there already be a train line connecting station \nu\n$u$ and station \nv\n$v$.\n\nAfter you construct a new train line, the King of JOI Kingdom becomes happy if he can move from station \nS\n$S$ to station \nT\n$T$ within \nK\n$K$ minutes by using some train lines. Note that transit times and waiting times for train lines are not considered.\n\nThere are \nN(N−1)2\n$\\frac{N(N-1)}{2}$ ways when you choose \n2\n$2$ integers \nu\n$u$ and \nv\n$v$, and you want to know how many of these ways make the King happy.\n\nWrite a program which, given information of stations, the train lines, and the King’s request, calculates number of ways to choose \n2\n$2$ integers that make the King happy."},{"problemId":"31575","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t전날에 비해 비트코인의 시세가 백만원이나 오른 어느 아침, 진우는 거래소에 가서 비트코인을 매도하려고 한다. 현재 비트코인의 시세가 점점 떨어지고 있기 때문에 진우는 최대한 빨리 거래소에 가야 한다.\n\n도시는 가로 N$N$, 세로 M$M$ 크기의 격자 모양으로 이루어졌다. 진우는 북서쪽 끝에 있고 거래소는 남동쪽 끝에 있다. 도시의 일부 구역은 공터 또는 도로라서 진우가 지나갈 수 있지만, 어떤 구역은 건물이 있어서 진우가 갈 수 없다.\n\n진우는 최대한 빨리 거래소에 가야 하므로, 동쪽(오른쪽) 또는 남쪽(아래쪽)으로만 이동하여 거래소로 도착할 수 있어야 한다. 진우를 도와 거래소로 갈 수 있는지 구하는 프로그램을 작성하여라. 진우의 현재 위치가 거래소일 수 있다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31278","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tВие искате да паркирате колите на гостите, пристигащи на рождения ви ден, на улицата. Съгласно правилата, не могат да се паркират коли:\n\n\n\tПред гараж;\n\tНа спирка на автобус, а също и до 10 метра преди нея;\n\tНа пешеходна пътека, а също и до 5 метра преди и след нея.\n\n\nВие сте съставили планове на околните улици, разбивайки ги на участъци с дължина 5 метра (това е минималната дължина за едно паркомясто). Участъците с гараж са обозначени на плана със символа 'D', автобусните спирки - с 'B', пешеходните пътеки – с 'S', свободните места за паркиране – с '-'. Движението по улиците е еднопосочно и се паркира само от страната на движението.\n\nНапишете програма parking, която намира броя на паркоместата за всяка улица.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31279","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tГраницата на държавата Олимпия представлява окръжност, по която на равни разстояния (по окръжността) едно от друго са разположение N летища. Разстоянието по окръжността между две съседни летища е d (цяло, положително число). По границата патрулират два самолета (да ги наречем самолет 1 и самолет 2). Всеки самолет трябва да обиколи точно по един път всички N летища,като се спазват следните правила:\n\n\n\tИзлитайки от някакво летище, самолет 1 трябва да лети по посока на часовниковата стрелка точно по границата, прелитайки, без да каца, над ap1 на брой летища и след това да кацне на първото летище, на което все още не е кацал. След това отново излита, спазвайки същите правила, и така, докато обиколи всички N летища.\n\tИзлитайки от някакво летище, самолет 2 трябва да лети по посока, обратна на часовниковата стрелка, точно по границата, прелитайки, без да каца, над ap2 на брой летища и след това да кацне на първото летище, на което все още не е кацал. След това отново излита, спазвайки същите правила, и така, докато обиколи всички N летища.\n\tПървоначално и двата самолета се намират на едно и също летище, от което започват първите си полети (смята се, че това летище и двата самолета вече са посетили). Накрая всеки остава на летището, което е посетил последно.\n\tПолетите на самолетите се редуват – първо лети (докато кацне) самолет 1, след това излита самолет 2, след неговото кацане отново излита самолет 1 и т.н. докато всеки от двата самолета посети всичките N летища.\n\n\nНапишете програма planes, която отговаря на следните въпроси:\n\n\n\tКакво разстояние е изминал всеки от самолетите докато обиколи всичките N летища?\n\tКолко пъти се е случило на едно и също летище, в един и същи момент, да се окажат и двата самолета (ще казваме, че в този случай те се засичат)? За засичане се брои и това, че първоначално двата са били на едно и също летище.\n\tКолко пъти се е случило двата самолета да се разминат? (за разминаване се смята ситуацията, в която единият самолет прелита над летище, на което в този момент е кацнал другият; не се брои за разминаване случаят, при който двата се засичат на някое летище).\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31534","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n\n현대모비스는 자율주행, 전동화, 커넥티비티 등 미래 모빌리티 기술의 핵심인 소프트웨어에 집중하고 있다. 대표적으로 CAN(Controller Area Network) 프로토콜로 대표되는 차량 네트워크 분야, 센서 등 여러 ECU(Electronic Contorl Unit) 및 MCU(Micro Controller Unit) 기반의 임베디드 분야, 자율주행 등의 AI 분야, OS와 분리된 보안 영역인 TEE(Trusted Execution Environment) 등 자동차에서 사용되는 보안 분야까지 다양한 소프트웨어 분야에 초점을 두고 있다.\n\n현대모비스는 이러한 소프트웨어 인재를 양성하고 기회를 주기 위해 소프트웨어와 관련한 다양한 대회를 개최하고 프로그램을 진행했다. 특히, 매년 대학(원)생 및 일반인을 대상으로 ”현대모비스 알고리즘 경진대회”와 ”현대모비스 모빌리티 SW 해커톤” 등 다양한 대회를 개최하고 있으며, 우수한 소프트웨어 인재들에게 여러 기회와 혜택을 통해 지원하고 있다.\n\n\n지난해 현대모비스 알고리즘 경진대회에 참가한 재우는 기념품 중 하나로 다음과 같이 생긴 휴대용 선풍기를 받았다. 선풍기는 바람이 나오는 부분과 선풍기를 받치는 부분으로 이루어져 있다. 재우는 심심할 때 선풍기 받침대를 바닥에 굴리며 놀다가 문득 새삼 선풍기 받침이 굴러갈 때 자취의 넓이가 궁금해져서 다음과 같은 문제를 만들었다.\n\n\n\n두 밑변의 길이가 a$a$, b$b$이며 다른 변 중 하나가 길이 h$h$로 두 밑변과 수직을 이루는 사다리꼴을 생각하자. 이때, 이 변을 높이변이라고 하자. 만약 a=0$a=0$이라면, 사다리꼴이 아닌 삼각형이라고 생각할 수 있다.\n\n이 사다리꼴을 높이변을 축으로 하여 회전시키면 오른쪽과 같은 입체 도형 S$S$가 하나 나온다.\n\n\n\n이제 이 도형의 옆면을 바닥에 놓고 아래와 같이 무한히 굴린다.\n\n\n\n도형의 옆면이 만드는 자취가 남게 될 것이다. 이 자취의 넓이를 구해보자.\n\n이 도형을 굴리는 동안 넘어지지 않으며, 미끄러지지 않는다고 가정한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31589","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t산들이는 포도주(와인)를 좋아한다. 그는 마트에서 팔고 있는 N$N$종류의 포도주를 사서 음미하려고 한다. 포도주를 한 병 단위로 사기엔 산들이가 금전적으로 부담이 있기 때문에 그는 작은 용기에 담긴 포도주를 살 것이다. 마트에서 팔고 있는 N$N$종류의 포도주들은 각각 T1$T_1$, T2$T_2$, …, TN$T_N$의 맛을 갖고 있다. 맛의 값이 높은 포도주가 더 맛있는 포도주이다.\n\n산들이가 맛있는 포도주를 마시다가 맛없는 포도주를 마시면 그 맛이 감기약 맛을 방불케 하기 때문에 사실상 0의 맛을 느낀다. 하지만 맛없는 포도주를 마시다가 맛있는 포도주를 마시면 그 두 포도주의 맛 차이만큼 맛을 느낀다. 예외적으로 가장 먼저 마시는 포도주의 맛은 그 포도주 본연의 맛 그대로이다.\n\n산들이는 주량이 매우 적기 때문에 K$K$종류의 포도주를 먹으면 취하여 잠자리에서 뻗어버린다. 따라서 산들이는 N$N$종류의 포도주들 중에서 K$K$종류를 골라 마실 것이다. 산들이는 K$K$종류의 포도주를 마시면서 느낄 수 있는 맛의 합을 극대화하려고 한다.\n\n산들이를 도와 포도주를 얼마나 맛있게 음미할 수 있는지 구하는 프로그램을 작성하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31610","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t1 個 A 円の飴を B 個と，C 円の袋を 1 つ買う．合計金額はいくらか求めよ．\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31576","content":"문제\n\n용국이는 비트코인 투자로 1억을 벌었다고 하는 세운이에게 홀려서 비트코인을 사려고 한다. 세운이는 암호화폐는 비트코인 말고도 이더리움, 리플 등이 있다고 용국이에게 다른 화폐 투자를 권하고 있다. 그러나 용국이는 현재 중국에 있어 거래소 사이트에 접속할 수 없다. 즉, 용국이는 세운이에게 암호화폐의 시세를 물어봐야 한다.\n\n비트코인의 시세는 ‘\n1\n$1$ BTC = \nB\n$B$달러’ 이며, 이더리움의 시세는 ‘\n1\n$1$ ETH = \nE\n$E$달러’이다. \nB\n$B$와 \nE\n$E$는 모두 \n2\n$2$ 이상 \n104\n$10^4$ 이하인 양의 정수이다. 재미있게도 \nB\n$B$와 \nE\n$E$는 서로소(두 수의 최대공약수가 1)이다.\n\n세운이는 용국이에게 시세를 직접 알려주면 재미없다고 생각하여, 용국이가 \nK\n$K$달러를 말하면 세운이는 ‘\nK\n$K$달러로 정확히 \np\n$p$ BTC와 \nq\n$q$ ETH를 살 수 있다’라고 답해준다 (단, \np\n$p$, \nq\n$q$는 0 이상의 정수). 그러나 \nK\n$K$가 너무 작으면 정확히 \nK\n$K$달러로 비트코인과 이더리움을 환전할 수 없을 수 있다.\n\n용국이는 세운이에게 몇 번 질문을 해서 비트코인과 이더리움의 시세를 알아보려고 한다. 용국이를 도와 암호화폐의 시세를 구하는 프로그램을 작성하여라."},{"problemId":"31625","content":"문제\n\nJOI Avenue is a road of length \nL\n$L$ in an east-west direction. The place of \nl\n$l$ meters (\n0≤l≤L\n$0 ≤ l ≤ L$) from the west end on the road is called ”position \nl\n$l$”.\n\nThe first marathon race in JOI Avenue is going to be held this year. The race has a different regulation from normal one, which is described in the following:\n\nBefore the race, \nN\n$N$ balls are located on the road. The \ni\n$i$-th ball (\n1≤i≤N\n$1 ≤ i ≤ N$) is located at position \nXi\n$X_i$. Multiple balls may be located at the same position.\nThe participant starts at the designated position.\nThe participant collects all \nN\n$N$ balls and finishes at the designated position. When this is achieved within the designated time limit, one completes the race. However, once the participant collect a ball, they must not put the ball on the road, otherwise they will be disqualified from the race.\n\nThe starting and finishing position, and the time limit, are not yet announced, but it is known that they are chosen from \nQ\n$Q$ scenarios. The \nj\n$j$-th scenario (\n1≤j≤Q\n$1 ≤ j ≤ Q$) is that, the participant starts at position \nSj\n$S_j$, finishes at position \nGj\n$G_j$, and the time limit is \nTj\n$T_j$ seconds.\n\nRie is participating in the marathon race. She spends \n1\n$1$ second to collect \n1\n$1$ ball. She spends \nx+1\n$x + 1$ seconds to move \n1\n$1$ meter, where \nx\n$x$ is the number of balls she is carrying.\n\nWrite a program which, given the information of JOI Avenue, the positions of balls, and the scenarios, determines whether there exists a way for Rie to complete the race, for each scenario."},{"problemId":"31590","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are developing a mobile game called Candy Compress. In this game, there are several colored candies lined up from left to right. There are 26$26$ possible colors. At any point in time, the player can choose to add a candy at any position or to remove a subset of neighboring candies to get points depending on the colors of the removed candies.\n\nTo develop the game, you need to implement the following data structure. Initially, the data structure loads a 1$1$-indexed string of n$n$ characters, which represents the colors of the initial candies. The string consists of only uppercase Latin characters (A–Z). After loading the string, there are q$q$ operations that you need to support. Each operation is either one of the following:\n\n\n\tOperation 1: Insert the uppercase Latin character c$c$ to the string so that the character is in the i$i$-th position in the new string. In particular, i=1$i = 1$ means inserting character c$c$ at the beginning of the string. It is guaranteed that 1≤i≤m+1$1 ≤ i ≤ m + 1$, where m$m$ is the length of the string just before this operation.\n\tOperation 2: Remove the characters of the string from the l$l$-th to the r$r$-th position, inclusive. It is guaranteed that 1≤l≤r≤m$1 ≤ l ≤ r ≤ m$, where m$m$ is the length of the string just before this operation.\n\n\nFor each Operation 2, your data structure needs to determine the characters that are removed, so that the game can calculate the number of points to be given to the player. In other words, you need to determine the content of the string from the l$l$-th position to the r$r$-th position just before the operation.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31611","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t整数 X が与えられる．\n\n今日は日曜日である．今日の X 日後が火曜日であるならば 1 を，そうでないならば 0 を出力せよ．\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31577","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t주식 부자 버렌 워핏은 자신의 재산을 비트코인 지갑에 보관하고 있다. 버렌 워핏이 사용하는 비트코인 지갑은 매우 엄격한 블록체인 알고리즘을 사용하여 거래 정보를 서로 다른 방식으로 암호화한 파일 스무 개를 갖고 있어야 거래가 정상적으로 처리된다. 따라서 버렌 워핏의 거래 내역을 보기 위해서는 20개의 파일을 모두 갖고 있어야 한다.\n\n버렌 워핏은 15개의 컴퓨터를 갖고 있다. 그는 한 컴퓨터에 너무 많은 파일을 저장해두면 해킹 당했을 때 위험하다고 생각하여 각 컴퓨터마다 최대 8종류의 파일만 저장해두기로 했다.\n\n시간이 조금 지난 후, 버렌 워핏은 최근 창궐했던 워너크라이 랜섬웨어를 떠올리며 컴퓨터가 암호화되더라도 거래 내역을 백업할 수 있어야 한다고 느꼈다. 따라서 어떤 임의의 5개의 컴퓨터가 랜섬웨어에 감염되어 파일이 손실되더라도 나머지 10개의 컴퓨터에서 20종류의 파일을 모두 모을 수 있어야 한다.\n\n버렌 워핏을 도와 15개의 컴퓨터에 20종류의 파일을 나눠담는 프로그램을 작성하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31535","content":"문제\n\n이 문제는 재우의 재수강 2와 굵은 글씨로 적힌 부분과 제한 조건만 다릅니다.\n\n재우는 제2회 MatKor Cup에서 수영 과목의 F를 막지 못해 결국 재수강을 하게 되었다. 재우는 이번 학기에는 성실히 수영 수업에 임했고, 이제 최종 평가만을 남겨두었다. 최종 평가는 다음과 같이 진행된다.\n\n먼저 수영장을 2차원 좌표계로 표현할 수 있다. 수영장은 왼쪽 아래의 점을 \n(0,0)\n$(0,0)$, 오른쪽 위의 점을 \n(w,h)\n$(w,h)$로 하는 각 변이 \nx\n$x$축 혹은 \ny\n$y$축과 평행한 직사각형이다. 여기서 “수영 가능 영역”이란 직사각형의 네 변과 그 변들로 둘러싸인 영역을 의미한다.\n\n수영장에는 \nn\n$n$개의 레인이 있고, 각 레인은 \nx\n$x$축과 평행한 선으로 구분되어 있다. 구체적으로, \n0=a0<a1<a2<⋯<an=h\n$0=a_0<a_1<a_2<\\cdots <a_n=h$일 때, \ni\n$i$번째 레인은 \nai−1≤y<ai\n$a_{i-1}\\le y<a_{i}$인 구간이다. 단, 마지막인 \nn\n$n$번째 레인은 \nan−1≤y≤an\n$a_{n-1}\\le y\\le a_n$인 구간으로 정의한다.\n\n이 수영장은 최첨단 시스템이 적용되어, 레인별로 물의 밀도가 다르다. 따라서 재우가 이동하는 속도는 어떤 레인에서 수영하느냐에 따라 달라진다. 구체적으로 \ni\n$i$번째 레인의 물의 밀도가 \npi\n$p_i$일때, 재우는 \n1\n$1$만큼을 이동하는 데 \npi\n$p_i$초가 소요된다. 이때, \nx\n$x$축에서 먼 레인일수록 물의 밀도는 감소한다. 즉, \np1>p2>⋯>pn\n$p_1>p_2>\\cdots >p_n$을 만족한다.\n\n재우는 최종 평가를 진행할 때 \n(0,0)\n$(0,0)$에서 출발해 수영 가능 영역에서 수영을 통해서만 이동하여 도착점에 도착해야 한다. 도착점은 \n(w,d)\n$(w,d)$로 수영장의 오른쪽 세로 변 위에 있다. 재우는 출발점에서 출발해서 도착점에 도착할 때까지 걸리는 최단 시간을 알고 싶다.\n\n재우는 수영 가능 영역에서  \nx\n$x$축 혹은 \ny\n$y$축과 평행하게만 이동할 수 있다고 할 때, 답을 구해보자."},{"problemId":"31591","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYour house is protected by a combination lock containing n$n$ rotating discs, numbered from 1$1$ to n$n$. On a typical combination lock, each rotating disc has 10$10$ symbols, represented by integers between 0$0$ to 9$9$, inclusive. Since you are a mathematician, your combination lock is not typical. Instead, each rotating disc on your combination lock may have a different number of symbols. In particular, rotating disc i$i$ has bi−ai+1$b_i - a_i + 1$ symbols, represented by integers between ai$a_i$ to bi$b_i$, inclusive.\n\nThe combination lock is unlocked when each rotating disc displays one integer, and any pair of two integers displayed by the rotating disc are coprime. Two integers are coprime if they do not have any common positive factors other than 1$1$.\n\nYou want to unlock the combination lock, so you want to determine what integer to be displayed on each combination lock to satisfy the requirement above. It is possible that your combination lock was sabotaged when you were gone so it might be impossible to unlock your combination lock.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31612","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t文字 j の画数は 2 画，文字 o の画数は 1 画，文字 i の画数は 2 画である．\n\n長さ N の文字列 S が与えられる．S の各文字は j，o，i のいずれかである．\n\nS の各文字の画数の合計を求めよ．\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31578","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t서훈이는 용훈이의 아재개그로 고통 받고 있다. 다음은 서훈이와 용훈이의 대화 중 일부이다.\n\n\n용훈 : (휘파람을 불 듯이) 장미란에게 장미란 무엇일까~?\n\n서훈 : (…)\n\n서훈 : (간절하게) 용훈이형, 제발 그러지 좀 마.\n\n\n매일 용훈이의 언어폭력(?)에 시달리고 있던 서훈이는 어느 날 용훈이와 함께 새로운 외국어를 배우기로 결심했다. 서훈이가 외국어 교재를 본 결과 그는 총 N$N$개의 단어를 익혀야 한다는 것을 깨달았다.\n\n외국어 교재에서 나오는 순서대로 N$N$개의 단어를 외우면 좋겠지만, 서훈이는 외국어를 공부하는 동안 용훈이가 자신이 배운 단어들을 이용해서 아재개그를 하는 것을 경계하고 있다.\n\n용훈이가 두 단어를 가지고 아재개그를 하려면 두 단어에서 길이가 K$K$인 연속한 부분문자열을 잡아서 같게 만들 수 있어야 한다. 예를 들어 jangmiran과 jangmi는 길이 6인 문자열 jangmi를 포함하므로 K$K$가 6 이하인 경우 용훈이는 두 단어를 가지고 아재개그를 할 수 있다. 반면 ant와 ainta는 nt를 포함하지만 ant를 포함하지 않으므로(ant는 ainta의 일부를 가지고 만들 수 있지만 연속하지 않다) K=3$K=3$인 경우 용훈이는 두 단어를 가지고 아재개그를 할 수 없다.\n\n서훈이는 단어장을 적절히 짜집기해서 두 개의 단어장을 만들려고 한다. 모든 단어는 두 개의 단어장 중 단 한 곳에서 나타나야 하고 각 단어장에는 단어가 최소 하나 있어야 한다.\n\n서훈이는 용훈이가 두 단어장 중 어떤 단어장을 골라도 그 단어장의 단어를 가지고 아재개그를 할 수 없게 하려고 한다. 서훈이를 도와 용훈이가 아재개그를 할 수 없게 단어장을 짜주는 프로그램을 작성하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31579","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t형찬이는 놀이공원의 ‘스프링 야드’ 어트랙션을 관리하는 관리자이다. ‘스프링 야드’ 어트랙션은 스프링 N$N$개가 일렬로 늘어진 모양이다. 이 어트랙션에서는 한 스프링을 밟으면 높이 떠올랐다가 바로 옆에 있는 스프링으로 떨어지는데, 이런 과정이 반복되면 보는 사람은 짜릿함을, 즐기는 사람은 스릴을 느낄 수 있다. 만약 사람이 가장 왼쪽 스프링에서 왼쪽으로 떠오르거나 가장 오른쪽 스프링에서 오른쪽으로 떠오르면 매트에 떨어지며 한 번의 차례가 끝난다.\n\n\n\n여기에 있는 스프링은 매우 특이하게 설계되어 있다. 모든 스프링은 왼쪽 또는 오른쪽으로 살짝 기울어져 있는데, 스프링을 밟으면 그 스프링이 보고 있는 방향으로 높이 떠오른다. 또, 사람이 어떤 스프링을 밟아서 떠오르면 그 스프링은 알아서 방향을 바꾼다. 왼쪽을 보고 있던 스프링은 오른쪽으로, 오른쪽을 보고 있던 스프링은 왼쪽으로 방향이 바뀐다.\n\n벌써 날이 어둑어둑해져서 형찬이는 어트랙션을 정리하려고 한다. 형찬이는 놀이공원의 방침에 따라 모든 스프링이 왼쪽을 향하게 해야 한다. 형찬이가 자기 손으로 직접 스프링의 방향을 바꾸면 안전사고의 위험이 있으므로 그는 파란색 공을 이용해서 스프링의 방향을 바꾸려고 한다.\n\n\n\n형찬이가 높은 곳에서 공을 떨어뜨리면 공은 이리저리 튀다가 왼쪽 끝 매트나 오른쪽 끝 매트에 떨어진다. 아래 그림과 같이 형찬이가 3번째 스프링에 공을 떨어뜨린 후 첫 번째 스프링에 공을 떨어뜨리면 모든 스프링이 왼쪽을 보게 할 수 있다.\n\n\n\n허나, 형찬이가 높은 곳에서 스프링을 보면 N$N$개의 스프링이 어떤 방향을 향하고 있는지 제대로 보이지 않는다. 즉, 형찬이는 처음부터 끝까지 스프링의 상태를 알 수 없다. 그렇지만 형찬이가 파란색 공을 떨어뜨렸을 때 그 공이 왼쪽 끝에서 멈추는지 오른쪽 끝에서 멈추는지는 쉽게 분간이 가능하다. 형찬이를 도와 공을 적절히 떨어뜨려서 모든 스프링이 왼쪽을 보게 만드는 프로그램을 작성하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31613","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t正の整数 X, N が与えられる．\n\n最初，黒板に整数 X が書かれている．\n\nJOI 君は，以下の操作を繰り返し行う．\n\n操作: 今，黒板に書かれている数を x とする．x を 3 で割った余りを計算し，r とする．r の値に応じて，黒板に書かれている数を以下のように書き換える．\n\n\n\tr=0 のとき，黒板に書かれている数を，x に 1 を足した数に書き換える．\n\tr=1 のとき，黒板に書かれている数を，x に 2 を掛けた数に書き換える．\n\tr=2 のとき，黒板に書かれている数を，x に 3 を掛けた数に書き換える．\n\n\n黒板に書かれている数が N 以上になるまでに必要な操作の回数を求めよ．\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31536","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t지난 두 대회에서 섯섯시싀 저주에 걸리고 풀어낸 현철이는 다음으로 멈뭄미믜 저주를 풀어내야 한다.\n\n2차원 평면에 위치한 멈뭄미 나라에는 Mat마을과 Kor마을이 있다. 두 마을은 멈뭄미 나라의 마을에 걸맞게 경계가 정사각형 모양이며, 마을의 경계는 x$x$축 혹은 y$y$축에 평행하다. 또한, 두 마을은 경계를 포함해 서로 어떠한 점에서도 만나지 않는다.\n\n각 마을에는 몇 개의 우체국이 마을의 경계 혹은 마을 내부에 있다. 또한 두 우체국을 골라 연결할 수 있는데, 두 우체국을 연결하는 데 드는 비용은 두 우체국 간 거리의 제곱이다.\n\n현철이는 멈뭄미믜 저주를 풀기 위해 Mat마을과 Kor마을에서 우체국을 하나씩 골라 연결해야 하는데, 이 비용을 최소로 하려고 한다. 현철이를 도와 각 마을에서 어떤 우체국을 연결해야 하는지 정해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31626","content":"문제\n\nJOI Academy has \nN\n$N$ students, numbered from \n1\n$1$ to \nN\n$N$.\n\nA gift exchange party is planned to be held soon at JOI Academy. Each student has prepared a gift to bring there, and the value of the gift that student \ni\n$i$ (\n1≤i≤N\n$1 ≤ i ≤ N$) will bring is \nAi\n$A_i$. Students are unwilling to receive a gift whose value is too less than that of their own gift. Specifically, student \ni\n$i$ will be dissatisfied if they receive a gift with a value strictly less than \nBi\n$B_i$. Here, \nBi<Ai\n$B_i < A_i$ always holds.\n\nHowever, some of the \nN\n$N$ students may not actually participate in the party. President \nK\n$K$, the director of JOI Academy, is considering \nQ\n$Q$ possible groups of students as a group to participate in the gift exchange party, \nj\n$j$-th (\n1≤j≤Q\n$1 ≤ j ≤ Q$) of which consists of \nRj−Lj+1\n$R_j - L_j + 1$ students \nLj,Lj+1,…,Rj\n$L_j , L_j + 1,\\dots , R_j$.\n\nFor some group of two or more students, if it is possible to exchange gifts within the group without anyone receiving their own gift or getting dissatisfied, that group is said to be gift exchangeable. More formally, a group of \nm\n$m$ students (\nm≥2\n$m ≥ 2$) \np1,p2,…,pm\n$p_1, p_2, \\dots , p_m$ is gift exchangeable if and only if there exists a sequence \nq1,q2,…,qm\n$q_1, q_2, \\dots , q_m$ which is a permutation of \np1,p2,…,pm\n$p_1, p_2, \\dots , p_m$ and satisfies each of the following conditions. Here, \nqk\n$q_k$ (\n1≤k≤m\n$1 ≤ k ≤ m$) represents the number of student who gives their gift to student \npk\n$p_k$.\n\nFor all \nk\n$k$ (\n1≤k≤m\n$1 ≤ k ≤ m$)，\npk≠qk\n$p_k \\ne q_k$.\nFor all \nk\n$k$ (\n1≤k≤m\n$1 ≤ k ≤ m$)，\nAqk≥Bpk\n$A_{q_k} ≥ B_{p_k}$.\n\nPresident K is keen to make the gift exchange party successful, and thus examining whether each of the \nQ\n$Q$ groups is gift exchangeable or not.\n\nWrite a program which, given information of students and groups, determines whether each of the \nQ\n$Q$ groups is gift exchangeable or not."},{"problemId":"31592","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou have to finish an assignment by the end of today. You can submit the assignment online and, even if your submission is rejected, you still have several more submission chances.\n\nThe assignment consists of five questions, each of which asks whether or not a given statement is true. For each submission, you have to submit answers for all five questions. If your answers are correct for all the questions, your assignment is completed. However, if any of your answers are wrong, your submission is rejected, and the number of correct answers will be told.\n\nAll the questions are so difficult that you cannot give confident answers to any of them. Your task here is to write a program that tries to submit answers repeatedly until the assignment is completed. Note that you can submit answers only a limited number of times.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31640","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tJOI 君と IOI 君は犬を飼うことにした．最初にすべきことは，犬の名前を決めることである．二人で話し合った結果，犬の名前を以下の 4 つの条件を満たすものにすることにした．\n\n条件 1　名前は英大文字 (A, B, ..., Z) と英小文字 (a, b, ..., z) からなる文字列である．\n\n条件 2　JOI 君の好きな文字列は長さ N の文字列 S であるから，S が名前の部分列となるようにする．\n\n条件 3　IOI 君の好きな文字列は長さ M の文字列 T であるから，T が名前の部分列となるようにする．\n\n条件 4　名前を呼びやすいものにするため，同じ文字の間には別の文字が K 文字以上あるようにする．厳密には，位置が異なる任意の同じ文字 2 つについて，必ずその間に別の文字が K 文字以上入っているようにする．なお，K = 0 の場合や，名前の文字がすべて異なる場合は，この条件を満たしていると考える．\n\nただし，これらの条件では英大文字と英小文字は区別される．例えば A と a は異なる文字とみなされることに注意せよ．\n\nここで，名前の部分列とは，名前から何文字か (0 文字でもよい) を取り除いて作れる文字列のことである．例えば，名前が algorithm であるとき，ai や lgtm は名前の部分列であるが，joi や logarithm は名前の部分列ではない．\n\n二人は名前が短いほど良いと考えているため，4 つの条件のもとで最も短い名前を付けることにした．\n\nJOI 君と IOI 君の好きな文字列および整数 K が与えられたとき，犬に付ける名前の文字数を求めるプログラムを作成せよ．\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31614","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t整数 H, M が与えられる．\n\nH 時間 M 分が何分かを求めよ．\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31627","content":"문제\n\nIn JOI city, there is a grid-shaped road network consisting of \nH\n$H$ infinitely long east-west roads and \nW\n$W$ infinitely long north-south roads. Intersection \n(i,j)\n$(i, j)$ (\n1≤i≤H\n$1 ≤ i ≤ H$, \n1≤j≤W\n$1 ≤ j ≤ W$) is the intersection where the \ni\n$i$-th northernmost east-west road and the \nj\n$j$-th westernmost north-south road cross.\n\nCurrently, part of the roads is closed due to poor road conditions. Specifically, the status of the roads is as follows:\n\nThe segment in the \ni\n$i$-th northernmost east-west road (\n1≤i≤H\n$1 ≤ i ≤ H$) connecting intersection \n(i,j)\n$(i, j)$ and intersection \n(i,j+1)\n$(i, j + 1)$ (\n1≤j≤W−1\n$1 ≤ j ≤ W - 1$) is closed if \nAi,j=0\n$A_{i, j} = 0$ and passable if \nAi,j=1\n$A_{i, j} = 1$.\nThe segment in the \nj\n$j$-th westernmost north-south road (\n1≤j≤W\n$1 ≤ j ≤ W$) connecting intersection \n(i,j)\n$(i, j)$ and intersection \n(i+1,j)\n$(i + 1, j)$ (\n1≤i≤H−1\n$1 ≤ i ≤ H - 1$) is closed if \nBi,j=0\n$B_{i, j} = 0$ and passable if \nBi,j=1\n$B_{i, j} = 1$.\nThe other part of the roads (the part of roads outside the \nH×W\n$H \\times W$ intersections) is closed.\n\nPresident K, the mayor of JOI city, decided to make a repair plan of the road network. A repair plan consists of zero or more repairs. A repair is done by choosing an integer \ni\n$i$ satisfying \n1≤i≤H\n$1 ≤ i ≤ H$ and doing the following:\n\nFor every integer \nj\n$j$ satisfying \n1≤j≤W−1\n$1 ≤ j ≤ W - 1$, make the segment in the \ni\n$i$-th northernmost east-west road connecting intersection \n(i,j)\n$(i, j)$ and intersection \n(i,j+1)\n$(i, j + 1)$ passable (if it is closed).\n\nThe repair takes \nCi\n$C_i$ days. Note that \nCi\n$C_i$ is either \n1\n$1$ or \n2\n$2$.\n\nSince no two repairs in a repair plan can be done in parallel, the period of a repair plan is equal to the sum of the time taken by repairs consisting the repair plan.\n\nPresident K thinks that securing the route between city facilities is important and asks you \nQ\n$Q$ questions. The \nk\n$k$-th questions (\n1≤k≤Q\n$1 ≤ k ≤ Q$) is as follows:\n\nIs there a repair plan that makes \nTk\n$T_k$ intersections \n(Xk,1,Yk,1),(Xk,2,Yk,2),…,(Xk,Tk,Yk,Tk)\n$(X_{k,1}, Y_{k,1}), (X_{k,2}, Y_{k,2}), \\dots , (X_{k,T_k}, Y_{k,T_k})$ mutually reachable? If so, what is the minimum possible period of such a repair plan?\n\nWrite a program which, given the status of the road network, the days taken by repairing each east-west road and the details of the questions by President K, answers all the questions."},{"problemId":"31537","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n이 문제는 출근하기 싫어 2와 굵은 글씨로 적힌 부분과 제한 조건만 다릅니다.\n\n\n누구나 그렇듯 동우는 출근하기 싫다. 그래도 출근해야 한다.\n\n동우가 다니는 회사는 신기한 회사이다. 총 N$N$명의 직원이 있는데, 이 중 최대 1$1$명이 출근하지 않아도 업무를 정상적으로 진행할 수 있다. 하지만  1$1$명보다 많이 출근하지 않으면 업무를 정상적으로 진행할 수 없다.\n\n동우는 회사의 업무가 정상적으로 진행되는 것이 신기해 현재 시각으로부터 최근 M$M$시간 동안 N$N$명의 직원 각각이 총 몇 시간씩 출근했는지 살펴보았다.\n\n직원들은 모두 정각에만 출근해 정각에만 퇴근하며, 한 사람이 여러 번 출근 혹은 퇴근할 수 있다. 최근 M$M$시간 동안 업무를 계속 정상적으로 진행할 수 있도록 하는, N$N$명의 직원이 출근한 조합의 경우의 수를 구하시오.\n\n이때, M$M$시간에 대해 매시 30분을 기준으로 출근해 있는 직원들의 목록이 한 번이라도 다른 경우 서로 다른 조합으로 간주한다. 현재는 정각이라 가정한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31641","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tEGOI 食堂には昨日 N 人の客が来店した． 客には 1 から N までの番号が付けられており，客 i (1 ≦ i ≦ N) の来店時刻は Li，退店時刻は Ri であった． そして今日，客のうち 1 人が，現在 JOI 国で流行している新型の感染症 X に感染した状態で来店したことが明らかになった．\n\n感染症 X の感染しづらさは整数 x で表される． 具体的には，1 ≦ i ≦ N について，客 i が 1 人以上の感染者と同時に食堂内にいた時間の累計が x 以上となったタイミングで，客 i は新たに感染者となる．\n\nさて，JOI 国では厳格な感染症対策を行っているため，感染者数を正確に把握しなければならない． しかし困ったことに，誰が感染症 X に感染したかの情報は得られておらず，感染しづらさを表す整数 x も分かっていない．\n\nそこで EGOI 食堂の店長である理恵さんは，Q 個のシナリオについて，最終的に何人の客が感染するのかを求めることにした． j 番目 (1 ≦ j ≦ Q) のシナリオでは，最初の感染者が客 Pj のみであり，感染症 X の感染しづらさが Xj である．\n\n来店した客およびシナリオの情報が与えられたとき，それぞれのシナリオにおける最終的な感染者数を出力するプログラムを作成せよ． ただし，退店時刻ちょうどに感染した場合も，感染者数に含めるものとする． また，感染症 X に一度感染した客が感染者でなくなることは考えないものとする．\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31628","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t 10×10$10 \\times 10$ 격자의 각 칸에 가지가 한 개씩 들어 있습니다. 키위새는 가로로 연속한 10$10$개의 칸 혹은 세로로 연속한 10$10$개의 칸에 들어 있는 모든 가지를 단 한 번 줄줄이 연결할 수 있습니다. 가지 한 두름은 같은 색의 가지를 정확히 10$10$개 연결한 것입니다. 각 칸에 들어 있는 가지의 색이 주어질 때, 키위새가 가지 한 두름을 만들 수 있는지 판단해 봅시다.\n\n첫 행의 모든 가지로 가지 한 두름을 만든 모습\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31593","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn an alternate universe, where the laws of physics are out of whack...\n\nA new research facility has just been built. It is called the Large Antihadron Collider (LAC), the largest antiparticle collider of its kind, and antiphysicists are eager to use it to study something called “regular matter”, which is similar to antimatter except with reversed charge, parity, and time.\n\nIn one of their LAC experiments, the antiphysicists successfully confined two kinds of particles, antiprotons and protons, in a container, where particles are lined up from left to right. We can represent the container’s state as a 1$1$-indexed string. The length of the string equals the number of particles in the container, and the i$i$-th character of the string is A if the i$i$-th particle from the left is an antiproton, or P if it is a proton.\n\nUsing the LAC’s bizarro-energy beams, they can modify the state using any of four different types of operations:\n\n\n\tOperation 1: Choose a particular proton, and then insert two antiprotons, one to its left and the other to its right. This has the effect of replacing the corresponding character P in the state string with APA.\n\tOperation 2: Choose a particular antiproton, and then insert two protons, one to its left and the other to its right. This has the effect of replacing the corresponding character A in the state string with PAP.\n\tOperation 3: Choose a contiguous subsequence of a$a$ antiprotons, and then remove them.\n\tOperation 4: Choose a contiguous subsequence of p$p$ protons, and then remove them.\n\n\nNote that the integers a$a$ in Operation 3 and p$p$ in Operation 4 are given in the input and are fixed.\n\nThese operations can be performed an arbitrary number of times in an arbitrary order, but only one operation can be performed at a time.\n\nThe initial state is represented by the string S$S$. They would like to transform it into the goal state represented by the string E$E$ using a sequence of operations. Determine whether it is possible to do so. If it is possible, find one sequence of operations that transforms the initial state into the goal state.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31615","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t2 つの整数 A,B が与えられる．\n\nA と B の和は十進法で表したとき何桁であるか求めよ．\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31538","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n이 문제는 출근하기 싫어 1과 굵은 글씨로 적힌 부분과 제한 조건만 다릅니다.\n\n\n누구나 그렇듯 동우는 출근하기 싫다. 그래도 출근해야 한다.\n\n동우가 다니는 회사는 신기한 회사이다. 총 N$N$명의 직원이 있는데, 이 중 최대 2$2$명이 출근하지 않아도 업무를 정상적으로 진행할 수 있다. 하지만  2$2$명보다 많이 출근하지 않으면 업무를 정상적으로 진행할 수 없다.\n\n동우는 회사의 업무가 정상적으로 진행되는 것이 신기해 현재 시각으로부터 최근 M$M$시간 동안 N$N$명의 직원 각각이 총 몇 시간씩 출근했는지 살펴보았다.\n\n직원들은 모두 정각에만 출근해 정각에만 퇴근하며, 한 사람이 여러 번 출근 혹은 퇴근할 수 있다. 최근 M$M$시간 동안 업무를 계속 정상적으로 진행할 수 있도록 하는, N$N$명의 직원이 출근한 조합의 경우의 수를 구하시오.\n\n이때, M$M$시간에 대해 매시 30분을 기준으로 출근해 있는 직원들의 목록이 한 번이라도 다른 경우 서로 다른 조합으로 간주한다. 현재는 정각이라 가정한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31539","content":"문제\n\n이 문제는 선형 회귀는 너무 쉬워 3과 문제에서 사용하는 식의 차수만 다릅니다.\n\n유림이는 선형 회귀에 자신이 있다. 그래서 MatKor 동아리에서 선형 회귀에 관한 수업을 할 때 집중하지 않았다. 당시 강사였던 동우는 이를 못마땅하게 여겨 유림이에게 과제로 선형 회귀는 너무 쉬워 1과 선형 회귀는 너무 쉬워 2, 선형 회귀는 너무 쉬워 3을 내주었고, 유림이는 세 문제를 쉽게 풀었다.\n\n기존의 일반적인 선형 회귀 문제는 다음과 같다. 데이터 \n(x1,y1),(x2,y2),⋯,(xn,yn)\n$(x_1,y_1) ,(x_2,y_2) ,\\cdots ,(x_n,y_n)$이 주어졌을 때, 이를 가장 잘 설명하는 일차함수 \ny=ax+b\n$y=ax+b$를 찾는 문제이다. 여기서 주어진 점들 \n(xi,yi)\n$(x_i,y_i)$에 대해 \nxi\n$x_i$를 통해 얻는 추정치 \nyi^=axi+b\n$\\hat{y_i} =ax_i+b$로 정의하고, 실제 \nyi\n$y_i$에서 예측치인 \nyi^\n$\\hat{y_i}$를 뺀 값 \nyi−yi^\n$y_i-\\hat{y_i}$를 잔차 \nϵi\n$\\epsilon_i$로 정의한다.\n\n선형 회귀 문제는 이 잔차 제곱의 합이 \n0\n$0$에 가장 가깝게, 즉 \n\n\n\n\nf2(a,b)=∑i=1nϵi2=∑i=1n(yi−axi−b)2\n$f_2(a,b) =\\displaystyle\\sum_{i=1}^n\\epsilon_i^2=\\displaystyle\\sum_{i=1}^n(y_i-ax_i-b)^2$이 최소가 되도록 하는 실수 \na\n$a$와 \nb\n$b$를 찾는 문제이다.\n\n동우는 여기에서 더 발전시켜 잔차 \nk\n$k$제곱의 합 즉, \n\n\n\n\nfk(a,b)=∑i=1nϵik=∑i=1n(yi−axi−b)k\n$f_k(a,b) =\\displaystyle\\sum_{i=1}^n\\epsilon_i^k=\\displaystyle\\sum_{i=1}^n(y_i-ax_i-b)^k$이 \n0\n$0$에 가장 가깝게 하는 실수 \na\n$a$와 \nb\n$b$을 구하는 문제를 냈다.\n\n이 문제를 풀던 유림이는 너무 어려워서 동우에게 조금만 쉽게 바꿔 달라고 하자 동우는 조금 고민하다 다음과 같은 조건을 추가한다. ”\nk=4\n$k=4$일 때만 구해. 그리고 \ny\n$y$절편이 정해져 있을 때 기울기만 정해. 또, 모든 점의 \nx\n$x$좌표는 양의 정수, \ny\n$y$좌표도 정수라고 가정하자.”\n\n이제 유림이가 풀 문제는 다음과 같다. 주어진 \nb\n$b$에 대해 \n\n\n\n\nf4(a)=∑i=1nϵi4=∑i=1n(yi−axi−b)4\n$f_4(a) =\\displaystyle\\sum_{i=1}^n\\epsilon_i^4=\\displaystyle\\sum_{i=1}^n(y_i-ax_i-b)^4$이 \n0\n$0$에 가장 가깝게 하는 실수 \na\n$a$를 \na4\n$a_4$라고 할 때, \na4\n$a_4$를 구하면 된다."},{"problemId":"31660","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA character is called a “mirror character” if it looks the same when flipped up and down, and the same when flipped left and right. The uppercase mirror characters, H, I, O, X. The lowercase mirror characters are l (since people often write this as a vertical line), o, and x.\n\nIn the same way, a string that looks the same when flipped up and down or when flipped left and right is called a “mirror string”. For example, XXOOOOXX is a mirror string.\n\nThe height of the character affects the construction of the mirror string. For example, llll and oooo are both mirror strings. However, lool is not a mirror string because it looks different when it is flipped up and down. The uppercase characters H, I, O, X and the lowercase character l are both of height 2$2$ while the lowercase letters x and o are of height 1.\n\nTommy wants to construct mirror strings with lower characters and upper characters. He wants to know how many different mirror strings have length in the range [L,R]$[L, R]$ (i.e. how many mirror strings have a length m$m$ satisfying L≤m≤R$L \\leq m \\leq R$).\n\nFor example, the 7$7$ mirror strings of length 1$1$ are H, I, O, X, l, o, or x. There are also 7$7$ mirror strings of length 2$2$, namely HH, II, OO, XX, ll, oo, and xx. But there are many more mirror strings of bigger lengths, for example there are 29$29$ mirror strings of length 3$3$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31642","content":"문제\n\nFarmer John would like to promote his line of Bessla electric tractors by showcasing Bessla's network of charging stations. He has identified \nN\n$N$ (\n2≤N≤5⋅104\n$2\\le N\\le 5\\cdot 10^4$) points of interest labeled \n1…N\n$1\\dots N$, of which the first \nC\n$C$ (\n1≤C<N\n$1\\le C < N$) are charging stations and the remainder are travel destinations. These points of interest are interconnected by \nM\n$M$ (\n1≤M≤105\n$1\\le M\\le 10^5$) bidirectional roads, the \ni\n$i$-th of which connects distinct points \nui\n$u_i$ and \nvi\n$v_i$ (\n1≤ui,vi≤N\n$1\\le u_i, v_i\\le N$) and has length \nℓi\n$\\ell_i$ miles (\n1≤ℓi≤109\n$1\\le\\ell_i\\le 10^9$).\n\nA Bessla can travel up to \n2R\n$2R$ miles (\n1≤R≤109\n$1\\le R\\le 10^9$) on a single charge, allowing it to reach any destination within \nR\n$R$ miles of a charging station. A destination is deemed well-connected if it is reachable from at least \nK\n$K$ (\n1≤K≤10\n$1\\le K\\le 10$) distinct charging stations. Your task is to assist Farmer John in identifying the set of well-connected travel destinations."},{"problemId":"31594","content":"문제\n\nThere are \nn\n$n$ cities, numbered from \n1\n$1$ to \nn\n$n$, in the fictional country of Manteiv. We can consider these cities to be on a flat plane with a 2D coordinate system, where city i is at coordinates \n(xi,yi)\n$(x_i , y_i)$. No two cities are located at the same position.\n\nThere are \nm\n$m$ highways, numbered from \n1\n$1$ to \nm\n$m$, each of which is a line segment with two different cities as its endpoints and has a number of attraction points alongside it. Specifically, highway \nj\n$j$ has \naj\n$a_j$ attraction points and connects cities \nuj\n$u_j$ and \nvj\n$v_j $as its endpoints. Having intersections on highways causes traffic jams, and building a highway on top of another highway costs a lot of money. Therefore, it is guaranteed that\n\nno two highways intersect at any point other than at a city,\nno highway passes through a city other than its two endpoints, and\nthere is at most one highway connecting each pair of cities.\n\nThe Manteiv Ministry of Tourism would like to choose a subset of cities as tourist attractions. Intuitively, the ministry would like many pairs of chosen cities to be connected by a highway with many attraction points. Formally, the attraction score of a non-empty subset of cities \nS\n$S$ is defined as follows:\n\nFor every pair of integers \n(a,b)\n$(a, b)$ where \na<b\n$a < b$, cities \na\n$a$ and \nb\n$b$ are in \nS\n$S$, and they are connected by a highway, add the number of attraction points on the highway to the score.\nLet \nf(S)\n$f(S)$ be the number of pairs of integers \n(a,b)\n$(a, b)$ where \na<b\n$a < b$, cities \na\n$a$ and \nb\n$b$ are in \nS\n$S$, and they are not connected by a highway. The score incurs a penalty (negative) score of \n106\n$10^6$ multiplied by the square of \nf(S)\n$f(S)$. In other words, subtract \n106×f(S)2\n$10^6 × f(S)^2$ from the score.\n\nFor example, let \nn=3\n$n = 3$, cities \n1\n$1$ and \n2\n$2$ be connected by a highway with \n10\n$10$ attraction points, cities \n2\n$2$ and \n3\n$3$ be connected by a highway with \n20\n$20$ attraction points, and cities \n1\n$1$ and \n3\n$3$ not be connected by a highway.\n\nThe attraction score of the subset of cities \n{1}\n$\\{1\\}$ is \n0\n$0$.\nThe attraction score of the subset of cities \n{1,2}\n$\\{1, 2\\}$ is \n10−106×02=10\n$10 - 10^6 \\times 0^2 = 10$.\nThe attraction score of the subset of cities \n{2,3}\n$\\{2, 3\\}$ is \n20−106×02=20\n$20 - 10^6 \\times 0^2 = 20$.\nThe attraction score of the subset of cities \n{1,2,3}\n$\\{1, 2, 3\\}$ is \n10+20−106×12=−999970\n$10 + 20 - 10^6 \\times 1^2 = -999\\, 970$.\n\nAs an advisor to the ministry, you would like to find the maximum attraction score among all possible non-empty subsets of cities \nS\n$S$."},{"problemId":"31616","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t長さ N の文字列 S が与えられる．S の各文字は英小文字である．\n\nS がすべて同じ文字からなるならば Yes を，そうでないならば No を出力せよ．\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31629","content":"문제\n\n한 변의 길이가 양의 정수인 정사각형 모양의 가지밭에는 가지의 정령 사사의 힘이 깃들어 정말 맛있는 가지가 자라납니다. 이런 가지밭에는 특정 길이의 가지만 자랄 수 있다는 전승이 내려오는데, 한 변의 길이가 \nn\n$n$일 때 자랄 수 있는 가지의 길이는 다음과 같이 결정된다고 합니다.\n\n \nn×n\n$n \\times n$ 크기의 비어있는 표를 두 개 준비합니다.\n하나의 표에는 맨 위의 가로줄에 왼쪽에서 오른쪽 순서로 \n1\n$1$부터 \nn\n$n$까지 채워 넣습니다. 그 아래 가로줄에는 \nn+1\n$n+1$부터 \n2n\n$2n$을 순서대로 채워 넣습니다. 이를 반복하여 \n1\n$1$부터 \nn2\n$n^2$까지의 모든 수를 써넣습니다.\n다른 하나의 표에는 맨 위 왼쪽 칸에 \n1\n$1$을 씁니다. 그다음, 맨 왼쪽 세로줄의 둘째 가로줄부터 위 오른쪽 대각선으로 올라가면서 다음 수를 차례로 씁니다. 그다음, 맨 왼쪽 세로줄의 셋째 가로줄부터 위 오른쪽 대각선으로 올라가면서 다음 수를 차례로 씁니다. 이와 같이 반복하다가 가장 오른쪽 위 칸이 채워진 후로는 가장 왼쪽 아래 칸의 오른쪽 칸부터 시작해서 위 오른쪽 대각선으로 올라가면서 수를 채웁니다. 이를 반복하여 \n1\n$1$부터 \nn2\n$n^2$까지의 모든 수를 써넣습니다.\n두 표에서 같은 위치에 같은 수가 등장하는 경우가 있음을 확인할 수 있습니다. 그 수들이 그 가지밭에서 자랄 수 있는 가지의 길이입니다.\n\n그림 1\n\n \nn=6\n$n = 6$인 가지밭을 예로 들면 다음과 같습니다. 우선, 그림 1-a, 1-b와 같이 두 개의 \n6×6\n$6 \\times 6$ 표를 만듭니다. 그런 다음, 그림 1-c와 같이 두 표를 겹치면 \n1\n$1$, \n9\n$9$, \n28\n$28$, \n36\n$36$이 두 표의 같은 위치에서 나타나는 것을 알 수 있습니다. 따라서 이 가지밭에는 길이가 \n1\n$1$, \n9\n$9$, \n28\n$28$, \n36\n$36$인 가지만 자랄 수 있습니다.\n\n키위새는 가지를 너무나 사랑한 나머지 자신만의 가지밭을 갖고 싶어 합니다. 키위새는 가지밭의 한 변의 길이가 될 수 있는 후보들을 정해뒀는데, 자랄 수 있는 가지의 길이를 계산하는 데 어려움을 겪고 있습니다. 키위새를 도와 가지밭의 한 변의 길이가 주어지면 자랄 수 있는 가지의 길이를 출력하는 프로그램을 작성해 봅시다."},{"problemId":"31661","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tHumans are exploring the stars, and we have encountered aliens! In an exchange of scientific knowledge, we’ve learned that not only do they use entirely different symbols to do math, they don’t even use base ten! It would be nice to have a program to convert the alien numbers to decimal.\n\nShockingly, the aliens represent each of their digits with what might be multiple ascii characters. For example, aba might be a single digit for the alien’s numerical system.\n\nGiven the base of their number system, an ordered list of all their system’s digits, and a number X$X$, convert X$X$ to base 10$10$ and print it without any leading zeros.\n\nFor a quick refresher on number systems, a number system with base B$B$ has B$B$ digits that represent the values 0$0$ through B−1$B-1$. For example, an alien number system with base 3$3$ could have digits zork, ooble, and trzap representing the values 0$0$, 1$1$, and 2$2$ respectively. The alien number trzapzorkooble, when written in standard decimal notation, is just 2⋅32+0⋅31+1⋅30=19$2 \\cdot 3^2 + 0 \\cdot 3^1 + 1 \\cdot 3^0 = 19$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31643","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tFarmer John's N$N$ (1≤N≤5⋅105)$(1 \\leq N \\leq 5 \\cdot 10^5)$ cows are lined up in a circle.\nThe i$i$th cow has a bucket with integer capacity ai$a_i$ (1≤ai≤109)$(1 \\leq a_i \\leq 10^9)$\nliters. All buckets are initially full.\n\nEvery minute, cow i$i$ will pass all the milk in their bucket to cow i+1$i+1$ for\n1≤i<N$1\\le i<N$, with cow N$N$ passing its milk to cow 1$1$. All exchanges happen\nsimultaneously (i.e., if a cow has a full bucket but gives away x$x$ liters of\nmilk and also receives x$x$ liters, her milk is preserved). If a cow's total milk\never ends up exceeding ai$a_i$, then the excess milk will be lost.\n\nAfter each of 1,2,…,N$1, 2, \\dots, N$ minutes, how much total milk is left among all\ncows?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31595","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tFor a non-negative integer x$x$, let p(x)$p(x)$ be the number of ones in the binary representation of x$x$. For example, p(26)=3$p(26) = 3$ because 26=(11010)2$26 = (11010)_2$.\n\nYou are given a sequence of n$n$ integers (a1,a2,…,an)$(a_1, a_2, \\dots , a_n)$. Your task is to determine whether there exists a non-negative integer x$x$ such that (p(x),p(x+1),…,p(x+n−1))$(p(x), p(x + 1), \\dots , p(x + n - 1))$ is equal to (a1,a2,…,an)$(a_1, a_2, \\dots , a_n)$. Furthermore, if it exists, compute the smallest x$x$ satisfying the condition.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31662","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tDuring the creation of the Card Counting Club, the club wanted to combine their card counting practice along with the process of choosing player order for their games. They converged on a counting-out game that is played like so:\n\n\n\t\n\tAt the beginning of the game, each player is dealt a hand with the same number of cards as everyone else.\n\t\n\t\n\tEach player begins the turn by showing the card with the smallest value in their hand to the other players.\n\t\n\t\n\tThe player with the smallest card gets to discard it.\n\n\t\n\t\t\n\t\tOnly one player gets to discard their card, and the ties are broken by choosing the player’s whose name comes first lexicographically (i.e. standard dictionary order).\n\t\t\n\t\t\n\t\tAll players that do not get to discard their card leave a small mark on their card and place it back into their hand. Each mark increases the value of the card by an agreed penalty amount.\n\t\t\n\t\n\t\n\t\n\tWhen a player runs out of cards, they are counted out.\n\t\n\t\n\tThe game is played until all players are counted out.\n\t\n\n\nOnce the game is over, the order of players as they were counted out is used to choose the order in which the club members get to play other games.\n\nOver time, the club grew to 35 people, and the cost of the cards along with the time it takes to play out the game became too much. So, the club turns to you to make a program that will play out the game for them to save both time and the cost of the playing cards.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31617","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t整数 K と，長さ N の整数列 A=(A1,A2,…,AN) および長さ M の整数列 B=(B1,B2,…,BM) が与えられる．\n\n次の条件をすべて満たす 2 つの整数の組 (p,q) の個数を求めよ．\n\n\n\t1 ≦ p ≦ N．\n\t1 ≦ q ≦ M．\n\tAp + K = Bq．\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31630","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t세로 길이가 R$R$, 가로 길이가 C$C$인 직사각형 격자 모양의 가지밭이 있습니다. 거리가 1$1$인 두 격자점 간에는 두 점을 잇는 선분 형태의 길이 있습니다. 밤고는 매일 출근을 위해 왼쪽 위의 점 (0,0)$(0, 0)$에서 시작하여 오른쪽 아래의 점 (R,C)$(R, C)$으로 정확히 R+C$R+C$개의 길을 따라 이동합니다. 격자점 중 몇 곳에는 귀여운 가지가 심겨 있어서 이 점들은 지나가지 않습니다.\n\n매일 같이 이 밭을 오가던 밤고는 밭을 가로지르는 경로 중 어떤 것들은 사실상 같다고 생각합니다. 밤고가 이동한 경로를 따라 격자를 두 영역으로 잘라내면 일부는 위쪽 영역에 있고 나머지는 아래쪽 영역에 있습니다. 이때 두 경로에 대해 각 가지가 위쪽에 속하는지 아래쪽에 속하는지가 완전히 일치하면 두 경로는 같은 것입니다. 밤고의 생각에 서로 다른 경로는 몇 개가 있을까요?\n\n잘라낸 두 영역에 대한 정확한 정의는 노트를 참고해 주세요.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31644","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn her free time, Bessie likes to dabble in experimental physics. She has recently discovered a pair of new subatomic particles, named mootrinos and antimootrinos. Like standard  matter-antimatter pairs, mootrinos and antimootrinos annihilate each other and disappear when they meet. But what makes these particles unique is that they switch their direction of motion (while maintaining the same speed) whenever Bessie looks at them.\n\nFor her latest experiment, Bessie has placed an even number N$N$ (2≤N≤2⋅105$2 \\leq N \\leq 2 \\cdot 10^5$) of these particles in a line. The line starts with a mootrino on the left and then alternates between the two types of particles, with the i$i$-th particle located at position pi$p_i$ (0≤p1<⋯<pN≤1018$0 \\leq p_1 < \\cdots < p_N \\leq 10^{18}$). Mootrinos initially move right while antimootrinos initially move left, and the i$i$-th particle moves with a constant speed of si$s_i$ units per second (1≤si≤109$1 \\leq s_i \\leq 10^9$).\n\nBessie makes observations at the following times:\n\n\n\tFirst, 1$1$ second after the start of the experiment.\n\tThen 2$2$ seconds after the first observation.\n\tThen 3$3$ seconds after the second observation.\n\t...\n\tThen n+1$n + 1$ seconds after the n$n$-th observation.\n\n\nDuring each observation, Bessie notes down which particles have disappeared.\n\nThis experiment may take an extremely long time to complete, so Bessie would like to first simulate its results. Given the experiment setup, help Bessie determine when (i.e., the observation number) she will observe each particle disappear! It may be shown that all particles will eventually disappear.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31663","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tLittle Timmy got caught by his teacher using some mean words. After getting sent to the principal, little Timmy learned his lesson - he should do his best to not get caught next time!\n\nWhat Timmy decided to do is to take all the mean words that he wants to say, and combine them all together into a single \"mean\" word by getting the average of all the characters in the same position across all the words that have a character in that position, and then rounding this average down to get the character in that position.\n\nNote: The value of a character is its ASCII value, so the value of a is 97$97$, the value of b is 98$98$ and so on up to z, which has value 122$122$. So when we average characters, we are averaging their ASCII values, rounding this down to the nearest integer, and then using the corresponding character as the result of this averaging.\n\nHelp Timmy create his mean mean words!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31596","content":"문제\n\nEver since the Earth got destroyed, Trillian has been missing some Earth delicacies. Today, she had the spaceship’s food machine generate for her a Vietnamese delicacy she once enjoyed: bánh bò hấp (steamed chewy sponge cake).\n\nTrillian has an unlimited number of bánh bò hấp pieces. Each piece of bánh bò hấp is either red or white. She wants to assemble \nrc\n$rc$ pieces of bánh bò hấp into a grid with dimensions \nr×c\n$r \\times c$, where each cell contains a single piece of bánh bò hấp. Thus, there are exactly \n2rc\n$2^{rc}$ distinct ways to assemble bánh bò hấp into an \nr×c\n$r \\times c$ grid, since we consider pieces of the same color to be identical.\n\nWe say an assembly of bánh bò hấp is uniform if all \n6×7\n$6 \\times 7$ subgrids have the same number of red pieces. Consequently, in a uniform bánh bò hấp assembly, all \n6×7\n$6 \\times 7$ subgrids have the same number of white pieces as well. Note that an \nr×c\n$r \\times c$ grid has \n(r−5)(c−6)\n$(r - 5)(c - 6)$ subgrids of dimensions \n6×7\n$6 \\times 7$.\n\nFor example, Figure D.1 illustrates a uniform assembly of \n7×8\n$7 \\times 8$ pieces of bánh bò hấp, where shaded cells represent red bánh bò hấp pieces and unshaded cells represent white bánh bò hấp pieces. Figure D.2 shows that all four \n6×7\n$6 \\times 7$ subgrids have \n6\n$6$ red pieces and \n36\n$36$ white pieces.\n\nFigure D.1: An example of uniform bánh bò hấp assembly.\n\nFigure D.2: All four \n6×7\n$6 \\times 7$ subgrids of the uniform bánh bò hấp assembly illustrated in Figure D.1.\n\nGiven \nr\n$r$ and \nc\n$c$, where \nr\n$r$ is a multiple of \n6\n$6$ and \nc\n$c$ is a multiple of \n7\n$7$, Trillian would like to calculate the number of possible uniform bánh bò hấp assemblies modulo \n998244353\n$998\\, 244\\, 353$."},{"problemId":"31664","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou have a collection of strings of the same length L$L$ and are wondering how similar they are. We can say that the distance d(S,T)$d(S,T)$ between two strings S$S$ and T$T$ of the same length is the number of indices i$i$ where Si≠Ti$S_ i \\neq T_ i$. For example, d($d($ berry, bears )=2$) = 2$ since only the third and fifth characters differ.\n\nYou wonder if your strings are very close to each other. That is, for a given distance D$D$ you have in mind, is there a string S$S$ of length L$L$ such that d(S,A)≤D$d(S,A) \\leq D$ for each string A$A$ in your collection? Call such a string S$S$ a central string. Note that a central string does not necessarily have to be one of your strings.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31680","content":"문제\n\nLittle Fran received a wooden frame in the shape of a regular polygon as a gift. As polygon has \nn\n$n$ vertices, he also received \nn(n−3)2\n$\\frac{n(n-3)}{2}$ wooden sticks that match each possible diagonal. Vertices of the polygon are labelled with integers from \n1\n$1$ to \nn\n$n$ in counterclockwise order. In the beginning, Fran arranged \nn−3\n$n - 3$ sticks inside the frame in such a way that every stick touches two non-neighboring vertive of the frame, and no two sticks cross each other. In other words, he made a triangulation. As that was not interesting enough for him, he decided to play with this configuration by applying a particular operation that consists of two steps:\n\nRemove a stick.\nAdd a new stick in such a way that we obtain a new triangulation.\n\nWe characterize the operation with an ordered pair of unordered pairs \n((a,b),(c,d))\n$((a, b),(c, d))$ which signifies that little Fran removed a stick touching vertices \na\n$a$ and \nb\n$b$, and added a stick touching vertices \nc\n$c$ and \nd\n$d$.\n\nFran loves hand fans so, while doing these operations, he sometimes asks himself: “How many operations is needed to transform this triangulation into a “fan” triangulation in vertex \nx\n$x$, and, in how many ways is this achievable?”.\n\nSince he is busy doing operations and having fun, he asks for your help!\n\n“Fan” triangulation in vertex \nx\n$x$ is a triangulation where all diagonals have a common endpoint, namely vertex \nx\n$x$.\n\nLet the number of needed operations be \nm\n$m$. Let \nf1,f2,…,fm\n$f_1, f_2, \\dots , f_m$ be a sequence of operations that, when applied in given order, achieves wanted triangulation, thus representing one way of getting there. Let \ns1,s2,…,sm\n$s_1, s_2, \\dots , s_m$ be another such sequence. Two sequences are distinct if there exists an index \ni\n$i$ such that \nfi≠si\n$f_i \\ne s_i$ .\n\nAs the number of such sequences can be huge, little Fran is only interested in its remainder modulo \n109+7\n$10^9 + 7$."},{"problemId":"31645","content":"문제\n\nNote: The large size of integers involved in this problem may require the use of 64-bit integer data types (e.g., a \"long long\" in C/C++).\n\nThe Paris Moolympics are coming up and Farmer John is training his team of cows in archery! He has set up the following exercise on the 2D coordinate plane.\n\nThere are \nN(1≤N≤4⋅104)\n$N (1 \\leq N \\leq 4 \\cdot 10^4)$ axis-aligned rectangular targets and \n4N\n$4N$ cows. Every cow must be assigned to a different target vertex. At moment \ni\n$i$, for \n1≤i≤N\n$1 \\leq i \\leq N$:\n\nTarget \ni\n$i$ appears.\nThe \n4\n$4$ cows assigned to its vertices shoot at them.\nIf a cow's shot passes through the interior of the target before it hits the assigned vertex or misses, the cows fail the exercise.\nThe target disappears to make space for the next one.\n\nEach cow is located on the \ny\n$y$-axis \n(x=0)\n$(x = 0)$, and each target is a rectangle where target \ni\n$i$ has its lower left coordinate at \n(X1,y1(i))\n$(X_1, y_1^{(i)})$ and its upper right coordinate at \n(x2(i),y2(i))\n$(x_2^{(i)}, y_2^{(i)})$. The coordinates also satisfy \n1≤X1<x2(i)≤109\n$1 \\leq X_1 < x_2^{(i)}\\leq 10^9$ and \n1≤y1(i)<y2(i)≤109\n$1 \\leq y_1^{(i)} < y_2^{(i)} \\leq 10^9$ (Note: \nX1\n$X_1$ is the same for every target).\n\nIn addition, each cow has a \"focus\" angle they are working on. Therefore, they will turn at a specific angle when shooting. Given that their shot travels in a straight line from their position towards their assigned vertex, the trajectory of cow \ni\n$i$'s arrow can be described by \nsi\n$s_i$ \n(0<|si|<109)\n$(0 < |s_i| < 10^9)$, the slope of the trajectory.\n\nSo that he can carefully examine the cows' technique, Farmer John wants to minimize the distance between the furthest cows. If Farmer John were to optimally assign each cow to a target vertex and place them on the \ny\n$y$-axis, can you help him determine what the minimum distance between the furthest cows would be or if the cows will always fail the exercise?\n\nEach input contains \nT\n$T$ (\n1≤T≤10\n$1 \\leq T \\leq 10$) independent test cases. The sum of \nN\n$N$ across all test cases is guaranteed to not exceed \n4⋅104\n$4\\cdot 10^4$."},{"problemId":"31618","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tビ太郎は N 枚のカードを持っており，i 枚目 (1 ≦ i ≦ N) のカードには整数 Ai が書かれている． これらの中から次の条件を満たすような 3 枚のカードを選びたい．\n\n条件: 選んだカードに書かれている整数が 3 ずつ離れている． 厳密には，選んだカードに書かれている整数が，ある整数 x を用いて x, x+3, x+6 と表せる．\n\n例えば，ビ太郎が 5 枚のカードを持っており，それぞれに 2, 4, 5, 7, 10 が書かれているとき，4, 7, 10 が書かれているカードを選ぶと，条件を満たす．\n\nビ太郎が持っているカードの情報が与えられたとき，条件を満たすように 3 枚のカードを選ぶことができるかどうか判定するプログラムを作成せよ．\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31619","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tJOI 商店には N 個の商品があり，商品には 1 から N までの番号が付けられている．\n\nそれぞれの商品には，定価と種類が定められている．商品 i (1 ≦ i ≦ N) の定価は Pi 円である．商品の種類は 1 以上 M 以下の整数で表され，商品 i (1 ≦ i ≦ N) の種類は Ai である．\n\nJOI 商店は，セールを行うことにした．セールは M 日間続き，j 日目 (1 ≦ j ≦ M) には種類 j の商品をすべて定価の半額で買うことができる．\n\nセールの期間中に，Q 人の客が JOI 商店を訪れた．客には 1 から Q までの番号が付けられている．客 k (1 ≦ k ≦ Q) はセールの Tk 日目に JOI 商店を訪れ，商品 Lk, Lk+1, …, Rk を 1 つずつ買った．\n\nセールの効果を調査するため，それぞれの客が商品を買うのにかかった金額を知りたい．\n\n商品の情報と客の情報が与えられたとき，それぞれの客が商品を買うのにかかった金額を求めるプログラムを作成せよ．\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31631","content":"문제\n\n \n1\n$1$부터 \nN\n$N$까지의 서로 다른 정수 높이를 가진 \nN\n$N$개의 빌딩이 일렬로 놓여 있습니다. 왼쪽에서 \ni\n$i$번째 빌딩의 높이는 \nHi\n$H_i$입니다.\n\n높이 \nh\n$h$의 빌딩에서 가지를 오른쪽으로 발사하면, 가지는 높이 \nh\n$h$ 이하인 빌딩들의 위를 통과하여 날아갑니다. 가지가 높이 \nh\n$h$ 초과인 빌딩에 부딪히면 부딪힌 빌딩의 높이를 \n1\n$1$ 줄이고 진행 방향을 반대로 바꿉니다.\n\n높이 \nh\n$h$인 빌딩에서 오른쪽으로 날아가는 가지가 높이 \nh\n$h$ 미만인 빌딩의 위를 통과하여 날아가는 모습\n\n높이 \nh\n$h$인 빌딩에서 오른쪽으로 날아가는 가지가 높이 \nh\n$h$인 빌딩의 위를 통과하여 날아가는 모습\n\n높이 \nh\n$h$인 빌딩에서 오른쪽으로 날아가는 가지가 높이 \nh\n$h$ 초과인 빌딩에 부딪혀서 방향을 바꾸는 모습\n\n왼쪽에서 \ni\n$i$번째 빌딩에서 가지를 오른쪽으로 발사한 이후, 발사한 가지가 맨 왼쪽 혹은 오른쪽 빌딩을 통과하여 날아갈 때까지 가지가 진행 방향을 바꾼 횟수를 \nBi\n$B_i$라 합시다. \nB1+B2+⋯+BN\n$B_1 + B_2 + \\dots + B_N$의 값이 최대가 되도록 하는 수열 \nH\n$H$를 구해 봅시다."},{"problemId":"31646","content":"문제\n\nBessie has recently gotten into chemistry. At the moment, she has two different colors \n1\n$1$ and \n2\n$2$ of various liquids that don't mix well with one another. She has two test tubes of infinite capacity filled with \nN\n$N$ \n(1≤N≤105)\n$(1 \\leq N \\leq 10^5)$ units each of some mixture of liquids of these two colors. Because the liquids don’t mix, once they settled, they divided into layers of separate colors. Because of this, the two tubes can be viewed as strings \nf1f2…fN\n$f_1f_2\\ldots f_N$ and \ns1s2…sN\n$s_1s_2\\ldots s_N$ where \nfi\n$f_i$ represents the color of the liquid that is \ni\n$i$ units from the bottom of the first tube, and \nsi\n$s_i$ represents the color of the liquid that is \ni\n$i$ units from the bottom of the second tube. It is guaranteed that there is at least one unit of each color of liquid.\n\nBessie wants to separate these liquids so that each test tube contains all units of one color of liquid. She has a third empty beaker of infinite capacity to help her in this task. When Bessie makes a \"pour\", she moves all liquid of color \ni\n$i$ at the top of one test tube or beaker into another.\n\nDetermine the minimum number of pours to separate all the liquid into the two test tubes, and the series of moves needed to do so. It does not matter which test tube ends up with which color, but the beaker must be empty..\n\nThere will be \nT\n$T$ (\n1≤T≤10\n$1 \\leq T \\leq 10$) test cases, with a parameter \nP\n$P$ for each test case.\n\nSuppose the minimum number of pours to separate the liquids into the original tubes is \nM\n$M$.\n\nIf \nP=1\n$P=1$, you will receive credit if you print only \nM\n$M$.\nIf \nP=2\n$P=2$, you will receive credit if you print an integer \nA\n$A$ such that \nM≤A≤M+5\n$M \\leq A \\leq M+5$, followed by \nA\n$A$ lines that construct a solution with that number of moves. Each line should contain the source and the destination tube (\n1\n$1$, \n2\n$2$, or \n3\n$3$ for the beaker). The source tube must be nonempty before the move and a tube may not be poured into itself.\nIf \nP=3\n$P=3$, you will receive credit if you print \nM\n$M$, followed by a valid construction using that number of moves."},{"problemId":"31597","content":"문제\n\nWe say that a number sequence contains duplicates if there is an element that appears more than once in the sequence. Formally, a sequence \n(a1,…,an)\n$(a_1, \\dots , a_n)$ contains duplicates if there exist two indices \ni\n$i$ and \nj\n$j$ such that \ni≠j\n$i \\ne j$ and \nai=aj\n$a_i = a_j$.\n\nYou are given an \nn×n\n$n \\times n$ matrix \nX\n$X$. Each entry in \nX\n$X$ is an integer between \n1\n$1$ and \nn\n$n$, inclusive. You can modify zero or more entries in \nX\n$X$ to arbitrary integers between \n1\n$1$ and \nn\n$n$, inclusive. Different entries can be modified to different integers.\n\nYour task is to make modifications to entries of \nX\n$X$ such that all of the following hold:\n\nFor each row \ni\n$i$, the sequence \n(Xi1,Xi2,…,Xin)\n$(X_{i1}, X_{i2}, \\dots , X_{in})$ contains duplicates.\nFor each column \nj\n$j$, the sequence \n(X1j,X2j,…,Xnj)\n$(X_{1j }, X_{2j}, \\dots , X_{nj})$ contains duplicates.\n\nCompute the minimum number of entries that need to be modified to achieve this. Also, find one possible set of modifications to do it. For each modification, you have to specify which entry will be modified and to what value. Note that the minimum number of entries to be modified can be zero when the given matrix \nX\n$X$ already satisfies the conditions above."},{"problemId":"31632","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t키위 유치원에서 N$N$마리의 어린 키위새들은 재밌는 게임 \"가지 오이 당근\"을 하고 있습니다. \"가지 오이 당근\"은 가위바위보와 비슷한 게임으로, 다음과 같은 규칙을 가집니다.\n\n\n\t참여하는 모든 키위새는 가지, 오이, 당근 중 하나의 채소를 내야 합니다.\n\t가지를 낸 키위새는 오이를 낸 키위새가 존재하면 승점을 얻습니다.\n\t오이를 낸 키위새는 당근을 낸 키위새가 존재하면 승점을 얻습니다.\n\t당근을 낸 키위새는 가지를 낸 키위새가 존재하면 승점을 얻습니다.\n\t모든 키위새가 승점을 얻었거나 모든 키위새가 승점을 얻지 못한 경우 모든 키위새가 비깁니다.\n\t그렇지 않으면, 승점을 얻은 키위새는 이기고 승점을 얻지 못한 키위새는 집니다.\n\n\n가지는 오이를 상대로, 오이는 당근을 상대로, 당근은 가지를 상대로 승점을 얻습니다.\n\n유치원의 키위새들은 채소를 내었지만, 여러분은 잠시 쉬고 있느라 몇몇 키위새가 낸 채소를 보지 못했습니다! 그 대신 유치원의 키위새들에게 게임의 결과를 물어보아 각 키위새가 이겼는지, 비겼는지, 졌는지 알아내었습니다. 하지만 키위새는 기억력이 좋지 않아 실제 결과와 다른 결과를 말했을 수도 있습니다.\n\n키위새들이 말한 결과가 가능한 결과인지 판별하고 가능하다면 각 키위새가 낸 채소들의 조합으로 가능한 것을 아무거나 찾아서 출력해 봅시다.\n\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31666","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIt’s been difficult finding a job in the tech industry lately. You managed to land a job working for a construction company, but some of the tasks being assigned to you have you wondering whether the engineers have ever heard of gravity. Anyway, in the latest task, you are asked to evaluate the following model of a construction project.\n\nThe model is built by dropping axis-aligned squares, each with a specific x$x$ coordinate and size, towards the ground (which is defined by the line y=0$y=0$). Each square will move downwards until its bottom face hits the ground or some other square. Once a square lands, it is securely fastened in place, so even if two squares are off balance, they will not fall over.\n\nGiven the list of squares to place and the order to place them in, determine the maximum y$y$ coordinate reached by the structure after each square is placed.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31681","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMr. Malnar has finally reached his annual vacation. The country he decided to travel to can be represented as n$n$ cities and m$m$ bidirectional roads connecting them. Each road has the same length, and it is possible to reach any city from any other by traveling on these roads. A path from city a$a$ to city b$b$ is defined as a sequence of roads such that, starting from city a$a$ and sequentially traversing the roads in that sequence, one ends up in city b$b$. The length of a path is defined as the number of roads on that path.\n\nMr. Malnar routinely booked the most expensive hotel in one of the cities and then started to plan his journey. To facilitate his planning, he recorded the length of the shortest path needed from the hotel to each city.\n\nExcited about his long-awaited vacation, Mr. Malnar completely forgot in which city the hotel is located. He certainly does not want to miss the trip, so he asks you to determine in which cities the hotel can be located.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31667","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAs usual, you forgot your reusable shopping bags at home. I guess you have to buy some paper bags. You only have two items on your shopping list, but you need to stock up on a certain quantity of each item since you are planing to throw a party. Each item has a size and the paper bags have a maximum total size they can hold. You will want to buy the fewest possible bags.\n\nMore precisely, you need to buy N1$N_1$ copies of the first item and N2$N_2$ copies of the second item. Each copy of the first item has size S1$S_1$ and each copy of the second has size S2$S_2$. The bags you can buy all have capacity T$T$, meaning they can hold any collection of items whose total size is at most T$T$.\n\nDetermine the fewest bags you must buy such that it is possible to distribute N1$N_1$ copies of the first item and N2$N_2$ copies of the second item between these bags while ensuring each bag receives a total item size of at most T$T$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31647","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBessie and Elsie are playing a game of Moorbles. The game works as follows: Bessie and Elsie each start out with some amount of marbles. Bessie holds out A$A$ of her marbles in her hoof and Elsie guesses if A$A$ is Even or Odd. If Elsie is correct, she wins the A$A$ marbles from Bessie and if she guesses incorrectly, she loses A$A$ of her marbles to Bessie (if Elsie has less than A$A$ marbles, she loses all her marbles). A player loses when they lose all of their marbles.\n\nAfter some amount of turns in the game, Elsie has N$N$ (1≤N≤109)$(1 \\leq N \\leq 10^9)$ marbles. She thinks it is hard to win, but she is playing to not lose. After being around Bessie enough, Elsie has a good read on Bessie's habits and recognizes that on turn i$i$, there are only K$K$ (1≤K≤4)$(1 \\leq K \\leq 4)$ different amounts of marbles that Bessie may put out. There are only M$M$ (1≤M≤3⋅105)$(1 \\leq M \\leq 3 \\cdot 10^5)$ turns before Bessie gets bored and stops playing. Can you identify a lexicographically minimum turn sequence such that Elsie will not lose, regardless of how Bessie plays?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31682","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tKile, a board games enthusiast, recently discovered the game Robots. The game consists of a board with n$n$ rows and m$m$ columns and one robot. The field (1,1)$(1, 1)$ is the top-left field of the board, while the field (n,m)$(n, m)$ is the bottom-right.\n\nAt the beginning, the robot is positioned on some field (x,y)$(x, y)$ (x$x$-th row, y$y$-th column), and the player can direct it in one of the four directions: up, down, left, or right. Depending on the chosen direction, it will move in that direction until it encounters its goal or a special field on the board. If at any point it wants to exit the board, it wraps around to the other side. For example, if it is located at the field (n,3)$(n, 3)$ and wants to move down, it will arrive at the field (1,3)$(1, 3)$.\n\nThe board has three types of fields:\n\n\n\tEmpty field - the robot continues moving in the same direction\n\tLeft turn field - when the robot steps on this field, it will turn left by 90$90$° and continue moving\n\tRight turn field - when the robot steps on this field, it will turn right by 90$90$° and continue moving\n\n\nMost fields on the board are empty, only k$k$ of them are left or right turn fields.\n\nThe game consists of q$q$ rounds. In the i$i$-th round of the game, the robot will be placed on the field (ai,bi)$(a_i , b_i)$. The goal is to reach the field (ci,di)$(c_i , d_i)$ using the minimum number of turns, or determine that it is impossible.\n\nAfter playing this game several times, Kile realized that it is more challenging than it initially seemed. That is why he needs your help now. Help him determine the minimum number of turns required for each round of the game!\n\nNote: If the robot starts or finishes its path on a left or right turn field, that turn is not counted.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31598","content":"문제\n\nThere are \nn\n$n$ students, numbered from \n1\n$1$ to \nn\n$n$, who need to form groups for the upcoming hackathon. You are student \n1\n$1$, the captain of the students. Student \ni\n$i$ has skill level \nai\n$a_i$.\n\nStudents \n2\n$2$ to \nn\n$n$ are standing in a line from left to right in order. You can choose to stand in between any two students, to the left of student \n2\n$2$, or to the right of student \nn\n$n$. You cannot change the order of the \nn−1\n$n - 1$ students.\n\nYou can also choose the number of groups \nk\n$k$ (\nk>1\n$k > 1$ and \nk\n$k$ must be a divisor of \nn\n$n$) to participate in the hackathon. The groups will be numbered from \n1\n$1$ to \nk\n$k$. After you have chosen your position and the value of \nk\n$k$, the students will be grouped as follows:\n\nThe first student from the left will be assigned to group \n1\n$1$.\nThe second student from the left will be assigned to group \n2\n$2$.\n \n…\n$\\dots$ \nThe \nk\n$k$-th student from the left will be assigned to group \nk\n$k$.\nThe \n(k+1)\n$(k + 1)$-th student from the left will be assigned to group \n1\n$1$.\nThe \n(k+2)\n$(k + 2)$-th student from the left will be assigned to group \n2\n$2$.\n \n…\n$\\dots$ \nThe \nn\n$n$-th student from the left will be assigned to group \nk\n$k$.\n\nFormally, for each \nj\n$j$ (\n1≤j≤k\n$1 ≤ j ≤ k$) and for each \ni\n$i$ (\n0≤i<n/k\n$0 ≤ i < n/k$), the \n(i×k+j)\n$(i \\times k +j)$-th student from the left will be assigned to group \nj\n$j$. It can be shown that each student will be assigned to exactly one group and all the groups have the same number of students.\n\nThe skill level of a group is the sum of the skill levels of the students inside the group. By choosing where you stand as well as the number of groups \nk\n$k$ optimally, you want to minimize the ratio \nxmax/xmin\n$x_\\max/x_\\min$ where\n\n \nxmax\n$x_\\max$ is the skill level of the group with the largest skill level, and\n \nxmin\n$x_\\min$ is the skill level of the group with the smallest skill level."},{"problemId":"31599","content":"문제\n\nThere are \nn\n$n$ students taking a personality test consisting of \nm\n$m$ questions. The students are numbered from \n1\n$1$ to \nn\n$n$ and the questions are numbered from \n1\n$1$ to \nm\n$m$. For each question, each student can either answer it with a single uppercase Latin character (A–Z) or not answer it. Let \nSi\n$S_i$ be a string of \nm\n$m$ characters representing the answers of student \ni\n$i$, where the \nj\n$j$-th character of \nSi\n$S_i$ is an uppercase Latin character if they answered question \nj\n$j$, or a period (.) if they did not.\n\nTwo students are considered similar if there is a set of at least \nk\n$k$ questions where both students answered all questions in the set, and for each question in the set, they answered it with the same answer.\n\nFor example, let \nn=3\n$n = 3$, \nm=3\n$m = 3$, \nk=2\n$k = 2$, \nS1=\n$S_1 =$ BBC, \nS2=\n$S_2 =$ ..C, and \nS3=\n$S_3 =$ .BC. In this example, students \n1\n$1$ and \n3\n$3$ are similar since they answered questions \n2\n$2$ and \n3\n$3$ with the same answer, while students \n2\n$2$ and \n3\n$3$ are not similar since they answered only question \n3\n$3$ with the same answer.\n\nYou want to find a pair of integers \n(a,b)\n$(a, b)$ such that \na<b\n$a < b$ and students \na\n$a$ and \nb\n$b$ are similar, or determine if there is no such pair. If there is more than one pair, find the one with the smallest \nb\n$b$. If there is still more than one pair, find the one with the largest \na\n$a$."},{"problemId":"31668","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n이거나 가지세요...\n\n\n작년 NLCS Jeju는 \"파마산을 묻혀 튀긴 소고기\", 이하 \"파묻튀\"에 반대하는 학생들의 가지 운동을 막아내고 신메뉴 \"파마산을 묻혀 튀긴 소고기를 넣은 김밥\", 이하 \"파묻튀밥\"을 출시하였다.\n\n그러나 학생들은 파묻튀보다는 신선한 가지를 먹고 싶어 한다! 따라서 학생들은 가지를 구매하여 오늘 급식에 나올 파묻튀밥에 들어있는 파묻튀를 모두 가지로 바꿔치기로 하였다. 이를 위해 학생들은 구매해야 하는 가지의 양을 알아내야 한다. \n\n\n\t파묻튀밥 한 줄에는 파묻튀가 정확히 N$N$그램 들어간다.\n\t학교는 오늘 파묻튀밥을 만들기 위해 파묻튀를 M$M$그램 사용하였다.\n\t학교가 만드는 파묻튀밥의 줄 수는 정수이다. 예를 들어, 학교가 파묻튀밥을 2.5$2.5$줄 만드는 일은 일어날 수 없다.\n\t파묻튀밥 한 줄의 파묻튀는 정확히 K$K$그램의 가지로 바꿔치기해야 한다.\n\n\n학교에서 제작한 파묻튀밥의 파묻튀를 모두 가지로 바꿔치기하기 위해 학생들이 구매해야 하는 가지의 양의 최솟값을 구해주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31648","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBessie and Elsie are playing a game with a pile of stones that initially contains S$S$ stones (1≤S<10105$1\\le S<10^{10^5}$). The two cows alternate turns, with Bessie going first. When it is a cow's turn, she must remove x$x$ stones from the pile, where x$x$ is any positive integer palindrome of the cow's choosing. If the pile is empty when a cow's turn starts, that cow loses.\n\nDefinition: A positive integer is a palindrome if it reads the same forward and backward; examples of palindromes include 1, 121, and 9009. Leading zeros are not allowed; e.g., 990 is *not* a palindrome.\n\nThere are T$T$ (1≤T≤10$1\\le T\\le 10$) independent test cases. For each test case, print who wins the game if both cows play optimally.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31633","content":"문제\n\n밍구는 최첨단 가지 농장의 주인입니다. 가지 농장에는 \nN\n$N$개의 행과 \nM\n$M$개의 열로 이루어진 격자 위 \nN×M\n$N \\times M$칸의 토양에 가지가 심겨 있습니다. 밍구는 최근 물을 많이 받은 가지들이 더 빨리 자란다는 사실을 깨달았습니다. 밍구는 가지들의 크기를 균일하게 만들기 위해 크기가 작은 가지들에 더 많은 물을 주려고 합니다.\n\n이를 위해 가지 농장에서는 토양의 높이를 임의의 음이 아닌 정수로 변경할 수 있습니다. 물은 높이가 높은 곳에서 낮은 곳으로 흐르게 되어 인접한 두 칸의 토양 중 높이가 높은 토양보다 높이가 낮은 토양에 더 많은 양의 물이 모이게 됩니다. 인접한 두 토양의 높이가 같으면 같은 양의 물이 모이게 됩니다. 단, 두 칸의 토양이 한 변을 공유할 때 서로 인접하였다고 합니다.\n\n가지의 크기를 균일하게 만들기 위해서는 모든 인접한 두 칸의 토양 중 큰 가지가 있는 토양의 높이가 작은 가지가 있는 토양보다 높아야 합니다. 인접한 두 칸의 토양에 있는 가지의 크기가 같다면 두 토양의 높이가 같아야 합니다.\n\n현재 모든 토양의 높이는 \n0\n$0$입니다. 토양 한 칸의 높이를 \nh\n$h$로 변경하려면 \nh\n$h$만큼의 일을 해야 합니다. 이때, \nh\n$h$는 음이 아닌 정수입니다. 가지의 크기를 균일하게 만드는 토양의 높이 배치 중에서 해야 하는 일의 총합이 최소가 되는 토양의 높이 배치를 구하세요.\n\n다시 말해, 각 가지의 크기를 의미하는 크기 \nN×M\n$N \\times M$의 양의 정수의 행렬 \nS\n$S$가 주어질 때, 다음의 조건을 만족시키고 각 토양의 높이 배치를 나타내는 크기 \nN×M\n$N \\times M$의 음이 아닌 정수의 행렬 \nH\n$H$를 구하려고 합니다.\n\n \n1≤i,k≤N\n$1 \\le i, k \\le N$, \n1≤j,l≤M\n$1 \\le j, l \\le M$, \n|i−k|+|j−l|=1\n$|i-k| + |j-l| = 1$인 모든 정수 \ni\n$i$, \nj\n$j$, \nk\n$k$, \nl\n$l$에 대해서 다음 조건을 만족시켜야 합니다.\n \nSi,j<Sk,l\n$S_{i, j} < S_{k, l}$이면 \nHi,j<Hk,l\n$H_{i, j} < H_{k, l}$입니다.\n \nSi,j=Sk,l\n$S_{i, j} = S_{k, l}$이면 \nHi,j=Hk,l\n$H_{i, j} = H_{k, l}$입니다.\n \nSi,j>Sk,l\n$S_{i, j} > S_{k, l}$이면 \nHi,j>Hk,l\n$H_{i, j} > H_{k, l}$입니다.\n \nH\n$H$의 모든 원소의 합이 최소여야 합니다."},{"problemId":"31683","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tLittle Maja has always loved puzzles. And since everyone knew that for a long time now, it is no wonder that one sunny day, Maja received an odd puzzle as a gift..\n\nThis puzzle has n$n$ pieces. Each piece has rectangular shape and is of a certain color. Also, each piece has 2$2$ numbers written on its back: u$u$ and d$d$. After a period of skillfully combining pieces and trying to fit them together, Maja figured out the meaning of those numbers.\n\nShe found out that number u$u$ represents \"direction\", in other words, does the next piece of the puzzle connect with the current one from the upper or from the right side of the current piece. Number d$d$ specifies the starting column/row where we connect the next piece of the puzzle with current one. In more detail:\n\n\n\tIf u$u$ is equal to 0$0$, we add next piece above the current one by connecting its bottom left corner with current piece’s top edge at column d.\n\tIf u$u$ is equal to 1$1$, we add next piece to the right by connecting its bottom left corner with current piece’s right edge at row d.\n\n\nLet’s demonstrate this for pieces colored in colors \"a\" and \"b\". Picture 1 shows the case where u=0$u = 0$, and d=3$d = 3$. Picture 2 shows case when u=1$u = 1$ and d=3$d = 3$. (In both cases, numbers u$u$ and d$d$ represent numbers written on the back of piece colored \"a\").\n\n\n\t\n\t\t\n\t\t\t\n\t\t\t. . b b b b b\n. . b b b b b\na a a a . . .\na a a a . . .\na a a a . . .\n\n\t\t\t\n\t\t\t\n\t\t\ta a a a . . . . .\na a a a b b b b b\na a a a b b b b b\n\n\t\t\t\n\t\t\n\t\t\n\t\t\tPicture 1\n\t\t\tPicture 2\n\t\t\n\t\n\n\nMaja has grown tired of this puzzling puzzle, but her curiosity knows no bounds! That’s why she’s asking for your help. She’s interested in knowing, for a given description of every piece of the puzzle and the sequence of their placement, what will the completed puzzle look like? Write a program that prints the dimensions (height and width) of the completed puzzle, as well as its final appearance within a rectangle of the same height and width, where \".\" represents places where there is no part of the puzzle.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31669","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tNLCS Jeju의 학생들은 수업에 질려 학교에서 탈출하고 싶어한다. 수업 시간에 학교에서 탈출하는 것은 어려운 일이다. \n\nNLCS Jeju의 수업 시간은 1$1$교시부터 M$M$교시이다. 또한 NLCS Jeju에 있는 N$N$명의 선생님들은 각각 1$1$교시부터 M$M$교시 사이에 정해진 스케줄에 따라 해당 수업 시간 동안 순찰한다. 학교에서 탈출하다 선생님에게 들키면 안 되기 때문에 학생들은 아무도 순찰하지 않을 때 학교에서 탈출해야 한다. 학교 탈출을 시도하려는 시각에 순찰하는 선생님이 있다면 선생님에게 무조건 들킨다.\n\n각 선생님의 순찰 스케줄이 주어질 때 학생들이 학교에서 탈출할 수 있는지 판단하고, 가능하다면 학교에서 탈출할 수 있는 가장 빠른 시각을 구하자. \n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31649","content":"문제\n\nFarmer John's \nN\n$N$ \n(1≤N≤2⋅105)\n$(1 \\leq N \\leq 2 \\cdot 10^5)$ cows are lined up in a circle such that for each \ni\n$i$ in \n1,2,…,N−1\n$1,2,\\dots,N-1$, the cow to the right of cow \ni\n$i$ is cow \ni+1\n$i+1$, and the cow to the right of cow \nN\n$N$ is cow \n1\n$1$. The \ni\n$i$th cow has a bucket with integer capacity \nai\n$a_i$ \n(1≤ai≤109)\n$(1 \\leq a_i \\leq 10^9)$ liters. All buckets are initially full.\n\nEvery minute, the cows exchange milk according to a string \ns1s2…sN\n$s_1s_2\\dots s_N$ consisting solely of the characters \n‘L’\n$\\text{‘L’}$ and \n‘R’\n$\\text{‘R’}$. if the \ni\n$i$th cow has at least \n1\n$1$ liter of milk, she will pass \n1\n$1$ liter of milk to the cow to her left if \nsi=‘L’\n$s_i=\\text{‘L’}$, or to the right if \nsi=‘R’\n$s_i=\\text{‘R’}$. All exchanges happen simultaneously (i.e., if a cow has a full bucket but gives away a liter of milk but also receives a liter, her milk is preserved). If a cow's total milk ever ends up exceeding \nai\n$a_i$, then the excess milk will be lost.\n\nFJ wants to know: after \nM\n$M$ minutes \n(1≤M≤109\n$(1 \\leq M \\leq 10^9$), what is the total amount of milk left among all cows?"},{"problemId":"31700","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBajtazar właśnie wprowadził się do nowego mieszkania. Udekorowawszy już półki swoimi trofeami z przeróżnych konkursów recytatorskich oraz mistrzostw Bajtocji w jodłowaniu na czas, spostrzegł, że jedna ściana jest całkiem pusta. Nie spodobało mu się to, więc chciałby zapełnić ją obrazami.\n\nŚciana Bajtazara ma kształt prostokąta o wymiarach h × w metrów. Pobliski marszand, który jest bliskim znajomym Bajtazara, oferuje n rodzajów obrazów, przy czym dysponuje on nieograniczoną liczba obrazów każdego rodzaju. Wszystkie obrazy tego samego rodzaju mają dokładnie te same wymiary – obrazy i-tego rodzaju są zawsze kwadratami o boku długości di metrów. Co ciekawe, dla każdych dwóch różnych wartości di, jedna jest podzielna bez reszty przez drugą.\n\nDla Bajtazara cena obrazów nie gra roli (wszak na mistrzostwach w jodłowaniu na czas nagrody są dość pokaźne), chciałby jednak upewnić się, że na ścianie nie zostanie żadne puste miejsce. W tym celu postanowił zakupić pewną liczbę obrazów i powiesić je na ścianie tak, aby pokryć ją całą. Oczywiście obrazy nie mogą się nawzajem pokrywać, mogą jednak stykać się bokami. Bajtazar nie chce jednak zbyt wiele razy maszerować do marszanda tam i z powrotem – chciałby więc kupić możliwie jak najmniej obrazów. Pomóż mu i napisz program, który obliczy dla niego, ile obrazów musi kupić, lub stwierdzi, że pokrycie ściany nie jest możliwe!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31684","content":"문제\n\nWhat came first, the chicken or the egg? Is it better to live a hundred years as a millionaire or seven days in poverty? How to become a chess grandmaster? How to raise blinds? How to pass the final exams? How to train a dragon? These are interesting questions we can ponder only after the competition, but now we offer one less interesting computer science problem.\n\nYou are given two sets of numbers \nA\n$A$ and \nB\n$B$ of size \nN\n$N$. In one move, you can select an arbitrary element from set \nA\n$A$ and change one arbitrary digit (bit) in its binary representation. The resulting number must not be an element of set \nA\n$A$ immediately before the change.\n\nFor example, the number \n5\n$5$ in binary is \n01012\n$0101_2$. In one move, it can become \n13=11012\n$13 = 1101_2$, \n1=00012\n$1 = 0001_2$, \n7=01112\n$7 = 0111_2$, or \n4=01002\n$4 = 0100_2$ if we change its \n4\n$4$th, \n3\n$3$rd, \n2\n$2$nd, or \n1\n$1$st bit, respectively.\n\nDetermine a sequence of moves by which set \nA\n$A$ becomes equal to set \nB\n$B$. Sets are equal if they have the same size and there is no element in set \nA\n$A$ that does not belong to set \nB\n$B$.\n\nNote: The number of moves does not have to be minimal, but it must satisfy the task constraints."},{"problemId":"31670","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\nNLCS Jeju에는 화재 경보가 울리면 모든 커플이 헤어진다는 징크스가 있다......\n\n\n시이(swi)는 하라는 공부는 안 하고 연애만 하는 학생들이 NLCS Jeju에 너무 많은 것을 보고 이들에게 시이-빔을 쏘아 단죄하기로 하였다.\n\n언제나처럼 화재경보기가 오작동해 학생 N$N$명이 대피하여 운동장에 한 줄로 서있다. 시이는 커플인 두 사람 중 한 명 이상을 단죄하려고 한다. 하지만 이들 중 누가 커플인지 모르기 때문에 시이는 다음 규칙에 따라 학생들을 단죄하기로 하였다.\n\n\n\t모든 서로 인접한 두 학생 중 한 명 이상을 단죄해야 한다.\n\n\n하지만 각 학생은 시이-빔에 대한 저항력이 있어 앞에서 i$i$번째 학생을 시이-빔으로 단죄하기 위해서는 Ri$R_i$만큼의 에너지가 필요하다.\n\n시이가 규칙을 만족하도록 학생들을 단죄하기 위해 필요한 총 에너지의 최솟값을 구하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31634","content":"문제\n\n한국가지협회는 질 좋은 가지를 저렴한 가격에 공급하기 위해 다방면으로 연구하고 있습니다. 가지 소환 마법은 최근에 개발된 방법으로, 적은 수의 가지를 제물로 바쳐 수많은 가지를 소환하는 마법입니다.\n\n가지 소환 마법을 사용하기 위해서는 \nN\n$N$개의 가지를 공중에 띄우고 주문을 외워야 합니다. 가지의 위치를 3차원 좌표공간 위 점으로 나타냈을 때, 각 점에 적당한 함수 \nf(P)\n$f(P)$를 찾아 적용합니다. 함수 \nf(P)\n$f(P)$는 다음 조건을 만족시켜야 합니다.\n\n \nf(P)\n$f(P)$의 정의역과 공역은 각 좌표의 값이 유리수인 모든 점 \n(x,y,z)\n$(x, y, z)$의 집합입니다.\n어떤 서로 다른 두 점 \nA\n$A$, \nB\n$B$를 고르더라도 \nf(A)\n$f(A)$와 \nf(B)\n$f(B)$는 다릅니다.\n서로 다른 세 점 \nA\n$A$, \nB\n$B$, \nC\n$C$가 한 직선 위에 있는 것과, \nf(A)\n$f(A)$, \nf(B)\n$f(B)$, \nf(C)\n$f(C)$가 한 직선 위에 있는 것은 동치입니다.\n서로 다른 두 점 \nA\n$A$, \nB\n$B$와 서로 다른 두 점 \nC\n$C$, \nD\n$D$에 대해서 직선 \n\t\t\nAB↔\n$\\overleftrightarrow{AB}$와 직선 \n\t\t\nCD↔\n$\\overleftrightarrow{CD}$가 평행한 것은 직선 \n\t\t\nf(A)f(B)↔\n$\\overleftrightarrow{f(A)f(B)}$와 직선 \n\t\t\nf(C)f(D)↔\n$\\overleftrightarrow{f(C)f(D)}$가 평행한 것과 동치입니다. \n\t\t\n\t\t\nAB↔=CD↔\n$\\overleftrightarrow{AB} = \\overleftrightarrow{CD}$이면 직선 \n\t\t\nAB↔\n$\\overleftrightarrow{AB}$와 직선 \n\t\t\nCD↔\n$\\overleftrightarrow{CD}$는 평행합니다.\n\n \nN\n$N$개의 점에 모두 \nf(P)\n$f(P)$를 적용한 뒤에, \nM\n$M$개의 각 점을 꼭짓점으로 하는 다각형이 정\nM\n$M$각형이 되도록 \nN\n$N$개의 점 중 적당한 \nM\n$M$개의 점을 선택하면 \nN×M\n$N \\times M$개의 가지를 소환할 수 있습니다. \n(M≥3)\n$(M \\ge 3)$ 단, 적당한 \nf(P)\n$f(P)$를 찾지 못하거나 적당한 \nM\n$M$개의 점을 선택하지 못한다면 소환이 실패합니다. \nN\n$N$개의 가지의 위치를 나타내는 점이 주어질 때, 적절한 함수 \nf(P)\n$f(P)$와 \nM\n$M$개의 점을 단 한 번 선택하여 최대 몇 개의 가지를 소환할 수 있는지 알아내 봅시다."},{"problemId":"31650","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tFarmer John has N$N$ (1≤N≤2⋅105$1 \\leq N \\leq 2 \\cdot 10^5$) farms, numbered from 1$1$ to N$N$. It is known that FJ closes farm i$i$ at time ci$c_i$. Bessie wakes up at time S$S$, and wants to maximize the productivity of her day by visiting as many farms as possible before they close. She plans to visit farm i$i$ on time ti+S$t_i + S$. Bessie must arrive at a farm strictly before Farmer John closes it to actually visit it.\n\nBessie has Q$Q$ (1≤Q≤2⋅105)$(1 \\leq Q \\leq 2 \\cdot 10^5)$ queries. For each query, she gives you two integers S$S$ and V$V$. For each query, output whether Bessie can visit at least V$V$ farms if she wakes up at time S$S$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31701","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBajtek uwielbia żelki. W nowo otwartym sklepie (który sprzedaje tylko żelki) można zakupić ich aż n rodzajów – i-ty z tych rodzajów opisany jest kolorem żelka, jego wagą w bajtogramach oraz ceną w bajtogroszach. Żelki sprzedawane są pojedynczo. Kolory żelków oznaczamy liczbami od 1 do k. W sklepie dostępna jest nieograniczona liczba żelków każdego rodzaju.\n\nBajtek poza żelkami uwielbia estetykę kolorystyczną. Pozwoli on sobie kupić jakiś multizbiór żelków tylko i wyłącznie wtedy, gdy dla każdego koloru od 1 do k kupi dokładnie tyle samo żelków.\n\nBajtek poza żelkami i estetyką kolorystyczną uwielbia liczby. Dla każdej liczby całkowitej r z przedziału [0, m − 1] zastanawia się on, ile co najmniej bajtogroszy musiałby wydać, aby kupić multizbiór żelków, w którym sumaryczna ich masa po podzieleniu przez m daje resztę r. Pomóż mu i napisz program, który policzy za niego szukane wartości!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31671","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n오름은 올라야만 한다.\n\n\n\n\nNLCS Jeju의 기숙사 이름 \"오름\"은 제주에서 봉우리나 산을 부르는 말인 오름에서 따왔다. 각 기숙사의 학생들은 1년에 한 번, 실제로 기숙사 이름의 기원인 오름을 오르게 된다.\n\n오름은 xy$xy$ 평면에서 세 점 (0,0)$(0, 0)$, (N,N)$(N, N)$, (2N,0)$(2N, 0)$을 잇는 삼각형 모양이다. 당신은 (0,0)$(0, 0)$에서 출발해서 (2N,0)$(2N, 0)$에 도착해야 한다.\n\n이동할 때는 (x,y)$(x, y)$에서 (x+1,y+1)$(x+1, y+1)$ 혹은 (x+1,y−1)$(x+1, y-1)$로만 이동할 수 있다. 또한 이동하여 도착한 위치는 오름의 내부 혹은 경계여야 한다.\n\n오름에서 길을 잃기 쉽기 때문에 길을 잃기 쉬운 M$M$개의 지점에 선생님들이 계신다. 하지만 숙제를 하지 않은 당신은 선생님과 만나는 것이 부담스럽기 때문에 선생님을 피해서 이동해야 한다.\n\n또한 당신은 오름 등산을 특별한 기억으로 남기기 위해 사진을 찍기로 했다. 사진의 아름다움은 사진을 찍은 높이가 높을수록 커진다. 정확하게는 사진을 찍은 y$y$좌표가 그 사진의 아름다움 수치가 된다.\n\n얼마나 아름다운 사진을 찍을 수 있을지 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31685","content":"문제\n\nCaptain Marrrtina, together with her pirate crew, after three months of searching for long lost treasure belonging to the most famous Italian pirate finally dug up chest full of treasure. But to unlock the chest she needs a secret combination which is described in a message in a bottle next to the chest.\n\nThe message says:\n\no that only the most worthy pirate shall be able to open the chest, the combination is the solution to the following puzzle: A binary sequence \ns\n$s$ of length \na\n$a$ in which the only pair of consecutive ones is located at the end of the sequence is a pirate representation of a number \nx\n$x$ if\n\n\ns[0]⋅Fib[2]+s[1]⋅Fib[3]+s[2]⋅Fib[4]+⋯+s[a−2]⋅Fib[a]=∑i=0a−2s[i]⋅Fib[2+i]=x,\n$$s[0] \\cdot Fib[2] + s[1] \\cdot Fib[3] + s[2] \\cdot Fib[4] + \\dots + s[a - 2] \\cdot Fib[a]= \\sum_{i=0}^{a-2}{s[i] \\cdot Fib[2+i]} = x\\text{,}$$\nwhere \nFib[x]\n$Fib[x]$ denotes the \nx\n$x$-th Fibonacci number. Fibonacci numbers are defined as following: \nFib[1]=1\n$Fib[1] = 1$, \nFib[2]=1\n$Fib[2] = 1$, \nFib[y]=Fib[y−1]+Fib[y−2]\n$Fib[y] = Fib[y - 1] + Fib[y - 2]$ for each \ny>2\n$y > 2$.\n\nFor example \n11p=1\n$11_p = 1$, \n011p=2\n$011_p = 2$, \n1010011p=17\n$1010011_p = 17$, where \np\n$p$ denotes a pirate representation of a number.\n\nA pirate code is a binary sequence (without any condition on consecutive ones) that represents a sequence of positive integers. To read it we partition it in as many parts as possible that are pirate representation of some numbers (and possibly a suffix that is not a pirate entry of any number) and write those integers in a sequence. For example we partition \n01111010110101\n$01111010110101$ in \n011|11|01011|0101\n$011|11|01011|0101$, the last part is not a pirate representation so we delete it \n011|11|01011\n$011|11|01011$ and read a sequence \n2\n$2$, \n1\n$1$, \n7\n$7$.\n\nThe value of a pirate code is equal to the sum of values of decoded sequnce of positive integers. The value of previous code is \n10\n$10$.\n\nMy favourite number \nP\n$P$ is the sum of values of all pirate codes of length \nk\n$k$. As that number may large, the combination to the chest is the remainder of\n$ $P modulo \n109+7\n$10^9 + 7$.\n\n- Leonarrrdo da Pisa\n\nIf Marrrtina doesn’t manage to open the chest, her crew will not consider her worthy and they’ll make her walk the plank."},{"problemId":"31672","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n흐에에...\n\n\n어둠을 틈타 누군가가 시이(swi)의 엄청난 케이크를 또 먹어버렸다!\n\n여느날처럼 케이크를 좋아하는 시이는 근처 가게에서 사온 엄청난 케이크를 식탁 위에 올려놓고 감상하고 있었다. 하지만 기숙사 히터가 너무 따뜻했던 탓에 시이는 잠들고 말았고, 시이가 잠든 사이 케이크가 사라져버렸다!\n\n케이크를 먹은 사람은 사건 당시 기숙사에 있던 시이와 시이를 제외한 N$N$명의 사람 중 한 명이다. 시이는 범인을 찾기 위해 자신이 자던 동안 기숙사에 있던 N$N$명의 학생을 동시에 추궁했다. 시이는 각 학생이 한 진술을 다음 두 종류의 유형 중 한 가지로 정리했다.\n\n\n\t명단 S$S$에 있는 학생 가운데 범인이 있다.\n\t명단 S$S$에 있는 학생 가운데 범인이 없다.\n\n\n만약 N$N$명의 학생 중 한 명이 범인이라면 나머지 학생은 모두 범인을 알 것이므로 범인을 제외한 모든 학생은 사실대로 진술할 것이고, 범인은 자신이 케이크를 먹은 사실을 숨기기 위해 거짓으로 진술할 것이다. 그러나 N$N$명의 학생 모두가 범인이 아니라면 시이가 케이크를 먹어버린 것이기 때문에 모든 진술의 진위를 알 수 없다.\n\n시이는 N$N$개의 진술을 바탕으로 범인일 가능성이 있는 학생을 추려내고자 한다. 어떤 학생이 범인이라 가정했을 때 N$N$개의 진술에 모순이 없다면 그 학생을 범인일 가능성이 있는 학생이라고 한다. 만약 N$N$명의 학생 가운데 범인일 가능성이 있는 학생이 없다면 소거법에 의해 시이가 범인이므로 swi를 출력한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31702","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tPrzedziałem w ciągu liczbowym C nazywamy każdy jego niepusty i spójny podciąg. W szczególności oznacza to, że każdy ciąg długości k posiada k(k+1)/2 przedziałów, ponieważ każdy przedział w nim jest wyznaczany przez początek oraz koniec owego przedziału.\n\nDla danego ciągu liczb całkowitych jego stabilnością nazwiemy długość najdłuższego ściśle monotonicznego przedziału w nim. Dokładniej, stabilność ciągu [c1, c2, . . . , ck] to największa taka liczba całkowita s, że istnieje indeks i (1 ≤ i ≤ k − s + 1) taki, że ci < ci+1 < . . . < ci+s−1 lub ci > ci+1 > . . . > ci+s−1. Przykładowo stabilnością ciągu [8, 6, 1, 3, 5, 7, 4, 2] jest 4, gdyż istnieje w nim ściśle monotoniczny przedział [1, 3, 5, 7], a nie istnieje dłuższy.\n\nSplotem dwóch ciągów A i B nazwiemy każdy ciąg długości |A| + |B|, który posiada taki podciąg (niekoniecznie spójny) równy A, że wszystkie elementy poza tym podciągiem tworzą ciąg B. Na przykład splotami ciągów [1, 2, 3] i [4, 5] są ciągi [1, 4, 2, 5, 3], [4, 5, 1, 2, 3] i [4, 1, 5, 2, 3], ale nie [1, 2, 3, 4, 3] i [1, 2, 3, 5, 4].\n\nWreszcie przez f(A, B), gdzie A i B są ciągami liczb całkowitych, oznaczamy minimalną możliwą stabilność ich splotu.\n\nMając dane dwa ciągi liczb całkowitych A i B, o długościach odpowiednio n i m, Twoim zadaniem jest policzyć f(A, B) dla każdej liczby całkowitej x od 1 do n + m włącznie liczbę par (A′, B′) takich, że A′ jest przedziałem w A, B′ jest przedziałem w B i zachodzi f(A′, B′) = x. Jako że opisane liczby mogą być bardzo duże, wystarczy, że podasz ich reszty z dzielenia przez 109 + 7.\n\nMożesz założyć, że wszystkie elementy ciągów A i B są parami różne.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31651","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBessie is hard at work preparing test cases for the USA Cowmputing Olympiad February contest. Each minute, she can choose to not prepare any tests, expending no energy; or expend 3a−1$3^{a-1}$ energy preparing a$a$ test cases, for some positive integer a$a$.\n\nFarmer John has D$D$ (1≤D≤2⋅105$1\\le D\\le 2\\cdot 10^5$) demands. For the i$i$th demand, he tells Bessie that within the first mi$m_i$ minutes, she needs to have prepared at least bi$b_i$ test cases in total (1≤mi≤106,1≤bi≤1012$1\\le m_i\\le 10^6, 1 \\leq b_i \\leq 10^{12}$).\n\nLet ei$e_i$ be the smallest amount of energy Bessie needs to spend to satisfy the first i$i$ demands. Print e1,…,eD$e_1,\\dots,e_D$ modulo 109+7$10^9+7$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31673","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tNLCS Jeju에서는 학생회(Student Council) 회장 강준석이 다른 학생 단체에 예산을 분배한다.\n\n준석이는 학생회를 제외한 N$N$개의 단체에 올해 예산 M$M$을 분배해야 한다. N$N$개의 단체에 예산을 분배하고 남은 금액을 학생회 예산으로 사용할 수 있다. 준석이는 학생회 예산으로 최대한 많은 예산을 가져오고 싶어 어떻게 예산을 분배할지 깊은 고민에 빠졌다.\n\n매년 예산 분배가 끝난 직후 학생 단체들은 학생회장을 탄핵할지 투표를 진행한다. i$i$번째 학생단체는 Vi$V_i$표를 투표할 수 있다. 투표 결과 탄핵에 찬성하는 표가 과반인 경우 학생회장이 탄핵된다.\n\n각 학생단체는 학생회보다 더 많은 예산을 받기를 원한다. 학생회보다 많거나 같은 예산을 받은 학생단체는 학생회장을 탄핵하는데 반대로 투표하며, 학생회보다 적은 예산을 받은 학생단체는 학생회장을 탄핵하는 데 투표할 것이다.\n\n준석이가 학생회로 예산을 아무리 많이 가져온다고 한들 탄핵되면 아무 의미가 없어진다. 준석이는 탄핵되지 않으면서 학생회로 최대한 예산을 가져오려고 한다.\n\n모든 학생 단체에 0$0$ 이상의 예산을 분배하고 남은 예산이 학생회의 예산이 된다. 준석이가 탄핵되지 않으면서 가져올 수 있는 최대 예산을 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31703","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBajtek uwielbia grać w gry mobilne. Irytują go jednak często pojawiające się reklamy innych gier, w których osoba grająca radzi sobie bardzo źle, co ma wywołać frustrację osoby oglądającej i chęć zagrania. Jedna z takich reklam (którą być może mieliście okazję sami zobaczyć) szczególnie zapadła Bajtkowi w pamięć.\n\n\n\nJako że inspirację można czerpać ze wszystkiego, Bajtek postanowił na podstawie powyższej gry stworzyć zadanie. Wybierze on sobie docelową kolorową planszę o wymiarach n×m, a grę rozpocznie z planszą n×m, na której żadne pole nie ma koloru. W jednym ruchu może on wybrać rząd lub kolumnę i przemalować wszystkie pola w nim/niej wybranym przez siebie kolorem (zwróć uwagę na to, że daje mu to większą swobodę niż w grze przedstawionej na obrazkach powyżej, gdzie wiersze i kolumny miały narzucone kolory). Aby nieco sformalizować zadanie, wszystkie kolory oznaczył wielkimi literami alfabetu angielskiego. Czy pomożesz mu i napiszesz program, który dla każdej zadanej przez niego planszy poda ciąg ruchów, który poprawnie stworzy docelowy układ kolorów? Możesz założyć, że dostaniesz dane wejściowe, w których ten cel można osiągnąć w co najwyżej n + m ruchach.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31686","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tOne Saturday Luka woke up from an afternoon nap and remembered: today is COCI! There was only one thing that he needed to do before the contest: raise the blinds.\n\nLuka has n$n$ blinds in his room, where the i$i$-th one is lowered by ai$a_i$ centimeters from the top of the window. He can raise the blinds in two ways:\n\n\n\tHe can start lifting any singular blind manually. With this method, it takes him t$t$ seconds to raise the blind by 1$1$ centimeter.\n\tHe can press a button, which starts raising all blinds parallel at the same speed.\n\n\nThe speed at which the blinds are raised with a button is defined as follows: If all blinds are still rising, each will rise by 1$1$ centimeter in s seconds. If r$r$ blinds have already been risen to the top that slows down the system. Then it will take s+k⋅r$s + k \\cdot r$ seconds for all the remaining blinds to rise by 1$1$ centimeter.\n\nCOCI is about to start, and Luka wants to raise his blinds as soon as possible. Meanwhile, his brother Marin entered the room and asked him q$q$ questions: What is the minimum time you need to raise the blinds so that they are all lowered by at most h$h$ centimeters? Marin is interested in the answer for each question considering the initial state of the blinds.\n\nThey realized that there is not enough time to think about it before COCI. Fortunately, the problem has just appeared here as well! Help them solve it!\n\nNote: Luka will always raise the blind by an integer value of centimeters.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31687","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIvan and Lucija are on a journey to a place far... far away. They know that the journey will last a long time and that they will be bored at some point. While they were thinking about what to do, Lucija came up with a game.\n\nShe drew N$N$ points on paper so that they form the vertices of a regular N$N$-gon and labeled them sequentially from 1$1$ to N$N$. The player whose turn it is selects two of the drawn N$N$ points such that the line segment connecting those two points does not intersect any of the previously drawn line segments and connects those two points. Line segments are allowed to touch at vertices. A player wins if after their move there exist three connected line segments forming a triangle, i.e., if there exist three points such that they are all connected by the drawn line segments. Of course, players are allowed to connect adjacent vertices, and those line segments are considered for triangle formation. Players take turns, and Lucija is the first to play.\n\nBoth are extremely skilled players, and we know they will play optimally. Your task is to determine, for a given N$N$, who will be the winner of the game. It can be shown that the game will always end after a finite number of moves and that there will always be a winner.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31674","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tNLCS의 기술력은 세계 제일이다.\n\n기술력이 뛰어난 NLCS Jeju는 키가 커지고 싶은 학생들을 위해 키가 커지는 도구 \"요술 망치\"를 개발하였다.\n\n키가 커지고 싶어 요술 망치의 임상실험에 참여한 N$N$명의 학생들에게 요술 망치를 사용하는 실험을 진행하게 되었다. 어떤 학생에게 요술 망치를 사용하면 그 학생의 키만큼 다른 모든 학생의 키가 커진다. 하지만 요술 망치는 아직 프로토타입 단계라 한 학생에게 최대 한 번밖에 사용할 수 없다.\n\nNLCS Jeju는 요술 망치의 대단함을 강조하기 위해 요술 망치를 사용한 후 키가 가장 큰 학생의 키를 최대로 만들고자 한다.\n\n N$N$명의 학생에게 요술 망치를 사용해서 만들 수 있는 가장 큰 키를 구해보자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31720","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tTwitch Plays Pokemon은 생방송 플랫폼 Twitch에서 유행했던 콘텐츠이다. 시청자가 채팅으로 명령을 입력하면 그 명령이 게임에 반영되어 게임 속 캐릭터를 조종한다. 수많은 시청자가 동시에 채팅을 치기 때문에 채팅 순서가 꼬여서 원하는 대로 캐릭터를 조종하기 힘들지만, 그게 바로 Twitch Plays Pokemon 콘텐츠의 매력이다.\n\n게임은 N×N$N\\times N$ 격자 미로에서 진행된다. 격자의 각 칸은 빈칸 또는 벽이다. 캐릭터는 빈칸에서 시작하며, 다른 빈칸에 있는 목적지까지 도달해야 한다. 시청자가 입력할 수 있는 명령은 U, D, L, R 중 하나로, 각각 캐릭터를 위, 아래, 왼쪽, 오른쪽으로 한 칸 이동하라는 명령이다. 벽 또는 미로 밖을 향해 이동하라는 명령이 주어진 경우 캐릭터는 움직이지 않는다. 캐릭터가 목적지에 도달하는 즉시 미로를 탈출하며, 더 이상 명령에 따라 이동하지 않는다.\n\n어느 날 새벽, 달구와 포닉스가 Twitch Plays Pokemon 게임에 참여했다. 두 시청자는 합심해서 게임 속 미로를 탈출하는 데 성공했다! 그런데 안타깝게도 그 역사적인 순간을 기록해 둔 사람은 아무도 없었다. 방송 진행자 윤이는 각 시청자의 채팅 기록을 시간 순서대로 확인하는 것이 가능하지만, 두 시청자의 채팅 간 순서를 알 수는 없었다.\n\n달구와 포닉스의 채팅을 적절한 순서로 배열했을 때, 최소 몇 번의 명령 만에 캐릭터가 미로를 탈출했을지 구하시오.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31675","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\nNLCS Jeju에는 화재 경보가 울리면 모든 커플이 헤어진다는 징크스가 있다...\n\n\n시이(swi)는 하라는 공부는 안하고 연애만 하는 학생들이 NLCS Jeju에 너무 많은 것을 보고 이들에게 시이-빔을 쏘아 단죄하기로 하였다.\n\n언제나처럼 화재경보기가 오작동해 학생 N$N$명이 대피하여 운동장에 한 줄로 서있다. 시이는 커플인 두 사람 중 한 명 이상을 단죄하려고 한다. 하지만 이들 중 누가 커플인지 모르기 때문에 시이는 다음 규칙에 따라 학생들을 단죄하기로 하였다.\n\n\n\t모든 서로 인접한 두 학생 중 한 명 이상을 단죄해야 한다.\n\n\n하지만 각 학생은 시이-빔에 대한 저항력이 있어 앞에서 i$i$번째 학생을 시이-빔으로 단죄하기 위해서는 Ri$R_i$만큼의 에너지가 필요하다.\n\n이러한 시이의 행동에 분노한 학생들은 몇 명의 머리를 대머리로 만들어 시이-빔을 반사하려 한다. 대머리인 학생에게 시이-빔을 쏘면 대머리에 반사되어 시이가 공격을 입게 된다. 따라서 시이는 대머리가 아닌 학생에게만 시이-빔을 쏠 수 있다. 하지만 이웃한 두 학생을 모두 대머리로 만들면 미관상 단죄당하느니만 못하므로 이웃한 두 명의 학생을 모두 대머리로 만들 수 없다.\n\n학생들은 일부 인원을 적절히 대머리로 만들어 시이가 단죄에 성공하기 위해 필요한 최소 에너지를 최대화하려고 한다. 학생들이 대머리가 되어 시이가 단죄하는 데 필요한 에너지가 최대일 때 얼마나 많은 에너지가 필요한지 구해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31721","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이번 학기에 개설되는 과목들을 살펴보던 달구는 수강을 희망하는 N$N$개의 과목을 추려냈다. 야망 넘치는 달구는 이번 학기에 최대한 많은 과목을 수강하고자 하며, 이에 따라 수강을 희망하는 N$N$개의 과목에 대한 수강 정원 및 수강 희망자 수를 조사하였다. 그중 i$i$번째 과목의 수강 정원은 ai$a_i$명이며, 해당 과목의 수강 희망자 수는 달구를 포함하여 bi$b_i$명이다.\n\n달구가 다니는 학교의 전교생 수는 달구를 포함하여 총 M$M$명이며, 각 학생은 초당 최대 한 개의 과목에만 수강신청을 할 수 있다. 이때, 여러 명의 학생이 동시에 같은 과목에 수강신청을 하더라도, 달구는 무조건 그 과목에 먼저 신청할 수 있다. 수강신청은 선착순으로 진행되며 수강 정원이 가득 찬 과목에는 더 이상 수강신청을 할 수 없다. 단, 달구가 조사한 각 과목의 수강 희망자를 제외한 학생들은 해당 과목에 수강신청을 하지 않는다.\n\n달구는 수강신청 전에 미리 N$N$개의 과목에 대해 서로 다른 우선순위를 지정해 두고, 우선순위에 따라 순서대로 각 과목에 수강신청을 하고자 한다. 만약 우선순위가 더 높은 강의의 수강 정원이 모두 찼다면 해당 과목에는 수강신청을 시도하지 않고 다음 우선순위의 과목을 신청한다. 단, 수강신청 도중 상황에 따라 과목들의 우선순위를 변경할 수는 없다.\n\n그러나, 달구는 다른 학생들의 수강신청 순서에 따라 수강할 수 있는 과목의 수가 크게 달라질 수 있다는 사실을 깨달았다! 이에 따라, 선택할 수 있는 모든 우선순위 중 다른 학생들의 수강신청 순서의 최악의 경우에도 가장 많은 과목을 수강할 수 있도록 우선순위를 정하고자 한다. 달구를 위해 최선의 전략으로 각 과목의 우선순위를 배정했을 때 다른 학생들의 수강신청 순서가 최악인 경우에 달구가 수강할 수 있는 과목의 개수를 구해주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31652","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBessie has N$N$ (2≤N≤300$2\\le N\\le 300$) tiles in a line with ugliness values a1,a2,…,aN$a_1, a_2, \\dots, a_N$ in that order (1≤ai≤106$1\\le a_i\\le 10^6$). K$K$ (0≤K≤min(N,6)$0\\le K\\le \\min(N,6)$) of the tiles are stuck in place; specifically, those at indices x1,…,xK$x_1,\\dots, x_K$ (1≤x1<x2<⋯<xK≤N$1\\le x_1 < x_2<\\dots< x_K\\le N$).\n\nBessie wants to minimize the total ugliness of the tiles, which is defined as the sum of the maximum ugliness over every consecutive pair of tiles; that is, ∑i=1N−1max(ai,ai+1)$\\sum_{i=1}^{N-1}\\max(a_i,a_{i+1})$. She is allowed to perform the following operation any number of times: choose two tiles, neither of which are stuck in place, and swap them.\n\nDetermine the minimum possible total ugliness Bessie can achieve if she performs operations optimally.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31688","content":"문제\n\nBaoBao the Witch is stuck in a maze with \nn\n$n$ rows and \nn\n$n$ columns, where the height of the cell in the \ni\n$i$-th row and the \nj\n$j$-th column is \nhi,j\n$h_{i,j}$. To get out of the maze, BaoBao has to find a path which passes through each cell exactly once. Each time she can only move into the neighboring cell sharing a same edge with the current one. But as we know, BaoBao is super lazy, so every time when she climbs up (that is to say, moving from a cell with a smaller height to another with a larger height) her happiness value will decrease. As her helping hand, your task is to find a valid path so that when moving along the path, the number of times BaoBao climbs up will not be more than the number of times she climbs down.\n\nMore formally, you need to find a sequence \n(x1,y1),(x2,y2),⋯,(xn2,yn2)\n$(x_1, y_1),(x_2, y_2), \\cdots ,(x_{n^2}, y_{n^2})$ such that:\n\nFor all \n1≤i≤n2\n$1 ≤ i ≤ n^2$, \n1≤xi,yi≤n\n$1 ≤ x_i , y_i ≤ n$;\nFor all \n1≤i,j≤n2\n$1 ≤ i, j ≤ n^2$, \ni≠j\n$i \\ne j$, \n(xi,yi)≠(xj,yj)\n$(x_i , y_i) \\ne (x_j , y_j )$;\nFor all \n2≤i≤n2\n$2 ≤ i ≤ n^2$, \n|xi−xi−1|+|yi−yi−1|=1\n$|x_i - x_{i-1}| + |y_i - y_{i-1}| = 1$;\n \n\n\n\n\n∑i=2n2[hxi−1,yi−1<hxi,yi]≤∑i=2n2[hxi−1,yi−1>hxi,yi]\n$\\displaystyle\\sum_{i=2}^{n^2}{[h_{x_{i-1},y_{i-1}} < h_{x_i, y_i}]} \\le \\displaystyle\\sum_{i=2}^{n^2}{[h_{x_{i-1},y_{i-1}} > h_{x_i, y_i}]}$, where \n[P]\n$[P]$ equals \n1\n$1$ when \nP\n$P$ is true, and equals \n0\n$0$ when it is false.\n\nAdditionally, you discover that the heights in all cells are a permutation of \nn2\n$n^2$, so you just need to output the height of each cell in a valid path."},{"problemId":"31722","content":"문제\n\n윤이의 취미는 그림 그리기이다. 어느 날, 학교 뒷산을 보고 영감을 받은 윤이는 산수화 한 장을 그려 내었다. 산수화는 \nN\n$N$행 \nM\n$M$열의 격자 모양이며, 각 칸은 검은색 또는 흰색으로 칠해져 있다.\n\n윤이는 산수화를 포닉스와 달구에게 선물하기로 했다. 그러나 그림은 한 장뿐이었고, 포닉스와 달구는 누가 그림을 가져야 하는지에 대한 토론을 시작했다. 토론은 쉽게 끝나지 않았는데 그 이유는 포닉스와 달구가 생각하는 좋은 산수화의 기준이 서로 다르기 때문이었다.\n\n달구는 산이 많은 산수화를 좋은 산수화라고 생각하며, 포닉스는 호수가 많은 산수화를 좋은 산수화라고 생각한다. 산과 호수의 정의는 각각 아래와 같다. \n(i,j)\n$(i,j)$는 \ni\n$i$번째 행 \nj\n$j$번째 열에 해당하는 칸을 의미한다.\n\n \na≤x,|a−x|+|b−y|≤d−1\n$a\\le x,|a-x|+|b-y|\\le d-1$를 만족하는 \n(a,b)\n$(a,b)$가 모두 검은색이라면 이를 \n(x,y)\n$(x,y)$를 중심으로 하고 크기가 \nd\n$d$인 산이라 한다. 이때 \nd\n$d$는 \n1\n$1$ 이상 \nmin(y,M−y+1,x)\n$\\min(y,M-y+1,x)$ 이하의 정수여야 한다.\n \nx≤a≤x+d−1,y≤b≤y+d−1\n$x\\le a\\le x+d-1,y\\le b\\le y+d-1$을 만족하는 \n(a,b)\n$(a,b)$가 모두 흰색이라면 이를 \n(x,y)\n$(x,y)$를 왼쪽 위 꼭짓점으로 하고 크기가 \nd\n$d$인 호수라 한다. 이때 \nd\n$d$는 \n1\n$1$ 이상 \nmin(N−x+1,M−y+1)\n$\\min(N-x+1,M-y+1)$ 이하의 정수여야 한다.\n\n위 그림의 경우, \n(3,2)\n$(3,2)$를 중심으로 하고 크기가 \n2\n$2$인 산과 \n(1,3)\n$(1,3)$을 왼쪽 위 꼭짓점으로 하고 크기가 \n2\n$2$인 호수가 있다.\n\n윤이는 친구들의 토론을 멈추기 위해 \n1\n$1$부터 \nN\n$N$까지의 모든 \ni\n$i$에 대해 크기가 \ni\n$i$인 산의 개수와 호수의 개수를 직접 구해 주려 한다. 윤이를 도와 문제를 해결해 보자."},{"problemId":"31653","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBessie is planning an infinite adventure in a land with N$N$ (1≤N≤105$1\\leq N \\leq 10^5$) cities. In each city i$i$, there is a portal, as well as a cycling time Ti$T_i$. All Ti$T_i$'s are powers of 2$2$, and T1+⋯+TN≤105$T_1 + \\cdots + T_N \\leq 10^5$. If you enter city i$i$'s portal on day t$t$, then you instantly exit the portal in city ci,tmodTi$c_{i, t\\bmod{T_i}}$.\n\nBessie has Q$Q$ (1≤Q≤5⋅104$1\\leq Q \\leq 5\\cdot 10^4$) plans for her trip, each of which consists of a tuple (v,t,Δ)$(v, t, \\Delta)$. In each plan, she will start in city v$v$ on day t$t$. She will then do the following Δ$\\Delta$ times: She will follow the portal in her current city, then wait one day. For each of her plans, she wants to know what city she will end up in.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31676","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n흐에에...\n\n\n어둠을 틈타 누군가가 시이(swi)의 엄청난 케이크를 또 먹어버렸다!\n\n여느날처럼 케이크를 좋아하는 시이는 근처 가게에서 사온 엄청난 케이크를 식탁 위에 올려놓고 감상하고 있었다. 하지만 기숙사 히터가 너무 따뜻했던 탓에 시이는 잠들고 말았고, 시이가 잠든 사이 케이크가 사라져버렸다!\n\n케이크를 먹은 사람은 사건 당시 기숙사에 있던 시이와 시이를 제외한 N$N$명의 사람 중 한 명이다. 시이는 범인을 찾기 위해 자신이 자던 동안 기숙사에 있던 N$N$명의 학생을 동시에 추궁했다. 시이는 각 학생이 한 진술을 다음 두 종류의 유형 중 한 가지로 정리했다.\n\n\n\t명단 S$S$에 있는 학생 가운데 범인이 있다.\n\t명단 S$S$에 있는 학생 가운데 범인이 없다.\n\n\n만약 N$N$명의 학생 중 한 명이 범인이라면 나머지 학생은 모두 범인을 알 것이므로 범인을 제외한 모든 학생은 사실대로 진술할 것이고, 범인은 자신이 케이크를 먹은 사실을 숨기기 위해 거짓으로 진술할 것이다. 그러나 N$N$명의 학생 모두가 범인이 아니라면 시이가 케이크를 먹어버린 것이기 때문에 모든 진술의 진위를 알 수 없다.\n\n시이는 N$N$개의 진술을 바탕으로 범인일 가능성이 있는 학생을 추려내고자 한다. 어떤 학생이 범인이라 가정했을 때 N$N$개의 진술에 모순이 없다면 그 학생을 범인일 가능성이 있는 학생이라고 한다. 만약 N$N$명의 학생 가운데 범인일 가능성이 있는 학생이 없다면 소거법에 의해 시이가 범인이므로 swi를 출력한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31704","content":"문제\n\nBajtocja (po raz kolejny) planuje zaatakować Bitocję. Do elitarnej jednostki specjalnej Bajtogrom należy \nn\n$n$ żołnierzy, którzy na dzisiejszej porannej zbiórce ustawili się w szeregu. Generał Bajtazar, odpowiedzialny za przeprowadzenie desantu, ponumerował ich pozycje od lewej do prawej liczbami od \n1\n$1$ do \nn\n$n$.\n\nKażdy z żołnierzy albo jest gotów przeprowadzić desant, albo w związku z nowelizacją ustawy potrzebuje dodatkowego szkolenia. Generał Bajtazar chciałby, aby wszyscy żołnierze gotowi do desantu stanowili spójny przedział szeregu. Formalniej, chciałby, aby nie istniała taka trójka pozycji żołnierzy \n1≤i<j<k≤n\n$1 ≤ i < j < k ≤ n$, że \ni\n$i$-ty oraz \nk\n$k$-ty żołnierz w szeregu są gotowi, zaś \nj\n$j$-ty – nie.\n\nJako że ten warunek może nie być domyślnie spełniony, Bajtazar wyda \nm\n$m$ rozkazów. W \ni\n$i$-tym z nich rozkaże on żołnierzom na pozycjach \nai\n$a_i$ oraz \nbi\n$b_i$ skomunikować się ze sobą w celu zamiany ich pozycji. Żołnierze zamienią się pozycjami wtedy i tylko wtedy, gdy \nai\n$a_i$-ty żołnierz jest gotowy do desantu, zaś \nbi\n$b_i$-ty – nie.\n\nBajtazar wybrał już pewien ciąg rozkazów i zamierza je wydać. Nie wie jednak, ilu żołnierzy jest gotowych do desantu ani na których pozycjach się znajdują. Dla każdej liczby całkowitej \nk\n$k$ pomiędzy \n1\n$1$ i \nn\n$n$ włącznie chciałby więc rozwiązać następujący problem: rozważmy wszystkie \n(nk)\n$\\binom{n}{k}$ początkowych konfiguracji gotowych i nieprzygotowanych żołnierzy, w których do desantu jest gotowych dokładnie \nk\n$k$ żołnierzy. Dla ilu spośród tych konfiguracji po wykonaniu wszystkich rozkazów warunek Bajtazara zostanie spełniony (to jest, żołnierze gotowi do desantu będą stanowili spójny przedział szeregu)? Pomóż mu i policz szukane przez niego wartości\n\nUwaga: Ponieważ w Potyczkach Algorytmicznych startuje wielu początkujących programistów, postanowiliśmy nie zadręczać Was dużymi liczbami. Wystarczy więc, że dla każdego \nk\n$k$ podacie resztę z dzielenia liczby możliwości przez liczbę pierwszą 2"},{"problemId":"31723","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tUDP 시티는 N$N$개의 건물과 각 건물을 잇는 M$M$개의 무빙워크로 이루어져 있다. 각 건물과 무빙워크에는 1$1$번부터 차례로 번호가 매겨져 있다. 포닉스는 각 무빙워크의 전원을 끄거나 켤 수 있다. 무빙워크는 전원 상태에 따라 아래와 같이 동작한다.\n\n\n\t i$i$번째 무빙워크의 전원이 켜져 있는 경우, ui$u_i$번 건물에서 vi$v_i$번 건물로의 방향으로만 이동할 수 있다. 이 경우 이동 시간은 di$d_i$이다.\n\t i$i$번째 무빙워크의 전원이 꺼져 있는 경우, ui$u_i$번 건물과 vi$v_i$번 건물 사이를 방향에 관계없이 이동할 수 있다. 이 경우 이동 시간은 2di$2d_i$이다.\n\n\n포닉스는 현재 1$1$번 건물에 있으며, 각 무빙워크의 전원을 적절히 조작해 다른 모든 건물에 대한 최단 도달 시간의 합을 최소화하려 한다. 이때 1$1$번 건물에서 도달할 수 없는 건물이 존재해서는 안 된다.\n\n도달할 수 없는 건물이 존재하지 않는 모든 경우에 대해서 모든 건물에 대한 최단 도달 시간의 합의 최솟값과 이때 각 무빙워크의 전원 상태를 구해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31654","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYour friend Bob is really bad at adding numbers, and he’d like some help to make sure he’s doing it correctly! Can you help Bob make sure he is adding correctly? Given 3 integers A$A$, B$B$, C$C$, make sure that A+B=C$A + B = C$, and that Bob indeed added A$A$ and B$B$ correctly.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31689","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBaoBao is playing the famous game Elden Ring these days. It’s an open-world game in which you can control your character to travel from places to places. However, your character could also enter a trap and you need to figure out how to escape. Right now, BaoBao’s character is stuck in a 2$2$-dimensional plane with deadly lasers. There are n$n$ laser generators (each can be regarded as a point) shooting laser beams between every pair of them (so there are n(n−1)2$\\frac{n(n-1)}{2}$ laser beams in total). The beams start and end at generator points and do not stretch to infinity.\n\nStarting at point (0,0)$(0, 0)$, BaoBao wants to escape to point (1010101010,1010101010)$(10^{10^{10^{10^{10}}}} , 10^{10^{10^{10^{10}}}})$ without touching any laser beam or generator. In order to do so, BaoBao can ask her friend DreamGrid to remove any number of laser generators, together with any laser beam that starts or ends at these generators. Output the minimum number of laser generators that need to be erased for the escape.\n\nNote that BaoBao does not need to move in a specific direction to escape. Her escaping route can even be a curve if necessary.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31724","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t N$N$개의 정점으로 이루어진 트리가 주어진다. 트리의 각 정점은 1$1$번부터 N$N$번까지 번호가 붙어 있고, 트리를 구성하는 간선 또한 주어지는 순서대로 1$1$번부터 N−1$N-1$번까지 번호가 붙어 있다. 각 간선에는 Wi$W_i$의 가중치가 존재한다.\n\n다음 두 가지 유형의 질의가 합해서 Q$Q$개 주어진다. 2번 쿼리가 주어질 때마다, 답을 출력하는 프로그램을 작성하라.\n\n\n\t1 e v: e$e$번 간선의 가중치 We$W_e$를 We & v$W_e\\ \\And \\ v$로 바꾼다. &$\\And$는 Bitwise AND 연산을 의미한다.\n\t2 n: ∑i=1Ndist(n,i)$\\sum_{i=1}^{N}{dist(n, i)}$를 출력한다. dist(a,b)$dist(a, b)$는 a$a$번 정점과 b$b$번 정점 사이를 연결하는 유일한 경로에 포함된 간선 가중치를 모두 Bitwise OR 연산한 값이다. a=b$a = b$인 경우에는 dist(a,b)=0$dist(a, b) = 0$ 이다.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31677","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tNLCS Jeju의 건물은 부실해서 벽이나 문 등을 드롭킥으로 부술 수 있다.\n\nNLCS Jeju의 복도는 0$0$번째부터 N$N$번째까지 정사각형 구역으로 나눌 수 있으며, 동호가 있는 0$0$번째 구역을 제외한 각 구역에는 장애물이 존재할 수 있다. 동호는 0$0$번째 구역에서 교실이 있는 N$N$번째 구역까지 가능한 한 빠르게 이동하고 싶다.\n\n동호는 복도의 구조를 나타낸 길이 N$N$의 문자열 S$S$를 가지고 있다. 정수 1≤i≤N$1\\le i\\le N$에 대해 Si$S_i$가 X라면 i$i$번째 구역에 장애물이 존재하고, Si$S_i$가 .라면 i$i$번째 구역에 장애물이 존재하지 않는다.\n\n동호는 장애물을 지나 빠르게 교실에 도착하기 위해 장애물을 다음과 같이 최대 M$M$번 움직일 수 있다.\n\n\n\t장애물을 구역의 번호가 커지는 방향으로 밀어 한 칸 움직인다. 이때 구역의 번호가 커지는 방향으로 연속한 모든 장애물이 함께 움직인다.\n\t장애물을 구역의 번호가 작아지는 방향으로 밀어 한 칸 움직인다. 이때 구역의 번호가 작아지는 방향으로 연속한 모든 장애물이 함께 움직인다.\n\n\n이때 장애물은 밀린 후에도 1$1$번째부터 N$N$번째까지의 구역 안에 있어야 한다.\n\n장애물을 최대 M$M$번 움직인 후, 동호는 두 가지 기술을 적절히 섞어 교실로 이동한다.\n\n\n\t 1$1$초에 걸쳐 구역의 번호가 커지는 방향으로 한 칸 이동한다. 이동하려는 칸에 장애물이 있으면 이동할 수 없다.\n\t 2$2$초에 걸쳐 동호와 이웃한 장애물을 파괴한다. 파괴한 장애물과 이웃한 장애물도 함께 파괴할 수 있다. 장애물을 파괴한 이후에는 파괴한 장애물이 있던 위치로 이동한다. 여러 개를 파괴한 경우 그 중 원하는 위치로 이동할 수 있다.\n\n\n동호는 교실에 도달하는 시간을 최소화하려고 한다. 교실에 도달하는 데 얼마나 시간이 걸릴지 구하라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31705","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBajtazar z okazji dnia liczby π otrzymał w prezencie las (nieskierowany graf acykliczny) z n wierzchołkami. W lesie tym wierzchołki ponumerowane są liczbami od 1 do n, a krawędzie mają przypisane całkowite dodatnie długości. Dodatkowo każdy wierzchołek ma kolor opisany liczbą całkowitą. Początkowo wszystkie wierzchołki mają kolor 0.\n\nPonieważ to Ty jesteś osobą, która podarowała Bajtazarowi ten prezent, Twoim zadaniem jest teraz odpowiadać na zapytania Bajtazara dotyczące tego lasu. Każde zapytanie jest jednego z następujących typów:\n\n\n\t1 ai bi di – Bajtazar dodaje do lasu nieskierowaną krawędź o długości di łączącą wierzchołki ai oraz bi. Gwarantowanym jest, że graf po dodaniu tej krawędzi nadal nie będzie zawierał cyklu.\n\t2 ai bi – Bajtazar usuwa z lasu krawędź łączącą wierzchołki ai oraz bi.\n\t3 vi zi ki – Bajtazar przemalowuje na kolor ki wszystkie wierzchołki osiągalne z wierzchołka vi i odległe od niego o co najwyżej zi. Odległością między dwoma wierzchołkami nazywamy tutaj sumę długości krawędzi na ścieżce prostej pomiędzy nimi.\n\t4 ui – Bajtazar pyta Cię o aktualny kolor wierzchołka ui.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31690","content":"문제\n\nThe Abelian Sandpile Model is a famous dynamical system displaying self-organized criticality. It has been studied for decades since it was introduced by Per Bak, Chao Tang and Kurt Wiesenfeld in a 1987 paper. The sandpile prediction is of wide interest in physics, computer science, and mathematics, both for its beautiful algebraic structure and for its relevance to applications like load balancing and derandomization of models like internal diffusion-limited aggregation. The sandpile model is related to many other models and physical phenomena, like the rotor-routing model, avalanche models.\n\nIn the sandpile model, we are given an undirected graph \nG\n$G$ whose vertices are indexed from \n1\n$1$ to \nn\n$n$. We’re also given \nn\n$n$ integers \na1,a2,⋯,an\n$a_1, a_2, \\cdots , a_n$ where \nai\n$a_i$ indicates that there are \nai\n$a_i$ chips placed on vertex \ni\n$i$ initially. Each turn we will pick an arbitrary vertex \nv\n$v$ such that the number of chips on \nv\n$v$ is not smaller than the number of edges connecting \nv\n$v$, denoted as \ndv\n$d_v$. For each neighbor of \nv\n$v$, it will receive one chip from \nv\n$v$. Therefore, \nv\n$v$ will lost \ndv\n$d_v$ chips. This process is called firing or toppling. Firing will keep happening until no vertex \nv\n$v$ has at least \ndv\n$d_v$ chips.\n\nIt can be proven that the order of firing doesn’t affect the result. Meanwhile, it is also possible that the firing will never terminate. This instance is described as “recurrent”. Now you are given a clique and the initial number of chips. Determine whether this instance is a recurrent one. If not, please output the final number of chips for each node respectively.\n\nA clique (also called a complete graph) is a graph where every two vertices are connected with an edge."},{"problemId":"31678","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIt’s time to play Bingo!\n\nTo play Bingo, you need a game master and a drum with 90$90$ balls, each containing a number from 1$1$ to 90$90$, sucha that every number appears on exactly one ball.\n\nBefore the game starts, the game master gives each of the n$n$ players a board of size 5×5$5 \\times 5$. Each field of the board contains an integer between 1$1$ and 90$90$, where all the integers on the board are distinct. Each player gets a unique board.\n\nAfter the players receive their boards, the game can begin.\n\nThe game master starts drawing balls from the drum. After drawing a ball with the number xi$x_i$, he announces that number and puts the ball aside. The players then check their boards and, if they have the drawn number, they mark it.\n\nWhen a player marks all the 5$5$ numbers in a row, column, main diagonal or antidiagonal, he has a Bingo! and shouts it out. The game ends and that player wins.\n\nTo make the game more interesting, the game master has decided to introduce an additional rule. Namely, the game master will draw m$m$ balls from the drum before anyone is allowed to shout Bingo! (even if he has already marked all the numbers in a row, column, or diagonal).\n\nBut, as soon as the game master drew m$m$ balls, there was a commotion: all the players shouted Bingo! at the same time.\n\nThe game master is confused and doesn’t know who to trust. To resolve this situation, he asked you for help. Determine which players had a Bingo! after drawing m$m$ balls, i.e. which players had all the numbers marked in at least one row, column, or diagonal.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31679","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMarko was at the Interliber book fair, and he bought n$n$ books. The attraction of the i$i$-th book is ki$k_i$. Marko arranged the books on the shelf according to their attraction values, so the first book from the left is the least attractive, and every next one to the right is more or equally attractive than the previous one.\n\nIt has been quite some time since Interliber, but Marko has only now found time to read the books. He will spend a total of t$t$ minutes reading.\n\nFor each book, he can either read it in its entirety, which takes him a$a$ minutes; or read only the content from the covers, which takes him b$b$ minutes.\n\nHe will start from the leftmost book. After finishing the current book (either entirely or just the content from the covers), he moves on to the next book, which is the first one to the right of the book he just read. Marko’s inspiration is equal to the sum of the attraction values of the books he has read in their entirety. What is the maximum value of Marko’s inspiration after t$t$ minutes?\n\nNote: If Marko starts reading a book but fails to finish it before the end of t$t$ minutes, that book does not contribute to his inspiration.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31655","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou read a lot of documents that come from the United States, Europe, and other countries around the world. The issue is that their date formats aren’t consistent! The US formats their dates as MM/DD/YYYY while in Europe they format it as DD/MM/YYYY. That is, in the US the month comes before the day, while in Europe the day comes first. Given a date, can you determine if its definitely the US format, for sure European, or could be either? (Note that there are even more date formats, but luckily since the year is guaranteed to be last in this case, we only have to worry about these 2 formats.)\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31725","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t포닉스와 달구는 N×N$N \\times N$ 크기의 격자 위에서 놀이를 하려고 한다. 이 격자의 i$i$행 j$j$열에 위치한 칸에는 가중치 Ai,j$A_{i, j}$가 있다. 놀이의 방법은 아래와 같다.\n\n\n\t달구는 K×K$K \\times K$ 크기의 영역을 하나 골라서, 해당 영역의 칸들을 윤이에게 선물로 준다. 단, 달구가 선물할 영역에는 격자의 1$1$행 1$1$열과 N$N$행 N$N$열이 포함되면 안 된다.\n\t포닉스는 처음에 격자의 1$1$행 1$1$열에 있고, N$N$행 N$N$열에 도달할 때까지 이동한다. 포닉스는 현재 위치한 칸이 r$r$행 c$c$열일 때, r+1$r+1$행 c$c$열 또는 r$r$행 c+1$c+1$열로 이동할 수 있다. 단, 격자 밖이나 윤이가 선물받은 칸으로는 이동할 수 없다.\n\t포닉스가 얻을 수 있는 점수는 포닉스가 지나간 칸에 포함된 가중치의 합이다.\n\n\n포닉스는 점수를 최대로 얻고자 하고, 달구는 포닉스의 점수가 최소가 되도록 영역을 고르고자 한다. 포닉스와 달구는 모두 최선을 다해 놀이를 진행한다고 가정했을 때, 포닉스가 얻을 수 있는 점수의 최댓값을 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31726","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tJOI-kun is breeding N$N$ fish in a large tank, and each fish is numbered from 1$1$ to N$N$.\n\nJOI-kun has two types of fish food, A and B, both in sufficient quantities. When one piece of food is added to the aquarium, exactly one fish eats it (any fish could potentially eat it), and depending on the type of food and which fish ate it, the intelligence of the fish changes as follows:\n\n\n\tWhen fish k$k$ (1≤k≤N$1 ≤ k ≤ N$) eats one piece of type A food, the intelligence of fish k$k$ increases exactly by D$D$.\n\tWhen fish k$k$ (1≤k≤N$1 ≤ k ≤ N$) eats one piece of type B food, the intelligence of all fish numbered k$k$ and above increases exactly by 1$1$ each.\n\n\nCurrently, the intelligence of all fish is 0$0$. JOI-kun wants to make the intelligence of fish i$i$ (1≤i≤N$1 ≤ i ≤ N$) equal to its ideal intelligence Ci$C_i$, but it may not always be possible.\n\nTherefore, he considered Q$Q$ questions. The j$j$-th question (1≤j≤Q$1 ≤ j ≤ Q$) is as follows:\n\n\n\tStarting from the state where all fish have an intelligence of 0$0$, by repeating the action of putting food into the aquarium zero or more times, is it possible to reach the state where all fish Lj,Lj+1,…,Rj$L_j , L_j + 1, \\dots , R_j$ have their exact ideal intelligence values? Furthermore, if it is possible, what is the minimum number of pieces of type A food that needs to be put into the tank?\n\n\nWrite a program that, given information about JOI-kun’s fish and information about the questions, answers his questions.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31706","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t3SUM to znany problem algorytmiczny, w którym dla danego ciągu liczb całkowitych c1, c2, . . . , cm należy znaleźć trzy indeksy i < j < k takie, że ci + cj + ck = 0.\n\nNie jest znane rozwiązanie tego problemu dla dowolnych ciągów liczb całkowitych w złożoności istotnie lepszej niż O(m2). Na szczęście Bajtek tego nie wie i postanowił rozwiązać ten problem dla swojego Bardzo Ulubionego Ciągu.\n\nUlubiony Ciąg Bajtka składa się z n liczb całkowitych a1, a2, . . . , an. Bardzo Ulubiony Ciąg Bajtka powstaje poprzez spojrzenie na wszystkie n(n+1)/2 spójnych przedziałów Ulubionego Ciągu Bajtka, obliczenie sum elementów w nich i umieszczenie wszystkich tych sum w jednym ciągu (uwzględniając powtórzenia). Sumy przedziałów układamy w kolejności rosnącej po indeksie początku przedziału, a w przypadku remisu w kolejności rosnącej po indeksie końca przedziału.\n\nŻeby nie było za prosto, Bajtka nie interesuje znalezienie trójki indeksów i < j < k. Chciałby on poznać dokładną liczbę wszystkich trójek indeksów i < j < k odpowiadających elementom, które sumują się do zera. Pomóż mu i napisz program, który obliczy dla niego liczbę takich trójek!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31691","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBaoBao just learned how to use a data structure called link-cut tree to find cycles in a graph and decided to give it a try. BaoBao is given an undirected graph with n$n$ vertices and m$m$ edges, where the length of the i$i$-th edge equals 2i$2^i$. She needs to find a simple cycle with the smallest length.\n\nA simple cycle is a subgraph of the original graph containing k$k$ (3≤k≤n$3 ≤ k ≤ n$) vertices a1,a2,⋯,ak$a_1, a_2, \\cdots , a_k$ and k$k$ edges such that for all 1≤i≤k$1 ≤ i ≤ k$ there is an edge connecting vertices ai$a_i$ and a(imodk)+1$a_{(i \\bmod k)+1}$  in the subgraph. The length of a simple cycle is the total length of the edges in the cycle.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31707","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBajtazar posiada n żarówek ponumerowanych kolejnymi liczbami od 1 do n oraz m przełączników. Każda z żarówek początkowo jest zapalona lub też nie. Każdy z przełączników wpływa na pewną parę żarówek. Użycie go zmieni stan ich obu na przeciwny, ale tylko pod warunkiem, że obie były w takim samym stanie – obie włączone lub obie wyłączone. W przeciwnym wypadku wciśnięcie przełącznika nie będzie miało żadnego efektu.\n\nBajtazar zastanawia się, ile różnych konfiguracji zapalonych i zgaszonych żarówek jest w stanie osiągnąć, używając przełączników dowolnie wiele razy w dowolnej kolejności, potencjalnie używając niektórych przełączników wielokrotnie. Dwie konfiguracje uznajemy za różne, jeżeli któraś żarówka jest zapalona w jednej konfiguracji, a w drugiej jest zgaszona. Ponieważ wynik może być duży, wystarczy, że podasz jego resztę z dzielenia przez 109 + 7.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31692","content":"문제\n\nYour task is to maintain a colourful tree and process queries.\n\nAt the beginning, there is only one vertex numbered \n1\n$1$ with colour \nC\n$C$ on the tree. Then there are \nq\n$q$ operations of two types coming in order:\n\n \n0\n$0$ \nx\n$x$ \nc\n$c$ \nd\n$d$: Add a new vertex indexed \n(n+1)\n$(n + 1)$ with colour \nc\n$c$ to the tree, where \nn\n$n$ is the current number of existing vertices. An edge connecting vertex \nx\n$x$ and \n(n+1)\n$(n+ 1)$ with length \nd\n$d$ will also be added to the tree.\n \n1\n$1$ \nx\n$x$ \nc\n$c$: Change the colour of vertex \nx\n$x$ to \nc\n$c$.\n\nAfter each operation, you should find a pair of vertices \nu\n$u$ and \nv\n$v$ (\n1≤u,v≤n\n$1 ≤ u, v ≤ n$) with different colours in the current tree so that the distance between \nu\n$u$ and \nv\n$v$ is as large as possible.\n\nThe distance between two vertices \nu\n$u$ and \nv\n$v$ is the length of the shortest path from \nu\n$u$ to \nv\n$v$ on the tree."},{"problemId":"31656","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBob is texting Alice about his favourite programming problems, but he spilled coffee on his keyboard and now the keys get stuck when he types. The other day, he tried to tell her about the upcoming contest “UAPC”, but accidentally sent “UAAAAAPC” since his A key got stuck! Bob is an undergraduate so he can’t afford a new keyboard. He has asked you to write a program to correct his messages.\n\nTo make your life easier, Bob has agreed to avoid using messages with adjacent copies of the same letter (e.g., he won’t write about the “coffee” incident). So, you should always reduce duplicates down to a single character.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31693","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tNa osi liczbowej stoi n$n$ mrówek – i$i$-ta z nich w punkcie i$i$. Każda z mrówek patrzy w prawo (w kierunku rosnących współrzędnych) lub w lewo (w kierunku malejących współrzędnych). Mrówki są na tyle małe, że możemy traktować je jak pojedyncze punkty.\n\nNa sygnał wszystkie mrówki zaczynają z jednakową, jednostkową prędkością maszerować w kierunkach w które patrzą. Jeśli dwie mrówki się zderzą (znajdą się w tym samym punkcie), to odbijają się od siebie, tzn. obie zmieniają kierunek marszu i maszerują dalej. Można udowodnić, że po pewnym czasie nie będą już więcej następować żadne zderzenia. Czy jesteś w stanie napisać program, który dla każdej mrówki obliczy ile razy odbije się od innych mrówek?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31728","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMr. JOI, who manages a famous ski resort on the IOI Plateau, has decided to commemorate the 15th anniversary of the ski resort’s opening by constructing a new ski resort on the adjacent KOI Plateau.\n\nThe KOI Plateau has N$N$ points numbered from 1$1$ to N$N$. Currently, the altitude of point i$i$ (1≤i≤N$1 ≤ i ≤ N$) is Hi$H_i$m, and there exist no courses connecting each point on the plateau. Additionally, each point is equipped with one unused connection facility available.\n\nThe goal of Mr. JOI is to construct KOI Hotel at one of the N$N$ points and then construct some courses connecting each point on the plateau so that one can ski down to the hotel from any point. Specifically, Mr. JOI will construct the ski resort according to the following steps:\n\n\n\tPerform the following embankment work any number of times (possibly zero):\n\n\t\n\t\tChoose a point i$i$, and increase the altitude of point i$i$ by 1$1$m. The cost of this work is K$K$ per operation.\n\t\n\t\n\tChoose a point from the N$N$ points and construct KOI Hotel there.\n\tPerform the following extension work any number of times (possibly zero):\n\t\n\t\tChoose a point i$i$, and build one connection facility at point i$i$. The cost of this work is Ci$C_i$ per operation.\n\t\n\t\n\tFor each of the remaining N−1$N - 1$ points excluding the point with KOI Hotel, perform the following construction:\n\t\n\t\tLet i$i$ be the number of the point. Select another point j$j$ with a strictly lower altitude than point i$i$, and use one unused connection facility at point j$j$ to construct a one-way course from point i$i$ to point j$j$. Note that if there is no point with an unused connection facility and a strictly lower altitude than point i$i$, the goal cannot be achieved.\n\t\n\t\n\n\nThe cost of constructing the ski resort is the sum of the costs of embankment works and extension works performed.\n\nWrite a program which, given information about each point on the KOI Plateau and the cost K$K$ per operation of embankment work, finds the minimum cost of constructing the ski resort.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31657","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tElection season has begun! The news network you work for wants to present expert opinions on a variety of important topics. To give the appearance of being unbiased, the news chief insists the experts that are interviewed cover a broad range of the political spectrum.\n\nThis seems difficult to do since the political spectrum is so varied, so you decide to go with the tried, tested, and true practice of calling each person either just a rightie or a leftie. Finally, you want to get this job done as quickly as possible meaning you want to conduct the fewest interviews possible.\n\nMore specifically, there are T$T$ topics to be covered and N$N$ experts. Each expert is experienced with only one of the topics you should cover, and each expert is also either a rightie or a leftie. Your job is to interview the fewest experts possible such that the following conditions hold.\n\n\n\t\n\tFor each topic, you interviewed at least one expert in that topic.\n\t\n\t\n\tYou interviewed each expert at most once (the audience would get bored otherwise).\n\t\n\t\n\tThe number of rightie experts you interviewed is the same as the number of leftie experts you interviewed.\n\t\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31709","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tSzef firmy Radek i przyjaciele, Radek, podjął próbę zalania wszystkich półek z dokumentami w konkurencyjnej firmie Mati i spółka. Aby dokonać perfekcyjnego sabotażu, poprosił swojego przyjaciela, hydraulika Janusza, o zainstalowanie drobnych kraników z wodą nad każdą z półek.\n\nPółki w firmie Mati i spółka można dla uproszczenia reprezentować za pomocą odcinków na płaszczyźnie. Każda półka jest odcinkiem między pewną parą punktów (li, hi) i (ri, hi). Kraniki zamontowane przez hydraulika są punktami o współrzędnych ((li + ri)/2, hi + 0.5). Podłoga w tym pomieszczeniu jest reprezentowana poprzez oś OX.\n\nW chwili, gdy kranik nad i-tą półką zostanie odkręcony, półka ta zostanie zalana. W naturalnym następstwie woda zaczyna skapywać pionowo w dół z krańców półek i potencjalnie zalewać kolejne półki lub skapywać na podłogę z naturalnym systemem odprowadzania wody.\n\n\n\nWizualizacja spływającej wody po odkręceniu jednego kranika w drugim teście przykładowym.\n\nRadek będzie rozpatrywał kraniki w pewnej ustalonej kolejności. W chwili, gdy rozważa i-ty kranik, to odkręca go wtedy i tylko wtedy, gdy i-ta półka nie jest jeszcze zalana.\n\nRadek jeszcze nie ustalił kolejności, w której będzie rozpatrywał kraniki. Wybierze on losowo jedną spośród n! kolejności, każdą z tym samym prawdopodobieństwem. Radek chciałby się teraz dowiedzieć, ile średnio kraników będzie musiał odkręcić.\n\nTwoim zadaniem jest odpowiedzieć na pytanie Radka i podać odpowiedź modulo 109 + 7. Formalnie, niech wynik będzie równy p/q, gdzie q = 0 i NWD(p, q) = 1. Wówczas należy wypisać jedną liczbę p·q−1 (mod 109 + 7), gdzie q−1 jest jedyną liczbą ze zbioru 1, 2, . . . , 109 + 6 taką, że q · q−1 ≡ 1 (mod 109 + 7).\n\nMożna udowodnić, że dla wszystkich testów spełniających warunki zadania wynik jest liczbą wymierną, której mianownik w nieskracalnej postaci jest niepodzielny przez 109 + 7.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31729","content":"문제\n\nThere is a board game for \nK\n$K$ players. The board of this game consists of \nN\n$N$ cells numbered from \n1\n$1$ to \nN\n$N$, and \nM\n$M$ paths numbered from \n1\n$1$ to \nM\n$M$, where path \nj\n$j$ (\n1≤j≤M\n$1 ≤ j ≤ M$) connects cells \nUj\n$U_j$ and \nVj\n$V_j$ bidirectionally.\n\nThere are two types of cells on the board: re-activate cells and stop cells.\n\nThis information is given by a string \nS\n$S$ of length \nN\n$N$ consisting of '0' and '1’, where the \ni\n$i$-th character of \nS\n$S$ (\n1≤i≤N\n$1 ≤ i ≤ N$) is '0' if cell \ni\n$i$ is a re-activate cell, and '1' if cell \ni\n$i$ is a stop cell.\n\nThis board game is played by \nK\n$K$ players numbered from \n1\n$1$ to \nK\n$K$. Each player has their own piece, and the game starts with each player placing their piece on a specified cell. At the beginning, player \np\n$p$ (\n1≤p≤K\n$1 ≤ p ≤ K$) places their piece on cell \nXp\n$X_p$. Note that multiple players’ pieces can be placed on the same cell.\n\nThe game progresses with each player taking turns starting from player \n1\n$1$ and proceeding in numerical order. After player \np\n$p$ finishes their turn, the turn moves to player \np+1\n$p + 1$ (if \np=K\n$p = K$, then the turn goes to player \n1\n$1$). Each player takes the following actions on their turn:\n\nChoose one cell connected to the cell where their piece is placed via a path, and move their piece to the chosen cell.\nIf the destination cell is a re-activate cell, repeat step 1 and continue their turn. If the destination cell is a stop cell, end their turn.\n\nThe team consisting of \nK\n$K$ members, including JOI-Kun, who represent Japan in this board game, are researching cooperative strategies to quickly conquer the game. They are currently studying the following problem:\n\nWhat is the minimum total number of moves required by the \nK\n$K$ players in order to place player \n1\n$1$’s piece on cell \nT\n$T$? Even if it’s in the middle of a turn, if player \n1\n$1$’s piece is placed on cell \nT\n$T$, the condition is considered satisfied.\n\nGiven the information about the board of the game and the initial placement of each player’s piece, create a program to calculate the answer to this problem for each \nT=1,2,…,N\n$T = 1, 2, \\dots , N$."},{"problemId":"31694","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAlgosia i Bajtek uwielbiają startować w Potyczkach Algorytmicznych. W trakcie rund zdalnych jest do rozwiązania 18 zadań, a za każde z nich można zdobyć od 0 do 10 punktów. Zawodnicy w rankingu sortowani są po sumarycznej liczbie zdobytych punktów. W przypadku remisu wyżej zostaje sklasyfikowany zawodnik, który w większej liczbie zadań otrzymał 10 punktów. W przypadku dalszego remisu wyżej zostaje sklasyfikowany zawodnik, który w większej liczbie zadań zdobył 9 punktów i tak dalej. Jeśli nie da się w ten sposób rozróżnić zawodników, to ogłaszany jest między nimi remis.\n\nAlgosia i Bajtek pamiętają swoje wyniki na wszystkich zadaniach z ostatniej edycji, jednak nie pamiętają. . . kto wygrał. Czy pomożesz im i napiszesz program, który wczyta ich wyniki i powie, które z nich zajęło wyższe miejsce?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31658","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMaddison and her friends live and work on the perimeter of a unit square with bottom left corner at (0,0)$(0, 0)$ and top right corner at (1,1)$(1, 1)$. They’ve decided to build a square community garden centered at (0.5,0.5)$(0.5, 0.5)$, but they can’t decide how big it should be! The garden can’t rotate, so a garden of side length ℓ$\\ell $ has corners at (0.5±ℓ2,0.5±ℓ2).$(0.5 \\pm \\frac{\\ell }{2}, 0.5 \\pm \\frac{\\ell }{2}).$ \n\nIt takes longer to walk through the garden compared to the open space that exists right now, and each of Maddison’s friends have a limit as to how long they are willing to walk to work. They each walk at 0.1$0.1$ units per minute in the open space or on the perimeter of the garden, but 0.1⋅δ$0.1 \\cdot \\delta $ units per minute through the garden.\n\nMaddison’s friends are also very stubborn. They will always walk in a straight line from home to work, no matter how much the garden slows them down.\n\nFind the largest side length 0≤ℓ≤1$0 \\leq \\ell \\leq 1$ of a square garden centered at (0.5,0.5)$(0.5, 0.5)$ such that all of Maddison’s friends can still get to work on time.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31659","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou have been asked to organize the computing science graduation banquet. There are n$n$ people attending the banquet, and they must all be seated around a large circular table. As it turns out, some pairs of attendees are friends and wish to sit next to each other. Thankfully, since all the attendees are computing science majors, none have more than 2 friends.\n\nWhile there is no official way to request seating arrangements, these pairs have come to you privately and offered you a bribe if you fulfill their request. You care about your integrity, but you also care about money, so you will only accept bribes if you can fulfill the pair’s request. You wish to maximize the amount of money you can earn by accepting the most profitable set of bribes.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31695","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tWedług słownika PWN „lider” to między innymi „przywódca partii politycznej, związku zawodowego lub innych organizacji społecznych”. Natomiast w algorytmice liderem ciągu elementów nazywamy element, którego liczba wystąpień jest ściśle większa od połowy długości ciągu. Dla przykładu, liderem ciągu [7, 2, 5, 7, 7] jest liczba 7, zaś ciąg [2, 3, 2, 3] nie posiada lidera w ogóle.\n\nW tym zadaniu skupimy się na tym drugim znaczeniu słowa „lider”. Mając dany ciąg liczb, Twoim zadaniem jest podzielić go na minimalną liczbę ciągów (niekoniecznie spójnych), z których każdy posiada lidera, i wypisać tę minimalną liczbę. Można wykazać, że taki podział jest zawsze możliwy.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31740","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t서울과학고등학교에는 N$N$개의 대나무가 N−1$N-1$개의 나무줄기로 연결되어 있는 독특한 형태의 대나무숲이 있다. 각 나무줄기는 대나무 2개를 연결하며 대나무들은 모두 연결되어 있다. 이때 연결되어 있다는 것은 어떤 두 대나무를 골라도 서로 나무줄기를 통해서 이동할 수 있다는 것을 의미한다. 만약 1번과 2번 대나무가 나무줄기로 연결되어 있으면 1번과 2번은 나무줄기를 통해서 서로 이동할 수 있는 것이다. 또한 임의의 두 대나무 사이를 나무줄기를 통해 이동할 수 있는 단순(최단)경로는 유일하다.\n\n대나무숲에서 서울과학고등학교 친구들은 서로를 돕고 의지하며 행복하게 살고 있었다. 하지만 어느 날, 대나무숲 친구들 사이에 갈등이 생겼다. for문에서 중괄호의 위치에 관한 의견을 달리하며 다투게 된 것이다!\n\n결국 다툼에 지친 서울과학고등학교 친구들은 대나무숲을 나누기로 결정했다. 이 때 어느 한쪽이 지나치게 유리하면 다른 쪽의 반발이 생기기 때문에 최대한 공평하게 나눠야 한다.서울과학고등학교 친구들은 대나무숲을 너무나 사랑하기 때문에 단 하나의 나무줄기만 잘라서 대나무숲을 2개로 나누려고 한다.\n\n i(1≤i≤N)$i(1\\leq i\\leq N)$번 대나무는 중요도 Wi$W_i$를 가지고 있으며, 대나무숲의 중요도는 대나무숲에 속한 모든 대나무의 중요도의 합으로 정의한다. 이때, 대나무숲을 공평하게 나눈다는 것은 나눠진 두 대나무숲의 중요도의 차가 최소가 되도록 나눈다는 뜻이다.\n\n대나무숲을 공평하게 나눴을 때 중요도의 차와 이때 끊어야 할 나무줄기가 연결하는 대나무들의 번호를 구해서 귀여운 서울과학고등학교 친구들을 도와주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31696","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBajtocka wieś przechodzi modernizację. Celem najnowszego rządowego projektu jest dostarczanie komputerów do tych mieszkańców wsi i małych miasteczek, którzy ich nie posiadają. Bajtazar nadzoruje modernizację jednej z wsi objętych programem – Bajtoszyc – w której obecnie żaden mieszkaniec nie posiada komputera.\n\nW Bajtoszycach mieszka n mieszkańców, których Bajtazar dla ułatwienia ponumerował liczbami całkowitymi od 1 do n. Na początku żaden z mieszkańców nie ma komputera. Zadaniem Bajtazara jest przetwarzać wydarzenia trzech postaci:\n\n\n\t+ ai bi – Do mieszkańca Bajtoszyc zostaje dostarczony komputer. Bajtazar nie wie jednak, czy komputer zostaje dostarczony do mieszkańca o numerze ai czy bi. Może się zdarzyć, że ai = bi – wtedy komputer na pewno został dostarczony do mieszkańca o numerze ai. Pewnym jest, że komputer zostaje dostarczony do mieszkańca, który aktualnie go nie posiada.\n\t- ci – Mieszkańcowi o numerze ci psuje się komputer. Pewnym jest, że mieszkaniec ten posiadał dotychczas komputer (lecz teraz już nie będzie go miał, więc może w przyszłości otrzymać nowy).\n\t? di – Bajtazar musi stwierdzić (korzystając z całej dostarczonej mu dotychczas wiedzy), czy mieszkaniec o numerze di: na pewno posiada komputer, na pewno nie posiada komputera, czy też nie wiadomo, czy posiada komputer.\n\n\nNapisz program, który pomoże Bajtazarowi odpowiadać na zadawane mu pytania!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31697","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBajtazar swego czasu dorobił się pokaźnej kolekcji znaczków pocztowych. Nie interesuje się tym jednak tak bardzo jak za młodu, dlatego postanowił rozdać swoją kolekcję młodszym fascynatom filatelistyki. Chciałby jednak zrobić to możliwie sprawiedliwie, do czego potrzebuje Twojej pomocy.\n\nKolekcja Bajtzara składa się z n znaczków, z czego i-ty pochodzi z miasta ai. Dla ułatwienia miasta oznaczamy liczbami całkowitymi. Bajtazar zamierza umieścić w gazecie ogłoszenie o tym, że planuje rozdać swoją kolekcję. Jeśli zgłosi się do niego k chętnych, to każdemu z nich sprezentuje jakiś podzbiór znaczków z zachowaniem pewnego warunku: każdy chętny będzie musiał otrzymać taki sam multizbiór znaczków. Oznacza to, że dla każdych dwóch chętnych i dla każdego miasta, oboje chętni muszą otrzymać taką samą liczbę znaczków z tego miasta. Może to w szczególności oznaczać, że Bajtazar nie rozda żadnego znaczka.\n\nBajtazar nie wie, ilu dokładnie chętnych się zgłosi. W związku z tym dla każdej liczby k z zakresu od 1 do n musisz stwierdzić, ile maksymalnie znaczków może rozdać Bajtazar, jeśli zgłosi się do niego k chętnych.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31731","content":"문제\n\nBitaro, who has been enjoying gardening for many years, is planning to grow a plant called Bita-radish starting this spring.\n\nBitaro has prepared \n2N\n$2N$ Bita-radish seedlings. The seedlings are numbered from \n1\n$1$ to \n2N\n$2N$, and Bitaro plans to arrange them in this order for cultivation. The size of seedling \ni\n$i$ (\n1≤i≤2N\n$1 ≤ i ≤ 2N$) is \nAi\n$A_i$. Bitaro wants every seedling to get enough sunlight, so the sizes of the seedlings satisfy the following conditions:\n\n \nA1≤A2≤⋯≤AN≤AN+1\n$A_1 ≤ A_2 ≤ \\cdots ≤ A_N ≤ A_{N+1}$.\n \nAN+1≥AN+2≥⋯≥A2N−1≥A2N≥A1\n$A_{N+1} ≥ A_{N+2} ≥ \\cdots ≥ A_{2N-1} ≥ A_{2N} ≥ A_1$.\n\nNote that seedling \n1\n$1$ is the smallest and seedling \nN+1\n$N + 1$ is the largest.\n\nBitaro has also prepared \nN\n$N$ red flowerpots and \nN\n$N$ blue flowerpots, each of which also has a certain size. The size of the \nj\n$j$-th (\n1≤j≤N\n$1 ≤ j ≤ N$) red flowerpot is \nBj\n$B_j$, and the size of the \nk\n$k$-th (\n1≤k≤N\n$1 ≤ k ≤ N$) blue flowerpot is \nCk\n$C_k$. Bitaro plants one Bita-radish seedling in each of these total \n2N\n$2N$ flowerpots, and arranges the flowerpots in a row so that seedlings \n1,2,…,2N\n$1, 2, \\dots, 2N$ are in this order.\n\nConsidering the appearance, the \n2N\n$2N$ flowerpots must be arranged in a beautiful order. Here, a beautiful order means an arrangement of flowerpots such that there exist consecutive \nN\n$N$ flowerpots with the same color. More precisely, an arrangement of flowerpots is said to be a beautiful order if and only if there exists an integer \nl\n$l$ between \n1\n$1$ and \nN+1\n$N +1$ inclusive such that the colors of the flowerpots planted with seedlings \nl,l+1,…,l+N−1\n$l, l+1, \\dots , l+N -1$ are all the same.\n\nWhen a seedling of size \ny\n$y$ is planted in a flowerpot of size \nx\n$x$, the difficulty of cultivation for that pair is the absolute value \n|x−y|\n$|x−y|$. Bitaro’s workload in growing Bita-radish is the maximum difficulty of cultivation among the \n2N\n$2N$ pairs of flowerpots and seedlings.\n\nWrite a program which, given the information about the Bita-radish seedlings and flowerpots, finds the minimum possible value of Bitaro’s workload when planting the seedlings so that the flowerpots are arranged in a beautiful order."},{"problemId":"31711","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tNatalia i Cezary lubią grać w gry, a najbardziej w takie, które sami wymyślili. Postanowili, że ułożą przed sobą ciąg stosów monet, po m monet w każdym, przy czym każda moneta będzie albo niebieska, albo czerwona. Natalia w swoim ruchu będzie mogła wybrać dowolną niebieską monetę i usunąć ją z gry wraz ze wszystkimi monetami znajdującymi się nad nią w stosie. Analogicznie, w swoim ruchu, Cezary będzie mógł wybrać dowolną czerwoną monetę i usunąć ją i wszystkie monety z tego samego stosu znajdujące się powyżej. Gracze swoje ruchy wykonywać będą na zmianę, a przegrywa ten, kto nie będzie mógł wykonać prawidłowego ruchu – to jest gdy wszystkie jego monety zostały już wcześniej usunięte z gry.\n\nZnając już zasady, muszą teraz ustalić początkowy stan gry – ciąg d stosów, z których każdy będzie zawierał dokładnie m monet. Ani Natalia, ani Cezary nie chcą mieć nieuczciwej przewagi, więc zgodnie stwierdzili, że ciąg stosów ma być sprawiedliwy. Ciąg stosów nazywamy sprawiedliwym, jeśli przy założeniu, że Natalia i Cezary grają optymalnie, rozgrywkę wygra ten gracz, który nie wykonuje pierwszego ruchu. Tak więc jeśli pierwszy ruch wykona Natalia, to przy optymalnej strategii wygra Cezary, i vice versa: jeśli rozpocznie Cezary, to wygra Natalia.\n\nPara ułożyła już pierwsze k stosów monet po m monet każdy. Teraz zastanawia się, w jaki sposób ów ciąg stosów dokończyć. Doszli już oni do wniosku, że nie ma sensu, żeby w grze było więcej niż n stosów monet.\n\nPomóż im i dla każdej liczby d z przedziału [k, n] powiedz, ile istnieje różnych sprawiedliwych ciągów d stosów po m monet, które zaczynają się tym ciągiem stosów, który już ułożyli. Dwa ciągi stosów uważamy za różne, jeśli istnieje istnieją i ∈ [1, d] oraz j ∈ [1, m] takie, że j-ta moneta na i-tym stosie jest niebieska w jednym z tych ciągów, a czerwona w drugim.\n\nJako że wyniki te mogą być bardzo duże, to wystarczy, że podasz ich reszty z dzielenia przez 109 + 7.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31699","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tW tym zadaniu będziemy zajmować się permutacjami n-elementowymi. Każda taka permutacja jest ciągiem n różnych liczb naturalnych od 1 do n włącznie. Złożeniem permutacji a1, a2, . . . , an z permutacją b1, b2, . . . , bn jest permutacja ab1, ab2, . . . , abn. Inwersją w permutacji p1, p2, . . . , pn nazwiemy dowolną parę indeksów (i, j) taką, że i < j oraz pi > pj.\n\nBajtek jest wielkim fanem permutacji n-elementowych. Uwielbia je na tyle, że ma nawet wśród nich swoje k ulubionych. Postanowił zacząć wypisywać na kartce wszystkie permutacje, jakie da się otrzymać, składając jego ulubione permutacje (w dowolnej kolejności i być może używając niektórych z nich wielokrotnie), przy czym skrupulatnie pilnował, by żadnej permutacji nie napisać więcej niż raz.\n\nNie było zaskoczeniem, że dość szybko skończył mu się papier. Bajtka naszło wtedy pytanie: gdyby wypisał wszystkie osiągalne permutacje, to ile średnio miałyby one inwersji?\n\nPomóż mu i napisz program, który obliczy tę wartość. Dokładniej, Twoim zadaniem jest podać szukaną wartość modulo 109 + 7 (więcej o tym w sekcji Wyjście).\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31732","content":"문제\n\nJOI-kun is enthusiastic about collecting cards in a card game. Each card in the card game has two integers representing its strength and cost. To obtain a new card, JOI-kun brings \nN\n$N$ cards to a card exchange. Each card is numbered from \n1\n$1$ to \nN\n$N$. The strength of card \ni\n$i$ (\n1≤i≤N\n$1 ≤ i ≤ N$) is \nSi\n$S_i$ and the cost of card \ni\n$i$ is \nVi\n$V_i$.\n\nThere are two machines available in the card exchange. If you insert two cards, A and B, into one of the machines, you will be able to receive any card C satisfying the following conditions.\n\nIf you use the first machine, then the strength of C must be equal to the maximum of the strength of A and B, and the cost of C must be equal to the maximum of the cost of A and B.\nIf you use the second machine, then the strength of C must be equal to the minimum of the strength of A and B, and the cost of C must be equal to the minimum of the cost of A and B.\n\nJOI-kun plans to use the machines exactly \nN−1\n$N - 1$ times to obtain a new card. To do this, he lines up the \nN\n$N$ cards in a row from card \n1\n$1$ to card \nN\n$N$. He then repeats the following operation \nN−1\n$N - 1$ times.\n\nChoose two adjacent cards, exchange them with a new card using one of the machines, and place the new card where the chosen two cards were in the row before the operation.\n\nAfter performing \nN−1\n$N-1$ operations, JOI-kun will have only one card left. The strength and cost of this card will depend on the operations he performs. JOI-kun has a list of \nM\n$M$ cards that he wants to obtain after performing \nN−1\n$N - 1$ operations. The \nj\n$j$-th card (\n1≤j≤M\n$1 ≤ j ≤ M$) is represented by a pair of integers \n(Tj,Wj)\n$(T_j , W_j)$, where \nTj\n$T_j$ is the strength and \nWj\n$W_j$ is the cost of the \nj\n$j$-th card. Write a program that, given information about JOI-kun’s cards and the list of cards he wants to obtain, determines all the cards in the list that he can obtain after performing \nN−1\n$N - 1$ operations."},{"problemId":"31760","content":"문제\n\nApolyanka and Büdelsdorf are two small neolithic villages that have recently come into contact. There are \nN\n$N$ resources, numbered from \n1\n$1$ to \nN\n$N$, and each village is capable of independently producing any of them, albeit with different efficiencies. In order to produce one unit of resource \ni\n$i$, Apolyanka needs \nAi\n$A_i$ person-hours, while Büdelsdorf needs \nBi\n$B_i$ person-hours. Currently Apolyanka is producing \nUi\n$U_i$ units of resource \ni\n$i$ in each given time period, while Büdelsdorf is producing \nWi\n$W_i$ units.\n\nEach village is currently working at maximum capacity, that is, there is no way they can put more person-hours to work than they are employing now. However, through the recently discovered benefits of trade, it is possible for both villages to produce all the resources they need while reducing the total person-hours worked, and thus becoming able to spend those freed person-hours resting and playing some games. All that is needed is that the villages cooperate, coordinate work and exchange resources among them.\n\nFor example, suppose \nN=2\n$N = 2$, resource \n1\n$1$ is wood, resource \n2\n$2$ is food, \nA1=1\n$A_1 = 1$, \nU1=2\n$U_1 = 2$, \nB1=4\n$B_1 = 4$, \nW1=1\n$W_1 = 1$, \nA2=2\n$A_2 = 2$, \nU2=1\n$U_2 = 1$, \nB2=3\n$B_2 = 3$, and \nW2=4\n$W_2 = 4$. Then Apolyanka is doing \n4\n$4$ person-hours of work: \nA1⋅U1=2\n$A_1 \\cdot U_1 = 2$ for producing \nU1=2\n$U_1 = 2$ units of wood, and \nA2⋅U2=2\n$A_2 \\cdot U_2 = 2$ for producing \nU2=1\n$U_2 = 1$ unit of food. Similarly, Büdelsdorf is doing \n16\n$16$ person-hours of work: \nB1⋅W1=4\n$B_1 \\cdot W_1 = 4$ for producing \nW1=1\n$W_1 = 1$ unit of wood, and \nB2⋅W2=12\n$B_2 \\cdot W_2 = 12$ for producing \nW2=4\n$W_2 = 4$ units of food. Thus, the total production is \nU1+W1=3\n$U_1 + W_1 = 3$ units of wood and \nU2+W2=5\n$U_2 + W_2 = 5$ units of food, requiring \n4+16=20\n$4 + 16 = 20$ person-hours.\n\nHowever, a better organization is possible: Apolyanka could produce \n3\n$3$ units of wood and \n0.5\n$0.5$ units of food, while Büdelsdorf could produce no wood and \n4.5\n$4.5$ units of food. The total production of each resource would be the same, but requiring only \n3A1+0.5A2+0B1+4.5B2=3+1+13.5=17.5\n$3A_1+0.5A_2+0B_1+4.5B_2 = 3 + 1 + 13.5 = 17.5$ person-hours.\n\nAnother example with \nN=3\n$N = 3$ is \nA1=1\n$A_1 = 1$, \nB1=2\n$B_1 = 2$, \nA2=2\n$A_2 = 2$, \nB2=1\n$B_2 = 1$, \nA3=1\n$A_3 = 1$, \nB3=1\n$B_3 = 1$, and \nUi=Wi=1\n$U_i = W_i = 1$ for \ni=1,2,3\n$i = 1, 2, 3$. In this case, each village is currently working \n4\n$4$ person-hours. With a slight reorganization however, they can each work \n3\n$3$ person-hours while producing the exact same total resources! All that is required is for Apolyanka to produce one less unit of resource \n2\n$2$ and one more of resource \n1\n$1$, while Büdelsdorf does the opposite.\n\nGiven all of these values, can you compute what is the minimum total number of person-hours that the villages have to work, in order to produce exactly the same total resources? Note that the number of person-hours invested in producing a resource is not required to be integer."},{"problemId":"31712","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tUNIST, DGIST, POSTECH의 마스코트 윤이, 달구, 포닉스는 초등학생 시절부터 메이플스토리를 즐겨 했다.\n\n메이플스토리는 2003년 4월 29일부터 상용 서비스를 시작했으며, 2023년 4월 29일에 20주년을 맞이한 넥슨의 대표 게임 중 하나이다.\n\n\n\n메이플스토리 월드는 메이플스토리와 그 외 IP를 사용하여 누구나 변형 게임을 제작할 수 있는 창작 플랫폼이다. 메이플스토리 월드에서 플레이할 수 있는 메이플랜드는, 빅뱅 업데이트 이전 메이플스토리를 구현한 '과거로의 회귀' 컨셉의 팬 게임이다.\n\n세 마스코트는 밀린 과제에서 벗어나 옛 추억을 되살리기 위해 메이플랜드를 시작했다. 셋은 매일같이 함께 사냥하면서 성장해 나갔다. 어느 날, 세 마스코트는 충분히 성장했다고 판단해서 악명 높은 보스 몬스터 핑크빈을 사냥하러 나섰다.\n\n세 마스코트가 핑크빈을 사냥하는 방법은 다음과 같다. 핑크빈이 등장하여 사냥이 시작되는 시점을 0$0$초라고 하면, 셋은 0$0$초 시점에 일제히 자신의 스킬을 사용한다. 그 후 각 마스코트는 일정 주기마다 반복해서 스킬을 사용한다. 스킬을 사용하면 스킬의 대미지 수치만큼 핑크빈의 체력이 감소한다. 핑크빈의 체력이 0$0$ 이하가 되는 순간 사냥이 종료된다. 각 마스코트가 스킬을 사용하는 주기와 스킬의 대미지는 서로 다를 수 있다.\n\n세 마스코트가 스킬을 사용하는 주기와 스킬의 대미지, 그리고 핑크빈의 체력이 주어질 때, 셋이 핑크빈을 사냥하는 데에 몇 초가 걸릴지 예상해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31741","content":"문제\n\n1차원 평면에 \nN\n$N$개의 선분이 존재한다. 1차원 평면상의 \nx=S\n$x = S$부터 \nx=E\n$x = E$까지의 구간을 주어진 선분을 최대 3개 사용하여 모두 덮으려 한다.\n\n시작점이 \nx=l\n$x=l$이고 끝점이 \nx=r\n$x=r$인 선분이 점 \nx\n$x$를 덮는다는 것은 \nl≤x≤r\n$l \\leq x \\leq r$을 의미하고, 선분 집합 \nL\n$L$이 \nx=S\n$x=S$부터 \nx=E\n$x=E$까지를 덮을 수 있다는 것은 \nS≤x≤E\n$S \\leq x \\leq E$인 모든 실수 \nx\n$x$에 대해 \nx\n$x$를 덮는 선분이 \nL\n$L$에 적어도 하나 이상 존재함을 의미한다.\n\n이때, 구간을 덮는 방법에 따라 '오차'라는 값을 정의하자.\n\n'오차'는 사용한 선분 중 서로 다른 2개를 골랐을 때 겹치는 구간의 길이의 합이다. 만약 선분 하나로 \nx=S\n$x = S$부터 \nx=E\n$x = E$까지 모두 덮을 수 있다면 이 방법의 오차는 0이다.\n\n'오차'를 최소화하면서 \nx=S\n$x = S$부터 \nx=E\n$x = E$까지 최대 3개의 선분을 사용하여 덮어보고, '오차'의 최솟값을 출력하자."},{"problemId":"31761","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou probably know the KMP algorithm. You may also know that “KMP” is an acronym that stands for “Knuth Morris Pratt”, who jointly published the algorithm in 1977. How do you pronounce “KMP”? Of course, you can just say “Knuth Morris Pratt”, but what about pronouncing the acronym itself? Since “KMP” is not a pronounceable word, you are forced to say the letters one by one. In this problem we are interested in pronounceable acronyms.\n\nWe need a few definitions to formalize the requirement. A phrase is a list of words and a word is a sequence of letters. Each letter is either a vowel or a consonant. Deciding whether a letter is a vowel or a consonant depends on the language and other elements. For simplicity, we say that the six letters “A”, “E”, “I”, “O”, “U” and “Y” are vowels, while all the rest are consonants. Although it is debatable whether a given word is pronounceable, we say that a word is pronounceable when it does not contain more than two contiguous consonants. For instance, “LEMPEL” is a pronounceable word, while “DIJKSTRA” is not.\n\nGiven a phrase composed of N$N$ words, an acronym for the phrase is the concatenation of N prefixes, one prefix for each word, in the order they appear in the phrase. Each prefix must have at least one and at most three letters. Your task is to determine the minimum length a pronounceable acronym can have.\n\nAs an example with N=3$N = 3$ consider the phrase “KNUTH MORRIS PRATT”. There are 27$27$ possible acronyms for this phrase, such as “KMP”, “KMPR”, “KMPRA”, “KMOP”, “KMOPR” and “KNUMORPRA”, among others. Some of these acronyms are pronounceable (“KMOP” and “KMOPR”), while some others not (“KMP”, “KMPR”, “KMPRA” and “KNUMORPRA”). Since the only three-letter acronym “KMP” is not pronounceable, it follows that “KMOP” is a minimum-length pronounceable acronym for the phrase.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31713","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t윤이, 달구, 포닉스는 UDPC에 참가하는 여러분을 위해 클로버를 만들어 선물하기로 했다. 클로버는 줄기와 잎으로 이루어져 있으며, 하나의 줄기에 3$3$개 또는 4$4$개의 잎이 달려야 한다.\n\n클로버 조립을 맡은 포닉스는 윤이로부터 A$A$개의 클로버 줄기를, 달구로부터 B$B$개의 클로버 잎을 받았다. 포닉스는 클로버를 조립하다 문득 이대로라면 쓰지 못한 줄기나 잎이 남을 수 있다는 사실을 깨닫고 말았다. 포닉스는 재료가 남는 것을 막기 위해 클로버 줄기 또는 잎을 더 가져오려 한다. 줄기와 잎을 남김없이 모두 써서 클로버를 만들기 위해 포닉스가 더 가져와야 하는 클로버 줄기와 잎 개수의 합의 최솟값을 구해주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31742","content":"문제\n\n\"도망친 게 아니야. 빛을 찾아간 거야.\"\n\n우정 2관 사감실에 있는 특별한 기계를 아는가? 해당 기계에 \nn\n$n$에 해당하는 값을 설정하고 수를 입력하면 아래 순서도에 따라 수를 출력하는 원리이다.\n\n예를 들어, 기계의 \nn\n$n$을 \n3\n$3$으로 설정하고, 사용자가 입력한 값이 \n731\n$731$이라면 아래와 같이 동작한다.\n\n \n731\n$731$을 \n3\n$3$으로 나누면 약 \n243.67(=x)\n$243.67(=x)$이므로 \nx\n$x$는 정수가 아니며, 해당 값을 반올림하면 \n244\n$244$이다.\n기계의 \na\n$a$ 값은 \n244\n$244$로 바뀐다.\n \n244\n$244$를 \n3\n$3$으로 나누면 약 \n81.33(=x)\n$81.33(=x)$이므로 \nx\n$x$는 정수가 아니며, 해당 값을 반올림하면 \n81\n$81$이다.\n기계의 \na\n$a$ 값은 \n81\n$81$로 바뀐다.\n \n81\n$81$을 \n3\n$3$으로 나누면 \n27(=x)\n$27(=x)$이므로 \nx\n$x$는 정수이며, 따라서 \na\n$a$는 \n27\n$27$로 바뀌고, 해당 값이 출력된다.\n기계의 동작이 종료된다.\n\n즉, 위와 같은 설정과 입력값에 대해서는 \n27\n$27$이 출력되는 것이다.\n\n똑똑한 경곽이는 세 양의 정수 \np\n$p$, \nq\n$q$, \nr\n$r$을 생각하고, 기계의 \nn\n$n$을 \np\n$p$로 설정하기로 했다. 이후, \n1\n$1$ 이상 \npq\n$p^q$ 미만의 정수 중, 위 기계에 입력할 때 기계의 동작이 유한 번의 시행 내에 종료되면서 출력값이 \nr\n$r$이 되는 수의 개수가 궁금해졌다. 경곽이가 직접 모든 수를 넣어보기 전에 개수를 찾는 것을 도와주자."},{"problemId":"31734","content":"문제\n\nThe IOI Tower is an extremely tall tower equipped with a staircase for ascending. This staircase consists of \n10100\n$10^{100}$ steps, numbered sequentially from the bottom as step \n0\n$0$, step \n1\n$1$, and so on. JOI-kun is currently on step \n0\n$0$ and intends to climb the staircase. JOI-kun can ascend the staircase by taking the following \n2\n$2$ types of actions. Descending the staircase is not permitted.\n\nAscend \n1\n$1$ step. This action takes \nA\n$A$ seconds.\nJump from the current step to a step \nD\n$D$ steps above, skipping the steps in between. This action takes \nB\n$B$ seconds.\n\nCurrently, construction is ongoing at several locations on the staircase, and steps undergoing construction cannot be stepped on. Specifically, there are \nN\n$N$ ongoing constructions, and the \ni\n$i$-th construction (\n1≤i≤N\n$1 ≤ i ≤ N$) is being carried out at steps \nLi,Li+1,…,Ri\n$L_i , L_{i+1}, \\dots , R_i$.\n\nThe IOI Tower has \nQ\n$Q$ rooms numbered from \n1\n$1$ to \nQ\n$Q$. One can enter room \nj\n$j$ (\n1≤j≤Q\n$1 ≤ j ≤ Q$) from step \nXj\n$X_j$ of the staircase. Therefore, JOI-kun has decided to determine whether he can reach each room and, if possible, how many seconds it will take to reach there in the minimum time.\n\nGiven the information about JOI-kun, constructions, and rooms, create a program that determines whether JOI-kun can reach step \nXj\n$X_j$ for each \nj\n$j$ (\n1≤j≤Q\n$1 ≤ j ≤ Q$) and, if possible, calculates the minimum time it takes."},{"problemId":"31762","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA LED matrix is a two-dimensional array of LEDs that is used to display information. This is achieved by turning on the LEDs that form a desired pattern. The figure below represents a LED matrix displaying a smiling-face pattern. LEDs that are turned off are shown in white, while LEDs that are turned on appear colored.\n\n\n\nSome LED matrices scroll the pattern from right to left across the matrix, turning on just the appropriate LEDs at each step. Thus, any pattern with the same height than the matrix can be displayed, even patterns that are wider than the matrix. The pattern scrolling works as follows: Initially, all the LEDs in the matrix are turned off. The next step, the last column of the matrix displays the first column of the pattern. At each new step the pattern is moved one column to the left across the matrix, until the first column of the matrix displays the last column of the pattern. Finally, all the LEDs in the matrix are turned off again. If a LED matrix is equipped with pattern scrolling, the scrolling occurs even if the pattern if not wider than the matrix.\n\nThe picture below shows all the step required to display a pattern of an arrow that is pointing to the left.\n\n\n\nAstrid has just received an old LED matrix with pattern scrolling, and she thinks that some LEDs might be broken. Since broken LEDs cannot be turned on, she is worried that some patterns will not display properly. Given the description of the state of each LED, and the pattern to display, you must tell whether the appropriate LEDs can be turned on at every step of the pattern scrolling.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31735","content":"문제\n\nThe IOI Kingdom consists of \nN\n$N$ cities lined up from west to east, with cities numbered from \n1\n$1$ to \nN\n$N$ in order from west.\n\nIn the IOI Kingdom, they use Byou as the unit of time. A day in the IOI Kingdom is divided into \nT\n$T$ units of time. The moment \nx\n$x$ Byous (\n0≤x<T\n$0 ≤ x < T$) after the beginning of a day is called time \nx\n$x$. Therefore, when \n1\n$1$ Byou passes from time \nT−1\n$T - 1$ of a certain day, it becomes time \n0\n$0$ of the next day.\n\nJOI Group is one of the secret sects in the IOI Kingdom. Since it is a secrect sect, members must navigate around the country’s checkpoints. Consequently, JOI Group members are restricted to using only flights operated by JOY Airlines for intercity travel.\n\nJOY Airlines operate \nMi\n$M_i$ flights departing from city \ni\n$i$ (\n1≤i≤N−1\n$1 ≤ i ≤ N - 1$). The \nj\n$j$-th flight (\n1≤j≤Mi\n$1 ≤ j ≤ M_i$) departs from city \ni\n$i$ at time \nAi,j\n$A_{i, j}$ every day and arrives at city \ni+1\n$i + 1$ at time \nBi,j\n$B_{i, j}$ on the same day. Here, \nAi,j<Bi,j\n$A_{i, j} < B_{i, j}$ holds. These flights allow convenient transfers, and it is also possible to depart from a city immediately upon arrival or stay overnight at the company’s airports.\n\nThe JOI Group has \nQ\n$Q$ members, numbered from \n1\n$1$ to \nQ\n$Q$. Member \nk\n$k$ (\n1≤k≤Q\n$1 ≤ k ≤ Q$) places their operational base in city \nLk\n$L_k$ and their living base in city \nRk\n$R_k$. Therefore, they want to know the minimum time required to travel from city \nLk\n$L_k$ to city \nRk\n$R_k$ by selecting the departure time from city \nLk\n$L_k$ and flights to use appropriately.\n\nGiven information about the flights operated by JOY Airlines and the members of the JOI Group, create a program to find the minimum time required for each member \nk\n$k$ to travel from city \nLk\n$L_k$ to city \nRk\n$R_k$."},{"problemId":"31743","content":"문제\n\nSRC(Science Research City) 는 2차원 평면, 그중에서도 제1사분면 위에 있는 도시이다. 도시에는 \nN\n$N$개의 벽이 있다. 벽은 \nx\n$x$축과 평행한 선분으로 표현된다. 구체적으로, \ni(1≤i≤N)\n$i(1\\leq i\\leq N)$ 번째 벽은 \n(Lx1,i,Lyi),(Lx2,i,Lyi)\n$(Lx_{1,i},Ly_i) ,(Lx_{2,i},Ly_i)$을 잇는 선분이다. 하지만 최근 끝나지 않는 비로 인해 침수될 위험이 커진 SRC는 직선 \ny=0\n$y=0$을 따라 대피소를 지었다.\n\n도시에는 \nM\n$M$명의 사람이 살고 있다. \ni(1≤i≤M)\n$i(1\\leq i\\leq M)$번째 사람은 \n(Pxi,Pyi)\n$(Px_i,Py_i)$ 위치에 있다. SRC에 홍수가 나면, 각 사람은 \ny=0\n$y=0$을 향해 \n−y\n$-y$ 방향으로 이동하며, 초기 속도는 \n1\n$1$ 이다.\n\n모든 사람은 벽에 닿을 때마다 속도가 감소한다. 선분의 끝점에 닿는 것도 벽에 닿는 것으로 간주한다. 벽에 닿기 전 속도가 \n1n\n$\\frac{1}{n}$이었다면, 벽에 닿은 후의 속도는 \n1n+1\n$\\frac{1}{n+1}$가 된다. 즉 \n1\n$1$칸을 이동하는 데 걸리는 시간이 \n1\n$1$만큼 늘어난다. 모든 \ny\n$y$좌표는 겹치는 것이 없다. 즉, 모든 사람과 벽의 \ny\n$y$좌표는 모두 다르다. 따라서 초기 사람의 위치가 벽과 겹치는 일이 없다. \nx\n$x$좌표는 같을 수 있음에 유의하라.\n\n당신은 \nM\n$M$명의 사람 각각에 대해 \ny=0\n$y=0$에 도달하기 위해 걸리는 시간을 구해야 한다."},{"problemId":"31763","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tFarmer John's N$N$ (1≤N≤105$1 \\leq N \\leq 10^5$) cows each have a Farm ID number in the form of a bitstring (a string consisting of the characters '0' and '1'). Bessie, the eldest cow, has the Farm ID numbers of all the cows memorized, and likes to go around and ask cows their ID numbers.\n\nWhen a cow is asked their Farm ID number, they will start to say the correct bitstring, but may get confused and stop before finishing it. When Bessie hears the bitstring, if it is not the Farm ID number of any cow on the farm, then she will shrug and walk off. However, if it is the ID number of a different cow than the one she asked, then she will assume that identity theft has occurred and place the farm into lockdown. Note that this can happen even when the cow says their full Farm ID number.\n\nFarmer John would like to prevent this from happening, and is willing to change the cows' Farm ID numbers by adding some more bits to them. In one second, he can add one bit to the end of the Farm ID number of any cow. Figure out the minimum amount of time it will take for him to prevent a lockdown from ever occurring.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31714","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n이 문제는 지정좌석 배치하기 2 문제와 마지막 문단 및 출력만 다릅니다. 지정좌석 배치하기 2 문제의 코드로 이 문제를 해결할 수 없음에 유의하세요.\n\n\nUDP대학교의 인기 교수 달구 교수님의 이번 학기 강의실은 정원이 N×M$N \\times M$명인 강의실로 배정되었으며, N$N$행 M$M$열의 직사각형 모양으로 좌석이 배치되어 있다. 해당 강의실은 뒤에 앉은 학생도 원활히 강의를 수강할 수 있도록 각 행의 좌석 높이가 D$D$씩 차이가 나며, 가장 앞에 위치한 행부터 뒤에 위치한 행까지 순서대로 1$1$행, 2$2$행, ⋯$\\cdots$, N$N$행이라고 할 때 i$i$행의 좌석 높이는 D×i$D\\times i$이다.\n\n달구 교수님은 원활한 출석체크를 위해 지정좌석제를 실시하기 때문에, N×M$N \\times M$명의 모든 학생은 한 학기 동안 동일한 좌석에만 앉을 수 있다. 달구 교수님은 학생들이 최대한 본인이 원하는 좌석에 앉을 수 있도록 각 학생이 희망하는 좌석의 행을 조사하였고, 그 결과 각 행에 앉기를 희망하는 학생들을 M$M$명씩 선정하였다. 그중 i$i$행의 좌석을 희망하는 학생의 키는 각각 hi,1,hi,2,⋯,hi,M$h_{i,1}, h_{i,2}, \\cdots, h_{i,M}$이다.\n\n학생들의 원활한 강의 수강을 위해, 각 학생의 시야가 같은 열에 앉은 다른 학생에 의해 가려지는 경우가 없도록 좌석을 배치하고자 한다. 구체적으로, 각 학생의 (좌석 높이 + 키)는 자신보다 앞 행의 같은 열에 있는 모든 학생의 (좌석 높이 + 키)보다 커야 한다.\n\n좌석을 배치하던 달구 교수님은, 학생들의 시야를 확보하면서 모든 학생을 희망하는 행에 앉히는 것이 불가능할 수도 있다는 것을 깨달았다. 각 행에 앉고자 하는 학생의 키가 주어졌을 때, 주어진 조건에 맞게 모든 학생을 원하는 행의 좌석에 배치할 수 있는지 여부를 구해주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31764","content":"문제\n\nFarmer John wants to fairly split haybales between his two favorite cows Bessie and Elsie. He has \nN\n$N$ ( \n1≤N≤2⋅105\n$1\\le N\\le 2\\cdot 10^5$) haybales sorted in non-increasing order, where the \ni\n$i$-th haybale has \nai\n$a_i$ units of hay (\n2⋅105≥a1≥a2≥⋯≥aN≥1\n$2\\cdot 10^5\\ge a_1\\ge a_2 \\ge \\dots \\ge a_N \\ge 1$).\n\nFarmer John is considering splitting a contiguous range of haybales \nal,…,ar\n$a_l, \\dots, a_r$ between Bessie and Elsie. He has decided to process the haybales in order from \nl\n$l$ to \nr\n$r$, and when processing the \ni\n$i$-th haybale he will give it to the cow who currently has less hay (if it is a tie, he will give it to Bessie).\n\nYou are given \nQ\n$Q$ (\n1≤Q≤2⋅105\n$1\\le Q\\le 2\\cdot 10^5$) queries, each with three integers \nl,r,x\n$l,r,x$ (\n1≤l≤r≤N\n$1\\le l\\le r\\le N$, \n|x|≤109\n$|x|\\le 10^9$). For each query, output how many more units of hay Bessie will have than Elsie after processing haybales \nl\n$l$ to \nr\n$r$, if Bessie starts with \nx\n$x$ more units than Elsie. Note that this value is negative if Elsie ends up with more haybales than Bessie."},{"problemId":"31737","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA table tennis competition was held in JOI Kingdom. N$N$ beavers numbered from 1$1$ to N$N$ participated in this competition, and a round-robin tournament was conducted.\n\nYou were told the following information about the result of this competition from Bitaro.\n\n\n\tThere were no draw match.\n\tThere are exactly M$M$ ways to choose 3$3$ beavers which are trilemma. Note that 3$3$ beavers i$i$, j$j$, k$k$ (1≤i<j<k≤N$1 ≤ i < j < k ≤ N$) are trilemma if and only if exactly one of the following 2$2$ conditions is satisfied.\n\t\n\t\tBeaver i$i$ beat beaver j$j$, beaver j$j$ beat beaver k$k$, and beaver k$k$ beat beaver i$i$.\n\t\tBeaver i$i$ beat beaver k$k$, beaver k$k$ beat beaver j$j$, and beaver j$j$ beat beaver i$i$.\n\t\n\t\n\n\nYou don’t know whether the information from Bitaro is correct, so you decided to think whether there are any results of this competition which accord with the information from Bitaro.\n\nWrite a program which, given the information from Bitaro, judge whether there are any results of this competition which accord with the information, and if so, finds one such result of this competition.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31765","content":"문제\n\nYou and a single robot are initially at point \n0\n$0$ on a circle with perimeter \nL\n$L$ (\n1≤L≤109\n$1 \\le L \\le 10^9$). You can move either counterclockwise or clockwise along the circle at \n1\n$1$ unit per second. All movement in this problem is continuous.\n\nYour goal is to place exactly \nR−1\n$R-1$ robots such that at the end, every two consecutive robots are spaced \nL/R\n$L/R$ away from each other (\n2≤R≤20\n$2\\le R\\le 20$, \nR\n$R$ divides \nL\n$L$). There are \nN\n$N$ (\n1≤N≤105\n$1\\le N\\le 10^5$) activation points, the \ni\n$i$th of which is located \nai\n$a_i$ distance counterclockwise from \n0\n$0$ (\n0≤ai<L\n$0\\le a_i<L$). If you are currently at an activation point, you can instantaneously place a robot at that point. All robots (including the original) move counterclockwise at a rate of \n1\n$1$ unit per \nK\n$K$ seconds (\n1≤K≤106\n$1\\leq K\\leq 10^6$).\n\nCompute the minimum time required to achieve the goal."},{"problemId":"31715","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n이 문제는 지정좌석 배치하기 1 문제와 마지막 문단 및 출력만 다릅니다. 이 문제의 코드로 지정좌석 배치하기 1 문제를 해결할 수 없음에 유의하세요.\n\n\nUDP대학교의 인기 교수 달구 교수님의 이번 학기 강의실은 정원이 N×M$N \\times M$명인 강의실로 배정되었으며, N$N$행 M$M$열의 직사각형 모양으로 좌석이 배치되어 있다. 해당 강의실은 뒤에 앉은 학생도 원활히 강의를 수강할 수 있도록 각 행의 좌석 높이가 D$D$씩 차이가 나며, 가장 앞에 위치한 행부터 뒤에 위치한 행까지 순서대로 1$1$행, 2$2$행, ⋯$\\cdots$, N$N$행이라고 할 때 i$i$행의 좌석 높이는 D×i$D\\times i$이다.\n\n달구 교수님은 원활한 출석체크를 위해 지정좌석제를 실시하기 때문에, N×M$N \\times M$명의 모든 학생은 한 학기 동안 동일한 좌석에만 앉을 수 있다. 달구 교수님은 학생들이 최대한 본인이 원하는 좌석에 앉을 수 있도록 각 학생이 희망하는 좌석의 행을 조사하였고, 그 결과 각 행에 앉기를 희망하는 학생들을 M$M$명씩 선정하였다. 그중 i$i$행의 좌석을 희망하는 학생의 키는 각각 hi,1,hi,2,⋯,hi,M$h_{i,1}, h_{i,2}, \\cdots, h_{i,M}$이다.\n\n학생들의 원활한 강의 수강을 위해, 각 학생의 시야가 같은 열에 앉은 다른 학생에 의해 가려지는 경우가 없도록 좌석을 배치하고자 한다. 구체적으로, 각 학생의 (좌석 높이 + 키)는 자신보다 앞 행의 같은 열에 있는 모든 학생의 (좌석 높이 + 키)보다 커야 한다.\n\n좌석을 배치하던 달구 교수님은 문득 주어진 조건에 맞게 모든 학생을 원하는 행의 좌석에 배치하는 경우의 수가 궁금해졌다. 달구 교수님의 궁금증을 해결해 주기 위해, 주어진 조건에 맞게 모든 학생을 원하는 행의 좌석에 배치하는 경우의 수를 구해주자. 단, 경우의 수가 너무 커질 수 있으므로 경우의 수를 109+7(=1000000007)$10^9 + 7(=1\\,000\\,000\\,007)$로 나눈 나머지를 구해주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31738","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t제목과 다르게 이 문제는 아주 쉽다.\n\n2 이상의 정수 N$N$, M$M$에 대하여, N!$N!$을 M$M$으로 나눈 나머지를 구하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31739","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t1학기 기말고사 하루 전, 위기감을 느낀 1학년 나코더 반은 드디어 N$N$행 M$M$열의 격자로 구성된 교실에서 부랴부랴 공부하고 있다. 하지만 조용한 교실에 갑자기 K$K$마리의 모기가 나타난 것이 아닌가!! i(1≤i≤K)$i (1 \\leq i \\leq K)$번째 모기는 r$r$행 c$c$열 위치 (r,c)$(r,c)$에 있고 si$s_i$의 체력을 가지고 있다. 같은 위치에 두 마리 이상의 모기가 있을 수 있다.\n\n앵앵거리는 소리에 짜증이 난 나코더 친구들은 모기를 몰살하고자 한다. 준비성이 철저한 우정이는 이날을 위해 태권도 선생님으로부터 태극 4장이 아닌, 태극 모기장을 전수받았다. 태극 모기장 품새의 구성은 다음과 같다.\n\n\n\t우정이는 1초에 1칸씩 상하좌우로 움직일 수 있다.\n\t모기가 있는 장소에 도착하면, 우정이는 즉시 모기의 체력에 관계없이 강력한 몸통 지르기로 모기를 잡는다.\n\t하지만 우정이는 체력이 안 좋기 때문에 최대 T$T$초 동안 움직일 수 있다. 정확히 0$0$초나 T$T$초가 되는 순간에도 모기를 잡을 수 있다. 같은 위치에 여러 마리의 모기가 있다면, 우정이는 모든 모기를 동시에 잡는다.\n\t우정이의 초기 위치는 자유롭게 선택할 수 있다.\n\n\n하지만 우정이의 저질 체력으로 인해 태극 모기장의 효과가 별로일 것이라 판단한 아름이는 대대로 내려오는 현대 정보과학의 결정체인 태극 전기장을 사용하려고 한다. 태극 전기장 품새의 구성은 다음과 같다.\n\n\n\t아름이는 특정 좌표 (R,C)$(R,C)$ (1≤R≤N,1≤C≤M$1 \\leq R \\leq N , 1 \\leq C \\leq M$)를 지정해 세기 P$P$의 강력한 전기장을 형성할 수 있다.\n\t전기장이 형성되면, 교실 내의 어떤 위치 (R′,C′)$(R', C')$ (1≤R′≤N,1≤C′≤M,(R′,C′)≠(R,C)$1 \\leq R' \\leq N , 1 \\leq C' \\leq M, (R', C') \\neq (R, C)$)에서의 전기장의 세기는 (R′,C′)$(R',C')$과 (R,C)$(R,C)$의 택시 거리 L$L$에 대해 PL$\\frac{P}{L}$과 같다. 예외적으로, (R,C)$(R,C)$에서의 전기장의 세기는 102024$10^{2024}$이다.\n\t해당 위치의 전기장의 세기가 그 위치에 있는 모기의 체력보다 크거나 같다면 모기를 잡을 수 있다.\n\n\n우정이와 아름이가 각각 최대로 잡을 수 있는 모기의 수를 출력하라!!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31744","content":"문제\n\n\"숨이 막힐 것 같이 차가웠던 공기 속에...\"\n\n경기과학고의 본관은 \nN\n$N$개의 교실을 \nN−1\n$N-1$개의 복도가 연결한 트리 구조이다. 교실 \nUi\n$U_i$와 교실 \nVi\n$V_i$ 사이에는 거리 \nWi m\n$W_i\\ \\text{m}$인 복도가 존재한다. \n(1≤i≤N−1)\n$(1 \\leq i \\leq N-1)$ 원래대로라면 모든 교실의 난방 기구가 작동하는 것이 당연하지만, 경기과학고는 일부 교실만 난방 기구가 작동한다! (이거 진짜예요!!) \nAi\n$A_i$가 \n0\n$0$이면 \ni\n$i$번 교실의 난방 기구가 작동하지 않고, \n1\n$1$이면 \ni\n$i$번 교실의 난방 기구가 작동한다. \n(1≤i≤N)\n$(1 \\leq i \\leq N)$ 난방 기구가 작동하는 교실은 2개 이상 존재한다.\n\n당신은 난방 기구가 존재하는 교실에서 시작하여 다른 난방 기구가 존재하는 교실까지 가려고 한다. 당신은 초기에 온도가 \nT\n$T$이고. 당신의 온도는 \n1\n$1$초에 \n1\n$1$씩 감소한다. 당신의 속도는 \n1 m/s\n$1\\ \\text{m/s}$이고, 이동한 거리만큼 온도가 내려간다고 생각해도 된다. 온도가 음수가 되면 당신은 얼어붙어서 사망하게 된다. 난방 기구가 있는 교실에 도달하면 온도가 다시 \nT\n$T$가 된다. 온도가 정확히 \n0\n$0$인 시점에 난방 기구가 있는 교실에 도달하는 것도 허용된다.\n\n당신은 다음과 같은 질문에 \nQ\n$Q$번 답해야 한다. \ni(1≤i≤Q)\n$i(1\\leq i\\leq Q)$번째 질문은 다음과 같다: 교실 \nXi\n$X_i$부터 교실 \nYi\n$Y_i$까지 얼어붙지 않고 도달할 수 있는가? 교실 \nXi\n$X_i$와 \nYi\n$Y_i$는 모두 난방 기구가 작동하는 교실 중 하나이다."},{"problemId":"31780","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t불사조는 영생을 사는 것으로 유명한 환상의 동물이다. 포닉스 역시 불사조인 만큼 영원히 살 수 있지만, 포닉스가 영생을 누리는 방법은 조금 특이하다.\n\n포닉스는 마법을 사용해 새로운 포닉스를 만든다. 마법을 사용하는 포닉스의 마력을 x$x$라고 하자. 포닉스가 마법을 사용하면 항상 2$2$마리의 새로운 포닉스가 만들어지며, 새로 만들어진 포닉스 각각은 ⌊x2⌋$\\left\\lfloor{x\\over 2}\\right\\rfloor$와 ⌈x2⌉$\\left\\lceil{x\\over 2}\\right\\rceil$만큼의 마력을 가지게 된다. 한 번 마법을 사용한 포닉스는 더 이상 마법을 사용할 수 없다.\n\n초기에는 마력이 X$X$인 한 마리의 포닉스만이 존재한다. 이를 조상 포닉스라 하자. 조상 포닉스가 명령을 내리면 마법을 사용할 수 있는 모든 포닉스가 마법을 사용해 각각 2$2$마리의 새로운 포닉스를 만든다. 조상 포닉스 역시 마법을 최대 한 번만 사용할 수 있기 때문에, 첫 번째 명령에서 스스로 마법을 사용한 후에는 더 이상 마법을 사용하지 않는다.\n\n조상 포닉스의 마력 X$X$와 명령을 내린 횟수 M$M$이 주어질 때, 조상 포닉스를 포함한 존재하는 모든 포닉스의 마력의 합을 구하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31766","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe cows have formed a dance team, and Farmer John is their choreographer! The team's latest and greatest dance involves N$N$ cows (2≤N≤106$2 \\le N \\le 10^6$) standing in a line. Each move in the dance involves two cows, up to K$K$ positions apart (1≤K<N$1 \\le K < N$), gracefully jumping and landing in each other's position.\n\nThere are two types of cows in the line – Guernseys and Holsteins. As such, Farmer John has documented the dance as a sequence of length-N$N$ binary strings, where a 0$0$ represents a Guernsey, a 1$1$ represents a Holstein, and the overall string represents how the cows are arranged in the line.\n\nUnfortunately, Farmer Nhoj (who choreographs for a rival team) has sabotaged the dance and erased all but the first and last binary strings! With a big competition quickly approaching, Farmer John must waste no time in reconstructing the dance.\n\nGiven these two binary strings, help Farmer John find the minimum number of moves in the dance!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31716","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n이 문제는 현대모비스 자율 주행 테스팅 2 문제와 입력 형식이 다릅니다. 현대모비스 자율 주행 테스팅 2 문제의 코드로 이 문제를 해결할 수 없음에 유의하세요.\n\n\n현대모비스는 모빌리티 플랫폼 프로바이더로서 SDV(Software Defined Vehicle)의 시대를 선도하고자 자율주행, 전동화, 커넥티비티 등 다양한 분야에서 SW 연구개발을 적극 진행하고 있다. 특히 현대모비스의 서산 주행 시험장에서는 자율 주행 자동차 개발을 위한 시범 주행이 한창이다. 샘플 주행 트랙은 2$2$행 N$N$열로 이루어져 있으며, 트랙의 각 칸은 도로 혹은 장애물 중 하나로 구성되어 있다. 시범 주행 트랙은 샘플 주행 트랙을 K$K$번 이어 붙여 만들어져 2$2$행 N×K$N \\times K$열의 형태를 가지게 된다. 자동차는 아래의 두 가지 방법을 이용하여 트랙 위를 이동할 수 있다.\n\n\n\t차선 변경: 자동차가 같은 열의 다른 행으로 이동한다. 즉 자동차의 현재 위치가 1$1$행 j$j$열이라면 2$2$행 j$j$열로, 2$2$행 j$j$열이라면 1$1$행 j$j$열로 이동한다.\n\t직진: 자동차가 같은 행의 다음 열로 이동한다. 즉 자동차의 현재 위치가 i$i$행 j$j$열이라면 i$i$행 j+1$j+1$열로 이동한다.\n\n\n두 경우 모두 도착하는 칸에 장애물이 있어서는 안 된다.\n\n시범 주행은 시범 주행 트랙의 첫 번째 열에서 시작하며, 마지막 열에 도달하면 끝난다. 시작하는 칸이나 끝나는 칸은 자유롭게 정할 수 있다. 단, 시작하는 칸과 끝나는 칸은 모두 도로여야 한다. 자율 주행 자동차가 시범 주행 트랙을 완주할 수 있는지 판별하고, 완주하는 것이 가능하다면 완주하기 위해 필요한 최소 이동 횟수를 구하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31745","content":"문제\n\n우정이와 아름이는 열렬한 사랑을 하고 있다. 우정이와 아름이의 사랑을 증명하기 위해 당신은 궁합 테스트를 만들었다. 우정이와 아름이는 각각 길이가 \nN\n$N$이고 각 원소의 범위가 \n1\n$1$ 이상 \nN\n$N$ 이하인 수열을 생각한다. 궁합 테스트는 우정이의 수열 \nA\n$A$와 아름이의 수열 \nB\n$B$를 이용해 LOVE 점수를 계산해 주는 원리이고 다음과 같이 계산된다.\n\n \nf(l…r)\n$f(l \\ldots r)$ = (\nAi=Bj=x\n$A_i=B_j=x$ 인 \nl≤i,j≤r\n$l\\leq i,j\\leq r$이 존재하는 \nx\n$x$의 최댓값, \nx\n$x$가 존재하지 않으면 \n0\n$0$) 이다. 즉, \nf(l…r)\n$f(l \\ldots r)$ 는 \nA[l…r]\n$A[l \\ldots r]$과 \nB[l…r]\n$B[l \\ldots r]$ 중 겹치는 수의 최댓값이다. 겹치는 수가 없으면 0이다.\n\nLOVE 점수 = \n∑1≤l≤r≤Nf(l…r)\n$\\sum_{1\\leq l\\leq r\\leq N}f(l \\ldots r)$ 이다. 즉 가능한 모든 \n(N+12)\n$\\binom{N+1}{2}$개의 구간에 대한 \nf\n$f$값의 합이다.\n\n사랑은 전쟁이다. 우정이와 아름이는 누가 더 서로를 사랑하는지 대결하려고 LOVE 점수를 최대한 빨리 구하려고 했다. 하지만 \nN\n$N$은 우정이와 아름이의 사랑보다 큰 것 같다. 대신 당신이 두 수열 \nA,B\n$A,B$가 주어졌을 때 LOVE 점수를 직접 구해보자."},{"problemId":"31767","content":"문제\n\nBessie is planting some grass on the positive real line. She has \nN\n$N$ (\n2≤N≤2⋅105\n$2\\le N\\le 2\\cdot 10^5$) different cultivars of grass, and will plant the \ni\n$i$th cultivar on the interval \n[ℓi,ri]\n$[\\ell_i, r_i]$ (\n0<ℓi<ri≤109\n$0 < \\ell_i < r_i \\leq 10^9$).\n\nIn addition, cultivar \ni\n$i$ grows better when there is some cultivar \nj\n$j$ (\nj≠i\n$j\\neq i$) such that cultivar \nj\n$j$ and cultivar \ni\n$i$ overlap with length at least \nki\n$k_i$ (\n0<ki≤ri−ℓi\n$0 < k_i \\leq r_i - \\ell_i$). Bessie wants to evaluate all of her cultivars. For each \ni\n$i$, compute the number of \nj≠i\n$j\\neq i$ such that \nj\n$j$ and \ni\n$i$ overlap with length at least \nki\n$k_i$."},{"problemId":"31781","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t오늘도 열심히 하늘을 날며 곡예 연습을 하던 포닉스는 문득 포스텍의 건물들이 자신의 비행을 방해한다고 생각했다. 더욱 자유로운 비행을 원했던 포닉스는 결국 학교 건물을 무너뜨리기로 결심했다!\n\n포스텍의 건물은 아래와 같은 구조로 이루어져 있다.\n\n\n\t포스텍의 건물은 직사각형 모양의 벽돌들을 쌓아서 지어졌다. 이때 사용된 벽돌들은 모두 높이가 1$1$이며, 너비는 서로 다를 수 있다. 또한, 같은 층의 두 벽돌은 서로 겹칠 수 없다.\n\t건물은 총 H$H$층으로 이루어져 있으며, 각 층의 높이는 1$1$이다. 모든 층에는 적어도 1$1$개의 벽돌이 있다.\n\t건물에 사용된 모든 벽돌은 1$1$층에 있거나, 바로 아래층에 있는 어떤 벽돌과 직접적으로 맞닿아있어야 한다. 이때 벽돌이 꼭짓점만 서로 붙어있는 경우는 맞닿아있는 것이 아니다. 만약 어떤 벽돌이 이러한 조건을 만족하지 않을 경우, 벽돌이 공중에 떠있다고 하자.\n\n\n아래의 그림에서 건물 A는 위 조건들을 모두 만족하는 적절한 건물이며, 건물 B는 7$7$번 벽돌이 공중에 뜬 벽돌이므로 적절한 건물이 아니다.\n\n\n\n건물 A\n\n\n\n건물 B\n\n하지만 굳건하게 지어진 포스텍의 건물을 한순간에 무너뜨리는 것은 쉬운 일이 아니다. 따라서 포닉스는 건물에서 정확히 1$1$개의 벽돌을 제거해서 최대한 많은 벽돌을 무너뜨리고 싶어한다. 이때 건물은 다음과 같은 과정을 통해 무너진다.\n\n\n\t포닉스가 h$h$층에 있는 벽돌 1$1$개를 선택하여 제거한다.\n\t이때, h+1$h+1$층의 벽돌들 중 h$h$층에 위치한 맞닿아있는 벽돌들이 모두 제거된 벽돌들은 공중에 뜬 상태가 된다. 건물에 공중에 뜬 벽돌이 존재해서는 안되므로 이 벽돌들은 즉시 제거된다.\n\t같은 방법으로 2번 과정에서 제거된 벽돌들로 인해 h+2$h+2$층의 몇몇 벽돌들은 공중에 뜬 상태가 되고, 즉시 제거된다. \n\t이러한 과정이 연쇄적으로 한 층씩 발생하며 건물이 무너진다. 더 이상 공중에 뜬 벽돌이 존재하지 않거나, 꼭대기층까지 도달한 경우 과정이 종료된다.\n\n\n포닉스는 실제로 건물을 무너뜨리기 전, 얼마나 많은 벽돌이 무너질지 미리 알고 싶어한다. 포닉스를 대신해 무너뜨릴 수 있는 벽돌의 개수의 최댓값을 알려주자! 처음에 제거한 벽돌 또한 무너뜨린 벽돌에 포함됨에 유의하라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31746","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t민규가 가장 좋아하는 문자열은 ”SciComLove”(따옴표 제외)입니다. 민규는 최근에 문자열을 뒤집는 법을 배웠습니다. 문자열을 1번 뒤집는 것은 아래 과정에 따라 문자열을 바꾸는 것을 말합니다.\n\n\n\t길이 s$s$의 문자열 A=A1A2⋯As$A=A_1A_2\\cdots A_s$을 1번 뒤집은 문자열 B$B$는 A$A$를 오른쪽 끝에서부터 거꾸로 읽은 문자열, 즉 AsAs−1⋯A1$A_sA_{s-1}\\cdots A_1$입니다.\n\n\n민규는 여기서 그치지 않고 문자열을 N$N$번 뒤집는 아래의 방법을 생각해냈습니다.\n\n\n\t N≥2$N\\ge 2$일 때, 문자열 A$A$를 N$N$번 뒤집은 문자열은, A$A$를 N−1$N-1$번 뒤집은 문자열을 1$1$번 뒤집은 문자열입니다.\n\n\n이 방법에 따라 민규는 ”SciComLove”를 N$N$번 뒤집은 문자열을 구하고 싶었지만, N$N$이 너무 커지자 구할 수 없었습니다. 민규를 대신해 ”SciComLove”를 N$N$번 뒤집은 문자열을 구하는 프로그램을 작성하세요.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31768","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBessie has two arrays of length N$N$ (1≤N≤500$1 \\le N \\le 500$). The i$i$-th element of the first array is ai$a_i$ (1≤ai≤106$1 \\le a_i \\le 10^6$) and the i$i$-th element of the second array is bi$b_i$ (1≤bi≤106$1 \\le b_i \\le 10^6$).\n\nBessie wants to split both arrays into non-empty subarrays such that the following is true.\n\n\n\tEvery element belongs in exactly 1 subarray.\n\tBoth arrays are split into the same number of subarrays. Let the number of subarrays the first and second array are split into be k$k$ (i.e. the first array is split into exactly k$k$ subarrays and the second array is split into exactly k$k$ subarrays).\n\tFor all 1≤i≤k$1 \\le i \\le k$, the average of the i$i$-th subarray on the left of the first array is less than or equal to the average of the i$i$-th subarray on the left of the second array.\n\n\nCount how many ways she can split both arrays into non-empty subarrays while satisfying the constraints modulo 109+7$10^9+7$. Two ways are considered different if the number of subarrays are different or if some element belongs in a different subarray.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31717","content":"문제\n\n이 문제는 현대모비스 자율 주행 테스팅 1 문제와 입력 형식이 다릅니다. 이 문제의 코드로 현대모비스 자율 주행 테스팅 1 문제를 해결할 수 없음에 유의하세요.\n\n현대모비스는 모빌리티 플랫폼 프로바이더로서 SDV(Software Defined Vehicle)의 시대를 선도하고자 자율주행, 전동화, 커넥티비티 등 다양한 분야에서 SW 연구개발을 적극 진행하고 있다. 특히 현대모비스의 서산 주행 시험장에서는 자율 주행 자동차 개발을 위한 시범 주행이 한창이다. 샘플 주행 트랙은 모두 \nM\n$M$종류이며, 각 샘플 주행 트랙에는 \n1\n$1$번부터 \nM\n$M$번까지의 번호가 매겨져 있다. \ni\n$i$번 샘플 주행 트랙은 \n2\n$2$행 \nNi\n$N_i$열로 이루어져 있으며, 트랙의 각 칸은 도로 혹은 장애물 중 하나로 구성되어 있다. 시범 주행 트랙은 \nK\n$K$개의 샘플 주행 트랙을 차례로 이어 붙여 만든 형태이다. 시범 주행 트랙에 쓰인 샘플 주행 트랙의 번호를 차례로 \nA1,A2,⋯,AK\n$A_1,A_2,\\cdots ,A_K$라 하면 시범 주행 트랙은 \n2\n$2$행 \n∑i=1KNAi\n$\\sum_{i=1}^KN_{A_i}$열의 형태가 된다. 자동차는 아래의 두 가지 방법을 이용하여 트랙 위를 이동할 수 있다.\n\n차선 변경: 자동차가 같은 열의 다른 행으로 이동한다. 즉 자동차의 현재 위치가 \n1\n$1$행 \nj\n$j$열이라면 \n2\n$2$행 \nj\n$j$열로, \n2\n$2$행 \nj\n$j$열이라면 \n1\n$1$행 \nj\n$j$열로 이동한다.\n직진: 자동차가 같은 행의 다음 열로 이동한다. 즉 자동차의 현재 위치가 \ni\n$i$행 \nj\n$j$열이라면 \ni\n$i$행 \nj+1\n$j+1$열로 이동한다.\n\n두 경우 모두 도착하는 칸에 장애물이 있어서는 안 된다.\n\n시범 주행은 시범 주행 트랙의 첫 번째 열에서 시작하며, 마지막 열에 도달하면 끝난다. 시작하는 칸이나 끝나는 칸은 자유롭게 정할 수 있다. 단, 시작하는 칸과 끝나는 칸은 모두 도로여야 한다. 자율 주행 자동차가 시범 주행 트랙을 완주할 수 있는지 판별하고, 완주하는 것이 가능하다면 완주하기 위해 필요한 최소 이동 횟수를 구하여라."},{"problemId":"31782","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t사람들이 N$N$행 M$M$열의 직사각형 모양으로 모여 있다. 초기에 각각의 사람의 상태는 정상 체온이거나 저체온증이고, 낮과 밤을 지나면서 사람들의 상태가 변화한다.\n\n\n\t낮은 따뜻하기 때문에 저체온증인 사람이 정상 체온으로 회복할 수 있는 기회이다. 어떤 사람과 사방으로 인접한 두 명 이상의 사람이 정상 체온이라면 따뜻한 체온을 나눠 받아 저체온증에서 정상 체온으로 회복된다. 어떤 사람이 정상 체온으로 회복된 후에는 같은 방법으로 인접한 다른 사람들이 정상 체온으로 회복할 수 있으며, 이러한 체온 회복 과정은 낮 사이에 충분히 많이 반복될 수 있다.\n\t밤은 춥기 때문에 정상 체온인 사람들이 저체온증에 걸릴 수 있다. 단, 밤 사이에 새롭게 저체온증에 걸리는 사람은 K$K$명 이하이다.\n\n\n낮과 밤이 계속 반복되며 사람들이 저체온증에 걸리거나 정상 체온으로 회복된다고 생각해 보자. 어떤 사람은 안타깝게도 저체온증에서 정상 체온으로 영영 회복할 수 없을 것이고, 어떤 사람은 근처에 정상 체온인 사람이 충분하여 밤에 어떠한 K$K$명이 저체온증이 되는 것을 반복하더라도 낮이 되면 정상 체온으로 회복할 수 있을 것이다.\n\n첫날 낮 사람들의 상태가 주어질 때 낮과 밤이 충분히 많이 반복된 후 최악의 경우에도 낮이 되면 정상 체온을 유지할 수 있는 사람의 수를 구하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31747","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t당신은 서울과학고등학교 1학년으로, 기상곡이 울리자마자 기숙사 2층으로 달려나가 아침 점호 줄을 섰습니다. 하지만 당신은 늦어버렸고, 당신 앞에 이미 N$N$명의 1학년과 2학년 학생이 서 있음을 알게 되었습니다. 당신은 이 N$N$명이 모두 점호를 끝내기까지의 시간을 알고 싶습니다.현재 p$p$명이 점호 줄에 서 있을 때, 점호의 규칙은 다음과 같습니다.\n\n\n\t줄의 가장 앞에 있는 min(K,p)$\\min(K,p)$명 중 1학년이 있으면 가장 앞에 있는 1학년이 점호를 하고 줄에서 빠지고, 2학년이 있으면 가장 앞에 있는 2학년이 점호를 하고 줄에서 빠집니다. 1학년과 2학년이 둘 다 있다면, 가장 앞에 있는 1학년 학생과 가장 앞에 있는 2학년 학생이 동시에 줄에서 빠집니다.\n\t위 과정은 1학년과 2학년에 대해 동시에 일어나며, 시간 1$1$이 걸립니다.\n\n\n N$N$명이 모두 점호를 끝내기까지 걸리는 시간을 구하는 프로그램을 작성하세요.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31769","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBessie is looking for a new job! Fortunately, K$K$ farmers are currently hiring and conducting interviews. Since jobs are highly competitive, the farmers have decided to number and interview cows in the order they applied. There are N$N$ cows that applied before Bessie, so her number is N+1$N+1$ (1≤K≤N≤3⋅105$1 \\leq K \\leq N \\leq 3 \\cdot 10^5$).\n\nThe interview process will go as follows. At time 0$0$, farmer i$i$ will start interviewing cow i$i$ for each 1≤i≤K$1 \\leq i \\leq K$. Once a farmer finishes an interview, he will immediately begin interviewing the next cow in line. If multiple farmers finish at the same time, the next cow may choose to be interviewed by any of the available farmers, according to her preference.\n\nFor each 1≤i≤N$1\\le i\\le N$, Bessie already knows that cow i$i$'s interview will take exactly ti$t_i$ minutes (1≤ti≤109$1 \\leq t_i \\leq 10^9$). However, she doesn't know each cow's preference of farmers.\n\nSince this job is very important to Bessie, she wants to carefully prepare for her interview. To do this, she needs to know when she will be interviewed and which farmers could potentially interview her. Help her find this information!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31770","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tFarmer John's N$N$ cows (1≤N≤105$1 \\leq N \\leq 10^5$) each like to take a daily walk\naround the fence enclosing his pasture.  Unfortunately, whenever a cow walks\npast a fence post, she brushes up against it, requiring Farmer John to need to\nrepaint the fence posts regularly.\n\nThe fence consists of P$P$ posts (4≤P≤2⋅105$4 \\leq P \\leq 2\\cdot 10^5$, P$P$ even), the\nlocation of each being a different 2D point (x,y)$(x,y)$ on a map of FJ's farm\n(0≤x,y≤109$0 \\leq x, y \\leq 10^9$).  Each post is connected to the two adjacent posts by\nfences that are either vertical  or horizontal line segments, so the entire\nfence can be considered a polygon whose sides are parallel to the x or y axes\n(the last post connects back to the first post, ensuring the fence forms a\nclosed loop that encloses the pasture).  The fence polygon is \"well-behaved\" in\nthat fence segments only potentially overlap at their endpoints, each post\naligns with exactly  two fence segment endpoints, and every two fence segments\nthat meet at an endpoint are perpendicular. \n\nEach cow has a preferred starting and ending position for her daily walk, each\nbeing points somewhere along the fence (possibly at posts, possibly not).  Each\ncow walks along the fence for her daily walks, starting from her starting\nposition and ending at her ending position.  There are two routes that the cow\ncould take, given that the fence forms a closed loop.  Since cows are somewhat\nlazy creatures, each cow will walk in the direction around the fence that is\nshorter. Remarkably, this choice is always clear -- there are no ties!\n\nA cow touches a fence post if she walks past it, or if the fence post is the\nstarting or ending point of her walk.  Please help FJ calculate the number of\ndaily touches experienced by each fence post, so he knows which post to repaint\nnext.\n\nIt can be shown that there is exactly one possibility for the fences given the\nlocations of all of the posts.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31748","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t경기도의 명소 경기과학고등학교에는 N$N$명의 학생이 있습니다. 악당 동현이는 경기과학고등학교의 학생들을 분열시킨 후 경기과학고등학교를 지배할 계획을 세우고 있습니다.동현이가 고안한 첫 번째 계획은 경기과학고등학교의 학생들을 몇 개의 그룹으로 분할하여 경기과학고등학교를 약화시키는 것입니다. 계획에 따르면 동현이는 다음 규칙에 따라 학생들을 그룹화하려고 합니다.\n\n\n\t경기과학고 학생들은 학생마다 고유한 리더십 Ai$A_i$를 갖습니다. 리더십이 Ai$A_i$인 학생은 자신을 제외하고 정확히 Ai$A_i$명의 조원을 포함한 그룹의 리더가 될 수 있습니다. 즉, 리더십이 Ai$A_i$인 학생이 리더인 그룹의 크기는 본인을 포함해서 정확히 Ai+1$A_i+1$이어야 합니다.\n\t모든 학생은 정확히 하나의 그룹에 속해야 합니다. 어떤 학생도 자신이 속한 그룹이 존재하지 않거나 두 개 이상이면 안 됩니다.\n\t모든 그룹은 연속된 번호를 가진 학생들로 이루어져야 합니다. 즉, 한 그룹에 속한 학생들의 번호는 어떤 두 수 1≤s≤e≤N$1\\leq s\\leq e\\leq N$에 대해 {s,s+1,⋯,e}$\\{s,s+1,\\cdots ,e\\}$와 같은 꼴만이 가능합니다.\n\t그룹의 대표성을 위해 번호가 가장 작은 학생이 리더이거나 가장 큰 학생이 리더여야 합니다. 즉, 학생 번호의 집합이 {s,s+1,⋯,e}$\\{s,s+1,\\cdots ,e\\}$인 그룹에서 리더는 s$s$번 학생 또는 e$e$번 학생입니다.\n\n\n그런데 이 계획의 문제가 있다면 그룹을 분할하는 방법의 수가 매우 많다는 것입니다. 동현이는 당신에게 그룹을 분할하는 방법의 수를 알려 달라고 요청했습니다. 동현이를 위해 그룹을 분할하는 방법의 수를 구하는 프로그램을 작성해 주세요.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31718","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t N$N$개의 양의 정수로 이루어진 수열 A$A$가 주어진다. 달구는 이 수열에서 수를 하나 골라 2$2$를 곱하는 작업을 원하는 만큼 수행할 수 있다.\n\n달구가 모든 작업을 수행한 뒤, 배열에서 가장 많이 등장하는 수를 k$k$라 하자. 가장 많이 등장하는 수가 여러 개라면 그중 가장 큰 수를 k$k$라 한다. k$k$의 등장 횟수로 가능한 최댓값을 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31719","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tUDP 마을에는 세 개의 신비한 스택이 있다. 이를 차례로 U스택, D스택, P스택이라 하자. 이 스택들은 특별해서 스택의 바닥을 열고 닫을 수 있다. 바닥이 열려 있는 스택에 원소를 삽입하면 그 즉시 바닥 아래로 떨어지며, 바닥이 닫혀 있는 스택의 바닥을 열면 저장되어 있던 원소들이 모두 바닥 아래로 떨어진다. 이때, 스택의 바닥에 가까운 쪽의 원소들이 더 먼저 바닥으로 떨어진다. 초기에는 U스택의 바닥만이 열려 있으며, D스택과 P스택의 바닥은 닫혀 있다.\n\n어느 날, UDP 마을에서 길이가 N$N$인 순열 A$A$가 발견되었다. 포닉스는 다음 두 연산만을 사용할 수 있다.\n\n\n\t순열 A$A$의 가장 앞 원소를 세 스택 중 하나에 삽입한 후 순열에서 삭제한다. 단, 이 연산은 순열 A$A$가 비어있지 않을 때만 가능하다.\n\t현재 바닥이 열려 있는 스택을 닫은 후 바닥이 닫혀 있는 스택 중 하나를 골라 연다.\n\n\n포닉스는 순열 A$A$와 세 스택이 모두 빌 때까지 연산을 반복한 후, 먼저 떨어진 것이 앞에 오도록 원소들을 나열할 것이다. 포닉스가 원소들을 오름차순으로 재배열할 수 있을지 판별하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31771","content":"문제\n\nAfter years of hosting games and watching Bessie get first place over and over, Farmer John has realized that this can't be accidental. Instead, he concludes that Bessie must have winning coded into her DNA so he sets out to find this \"winning\" gene.\n\nHe devises a process to identify possible candidates for this \"winning\" gene. He takes Bessie's genome, which is a string \nS\n$S$ of length \nN\n$N$ where \n1≤N≤3000\n$1 \\leq N \\leq 3000$. He picks some pair \n(K,L)\n$(K,L)$ where \n1≤L≤K≤N\n$1 \\leq L \\leq K \\leq N$ representing that the \"winning\" gene candidates will have length \nL\n$L$ and will be found within a larger \nK\n$K$ length substring. To identify the gene, he takes all \nK\n$K$ length substrings from \nS\n$S$ which we will call a \nk\n$k$-mer. For a given \nk\n$k$-mer, he takes all length \nL\n$L$ substrings, identifies the lexicographically minimal substring as a winning gene candidate (choosing the leftmost such substring if there is a tie), and then writes down the \n0\n$0$-indexed position \npi\n$p_i$ where that substring starts in \nS\n$S$ to a set \nP\n$P$.\n\nSince he hasn't picked \nK\n$K$ and \nL\n$L$ yet, he wants to know how many candidates there will be for every pair of \n(K,L)\n$(K,L)$.\n\nFor each \nv\n$v$ in \n1…N\n$1\\dots N$, help him determine the number of \n(K,L)\n$(K,L)$ pairs with \n|P|=v\n$|P|=v$."},{"problemId":"31749","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t지민이의 반에는 N$N$명의 학생이 있습니다. 지민이의 반은 최근에 중간고사를 봤는데, 지민이는 우연히 각 학생들의 중간고사 점수를 입수하게 되었습니다. i$i$번째 학생의 중간고사 성적은 Ai$A_i$입니다.\n\n지민이는 평등을 매우 중요시하기 때문에, 이 점수들을 조작하여 점수의 최댓값과 최솟값의 차이를 최소화하고자 합니다. 이때, 한 번의 조작은 다음과 같은 과정으로 이루어집니다.\n\n\n\t임의의 정수 k$k$와 1≤i≤N−1$1\\le i\\le N-1$인 정수 i$i$를 선택하여, Ai$A_i$와 Ai+1$A_{i+1}$에 k$k$를 더한다.\n\n\n성적은 음수가 될 수도 있습니다. 지민이를 도와 학생들의 성적을 106$10^6$회 이하로 조작하여 maxA−minA$\\max A-\\min A$를 최소화하는 프로그램을 작성하세요.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31783","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t먼 훗날, 포스텍 캠퍼스에서는 점점 늘어만 가는 신입생들을 모두 수용하기 위한 증축 공사가 계속되었다. 그 결과 캠퍼스의 많은 시설이 전과는 비교도 되지 않을 정도로 큰 규모의 시설로 변모하였다. 특히, 78계단은 공사가 거듭된 결과 N$N$개의 칸으로 이루어진 거대한 계단이 되었다. 각 칸은 1$1$번부터 N$N$번까지의 번호로 구분되며, i$i$번 칸의 높이는 Hi$H_i$이다. 계단이기 때문에 각 칸의 높이는 번호에 대해 단조감소한다.\n\n미래의 포스텍 재학생들은 이러한 78계단을 가장 잘 활용할 수 있는 방법을 찾았는데, 78계단 내려가기 대회가 바로 그것이다. 대회의 참가자들은 1$1$번 칸에서 시작해 번호가 더 큰 계단으로 내려가는 것을 반복해서 N$N$번 칸에 도착해야 한다. 이때 여러 칸을 뛰어넘을 수 있으며, 번호가 더 작은 계단으로 이동할 수는 없다. 1$1$번 칸을 제외한 모든 칸에는 보물 상자가 1$1$개씩 놓여 있으며, i$i$번 칸에 놓인 보물 상자의 점수는 Ai$A_i$, 내구도는 Bi$B_i$이다. i$i$번 칸에 놓인 보물 상자를 열어 점수를 얻기 위해서는 직전에 있던 칸의 높이가 Hi+Bi$H_i+B_i$ 보다 크거나 같아야 한다.\n\n당신의 목표는 가장 많은 점수를 얻어 대회에서 우승하는 것이다. 각 칸에 놓인 보물 상자의 점수와 내구도가 주어질 때, 얻을 수 있는 점수의 최댓값을 구하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31772","content":"문제\n\nFarmer John has a boolean statement that is \nN\n$N$ keywords long (\n1≤N<2⋅105\n$1 \\leq N < 2 \\cdot 10^5$, \nN\n$N$ odd). Only true or false appear in odd positions, while only and and or appear in even positions.\n\nA phrase of the form \nx OPERATOR y\n$x\\text{ OPERATOR }y$, where \nx\n$x$ and \ny\n$y$ are either true or false, and \nOPERATOR\n$\\text{OPERATOR}$ is and or or, evaluates as follows:\n\n \nx\n$x$  and  \ny\n$y$: This evaluates to true if both \nx\n$x$ and \ny\n$y$ are true, and false otherwise.\n \nx\n$x$  or  \ny\n$y$: This evaluates to true if either \nx\n$x$ or \ny\n$y$ is true, and false otherwise.\n\nWhen evaluating the statement, FJ has to take the order of precedence in Moo Language into account. Similar to C++, and takes priority over or. More specifically, to evaluate the statement, repeat the following step until the statement consists of only one keyword.\n\nIf the statement contains an and, choose any of them and replace the phrase surrounding it with its evaluation.\nOtherwise, the statement contains an or. Choose any of them and replace the phrase surrounding it with its evaluation.\n\nIt may be proven that if multiple phrases can be evaluated during a given step, it does not matter which one is chosen; the statement will always evaluate to the same value.\n\nFJ has \nQ\n$Q$ \n(1≤Q≤2⋅105)\n$(1 \\leq Q \\leq 2 \\cdot 10^5)$ queries. In each query, he gives you two integers \nl\n$l$ and \nr\n$r$ (\n1≤l≤r≤N\n$1 \\leq l \\leq r \\leq N$, \nl\n$l$ and \nr\n$r$ are both odd), and deletes the segment from keyword \nl\n$l$ to keyword \nr\n$r$ inclusive. In turn, he wishes to replace the segment he just deleted with just one simple true or false so that the whole statement evaluates to a certain boolean value. Help FJ determine if it's possible!"},{"problemId":"31800","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t세중이는 물건 사는 것을 좋아한다. 고양이를 키우고 싶어서 바나나 우유를 사거나 그림을 그리고 싶어서 삼다수 버즈 케이스를 사는 등 다양한 물건을 산다. 하지만 돌이켜보니 후회되는 구매도 많이 한 것 같아 경제적인 소비생활을 하려고 공부를 해왔다. 그래서 이제 순수익이 가장 크도록 물건을 구매하고 싶어 한다.\n\n물건의 순수익을 구하기 위해선 먼저 물건의 기회비용을 구해야 한다. 어떤 물건의 기회비용은 자신을 제외한 나머지 물건의 이익 중 가장 큰 값에서 자신의 가격을 뺀 것이다. 순수익은 물건을 구매했을 때의 이익에서 그 물건의 기회비용과 가격을 뺀 것이다. 예를 들어 3$3$개의 물건이 있다고 하자. 각 물건을 구매했을 때의 이익이 각각 280$280$, 270$270$, 240$240$이고 가격이 각각 100$100$, 100$100$, 100$100$이면 각 물건의 기회비용은 170$170$, 180$180$, 180$180$이 된다. 순수익은 각각 10$10$, −10$-10$, −40$-40$이다.\n\n각 물건을 구매했을 때의 이익과 각 물건의 가격이 주어질 때, 각 물건의 순수익을 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31784","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t포닉스의 집은 어디일까? 사람들은 포닉스의 집이 포스텍일 것이라 생각하지만, 사실 포닉스는 하늘 높이 있는 불사조 마을에 살고 있다. 불사조 마을은 외부인의 접근이 어려울뿐더러 불사조들은 태생이 정의로운 생물이기 때문에 불사조들은 문단속을 잘 까먹곤 한다.\n\n포닉스 역시 예외는 아니라서 매일 문을 잠그지 않은 채로 포스텍과 불사조 마을을 왕복하고 있었다. 그러던 어느 날, 포닉스가 집을 비운 사이 포스텍의 유명한 대도 Mr. K가 포닉스의 집에 자물쇠를 설치하고 말았다! 자물쇠는 N$N$개의 다이얼이 연결된 형태이며, 각 다이얼에는 A부터 Z까지의 알파벳 대문자가 차례대로 적혀 있다.\n\n포닉스는 자물쇠를 풀기 위해 다이얼 중 하나를 골라 1$1$번 돌리는 작업을 할 수 있다. 이때 고른 다이얼에 표시된 문자가 A였다면 B로, B였다면 C로, ..., Z였다면 A로 변한다. 반대 방향으로는 돌릴 수 없다. 정보를 모은 결과, 포닉스는 이러한 작업을 정확히 K$K$번 해 표시할 수 있는 문자열 중 사전 순으로 가장 작은 것이 자물쇠의 비밀번호라는 사실을 알아내었다. 포닉스가 다시 집을 되찾을 수 있도록 자물쇠의 비밀번호를 알아내 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31773","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tFarmer John's N$N$ cows (1≤N≤105$1 \\leq N \\leq 10^5$) each like to take a daily walk around the fence enclosing his pasture.\n\nThe fence consists of P$P$ posts (4≤P≤2⋅105$4 \\leq P \\leq 2\\cdot 10^5$, P$P$ even), the location of each being a different 2D point (x,y)$(x,y)$ on a map of FJ's farm (0≤x,y≤1000$0 \\leq x, y \\leq 1000$). Each post is connected to the two adjacent posts by fences that are either vertical or horizontal line segments, so the entire fence can be considered a polygon whose sides are parallel to the x or y axes (the last post connects back to the first post, ensuring the fence forms a closed loop that encloses the pasture). The fence polygon is \"well-behaved\" in that fence segments only potentially overlap at their endpoints, each post aligns with exactly two fence segment endpoints, and every two fence segments that meet at an endpoint are perpendicular.\n\nEach cow has a preferred starting and ending position for her daily walk, each being points somewhere along the fence (possibly at posts, possibly not). Each cow walks along the fence for her daily walks, starting from her starting position and ending at her ending position. There are two routes that the cow could take, given that the fence forms a closed loop. Since cows are somewhat lazy creatures, each cow will walk in the direction around the fence that is shorter (if there is a tie, the cow may choose either direction).\n\nDetermine the distance that each cow walks.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31750","content":"문제\n\n경기도의 명소 경기과학고등학교에는 \n1\n$1$부터 \nN\n$N$까지의 번호가 매겨진 건물이 \nN−1\n$N-1$개의 양방향 도로로 연결되어 있고, 모든 건물들은 연결되어 있습니다. 즉, 경기과학고등학교는 트리 구조입니다. 악당 동현이는 경기과학고등학교를 여러 조각으로 분열시킨 후 경기과학고등학교를 지배할 계획을 세우고 있습니다.\n\n동현이가 계획한 첫 번째 계획의 실패로, 동현이는 자신의 두 번째 계획을 사용하기로 했습니다. 이 계획에서 동현이는 경기과학고에 있는 길 중 \n2\n$2$개를 파괴해 경기과학고를 \n3\n$3$개의 영역으로 나누고자 합니다. 두 건물이 같은 영역에 속해 있다는 것은 파괴되지 않은 도로들을 통해 한 건물에서 다른 건물로 이동할 수 있음을 뜻합니다.\n\n동현이는 이미 경기과학고등학교에 숨겨놓은 스파이를 통해 \ni\n$i$번 건물에는 학생이 \nAi\n$A_i$명임을 알고 있습니다. 경기과학고를 세 영역으로 나눈 뒤, 각 영역의 결집도를 해당 영역에 있는 학생의 수로 정의합니다. 또한 세 영역의 결집도의 곱을 지배력이라고 정의합니다.\n\n예를 들어, 아래 그림과 같이 건물의 개수 \nN=7\n$N=7$이고, 각 건물에 있는 학생의 수가 \nA=[1,3,4,0,3,6,2]\n$A=[1, 3, 4, 0, 3, 6, 2]$인 경우를 생각해 봅시다.\n\n동현이가 \n1\n$1$, \n5\n$5$번 건물 사이의 길과 \n5\n$5$, \n7\n$7$번 건물 사이의 길을 파괴하면 경기과학고등학교는 다음과 같이 세 영역으로 분할됩니다.\n\n이때, \n1\n$1$번 건물이 포함된 영역의 결집도는 \n1+4+0=5\n$1+4+0=5$이며, \n2\n$2$번 건물, \n6\n$6$번 건물이 포함된 영역의 결집도는 각각 \n6\n$6$, \n8\n$8$입니다. 따라서 이 경우의 지배력은 \n5×6×8=240\n$5\\times 6\\times 8=240$입니다.\n\n동현이가 경기과학고를 세 영역으로 나눠 얻을 수 있는 지배력의 최댓값을 구하는 프로그램을 작성하세요."},{"problemId":"31785","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t비어 있는 배열 A$A$가 있다. 당신은 다음 두 종류의 질의를 총 Q$Q$개 처리해야 한다.\n\n\n\t1 x$x$: 배열의 가장 뒤에 정수 x$x$를 삽입한다.\n\t2: 현재 배열의 길이를 N$N$이라 하자. 배열을 앞 ⌊N2⌋$\\left\\lfloor{N\\over 2}\\right\\rfloor$개의 원소와 뒤 ⌈N2⌉$\\left\\lceil{N\\over 2}\\right\\rceil$개의 원소 두 부분으로 나눈 후, 원소들의 합이 더 작은 부분을 배열에서 삭제한다. 만약 두 부분의 합이 같을 경우, 앞 ⌊N2⌋$\\left\\lfloor{N\\over 2}\\right\\rfloor$개의 원소를 삭제한다. 이후 삭제된 부분의 원소의 합을 출력한다. 이 형식의 질의는 배열의 길이가 2$2$ 이상일 때만 주어진다.\n\n\n모든 질의를 올바르게 처리하고, 그 후 배열 A$A$에 저장된 모든 원소를 차례대로 출력하는 프로그램을 작성하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31801","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t대구과학고 학생인 정현이는 숫자의 규칙을 찾는 것을 좋아한다. 특히 요즘에는 증가 후 감소하는 수에 빠졌다. 증가 후 감소하는 수란, 0으로 시작하지 않도록 십진수로 표현하였을 때 각 자릿수가 증가하다가 감소하는 양의 정수를 의미한다. 다시 말해서, 양의 정수 n=∑i=0k−1ai10i=ak−1ak−2...a1a0―(0≤ai≤9,ai$n=\\sum _{i=0}^{k-1}a_i10^i=\\overline{a_{k-1}a_{k-2}...a_1a_0}(0\\leq a_i\\leq 9, a_i$는 정수, ak−1≠0)$a_{k-1}\\neq0)$에 대하여, 어떤 1≤j≤k−2$1\\leq j\\leq k-2$가 존재하여 ak−1<ak−2<...<aj+1<aj>aj−1>...>a1>a0$a_{k-1}<a_{k-2}<...<a_{j+1}<a_j>a_{j-1}>...>a_1>a_0$이면 n$n$을 증가 후 감소하는 수라고 한다. 예를 들어, 13586$13586$은 1<3<5<8>6$1 < 3 < 5 < 8 > 6$이므로 증가 후 감소하는 수다. \n\n두 양의 정수 a,b$a, b$가 주어졌을 때, a$a$ 이상 b$b$ 이하의 양의 정수 중 증가 후 감소하는 수가 몇 개인지 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31751","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA meteor shower is about to happen! As the enthusiastic astronomy photographer that you are, you want to take a single picture of all the meteors that will be part of the phenomenon. Not only that, you want to take the best possible picture. You know that the smaller the area of the photo, the better the picture. But how small can you make the picture to capture them all?\n\nYou can take a picture of any rectangular region of your camera’s view, but you cannot rotate the camera. That is, your photo can be any axis-aligned rectangle. The challenge? The meteors are constantly moving. Think of time (t$t$) as the number of seconds that have passed since the start of the meteor shower. Your goal is to find a non-negative value of t$t$ at which you can capture every single meteor with the smallest possible rectangle. A photo captures all the meteors within the rectangle, including those on the border.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31786","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t범수와 윤성이는 둘도 없는 최고의 친구이다. 두 친구가 살고 있는 마을은 2$2$차원 좌표평면으로 표현된다. 둘은 같은 마을에 살고 있지만 범수는 x$x$축의 양의 방향, 윤성이는 x$x$축의 음의 방향에 살고 있어 서로 만날 수 없다. 따라서 두 친구는 주로 게임을 하며 우정을 다진다.\n\n게임을 위한 통신은 좌표평면 위의 기지국에서 이루어진다. 원활한 게임을 위해서는 통신 속도가 충분히 빨라야 한다. 범수의 위치, 윤성이의 위치, 기지국의 위치가 예각삼각형을 이룰 때에만 초고속 통신을 이용해 게임을 즐길 수 있다. 아쉽게도 마을은 하루가 다르게 개발되고 있어서 둘의 위치와 기지국의 정보가 시시각각 변한다. 따라서 당신은 다음과 같은 Q$Q$개의 질의를 처리해야 한다.\n\n\n\t1 x$x$: 범수의 위치가 (x,0)$(x,0)$, 윤성이의 위치가 (−x,0)$(-x,0)$일 때 초고속 통신이 가능한 기지국의 개수를 출력한다.\n\t2 x$x$ y$y$: (x,y)$(x,y)$에 기지국이 없었다면 새로 설치하고, 있었다면 철거한다. 기지국의 위치는 x$x$축 위에 있지 않다.\n\n\n초기에는 아무 기지국도 설치되어 있지 않다. 두 친구의 우정을 위해 질의를 올바르게 처리하는 프로그램을 작성하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31774","content":"문제\n\nFarmer John has a permutation \np\n$p$ of length \nN\n$N$ (\n2≤N≤105)\n$2 \\leq N \\leq 10^5)$, containing each positive integer from \n1\n$1$ to \nN\n$N$ exactly once. However, Farmer Nhoj has broken into FJ's barn and disassembled \np\n$p$. To not be too cruel, FN has written some hints that will help FJ reconstruct \np\n$p$. While there is more than one element remaining in \np\n$p$, FN does the following:\n\nLet the remaining elements of \np\n$p$ be \np1′,p2′,…,pn′\n$p'_1, p'_2, \\dots , p'_n$,\n\nIf \np1′>pn′\n$p'_1 > p'_n$, he writes down \np2′\n$p'_2$ and removes \np1′\n$p'_1$ from the permutation.\nOtherwise, he writes down \npn−1′\n$p'_{n-1}$ and removes \npn′\n$p'_n$ from the permutation.\n\nAt the end, Farmer Nhoj will have written down \nN−1\n$N - 1$ integers \nh1,h2,…,hN−1\n$h_1, h_2, \\dots, h_{N-1}$, in that order. Given \nh\n$h$, Farmer John wants to enlist your help to reconstruct the lexicographically minimum \np\n$p$ consistent with Farmer Nhoj's hints, or determine that Farmer Nhoj must have made a mistake. Recall that if you are given two permutations \np\n$p$ and \np′\n$p'$, \np\n$p$ is lexicographically smaller than \np′\n$p'$ if \npi<pi′\n$p_i < p'_i$ at the first position \ni\n$i$ where the two differ."},{"problemId":"31752","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tSpeedy Greedy is a professional speedrunner: they play a videogame repeatedly, with the aim of finishing it as quickly as possible.\n\nThe game that Speedy Greedy is currently tackling consists of N$N$ levels, numbered sequentially from 1$1$ to N$N$. Although these levels must be completed in order, each of them is independent of the others in terms of gameplay. That is, no event from one level can have a relevant effect on the next levels (unlike other games where items, spells, points, lives, etc. are carried over from one level to the next).\n\nThe current world record for the fastest completion time of the game is T$T$ seconds. Speedy Greedy is determined to beat this world record, with no concern for the margin. Whether the game is finished 1$1$ second or 1000$1000$ seconds faster than the current record is irrelevant: what matters to Speedy Greedy is improving the world record.\n\nSpeedrunners often choose and adjust their actions dynamically during a run, depending on various factors such as the situation of their character in the game. It is also common to restart the game, as for example once T$T$ seconds have passed there is no more hope to beat the world record. Any run of the game can be restarted at any point. When a restart command is issued by the speedrunner, the game instantly restarts from the beginning. Thus, to beat the world record, Speedy Greedy must complete the N$N$ levels sequentially, in a single run that takes less than T$T$ seconds.\n\nHow can Speedy Greedy achieve that? Well, most sections of the game are completely safe and easy to play for a speedrunner of such skill. Those sections take fixed amounts of time and have no risk of failing. However, there is a very hard section in each of the N$N$ levels, where the result of playing that section is not completely under Speedy Greedy’s control, and also depends on the chosen strategy.\n\nIn each level, there are two possible strategies, and when reaching the hard section, Speedy Greedy can choose exactly one of them to attempt. Each strategy has its own probability of success, and the actual time that the level takes to complete depends on the chosen strategy and whether the attempt is successful or not.\n\nFor the purposes of this problem, we assume that Speedy Greedy can instantly detect whether the chosen strategy for a level succeeded or failed, right at the moment that the hard section of the level is reached. That is, reaching the hard section of a level, choosing a strategy, and knowing whether the attempted strategy succeeded or failed are all simultaneous events, occurring at exactly the same time.\n\nGrinding the game by playing again and again and again becomes tiring and physically exhausting at such a high level of speedrunning competition. Speedy Greedy then decided to play the game so as to minimize the expected total play time until beating the world record. Your task is to compute this minimum.\n\nNote that the total play time not only includes the time of the final successful run that takes less than T$T$ seconds (beating the world record), but also includes the time spent during all previous failed runs.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31775","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t모두가 알다시피, 포닉스는 인류의 삶에 기여하는 가치창출대학 포스텍을 대표하는 마스코트이다! 포닉스는 오늘도 GLOBAL하고 새로운 가치를 창출하기 위해 노력하고 있다.\n\n컴퓨터 과학 분야에서, GLOBAL한 가치란 단언컨대 ICPC World Finals 진출이다. 포닉스는 포스텍의 ICPC World Finals 진출을 위한 응원 문구를 만들려 한다. 응원 문구는 문자열 세 개로 이루어져 있다. 포닉스의 빅데이터 연구 결과, 세 문자열이 순서와 관계없이 각각 l, k, p로 시작할 경우 포스텍은 ICPC World Finals에 진출할 수 있다. 포닉스는 이러한 응원 문구를 GLOBAL한 문구로 부르기로 했다.\n\n포닉스가 정한 세 개의 문자열이 주어질 때, 응원 문구가 GLOBAL한지 판단하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31802","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이 문제는 주기 함수 (Hard)와 입력 조건이 다르다.\n\n주기 함수(週期函數, 영어: periodic function)는 함숫값이 일정 주기마다 되풀이되는 함수이다. 구체적으로는 모든 x$x$에 대해 f(x+p)=f(x)$f(x+p)=f(x)$인 양수 p$p$가 존재할 때 함수 f(x)$f(x)$를 주기 함수라 하고, p$p$를 주기라 한다. 같은 함수에 대해서도 주기는 여러 값을 가질 수 있다. 예를 들어 f(x)=sin⁡x$f(x) = \\sin x$인 경우 모든 양의 정수 n$n$에 대해 2nπ$2n\\pi$는 주기가 될 수 있다.\n\n주기 함수는 정적분을 계산할 때 용이하다. 주기만큼 적분 구간을 바꾸어도 그 값은 동일하기 때문이다. 예를 들어 sin$\\sin$ 함수의 경우 주기가 2π$2\\pi$이므로 ∫0πsin⁡xdx=∫2π3πsin⁡xdx$\\displaystyle\\int_0^\\pi \\sin x dx = \\int_{2\\pi}^{3\\pi} \\sin x dx$이다.\n\n두영이는 매일 이안이가 모르는 주기 함수를 가지고 와서 주기에 해당하는 길이의 구간의 적분값을 주고, 주어진 구간의 적분값을 찾는 문제를 풀어달라고 한다. 매일 문제를 푸느라 지친 이안이는 자동으로 답을 구해주는 프로그램을 만들고자 한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31787","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t오늘도 무수한 Wrong Answer를 받고 멘탈이 나간 찬우는 실수로 애지중지하던 계산기에 샷건을 내려치고 말았다! 대부분의 버튼이 충격으로 고장났고, 무사히 작동하는 버튼은 계산기의 화면에 출력된 수에 4$4$를 더하는 버튼, 4$4$를 빼는 버튼, 4$4$를 곱하는 버튼, 4$4$를 나누는 버튼 뿐이었다. 또, 계산기의 소수점 기능이 망가져서 4$4$로 나눠떨어지지 않는 수를 4$4$로 나눌 수 없게 되었다. 다행히 계산기 화면에서 음수를 출력하는 기능은 정상적으로 동작했다. \n\n이대로 계산기를 잃을 수 없었던 찬우는 어떻게든 계산기를 사용하기로 했고, 문득 화면에 원하는 정수를 띄우기 위한 최소한의 버튼 클릭 횟수가 얼마인지 궁금해졌다. 입력으로 N$N$이 주어질 때, N$N$을 화면에 띄우기 위해 필요한 최소한의 버튼 클릭 횟수를 구하여라. 초기 화면에 적힌 정수는 0$0$이다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31753","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tTwo players play the following game on an N×M$N \\times M$ grid:\n\n\n\tInitially each cell of the grid is either empty or occupied.\n\tPlayers take turns placing a stone on an empty cell, occupying the cell. Each new stone must be adjacent to the last placed stone, with the exception of the starting stone that can be placed on any empty cell. A stone is adjacent to another stone if they are located in two cells that share a side.\n\tThe game ends whenever a player cannot place a stone according to the above rules. In that case, the player who cannot place a stone loses the game, and the other player wins.\n\n\nA winning starting cell is a cell such that the first player wins the game if they place their starting stone there, assuming both players play optimally. Given a description of the initial grid, you must tell how many winning starting cells it has.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31776","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tPPC 본 대회 하루 전에는 참가 팀들의 환경 적응을 위한 예비 소집이 진행된다. 예비 소집에는 3$3$문제가 사용되었으며, N$N$팀이 참여하였다. 각 문제와 팀에는 1$1$번부터 차례대로 번호가 붙어 있다. PPC 운영진들은 예비 소집이 얼마나 효과적이었는지 알아보기 위해 보고서를 작성해 보기로 했다.\n\n예비 소집의 효과를 알아내기 위해서는 성실하게 참여한 팀의 수를 구해야 한다. 예비 소집에 성실하게 참여한 팀이란 다음과 같은 조건을 만족하는 팀이다.\n\n\n\t세 문제 중 최소 하나를 해결하였다.\n\t문제를 번호가 작은 것부터 해결하였다. 즉, 어떤 문제를 시간 T$T$에 해결했을 때 그보다 번호가 작은 문제들은 모두 해결하였으며 해결 시간이 T$T$ 이하이고, 그보다 번호가 큰 문제들은 해결하지 않았거나 해결 시간이 T$T$ 이상이어야 한다.\n\n\n각 팀이 각 문제를 해결한 시간이 주어질 때, 예비 소집에 성실하게 참여한 팀의 수를 구하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31788","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t N$N$그루의 나무가 각각 1$1$씩의 간격을 두고 일직선으로 심어져 있다.\n\n 0$0$일 차에 모든 나무의 높이는 0$0$이고 나무가 자랄 때 너비는 1$1$로 균일하다. 하루가 시작될 때 i$i$번째 나무는 pi$p_i$ 퍼센트의 확률로 전날보다 높이가 1$1$만큼 증가하고, 이외에는 전날과 같은 높이로 유지된다.\n\n N$N$개의 나무가 차지하는 영역 중 최대 크기의 직사각형 부분을 잘라내 커다란 나무판자를 얻으려 한다. 이때 나무판자의 두 변은 지면과 평행해야 한다.\n\n\n\n예를 들어 5개의 나무가 심어져 있는 경우, 높이가 순서대로 1,4,2,5,3이면 나무판자의 크기는 8이다\n\n M$M$일 차에 얻을 수 있는 나무판자 넓이의 기댓값을 구하여라. 기댓값의 출력 형식은 출력 단락을 참고하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31803","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t대구과학고는 현재 독서동을 수리하고 있어서 교실에서 대신 자습을 진행하기로 했다. 선생님들은 학생들이 떠들 것을 우려해 반별로 교실을 두 개씩 사용하기로 했다. 또한 교실마다 크기 차이가 있어 공평하게 사용하기 위해 매일 교실 배치를 바꾸어가며 자습을 진행하기로 하였다. 대구과학고에는 N$N$개의 교실과 ⌊N2⌋$\\lfloor \\frac{N}{2} \\rfloor$개의 반이 있어, 각 반을 홀수 번호인 학생들과 짝수 번호인 학생들로 나누어 서로 다른 교실에서 자습하도록 할 생각이다.\n\n대구과학고의 모범생인 지웅이는 이준구 선생님의 부탁으로 자습 교실 배치를 돕기로 하였다. 지웅이는 반 배정을 고려하지 않은 채, 교실을 두 개씩 짝지어 이준구 선생님에게 전달해 주면 이준구 선생님이 그에 맞춰 반을 배정하는 방식이다. 이준구 선생님은 교실들을 짝짓는 방법 한 가지당 보상으로 초코파이를 하나씩 주기로 했다. 지웅이는 초코파이를 최대 몇 개 받을 수 있을까?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31777","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t지구평면설로부터 큰 호응을 받은 찬우는, 이번에는 나무평평설을 주장하기 시작했다!\n\n찬우는 이를 증명하기 위해, 포스텍에서 N$N$개의 정점과 N−1$N-1$개의 가중치를 갖는 간선으로 이루어진 무향 트리를 준비했다. 이 트리의 각 정점에는 1$1$번부터 N$N$번까지 번호가 붙어 있다. 찬우는 다음의 연산들을 원하는 만큼 적용해 모든 간선의 가중치를 0$0$으로 만들려고 한다.\n\n\n\t임의의 두 정점 번호 u$u$, v$v$를 고르고, u$u$번 정점과 v$v$번 정점을 양 끝점으로 하는 단순 경로의 모든 간선의 가중치를 1$1$ 감소시킨다.\n\n\n이때의 연산에 의해 가중치가 0$0$보다 작아질 수 있음을 유의하라.\n\n하지만 찬우는 여전히 게으름뱅이라 적용해야 하는 연산의 횟수를 가능한 한 적게 하고 싶다. 찬우가 모든 간선의 가중치를 0$0$으로 만들기 위한 연산의 최소 횟수를 구해주자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31754","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe Intense Challenges Players Club (ICPC) is hosting a DiviDuelo tournament.\n\nDiviDuelo is a new two-player, turn-based game. In DiviDuelo, a number N$N$ is selected and the list of its divisors is written. For example, if N=10$N = 10$ is selected, the list of numbers 1$1$, 2$2$, 5$5$, 10$10$ is written. Players alternate turns picking one still unpicked divisor from the list each turn, until all divisors have been picked.\n\nThe winner is determined by the greatest common divisor (GCD) of the numbers picked by the starting player. If the GCD is not equal to 1$1$, the starting player wins. Otherwise, if the GCD is equal to 1$1$, the other player wins.\n\nThe ICPC needs your help to prepare some statistics about the games played in the tournament. Given the value of N$N$, determine if the starting player can win the game assuming both players play optimally.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31804","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t자료구조 시험에서 우찬이는 a$a$점을 받았고, 상훈이는 우찬이보다 높은 b$b$점을 받았다. 우찬이는 상훈이보다 점수가 낮아서 화가 났지만, 공부를 하나도 하지 않아서 상훈이보다 시험을 잘 볼 수는 없다는 것을 알고 있었다. 하지만 우찬이는 최소한 동점을 받고 싶었기 때문에, 자신의 수를 바꾸는 마법을 배워서 다음 3가지 마법을 사용할 수 있게 되었다.\n\n\n\t물 주기: 수에 물을 주면 수가 1$1$ 커진다.\n\t밥 주기: 수에 밥을 주면 수가 2$2$배가 된다.\n\tchance!: 수에 chance!를 외치면 수가 10$10$배가 된다.\n\n\n하지만 chance!를 외치면 목이 너무 아프기 때문에 우찬이는 chance! 마법을 최대 한 번만 사용할 수 있다. 그리고 마법을 사용할 때마다 팔을 이리저리 휘저어야해서 힘이 많이 들기 때문에 마법을 최소한으로 사용하고자 한다. 우찬이가 상훈이와 동점이 되도록 하려고 할 때 마법을 최소한으로 사용하도록 도와주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31789","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tPULSE를 떠나게 된 산지니 4인조는 저금통에 조금씩 모아둔 돈을 가지고 모험을 떠나기로 했다.\n\n모험을 떠나기 위해서는 문지기 후안과의 대결에서 이겨야 한다. 문지기 후안을 이기려면 후안의 공격력보다 높은 무기를 가지고 있어야 한다. 그래서 4인조는 문지기 후안과 대결하기 전에 상점에서 무기를 구매하려고 한다. 4인조는 상점에서 판매하는 N$N$개의 무기 중 하나만을 구매할 수 있으며 4인조가 가진 돈 X$X$보다 비싼 무기는 구매할 수 없다. 산지니 4인조가 후안을 이기고 모험을 떠날 수 있을지 알아보자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31755","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tTired of always waiting in lines, you invented a revolutionary restaurant concept: “STACKS! Where the last customer is served first”.\n\nThe restaurant operates as follows:\n\n\n\tThere is a single line inside the restaurant.\n\tWhen a customer enters, they immediately join the back of the line.\n\tWhenever a stack of glazed pancakes (the only dish at STACKS!) is ready, it’s served to the person at the back of the line, who then immediately devours the pancakes and leaves the restaurant.\n\n\nThis business model has been incredibly successful, so much so that STACKS! is beginning to expand.\n\nIn fact, you just opened the very first STACKS!+, offering two types of pancakes: glazed and savory. The new restaurant works as follows:\n\n\n\tThere are two lines, one for each type of pancake. Each customer joins the back of the line corresponding to the type of pancake they want.\n\tWhenever a stack of glazed pancakes is ready, it is served to the customer at the back of the glazed pancake line, who immediately devours it and leaves the restaurant.\n\tWhenever a stack of savory pancakes is ready, it is served to the customer at the back of the savory pancake line, who instantly gobbles it and leaves the restaurant.\n\n\nAs the boss, you want to ensure your employees follow the concept and maintain your vision. Given the order in which customers come in and out of the restaurant, you need to determine whether there is an assignment of customers to lines such that the STACKS!+ concept is followed.\n\nYou can assume that whenever a customer enters the restaurant, they immediately join the back of a line, and that they leave as soon as they are served. Also, each customer visits the restaurant exactly once.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31805","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이안이는 문자열 연구를 하고 있다. 문자열로 팰린드롬도 없애보고 복사도 해보고 많은 실험을 해봤다. 하지만 문자열 하나만으로는 실험을 하기에 부족하다고 생각했다. 이안이는 아직 학생이라 새로운 문자열을 사기에는 돈이 없다. 그래서 쓰던 문자열을 바꾸어 쓰기로 했다.\n\n실험실에는 문자열 마법사 고은이와 가은이가 있다. 이안이는 고은이와 가은이를 찾아가 완전 새로운 문자열을 만들어달라고 부탁했다. 완전 새로운 문자열은 기존 문자열과 구성이 같지만, 모든 글자가 이전과 같은 위치에 있지 않은 문자열이다. 단, 글자의 종류가 같으면 동일하게 취급한다.\n\n고은이와 가은이는 원하는 글자 위에 서서 서로의 위치에 있는 글자를 교환하는 방법으로 문자열을 바꿔준다. 글자가 굉장히 무겁기 때문에 고은이와 가은이는 글자를 최대한 적게 바꾸고 싶어한다. 고은이와 가은이를 도와 이안이의 문자열을 완전 새로운 문자열로 바꾸기 위해 필요한 최소 횟수를 구해주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31790","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tPULSE를 떠나서 대학원에 입학한 산지니는 휴일 태종대에서 월척을 낚기 위해 낚시를 하고 있다. 하지만 몇 시간이 지나도 아무 소식이 없다. 산지니는 낚싯대를 너무 오래 쥐고 있어 졸리던 차에 간단한 수열을 생각하게 되었다.\n\n길이가 N$N$인 순열 a$a$에 대해 S$S$와 수열 b$b$를 아래와 같이 정의하자.\n\n\n\t Si,j(1≤i≤N)$S_{i,j}(1 \\leq i \\leq N)$는 순열 a$a$의 연속 부분 수열 a1,a2,...,ai$a_1, a_2, ..., a_i$의 원소 중 p$p$로 나눈 나머지가 j(0≤j<p)$j(0 \\leq j < p)$인 원소의 개수이다.\n\t bi(1≤i≤N)$b_i(1 \\leq i \\leq N)$는 Si,0,Si,1,...,Si,p−1$S_{i,0}, S_{i,1}, ... , S_{i,p-1}$ 중 최댓값이다.\n\n\n산지니는 조금 더 생각하다 어떤 숫자 p$p$와 수열 b$b$에 대해서도 순열 a$a$가 존재하는지 궁금해졌다. 조건을 만족하는 순열 a$a$가 존재하는지 알아보자. \n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31778","content":"문제\n\n포닉스에게는 아끼던 문자열 \nS\n$S$가 있다. \nS\n$S$는 길이가 \nN\n$N$이며 알파벳 대문자 C와 P만으로 이루어져 있는 문자열이다. 문자열 \nS\n$S$의 \ni\n$i$번째 문자는 \nSi\n$S_i$와 같이 나타낸다.\n\n포닉스는 PPC에 참가하는 팀들을 위해 문자열 \nS\n$S$로 대회장을 장식하려 한다. 포닉스는 대회 전, \nS\n$S$에 다음과 같은 연산을 최대 \nK\n$K$번 시행할 수 있다.\n\n \n1≤i<j≤N\n$1 \\le i < j \\le N$인 두 정수 \ni\n$i$, \nj\n$j$를 골라 \nSi\n$S_i$와 \nSj\n$S_j$를 바꾼다.\n\n포닉스의 목표는 완성된 문자열 \nS\n$S$에 PPC 부분문자열이 가장 많게 하는 것이다. PPC 부분문자열의 개수란, \n1≤i<j<k≤N\n$1 \\le i<j<k \\le N$이고 \nSi=Sj=\n$S_i=S_j=$ P, \nSk=\n$S_k=$ C인 \n(i,j,k)\n$(i,j,k)$의 개수를 의미한다.\n\n포닉스가 만들 수 있는 PPC 부분문자열의 개수의 최댓값을 구하여라."},{"problemId":"31779","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t포닉스는 지구의 진정한 지배자가 되기 위하여 지구의 지형을 자신이 원하는 대로 바꾸고 싶어 한다. 지구는 네모난 모양이므로 N$N$행 M$M$열의 격자 형태로 표현되고, 격자 한 칸의 값은 그 땅의 높이를 의미한다. 땅의 높이는 모두 정수이다.\n\n포닉스는 자신의 네모난 손바닥으로 지구를 누르거나 뽑아올려 1×2$1\\times 2$ 혹은 2×1$2\\times 1$ 형태인 땅의 높이를 동시에 1$1$ 혹은 −1$-1$만큼 변화시키는 작업을 수행할 수 있다.\n\n하지만, 지구에는 K$K$칸의 땅에 폭발한 화산이 존재한다. 변화시키려는 두 칸의 땅 중 하나의 땅에라도 폭발한 화산이 존재하면, 포닉스는 자신의 손이 델까 무서워하여 위의 작업을 수행할 수 없다. 포닉스는 위의 작업을 여러 번 시행하여 모든 땅의 높이를 자신이 원하는 대로 바꾸고 싶어 한다. 포닉스가 지구의 높이를 원하는 대로 바꾸어 진정한 지배자가 될 수 있을지 판별해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31820","content":"문제\n\n \n1\n$1$부터 \nN\n$N$까지 번호가 매겨진 \nN\n$N$개의 정점으로 이루어진 트리 \nT\n$T$가 주어진다. 각 \ni\n$i$번 정점은 정수 가중치 \nAi\n$A_i$를 가진다.\n\n \nT\n$T$의 연결 부분 집합 \nS\n$S$는 \nT\n$T$의 정점들의 공집합이 아닌 부분 집합으로, \nS\n$S$에 속하는 두 정점 \na\n$a$, \nb\n$b$에 대해 \nS\n$S$에 속한 정점만을 사용하는 \na\n$a$에서 \nb\n$b$로 가는 경로가 \nT\n$T$에 존재한다.\n\n다음 \nQ\n$Q$개의 쿼리를 처리해야 한다.\n\n \nk\n$k$ \nx\n$x$: \nAk\n$A_k$를 \nx\n$x$로 바꾸고 \nT\n$T$의 연결 부분 집합 \nS\n$S$에 대한 \n∑i∈SAi\n$\\sum_{i\\in S}{A_i}$의 최댓값을 출력한다."},{"problemId":"31806","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t준긋이는 학교 구조대 대장이다. 이번에 고양이들이 지하에 갇혀있다는 소식을 듣고 구조를 하러 가기로 했다. 하지만 구조대의 구성원들이 학생이라 담당 선생님께 허락을 받은 M$M$시간 동안만 활동할 수 있다. 단, 한 번 활동을 시작하면 M$M$시간을 연속해서 활동해야 하며 중간에 쉴 수 없다. 다행히 언제부터 M$M$시간을 활동할지는 준긋이가 마음대로 요청할 수 있다. 시작 시각을 s$s$(s$s$는 음이 아닌 정수)라 하면 준긋이는 s$s$시 30$30$분부터 s+M$s+M$시 30$30$분까지 활동하도록 요청할 수 있다. 학교 구조대는 여러 개의 팀으로 이루어져 있고, 한 개의 팀의 구조 작업은 다음과 같이 이루어진다.\n\n\n\t팀이 현장에 도착하여 현장을 파악한다.\n\t팀이 복귀해 상황을 분석하고 필요한 물품을 챙긴다.\n\t다시 현장에 도착해 구조 작업을 완료한다.\n\n\n각 팀마다 고유 번호 c$c$가 부여되어 있으며, 활동 가능한 시간대가 하나 이상 있다. 하나의 시간대는 [l,r)$[l, r)$ 형식으로 이루어져 있으며, 이는 l$l$시 00$00$분 부터 r−1$r - 1$시 59$59$분까지 활동 가능하다는 의미이다. 현장 도착 및 복귀는 활동 가능 시간 중 언제든 할 수 있지만, 한 번 복귀한 시간대에는 다시 현장으로 갈 수 없다. 대장인 준긋이는 최소 두 번 이상 현장에 갈 수 있는 팀만 구조에 참여하도록 했고, 이런 팀을 최대한으로 하고자 한다. 준긋이를 도와 시간을 잘 잡아 최대한 많은 팀이 구조를 갈 수 있게 도와주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31791","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t무시무시한 테러 단체 '타도 유해조류 산지니'가 부산대학교에 바이러스를 살포하겠다고 예고했다. N$N$행 M$M$열의 격자로 이루어진 부산대학교 위에는 B$B$개의 건물이 구역 안에 겹치지 않고 있으며, 부산대학교의 철통같은 보안 덕에 테러 단체가 건물에는 바이러스를 살포하지 못한다.\n\n테러에 사용될 바이러스는 아래의 세 가지 특징이 있다.\n\n\n\t건물의 내부와 외부에 존재하는 모든 바이러스는 살포 시점으로부터 TG$T_{G}$시간 뒤 전파를 멈춰 바이러스가 더 이상 주변으로 퍼지지 않는다.\n\t바이러스로부터 안전하지 않은 구역과 상하좌우로 인접한 구역은 1$1$시간 뒤 바이러스의 전파가 완료되며, 전파가 완료되기 전까지 인접한 구역은 전파되지 않은 구역으로 간주한다. 두 구역이 서로 변을 공유할 때 인접한다고 한다.\n\t건물에 바이러스가 전파된 시점으로부터 TB$T_{B}$시간 동안은 건물 내부에 바이러스가 퍼진다. 이 기간 동안 건물 내부는 바이러스가 전파되지 않은 층으로 대피할 수 있어 안전하다. 바이러스가 전파된 지 TB$T_{B}$시간이 지난 뒤 모든 층에 바이러스가 전파되어 건물이 더이상 안전하지 않게 되면 마찬가지로 상하좌우로 인접한 구역에 1$1$시간 뒤 바이러스가 전파된다.\n\n\n하나의 구역은 격자의 한 칸을 의미하며, 바이러스가 전파되지 않은 구역과 바이러스가 전파된 시점으로부터 TB$T_{B}$시간이 지나지 않은 건물을 안전한 구역, 그 외 모든 구역을 안전하지 않은 구역으로 분류한다.\n\n산지니는 테러에 부산대학교 학우들이 휩쓸리지 않도록 안전한 곳으로 대피시키고 싶어 한다. 바이러스를 피해 대피할 수 있는 구역을 구해주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31756","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAn entrepreneur has N$N$ blueprints, each describing a type of building. Each blueprint specifies the building’s height through two integers G$G$ and R$R$.\n\n\n G$G$: Height of the ground floor. It can be zero, indicating that the building has no ground floor.\n\n R$R$: Height of each residential floor. Each building has at least one residential floor.\n\n\nThe entrepreneur wants to distribute all of these blueprints among their two children Alice and Bob. Each child will build exactly one building from each blueprint allocated to them, choosing the number of residential floors for each building.\n\nThe entrepreneur wants to avoid showing favoritism towards either child, so they are looking for a fair distribution of the blueprints. They decided that a fair distribution is one in which it is possible to construct the buildings in such a way that the sum of the heights of the buildings constructed by each child is the same. Can you tell whether a fair distribution exists?\n\nConsider the following example for N=3$N = 3$ blueprints:\n\n\n\t G=1$G = 1$ and R=1$R = 1$ (possible heights are 2,3,4,…$2, 3, 4, \\dots$);\n\t G=0$G = 0$ and R=3$R = 3$ (no ground floor, possible heights are 3,6,9,…$3, 6, 9, \\dots$);\n\t G=2$G = 2$ and R=1$R = 1$ (possible heights are 3,4,5,…$3, 4, 5, \\dots$).\n\n\nIn this case a possible fair distribution is assigning the second blueprint to Alice and the rest to Bob. Even though Alice receives a single blueprint while Bob receives two, they may construct two residential floors on the first building type (height 3$3$), two residential floors on the second (height 6$6$), and one residential floor on the third (height 3$3$). In this way, the sum of the heights of the buildings constructed by each child would be 6$6$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31807","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이 문제는 주기 함수 (Easy) 문제와 입력 조건이 다르다.\n\n주기 함수(週期函數, 영어: periodic function)는 함숫값이 일정 주기마다 되풀이되는 함수이다. 구체적으로는 모든 x$x$에 대해 f(x+p)=f(x)$f(x+p)=f(x)$인 양수 p$p$가 존재할 때 함수 f(x)$f(x)$를 주기 함수라 하고, p$p$를 주기라 한다. 같은 함수에 대해서도 주기는 여러 값을 가질 수 있다. 예를 들어 f(x)=sin⁡x$f(x) = \\sin x$인 경우 모든 양의 정수 n$n$에 대해 2nπ$2n\\pi$는 주기가 될 수 있다.\n\n주기 함수는 정적분을 계산할 때 용이하다. 주기만큼 적분 구간을 바꾸어도 그 값은 동일하기 때문이다. 예를 들어 sin$\\sin$ 함수의 경우 주기가 2π$2\\pi$이므로 ∫0πsin⁡xdx=∫2π3πsin⁡xdx$\\displaystyle\\int_0^\\pi \\sin x dx = \\int_{2\\pi}^{3\\pi} \\sin x dx$이다.\n\n두영이는 매일 이안이가 모르는 주기 함수를 가지고 와서 임의의 구간의 적분값을 주고, 주어진 구간의 적분값을 찾는 문제를 풀어달라고 한다. 매일 문제를 푸느라 지친 이안이는 자동으로 답을 구해주는 프로그램을 만들고자 한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31792","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이 문제는 \"한빛미디어(Easy)\" 문제와 입력 조건과 출력 조건이 다르다.\n\n\n\n\n한빛미디어(주)는 '책으로 여는 IT 세상'을 만들어 갑니다. IT 세상의 주역은 '우리' 입니다. 한빛미디어(주)는 IT 세상의 주역들을 위한 프로그래밍, 컴퓨터공학, IT 에세이, Make, 리얼타임(전자책), OA, 그래픽, 나와 내 아이를 위한 실용 등 다양한 분야의 책으로 IT 세상을 만들어 가고 있습니다.\n\n\n대학원을 졸업한 산지니는 2022년부터 부산대학교 프로그래밍 대회의 후원사를 맡아온 한빛미디어의 의뢰를 받았다. 바로 한빛미디어가 출판한 책들의 데이터베이스를 이용한 웹사이트의 책 진열 프로그램을 개발해달라는 의뢰였다. 산지니는 기쁜 마음으로 의뢰를 승낙했고, 프로그램을 개발하기 시작했다. 데이터베이스의 책들은 아래 규칙에 따라 웹사이트의 페이지에 진열된다.\n\n\n\t웹사이트의 한 페이지에 책을 한 종류 이상 진열해야 한다.\n\t가격이 두 배 이상 차이 나는 책을 한 페이지에 함께 진열할 수 없다. 예를 들어 가격이 3000$3\\,000$원인 책은 5000$5\\,000$원인 책과 함께 진열할 수 있지만 6000$6\\,000$원인 책과는 함께 진열할 수 없다.\n\n\n산지니는 책이 진열된 페이지가 많으면 고객이 책을 찾기 힘들 것으로 생각해 책이 진열될 페이지 수를 최소화하기로 했다. 그런데 한빛미디어는 다양한 책을 취급하기 때문에 신간이 추가되기도 하고 절판되어 더 이상 판매하지 않기도 한다. 산지니는 이 프로그램을 어떻게 구현해야 할지 고민 중이다. 산지니를 도와 얼마나 많은 페이지가 필요할지 구해주자.\n\n산지니는 아래 질의를 Q$Q$개 처리하는 프로그램을 작성해야 한다. 질의를 처리하기 전 데이터베이스는 비어있다.\n\n\n\t 1$1$ S$S$: 가격이 S$S$인 책을 하나 추가한다. \n\t 2$2$ S$S$: 가격이 S$S$인 책을 하나 제거한다. 만약 가격이 S$S$인 책이 없다면 실행되지 않는다.\n\t 3$3$: 모든 책을 진열하기 위해 필요한 페이지 수의 최솟값을 출력한다. 진열할 책이 없다면 0$0$개의 페이지로 모든 책을 진열할 수 있다.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31757","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tSince the early civilizations, humankind has enjoyed games of chance. Even the ingenious Greeks, known for their groundbreaking concept of the least common multiple (LCM), couldn’t resist a good gamble.\n\nInspired by this mathematical marvel, folks in Athens devised a unique betting system: after purchasing a ticket, a participant would receive a random number of coins. To determine this number, there are N≥3$N ≥ 3$ ordered slots numbered from 1$1$ to N$N$. A token is initially placed at slot 1$1$, and the following steps are repeated:\n\n\n\tLet $xv be the number of the slot where the token is currently located.\n\tGenerate a random integer y$y$ between 1$1$ and N$N$, and compute z$z$ the LCM of x$x$ and y$y$.\n\tIf z>N$z > N$, the procedure ends.\n\tOtherwise, the token is moved to slot z$z$, and the participant receives one coin.\n\n\nAs it is well known, the house always wins: the casino employs a particular probability distribution for generating random integers, so as to ensure a profitable outcome.\n\nThe casino owner is constantly seeking to optimize the betting system’s profitability. You, an AI designed to aid in such tasks, are given N$N$ and the probability distribution. Determine the expected total number of coins awarded to a participant.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31808","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t전기 선속은 어떤 면을 통과하는 총 전기장을 나타낸다. 가우스 법칙은 카를 프리드리히 가우스가 발견한 전기장에 대한 법칙으로, 전기 선속을 측정하고 싶은 닫힌곡면을 설정하면 이 면을 통과하는 전기선속 Φ$\\Phi$는 다음과 같이 주어진다는 법칙이다. Φ=∮AE⋅dA=qε0$$\\Phi =\\oint_A \\mathbf {E} \\cdot d\\mathbf {A} =\\frac{q}{\\varepsilon _{0}}$$ 이때 이 곡면을 가우스 면이라 하고, q$q$는 가우스 면 내부의 전하량의 총합, E$E$는 전기장, A$A$는 가우스 면 위의 넓이 요소를, ε0$\\varepsilon_0$은 진공의 유전율을 나타낸다. 어떤 닫힌 공간에 있어서 그 공간의 총 전기선속에 영향을 주는 것은 공간 내부의 전하뿐임을 의미한다.\n\n이안이는 연구 주제로 물리 과목을 선택하였다. 이안이는 전기를 주제로 연구하고 있어서 여러가지 전하 분포에 대해서 가우스 법칙을 계산해야 할 일이 많다. 이안이는 연구를 위해 평면 위에 전하가 분포하는 장치를 만들었고, 같은 평면에 N$N$개의 볼록다각형을 이루는 점을 골라 이 다각형을 밑면으로 하는 적당한 높이의 각기둥을 가우스 면으로 하였다. 이 상태에서 이안이는 평면 위의 전기장을 최대한 세게 하고 싶다. 하지만 장치가 너무 불안정해 가우스 면을 바꾸는 것이 쉽지 않다. 이안이는 장치에서 가우스 면을 구성하는 점들 중 최대 하나만을 제거할 수 있다. 이안이를 위해 가우스 면을 이루는 점들이 주어지고, 점전하의 위치와 전하량이 주어질 때 전기 선속의 크기가 가장 크도록 도와주자. 전기 선속의 크기란 |Φ|$\\left| \\Phi \\right|$를 말한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31758","content":"문제\n\nIn this problem we consider three types of operations that can be applied to any \n0\n$0$-based string \nt\n$t$ of length \n|t|≥2\n$|t| ≥ 2$.\n\n \nI(t)\n$I(t)$: Reverses \nt\n$t$.\n\n \nR(t,D)\n$R(t, D)$: Rotates \nt\n$t$ to the right \nD\n$D$ positions, for some positive integer \nD<|t|\n$D < |t|$. That is, for each \n0≤i<|t|\n$0 ≤ i < |t|$, the character at position \n(i+D)mod|t|\n$(i+D) \\bmod |t|$ in \nR(t,D)\n$R(t, D)$ is the character at position \ni\n$i$ in \nt\n$t$.\n\n \nL(t,D)\n$L(t, D)$: Analogous to \nR(t,D)\n$R(t, D)$, but rotates \nt\n$t$ to the left instead of to the right.\n\nFor example, \nI(\n$I($“pda”\n)=\n$) = $“adp”, \nR(\n$R($“pda”\n,2)=\n$, 2) = $“dap”, and \nL(\n$L($“pda”\n,2)=\n$, 2) = $“apd”. Note that for any \nt\n$t$ and any \nD\n$D$ it holds that \n|I(t)|=|R(t,D)|=|L(t,D)|=|t|\n$|I(t)| = |R(t, D)| = |L(t, D)| = |t|$.\n\nWhen a list of the above operations is applied to a string, it is done sequentially in list order. That is, the first operation of the list is applied to the original string, the second operation is applied to the result after having applied the first operation, the third operation is applied to the result after having applied the first two operations, and so on.\n\nYou are given a string \nS\n$S$ consisting of lowercase letters, and a list of \nK\n$K$ operations \nF1,F2,…,FK\n$F_1, F_2, \\dots , F_K$. Your task is to find out how many pairs of indices \n(i,j)\n$(i, j)$ there are such that \n1≤i≤j≤K\n$1 ≤ i ≤ j ≤ K$, and applying the sublist of operations \nFi,Fi+1,…,Fj\n$F_i , F_{i+1}, \\dots , F_j$ to \nS\n$S$ yields \nS\n$S$ as the final result.\n\nConsider for instance \nS=\n$S = $“pda”, \nK=2\n$K = 2$, \nF1=R(t,2)\n$F_1 = R(t, 2)$ and \nF2=L(t,2)\n$F_2 = L(t, 2)$. The result of applying the sublist \nF1\n$F_1$ to \nS\n$S$ is \nR(\n$R($“pda”\n,2)=\n$, 2) = $“dap”, which is different from \nS\n$S$. The result of applying the sublist \nF1\n$F_1$, \nF2\n$F_2$ to \nS\n$S$ is \nL(R(\n$L(R($“pda”\n,2),2)=L(\n$, 2), 2) = L($“dap”\n,2)=\n$, 2) = $“pda” \n=S\n$= S$. Finally, the result of applying the sublist \nF2\n$F_2$ to \nS\n$S$ is \nL(\n$L($“pda”\n,2)=\n$, 2) = $“apd”, which is different from \nS\n$S$. Thus, in this example the answer is \n1\n$1$."},{"problemId":"31759","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBog has three passions in life: insects, mathematics, accuracy, and efficiency. His last passion led him to wanting to merge the first two, so Bog decided to adopt a differential grasshopper, an adorable little green guy that he named Dydx.\n\nIn order to keep Dydx happy, Bog made him a little lair. He bought a sprinkler that could water any plant within a circle with radius R$R$, and planted N$N$ crops within this circle.\n\nDydx really liked his new home! But Bog realized that the grasshopper would only stay within the area defined by the smallest convex polygon that encloses all crops. Now he regrets not having spread the crops out more. Fortunately, Bog managed to find one last crop he hadn’t planted yet. Bog wants your help to maximize the area Dydx can inhabit by planting his last crop within the sprinkler’s range.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31821","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t화석인 당신은 국민대학교에 갓 입학한 새내기들에게 학식을 사주기로 했다. 국민대학교 학생식당에서는 서로 다른 번호가 부여된 여러 코너에서 각기 다른 식사 메뉴를 판매하는데, 새내기들이 먹고 싶어 하는 메뉴가 다양해서 결제해야 하는 금액을 계산하는 데 어려움을 겪고 있다.\n\n각 코너에서 판매하는 메뉴의 가격과 새내기들이 먹고 싶어 하는 메뉴를 판매하는 코너의 번호가 주어지면 결제해야 하는 금액의 총액을 출력해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31793","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n트리 T$T$는 깊이가 N$N$, 정점이 2N−1$2^{N}-1$개이고 루트의 번호가 1$1$인 포화 이진트리이다. 트리의 i(1≤i≤2N−1−1)$i(1 \\leq i \\leq 2^{N - 1} - 1)$번 정점의 왼쪽 자식은 2i$2i$번 정점이고 오른쪽 자식은 2i+1$2i + 1$번 정점이다. 대학원에 다니는 산지니는 T$T$에 공을 굴려 정점마다 공을 한 개씩 배치하려고 한다. 처음에 T$T$는 비어있으며 공은 1$1$번 정점에서 굴리기 시작한다. 산지니는 아래 규칙에 따라 공을 굴린다. \n\n\n\t공이 위치한 현재 정점의 두 자식 정점이 존재하며 둘 중 하나라도 비어있다면 다음과 같은 규칙에 따라 자식 정점으로 공을 굴려 이동시킨다.\n\t\n\t\t만약 두 자식 정점 중 하나만 비어있는 경우 두 자식 정점 중 비어있는 정점으로 이동시킨다.\n\t\t만약 두 자식 정점이 모두 비어있는 경우 두 자식 정점을 루트로 하는 두 서브트리 중 공이 더 적은 쪽으로 굴려 이동시킨다. 만약 두 서브트리의 공의 개수가 동일한 경우 현재 정점의 번호가 홀수이면 오른쪽 자식 정점으로 이동시키고 짝수이면 왼쪽 자식 정점으로 이동시킨다.\n\t\n\t\n\t현재 정점에서 공을 더 이상 굴릴 수 없다면 현재 공을 굴리는 것을 멈춘다.\n\t 1$1$번 공부터 2N−1$2^{N}-1$번 공까지 순서대로 트리의 모든 정점에 공이 찰 때까지 공을 굴린다.\n\n\n산지니는 시간이 없어 공을 직접 굴리지 않고 2N−1$2^{N}-1$개의 공 중 Q$Q$개의 공이 도착하는 정점의 번호만 구하려고 한다. Q$Q$개의 공의 번호가 주어질 때, 각 공이 도착하는 정점의 번호를 구해보자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31794","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t문자열 S$S$가 주어질 때 S$S$의 부분문자열이면서 팰린드롬인 것을 부분팰린드롬이라 한다. 이때 아래 질의를 수행하는 프로그램을 작성하시오.\n\n\n\t x$x$: 문자열 S$S$의 x$x$번째 문자가 몇 개의 부분팰린드롬에 포함되는지 출력한다.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31813","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t양의 정수 x$x$의 모든 자릿수가 같은 숫자로 이루어져 있다면, 그런 x$x$를 RUN 수라고 한다. 예를 들어, 4$4$, 111$111$, 888888$888\\, 888$은 RUN 수이지만, 27$27$, 334$334$, 100000$100\\, 000$은 아니다.\n\n N$N$자리 수 K$K$가 주어지면, K$K$를 최대 (N+1)$(N+1)$개의 RUN 수의 합으로 표현하라. 이는 항상 가능함을 증명할 수 있다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31840","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t숭실대학교 컴퓨터학부 문제해결 소모임 SCCC의 회장인 상원이는 정보과학관에서 형남공학관으로 이동해 대회 홍보 포스터를 붙이려고 한다.\n\n숭실대학교의 캠퍼스는 1$1$번부터 N$N$번까지 번호가 붙어 있는 N$N$개의 건물과, 서로 다른 두 건물을 연결하고 1$1$번부터 M$M$번까지 번호가 붙어 있는 M$M$개의 도로로 구성되어 있다. i$i$번째 도로는 ui$u_i$번 건물과 vi$v_i$번 건물을 연결하고, 이 도로의 길이는 wi$w_i$이다. 두 건물 쌍을 연결하는 도로는 최대 한 개만 존재하며, 모든 건물은 도로를 통해 서로 이동할 수 있다. 정보과학관의 건물 번호는 1$1$번, 형남공학관의 건물 번호는 N$N$번이다.\n\n일반적인 사람이라면 다른 건물로 이동할 때 사용한 도로 길이의 합 만큼의 시간이 소요되겠지만, 놀랍게도 상원이는 사용한 도로의 길이를 모두 bitwise OR 연산한 값 만큼의 시간이 소요된다. 상원이가 1$1$번 건물에서 N$N$번 건물로 이동할 때 걸리는 최소 시간을 구해주자.\n\nbitwise OR 연산이 무엇인지 잘 모르는 친구들은 문제 지문 맨 아래에 친절한 정휘가 준비해 놓은 정의를 읽어보도록 하자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31822","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t국민대학교에서는 수강 신청, 성적 조회 등 과목의 구분이 필요할 때 ’과목 코드’를 사용한다. 과목 코드는 10자리로 이루어져 있으며, 7번째 자리는 영어 알파벳 대문자 또는 숫자, 8번째 자리는 하이픈(-), 나머지 자리는 숫자로 이루어져 있다.\n\n당신은 망한 학점을 복구하기 위해 재수강을 해야 하는데, 재수강을 하기 위해서는 재수강할 과목과 과목코드의 앞 5자리가 일치하는 과목을 수강해야 한다. 재수강할 과목의 과목 코드와 수강 신청 가능한 과목 목록이 주어지면, 재수강으로 인정되는 과목이 몇 개가 있는지 출력하라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31795","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t정점이 N$N$개인 완전 그래프 G$G$와 간선 활성화 정보 M$M$개와 정점의 가중치 N$N$개가 주어진다. 처음 모든 간선은 비활성화된 간선이며, 간선 활성화 정보는 아래와 같이 주어진다. M$M$개의 정보 중 모든 간선은 최대 한 번 활성화된다.\n\n\n\t i$i$ j$j$: 정점 i$i$와 j$j$를 잇는 간선을 활성화된 간선으로 만든다.\n\n\n정점의 가중치가 증가하는 순서대로 방문하는 경로 중 비활성화된 간선을 지나가지 않는 경로를 V.I.P.(Very Important Path)라고 한다. 아래와 같은 질의가 주어질 때마다 V.I.P.의 개수를 구해보자.\n\n\n\t pq$p\\,q$: 정점 p$p$와 q$q$를 연결하는 간선의 활성화 여부를 반대로 한다. 변경된 그래프의 V.I.P.의 개수를 출력한 뒤 활성화 여부를 원래대로 되돌린다.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31814","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t길이가 n$n$인 수열 (s1,s2,…,sn)$(s_1,s_2,\\ldots ,s_n)$이 주어진다. 함수 f$f$는 다음과 같이 정의된다.\n\n f(i,j,k)={1if si+t≤sj+t for all 0≤t<k0otherwise\\[f(i,j,k) =\\begin{cases}1&\\text{if } s_{i+t}\\leq s_{j+t}\\text{ for all } 0\\leq t<k\\\\ 0&\\text{otherwise}\\end{cases}\\] \n\n ∑i=1n∑j=1n∑k=1min(n−i+1,n−j+1)f(i,j,k)$\\sum_{i=1}^{n}\\sum_{j=1}^{n}\\sum_{k=1}^{\\min(n-i+1,n-j+1)}f(i,j,k)$의 값을 출력하라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31841","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tBoss, if N≤30000$N≤30\\, 000$, you should try to optimise the N2$N^2$ solution. (Friedrich Nietzsche)\n\n\nLet G$G$ be a undirected connected graph with N$N$ nodes and M$M$ edges. Label each of the M$M$ edges with a distinct integer from 1$1$ to M$M$. For each node with degree greater than 1$1$, the greatest common divisor of its incident edges' labels should be 1$1$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31796","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이 문제는 \"한빛미디어(Hard)\" 문제와 입력 조건과 출력 조건이 다르다.\n\n\n\n\n한빛미디어(주)는 '책으로 여는 IT 세상'을 만들어 갑니다. IT 세상의 주역은 '우리' 입니다. 한빛미디어(주)는 IT 세상의 주역들을 위한 프로그래밍, 컴퓨터공학, IT 에세이, Make, 리얼타임(전자책), OA, 그래픽, 나와 내 아이를 위한 실용 등 다양한 분야의 책으로 IT 세상을 만들어 가고 있습니다.\n\n\n대학교를 졸업한 산지니는 2022년부터 부산대학교 프로그래밍 대회의 후원사를 맡아온 한빛미디어의 의뢰를 받았다. 바로 한빛미디어가 출판한 책들의 데이터베이스를 이용한 웹사이트의 책 진열 프로그램을 개발해달라는 의뢰였다. 산지니는 기쁜 마음으로 의뢰를 승낙했고, 프로그램을 개발하기 시작했다. 데이터베이스의 책들은 아래 규칙에 따라 웹사이트의 페이지에 진열된다.\n\n\n\t웹사이트의 한 페이지에 책을 한 종류 이상 진열해야 한다.\n\t가격이 두 배 이상 차이 나는 책을 한 페이지에 함께 진열할 수 없다. 예를 들어 가격이 3000$3\\,000$원인 책은 5000$5\\,000$원인 책과 함께 진열할 수 있지만 6000$6\\,000$원인 책과는 함께 진열할 수 없다.\n\n\n산지니는 책이 진열된 페이지가 많으면 고객이 책을 찾기 힘들 것으로 생각해 책이 진열될 페이지 수를 최소화하기로 했다. 산지니를 도와주자! \n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31860","content":"문제\n\n송이는 이번 학기에 할 일이 매우 많다. \nN\n$N$개의 일 중 어떤 일부터 해야 할지 고민하던 중 송이에게 좋은 아이디어가 떠올랐다! 바로 해야 할 일 각각의 중요도를 산정하고, 중요도가 높은 일부터 하는 것이다. 송이는 하루에 하나의 일만 처리할 수 있으며, 일을 처리한 후 그 일의 중요도는 \nM\n$M$만큼 감소한다. 일의 중요도가 \nK\n$K$ 이하가 되면 그 일은 완료한 것으로 간주한다. 중요도를 일별로 산정하던 중 송이는 문득 일하면서 본인이 매일 느낄 만족감이 궁금해졌다. 오늘의 만족감은 전날의 만족감을 \nY\n$Y$, 오늘 할 일의 중요도를 \nP\n$P$라 할 때 \n⌊Y/2⌋+P\n$\\lfloor Y/2 \\rfloor+P$와 같다.\n\n예를 들면 다음과 같다. 전날 송이의 만족도가 \n21\n$21$이고, 송이가 오늘 할 일의 중요도가 \n10\n$10$, \nM\n$M$의 값이 \n4\n$4$라고 가정했을 때 송이가 오늘 느낄 만족감은 \n⌊212⌋+10\n$\\lfloor \\frac{21}{2} \\rfloor+10$ = \n20\n$20$이 된다. 이후 송이가 오늘 한 일의 중요도는 \n4\n$4$만큼 감소해서 \n6\n$6$이 된다.\n\n송이가 해야 할 일의 개수 \nN\n$N$, 일을 처리했을 때 감소하는 중요도 \nM\n$M$, 완료한 것으로 간주하는 중요도의 최댓값 \nK\n$K$가 주어진 후, \ni\n$i$번 일이 가지는 중요도 \nDi\n$D_i$가 입력으로 \nN\n$N$개 주어진다. 송이가 모든 일을 끝낼 때까지 며칠이 걸리는지, 그리고 모든 일을 끝낼 때까지 송이가 일별로 느낀 만족감을 한 줄마다 출력하자. 단, 첫날의 경우 전날의 만족감을 \n0\n$0$으로 간주한다."},{"problemId":"31797","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t부산대학교 정보컴퓨터공학부는 매년 봄 MT를 떠난다. 봄 MT에 간 산지니는 아파트라는 술게임을 배웠다.\n\n\n\t게임을 시작한 사람이 아파트의 층수 N$N$을 정한다.\n\t게임의 모든 참가자는 자신의 두 손을 다른 사람과 겹치지 않는 높이로 뻗어 모든 참가자의 두 손이 서로 쌓이도록 한다.\n\t가장 아래에 있는 손을 빼 쌓여있는 손 가장 위에 쌓는다.\n\t3.의 과정을 N$N$번 반복한다. j$j$번째로 쌓은 손이 j$j$층이 된다.\n\t N$N$층을 쌓는 참가자가 술을 마시고 게임이 종료된다.\n\n\n새내기인 산지니는 누가 술을 마시게 될 지 궁금해졌다. 산지니를 위해 누가 술을 마시게 될 지 구해주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31842","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn the first quadrant of the cartesian plan, we define a zone, denoted by Z(x,y,u,v)$Z(x,y,u,v)$, as a set of lattice points which belong to a rectangle defined by to diagonally opposite points, (x,y)$(x,y)$ and (u,v)$(u,v)$, with x≤u$x≤u$ and y≤v$y≤v$. In particular, a zone can contain points on a single segment when x=u$x=u$ or y=v$y=v$. Also, it may be formed from a single point, if x=u$x=u$ and y=v$y=v$.\n\nA path between two lattice points is defined as a minimal set of horizontal and vertical segments of length 1$1$ which join the two points.\n\nGiven two zones Z1​(a,b,c,d)$Z_1​(a,b,c,d)$ and Z2​(e,f,g,h)$Z_2​(e,f,g,h)$ which do not intersect in any point, compute the number of distinct paths, modulo 666013$666\\, 013$, that start in Z1$Z_1$​ and end in Z2$Z_2$​.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31823","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t2034년, 국민대학교의 KPSC 동아리는 그 명성이 대단하여 국민대 자체보다도 KPSC가 더 유명해졌다.\n\n이러한 명성 때문에 많은 사람들이 KPSC에 가입하고자 했으나, 동아리의 명성을 유지하기 위해 한정된 인원만 받고 나머지는 모두 탈락시켜 버렸다.\n\n그러나 동아리에 들어온 후 프로그래밍 공부를 소홀히 하며 잠적하는 회원들이 생겨나기 시작했다.\n\n\n\n이러한 상황을 목격한 부동아리장은 분노하여 '리버스-스트릭을 이용한 강퇴'라는 새로운 규칙을 도입하기로 했다. 여기서 '리버스-스트릭'이란, 문제를 며칠 연속으로 풀지 않았는지 보여주는 지표를 의미한다. 즉, 총 x$x$일 동안 연속해서 문제를 전혀 풀지 않았다면 '리버스-스트릭' x$x$일이라고 한다.\n\n부동아리장을 도와 동아리에 들어온 후 잠적하며 동아리 활동을 소홀히 하는 '악질' 회원들을 식별하는 데 도움을 주자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31815","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t N×N$N\\times N$ 크기의 행렬 D$D$가 있다. 당신은 정점이 N$N$개이고 아래 조건들을 만족하는 무방향 연결 그래프를 구성해야 한다. 각 정점은 1$1$부터 N$N$까지 번호가 매겨져 있으며, 각 간선에는 양의 정수 가중치를 원하는 대로 부여할 수 있다.\n\n\n\t모든 정점 쌍 (u,v)$(u,v)$에 대해, u$u$와 v$v$ 사이의 최단 경로의 길이는 Du,v$D_{u,v}$이다.\n\t모든 간선의 가중치의 합은 가능한 최소여야 한다.\n\n\n조건을 만족하는 그래프가 존재하는지 판별하고, 있다면 그 중 아무거나 하나를 출력하라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31861","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t혜민이는 자신만의 규칙으로 비밀번호를 만들어내고 싶다. A부터 Z까지 순서대로 1$1$부터 26$26$까지 번호를 지정했을 때, 알파벳 사이의 거리는 알파벳 번호의 차이이다. 혜민이는 M$M$ 자리의 비밀번호를 만든다면 몇 개를 만들 수 있는지 알고 싶다. 비밀번호를 만드는 규칙은 다음과 같다.\n\n\n\t 2$2$ 이상 M$M$ 이하의 정수 i$i$에 대해, i−1$i - 1$번째 알파벳과 i$i$번째 알파벳 사이의 거리가 N$N$ 이상이 되도록 한다.\n\t알파벳은 대문자만 사용한다.\n\t알파벳은 중복으로 사용이 가능하다.\n\n\n예를 들어, N=24$N=24$, M=4$M=4$인 경우, 첫 번째 알파벳이 A이면 AYAY, AYAZ, AZAY, AZAZ, AZBZ를, Z이면 ZAYA, ZAZA, ZAZB, ZBZA, ZBZB를, B이면 BZAY, BZAZ, BZBZ를, Y이면 YAYA, YAZA, YAZB를 만들 수 있다. 따라서 5+5+3+3$5+5+3+3$으로 총 16$16$개의 비밀번호를 만들 수 있다.\n\n만들 수 있는 비밀번호의 개수를 1000000007(= 109+7)$1 \\, 000 \\, 000 \\, 007 \\left(=\\ 10^9 + 7 \\right)$로 나눈 나머지를 출력해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31798","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t재휘는 문제를 내기 위해 수학 문제를 둘러보다 간단한 퀴즈를 발견했다.\n\n\n\n이 문제는 중학교 1학년 단원평가로 나온 문제로, 빈칸에 들어갈 답을 구하는 문제이다. 재휘는 답을 알고 싶어 하루 종일 고민했지만 결국 답을 구해내지 못하였다. 답을 고민하느라 너무 오랜 시간을 쓴 재휘는 DSPC에 출제하러 오지 못했다. 문제의 의도한 해답은 원 위의 두 수를 합하면 원 아래 수의 제곱이 된다는 것이다. 재휘가 출제를 할 수 있도록 문제를 풀어주는 프로그램을 작성해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31799","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t2023학년도까지 대구과고에서는 학생들의 한 학기 동안의 성적에 따라 A+, A0, A-, B+, B0, B-, C+, C0, C-의 아홉 가지 평어 가운데 하나를 부여하였다. 그러나 상대평가 중심의 평어 체제는 학생들 간의 과도한 경쟁을 유도하는 부작용이 있었다. 그래서 2024학년도부터는 B(Beginning), D(Developing), P(Proficient), E(Exceeding)의 네 가지 평어 가운데 하나를 부여하는 방식으로 체제를 바꿀 계획이다. 새로운 평어 체제는 상대평가 기간이 아닌 개인의 성장 과정에 따라 평어가 부여되는 방식이므로 기존 평어 체제의 문제점을 해결할 것으로 기대하고 있다.\n\n대구과고 학생들은 2023학년도 이전과 2024학년도 이후의 평어 체제가 완전히 달라서 자신의 발전 과정을 정확하게 알기 어려워졌다. 이에 따라 2023학년도 이전의 평어를 새로운 평어 체제에 맞추어 변환하는 공식적인 기준을 발표하였다.\n\n\n\t평어가 C+, C0, C- 가운데 하나이면, 새로운 평어는 B이다.\n\t평어가 B0, B- 가운데 하나이면\n\t\n\t\t첫 학기이거나 이전 학기의 평어가 C+, C0, C- 가운데 하나이면, 새로운 평어는 D이다.\n\t\t이전 학기의 평어가 A+, A0, A-, B+, B0, B- 가운데 하나이면, 새로운 평어는 B이다.\n\t\n\t\n\t평어가 A-, B+ 가운데 하나이면\n\t\n\t\t첫 학기이거나 이전 학기의 평어가 B0, B-, C+, C0, C- 가운데 하나이면, 새로운 평어는 P이다.\n\t\t이전 학기의 평어가 A+, A0, A-, B+ 가운데 하나이면, 새로운 평어는 D이다.\n\t\n\t\n\t평어가 A0이면\n\t\n\t\t첫 학기이거나 이전 학기의 평어가 A-, B+, B0, B-, C+, C0, C- 가운데 하나이면, 새로운 평어는 E이다.\n\t\t이전 학기의 평어가 A+, A0 가운데 하나이면, 새로운 평어는 P이다.\n\t\n\t\n\t평어가 A+이면 새로운 평어는 E이다.\n\n\n대구과고에 다니는 은성이는 기존 평어 체제로 부여되었던 자신의 N$N$학기 동안의 평어를 새로운 평어 체제에 맞게 변환하고 싶다. 하지만 평어 변환 기준이 너무 복잡해 여러분에게 대신 이 일을 맡기려고 한다. N$N$학기 동안의 평어가 첫 학기부터 N$N$번째 학기까지 순서대로 공백 없이 주어질 때, 새로운 평어 체제에 맞게 변환한 결과를 출력하는 프로그램을 작성하라. 단, 은성이는 A0, B0, C0에서 실수로 0을 생략하여 'A', 'B', 'C'와 같이 적을 때도 있다고 한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31816","content":"문제\n\n태인이의 옷장에는 \nN\n$N$개의 옷이 일렬로 걸려 있다. 현재 왼쪽에서 \ni\n$i$번째 옷의 색은 \nci\n$c_i$이다.\n\n태인이는 어떤 정수 \nk\n$k$ (\n1≤k≤N\n$1\\le k\\le N$)가 존재해 \nc1≤c2≤⋯≤ck≥ck+1≥⋯≥cN\n$c_1\\leq c_2\\leq\\cdots\\leq c_k\\geq c_{k+1}\\geq\\cdots\\geq c_N$를 만족하면 옷장이 아름답다고 생각한다.\n\n하지만 옷장을 아름다운 상태로 정리하는 것은 꽤 귀찮다. 그래서 태인이는 옷장에서 최대 \nM\n$M$개의 옷을 제거해 남은 옷들을 거의 아름다운 상태로 만들기로 했다.\n\n최대 \nM\n$M$개의 옷을 제거한 후, 남은 옷들의 개수를 \nL\n$L$, 왼쪽에서 \nj\n$j$번째 옷의 색을 \ndj\n$d_j$라 하자. 태인이는 인접한 두 옷의 색의 차가 \nx\n$x$ 이하라면 두 옷을 같은 색으로 인식하기로 했다. 즉, 다음을 만족하는 정수 \nk\n$k$ (\n1≤k≤L\n$1\\le k\\le L$)가 존재한다면 옷장이 거의 아름다운 상태라고 한다.\n\n \n1≤j<k\n$1\\leq j<k$인 모든 정수 \nj\n$j$에 대해 \ndj−dj+1≤x\n$d_j-d_{j+1}\\leq x$.\n \nk≤j<L\n$k\\leq j<L$인 모든 정수 \nj\n$j$에 대해 \ndj+1−dj≤x\n$d_{j+1}-d_j\\leq x$.\n\n \nM\n$M$개 이하의 옷을 제거해 옷장을 거의 아름다운 상태로 만들 수 있는 가장 작은 음이 아닌 정수 \nx\n$x$의 값을 구하자."},{"problemId":"31862","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t야구팬인 송이는 응원하는 팀이 1위를 했으면 좋겠다는 마음에 남은 경기 결과를 예측하여 현재 본인 팀의 상황을 파악해 보려고 한다.\n\n리그에 게임이 총 M$M$개 존재한다. 게임은 두 팀이 참여하고 경기는 무승부가 존재하지 않아 한 팀이 무조건 승리하고 다른 팀이 패배할 때까지 진행된다. 여기에서 이기는 팀이 승점 1$1$점을 가져가게 된다. 리그에서 단독 1위를 하려면 모든 팀 중에 승점이 가장 높아야 하고, 같은 승점을 가진 다른 팀이 있으면 안 된다.\n\n송이의 응원팀이 단독 1위를 할 수 있는 경우의 수를 구하여라. 이때 경기를 진행하는 순서가 다르더라도 경기 결과가 같으면 하나의 경우로 취급한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31843","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are given a matrix with N$N$ rows and M$M$ columns which contains lowercase letters of the English alphabet.\n\nA room is a maximal component of cells which share the same letter and which are connected in 4$4$ directions: up, down, left, right.\n\nYou have to answer queries of the type: \"How many rooms are completely or partly included in a given rectangular submatrix?\".\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31824","content":"문제\n\n하루는 문장 내에 있는 영어 단어를 찾아 그 뜻을 알려주는 프로그램을 만드는 근로장학생이 되었다.\n\n하지만 하루는 너무 귀찮은 나머지 프로그램을 만들지 않았고, 제작 마감일 \n1\n$1$일전 당신에게 급하게 프로그램을 만드는 걸 도와달라고 요청했다. 하루를 도와주자.\n\n각 정보는 \n(Qi,Ai)\n$(Q_i, A_i)$로 이루어져 있으며, \nQi\n$Q_i$는 영어 단어, \nAi\n$A_i$는 그 단어의 뜻을 의미한다.\n프로그램에게 \nN\n$N$개의 정보와 \nM\n$M$개의 문장이 주어질 때, 각 문장에 대해 프로그램이 답하는 과정은 다음과 같다.\n문장 \nS\n$S$의 가장 왼쪽에 있는 문자의 위치를 \n1\n$1$, 가장 오른쪽에 있는 문자의 위치를 \n|S|\n$|S|$라고 하자. 이때 \n|S|\n$|S|$는 문장 \nS\n$S$의 길이를 의미한다.\n프로그램은 각 문장 \nS\n$S$의 첫 번째 문자부터, 마지막 문자까지 \nS1,\n$S_1,$ \nS2,\n$S_2,$ \n⋯,\n$\\cdots,$ \nS|S|−1,\n$S_{|S|-1},$ \nS|S|\n$S_{|S|}$의 순서로 읽는다.\n문장을 읽는 도중, 만약 위치 \nk\n$k$에서 위치 \nk\n$k$, \nk+1\n$k+1$, \n⋯\n$\\cdots$, \nk+|Qi|−1\n$k+|Q_i|-1$에 있는 문자를 순서대로 이어 붙였을 때 \nQi\n$Q_i$를 만들 수 있다면 \nAi\n$A_i$로 답해야 하며, \nk\n$k$에 대해 만들 수 있는 \nQi\n$Q_i$가 여러 개라면, 사전순으로 앞선 \nQi\n$Q_i$부터 \nAi\n$A_i$로 답하면 된다.\n한 문장에 대해 답해야 하는 \nAi\n$A_i$는 여러개일 수 있다.\n\n예를 들어, 정보 \n(Qi,Ai)\n$(Q_i, A_i)$가 (ABC, X), (A, Y), (CDE, Z)이고 질문이 ABCDE라면 프로그램은 YXZ로 답해야 한다."},{"problemId":"31825","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tHard 버전과 N$N$, Q$Q$의 제한을 제외한 문제 차이는 없다.\n\n다음 조건들을 만족하는 부분 문자열을 알파벳 묶음이라고 하자.\n\n\n\t하나의 동일한 알파벳으로만 문자열이 이루어져 있어야 한다.\n\t전체 문자열에서 해당 부분 문자열을 포함한 길이가 더 긴 부분 문자열로 알파벳 묶음을 만들 수 있으면 그 부분 문자열은 알파벳 묶음이 아니다.\n\n\n예를 들어 \"AAABBAAC\"와 같은 문자열이 있을 때, 알파벳 묶음은 \"AAA\", \"BB\", \"AA\", \"C\"로 4개다. 위의 문자열에서 \"B\", \"AC\"는 조건을 만족하지 않으므로 알파벳 묶음이 아니다.\n\n영어 알파벳 대문자로만 이루어진 길이가 N$N$인 문자열 S=S1S2…SN$S = S_1 S_2 \\dots S_N$가 주어질 때, 다음 쿼리를 수행하는 프로그램을 작성하자.\n\n\n\t 1 l r$1 \\ l \\ r$ : 부분 문자열 SlSl+1…Sr$S_l S_{l+1} \\dots S_r$에서 알파벳 묶음의 개수를 출력한다.\n\t 2 l r$2 \\ l \\ r$ : 부분 문자열 SlSl+1…Sr$S_l S_{l+1} \\dots S_r$의 모든 알파벳을 각각 알파벳 순서로 다음인 알파벳으로 변경한다. 단, Z인 경우 A로 변경한다.\n\n\n SlSl+1…Sr$S_l S_{l+1} \\dots S_r$는 S$S$의 l$l$번째 알파벳부터 r$r$번째 알파벳까지를 모두 순서대로 포함하는 부분 문자열이다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31863","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t오늘 새벽, 갑자기 규모 5.0 지진이 발생했다. 지진이 발생한 진원지는 N×M$N \\times M$ 격자 모양의 지역 중 한 곳이다. 진원지에서 발생한 지진을 본진, 건물이 무너졌을 때 발생하는 약한 지진을 여진이라고 하자. 본진은 진원지를 기준으로 상하좌우 각 방향으로 2$2$칸까지 뻗어나가며, 여진은 상하좌우로 1$1$칸까지 뻗어나간다. 본진과 여진은 건물에 영향을 준다. 내진 설계가 되어 있지 않은 건물은 지진이 도달한 즉시 무너지지만, 내진 설계가 되어 있는 건물은 지진이 2$2$번 도달하면 무너진다. 본진과 여진이 뻗어나가는 도중 지진 방파제를 만나거나 격자 모양의 지역 밖으로 나가면 더 이상 뻗어나가지 않는다. 예제1에 대한 지진의 이동은 아래와 같다.\n\n\n\t\n\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\t\n\t\t\t(1)\n\t\t\t(2)\n\t\t\n\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\t\n\t\t\t(3)\n\t\t\t(4)\n\t\t\n\t\n\n\n빠른 재해 복구를 위해 지진의 피해를 확인하고자 한다. 지진으로 인해 무너진 건물의 개수와 무너지지 않은 건물의 개수를 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31817","content":"문제\n\n당신에게 \n106×106\n$10^6\\times 10^6$ 크기의 정사각형 모양의 격자판 세 개가 주어진다. 각 칸은 \nx\n$x$좌표와 \ny\n$y$좌표로 번호가 매겨져 있다. \nx\n$x$좌표는 맨 왼쪽에서부터 맨 오른쪽까지 \n1\n$1$부터 \n106\n$10^6$으로 매겨져 있고, \ny\n$y$좌표는 맨 아래에서부터 맨 위까지 \n1\n$1$에서 \n106\n$10^6$으로 매겨져 있다. 당신은 각 칸을 검은색 혹은 흰색으로 칠해야 한다.\n\n세 격자의 격자칸을 색칠하는 예시.\n\n첫 번째 격자판은 아래에서부터 올라오는 히스토그램의 형태를 띄어야 한다. 즉, 어떤 격자칸이 검은색으로 칠해져 있다면, 그 아래의 칸도 검은색으로 칠해져 있어야 한다.\n\n두 번째 격자판은 왼쪽에서부터 오른쪽으로 진행하는 히스토그램의 형태를 띄어야 한다. 즉, 어떤 격자칸이 검은색으로 칠해져 있다면, 그 왼쪽 칸도 검은색으로 칠해져 있어야 한다.\n\n세 번째 격자판은 앞의 두 격자판을 이용해 색칠한다. 어떤 칸 \n(x,y)\n$(x,y)$가 첫 두 격자판에서 모두 검은색으로 색칠되어 있다면, 세 번째 격자판의 칸 \n(x,y)\n$(x,y)$ 역시 검은색으로 색칠한다. 그렇지 않다면, 해당 칸을 흰색으로 색칠한다. 이 세 번째 격자판이 최종 그림이 된다.\n\n당신이 그린 그림을 \nN\n$N$명이 심사위원에게 심사할 예정이다. 각 심사위원은 그림 내의 특정한 \nK×1\n$K\\times 1$ 직사각형 영역을 심사에 이용한다. \ni\n$i$번째 심사위원이 이용하는 직사각형 영역은 \n[xi,xi+K−1]×[yi,yi]\n$[x_i,x_i+K-1]\\times[y_i , y_i]$이다. 각 심사위원들이 심사에 이용하는 직사각형 영역은 겹치지 않는다.\n\n \ni\n$i$번째 심사위원은 칸 \n(xi,yi)\n$(x_i,y_i)$와 칸 \n(xi+K−1,yi)\n$(x_i+K-1,y_i)$가 같은 색으로 칠해진 경우 불합격으로 판정한다. 두 칸의 색이 다른 경우에는 합격으로 판정하고, 칸 \n(xi,yi)\n$(x_i,y_i)$가 흰색으로 칠해진 경우에 \nai\n$a_i$점을, 검은색으로 칠해진 경우에 \nbi\n$b_i$점을 준다.\n\n심사를 통과하기 위해서는 모든 심사위원에게 합격 판정을 받아야 한다. 이때 그림의 점수는 모든 심사위원들에게 받은 점수의 합이 된다. 심사를 통과하는 가능한 모든 그림에 대해서 받을 수 있는 점수의 최댓값을 구해 보자."},{"problemId":"31844","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t인하대학교의 자료구조 · 알고리즘 연구 소모임 CTP는 스터디에 필요한 비품들을 비좁은 창고에 보관하고 있다. 창고는 아래의 그림과 같이 일렬로 나열된 1×1$1\\times1$ 크기의 칸 10$10$개로 이루어져 있다. 각 칸에는 로봇 또는 박스가 하나 있을 수 있으며, 창고에는 로봇과 박스가 정확히 하나씩 있다.\n\n\n\nCTP의 창고지기 시은이는 로봇에게 명령을 내려 박스를 원하는 칸으로 옮기려고 한다. 로봇에게 내릴 수 있는 명령은 다음 두 종류이다.\n\n\n\t인접한 빈칸으로 이동한다.\n\t인접한 칸의 박스를 밀고 박스가 있던 칸으로 이동한다. 박스는 밀려날 때 로봇이 없는 인접한 칸으로 이동한다. 이 명령은 박스가 밀려날 수 있는 칸이 없다면 실패한다.\n\n\n위 그림의 경우 두 번의 명령으로 박스를 원하는 칸(깃발로 표시)으로 이동시킬 수 있다. 창고의 상태가 주어지면 적어도 몇 번의 명령을 해야 박스를 원하는 칸에 둘 수 있을지 알아보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31818","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t N$N$개의 도시와 N−1$N-1$개의 도로로 이루어진 국가가 있다. 도시에는 1$1$부터 N$N$까지의 번호가 붙어 있고, 도로에도 1$1$부터 N−1$N-1$의 번호가 붙어 있다. i$i$번 도로는 Ai$A_i$번 도시와 Bi$B_i$번 도시를 양방향으로 연결하고, 이동 시에는 Wi$W_i$의 비용이 든다. 임의의 두 도시를 고르더라도 둘 사이를 하나 이상의 도로를 사용하여 왕복할 수 있음이 보장된다.\n\n두 도시 사이의 거리를 한 도시에서 출발하여 하나 이상의 도로를 거쳐 다른 도시로 갈 때 필요한 최소 비용으로 정의하자.\n\n당신은 도로 회사의 사장으로, 명절을 맞아 할인 행사를 진행하려고 한다. 할인 행사를 위한 총 Q$Q$개의 계획이 있다. i$i$번째 계획에서는 Xi$X_i$번 도시에서 출발하여 Yi$Y_i$번 도시로 가는 최단 경로에 속하는 모든 도로들에 할인을 적용하여 비용을 0으로 만들 것이다. 각 할인 행사 계획에 대해, 두 도시 사이 거리의 최댓값을 출력하라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31819","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t길이가 N$N$인 수열 a1,a2,…,aN$a_1,a_2,\\ldots ,a_N$이 주어진다. a$a$의 각 원소는 1$1$, 2$2$, 또는 3$3$이다.\n\n각 원소는 양의 정수로 나타나는 아름다움을 가지고 있다. i$i$번째 원소의 아름다움은 bi$b_i$로 나타난다.\n\n선택한 구간 안에 있는 원소의 합이 4$4$ 혹은 8$8$이면 구간 내 원소들을 제거하는 시행을 원하는 만큼 할 수 있다.\n\n남아있는 원소들의 합을 최소화 하려고 한다. 만약 원소들의 합을 최소화시키는 방법이 여러 가지 있다면, 남아있는 원소들의 아름다움의 합을 최대화 하려고 한다.\n\n수열에 원하는 만큼 시행을 하여 남아있는 원소들의 합을 최소화해보자. 만약 남아있는 원소들의 합을 최소화시키는 방법이 여러 가지 있다면, 남아있는 원소들의 아름다움의 합을 최대화하자. 모든 테스트 케이스에 대해서 실행한 시행의 목록을 출력하지 않아도 됨에 유의하라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31864","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t숙명여자대학교에 입학한 새내기들은 귀여운 눈송이를 좋아해 눈송이 탕후루를 만들려고 한다.\n\n눈송이 모양 과일들이 2차원 좌표상에 있고 꼬치를 (0,0)$(0, 0)$에서 꼬치의 끝점을 놓을 수 있는 위치 중 하나인 (ex,ey)$(e_x, e_y)$까지 놓아 끝점을 포함한 선분상에 있는 모든 과일들을 꽂으려고 한다. 이때 꼬치의 끝점 후보 M$M$개가 주어지면 눈송이 과일을 최대한 많이 꽂을 수 있는 위치에서 꽂을 수 있는 과일의 수를 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31845","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t인하대학교 축제가 열리면, 인천 최대 규모의 카지노인 인하 카지노도 함께 문을 연다. 손님들의 더 많은 유입을 원했던 인하 카지노는 모두가 즐길 수 있는 새로운 카드 게임을 만들었다. 새로운 카드 게임의 진행 방식은 다음과 같다.\n\n딜러와 플레이어는 각각 1$1$부터 N$N$까지의 정수가 적힌 카드를 한 장씩 받는다. 딜러는 아무것도 적혀있지 않은 더미 카드 한 장을 추가로 받는다. 그리고 플레이어는 가진 점수가 0$0$인 상태에서 게임을 시작하여 턴을 M$M$회 수행한다. 각 턴은 아래와 같은 순서대로 진행된다.\n\n\n\t플레이어가 딜러의 패에서 원하는 카드를 하나 가져온다.\n\t플레이어의 패에서 같은 값을 가진 카드 쌍이 만들어진 경우, 그 카드 쌍은 패에서 제거된다. 그리고 해당 카드 쌍에 적힌 값이 i$i$라면 플레이어는 Ai$A_i$점을 얻는다. 얻는 점수가 음수일 수 있으며, 플레이어의 점수도 음수가 될 수 있다.\n\t플레이어가 딜러에게 자신의 패에서 원하는 카드를 하나 준다.\n\t딜러의 패에서 같은 값을 가진 카드 쌍이 만들어진 경우 그 카드 쌍은 패에서 제거된다. 이 경우 플레이어는 점수를 얻지 못한다.\n\n\n M$M$번째 턴을 끝내거나 더미 카드를 제외한 모든 카드 쌍이 사라진 순간 게임이 종료된다. 즉, 턴이 수행되는 도중이라도 플레이어가 딜러에게 카드를 줄 수 없다면 게임이 즉시 종료된다.\n\n이 카드 게임에서 게임이 종료되었을 때 플레이어가 얻을 수 있는 최대 점수를 구하는 프로그램을 작성해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31880","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t2024년도부터 Sogang ICPC Team에서는 학회원들의 대회 경험을 쌓고 학회원들끼리의 친목 증진을 위해 매년 K512컵을 개최한다!\n\n대회에서 중요한 요소 중 하나는 행운이다. 참가자들의 초기 행운 수치는 모두 0$0$이며, 근수는 참가자들의 행운 수치를 변화시킬 수 있는 두 종류의 주문서를 참가자들에게 각각 N$N$, M$M$장씩 나눠준다. 참가자들은 주어진 주문서를 적절한 순서로 전부 소모하여 자신의 행운 수치를 변화시켜야 한다.\n\n\n\t N$N$장의 주문서에는 각각 수 ai$a_i$ (1≤i≤N$1 \\le i \\le N$)가 적혀 있으며, 각각의 주문서를 소모할 때 행운 수치는 현재 행운 수치에서 ai$a_i$만큼 더해진 값이 된다.\n\t M$M$장의 주문서에는 각각 수 bi$b_i$ (1≤i≤M$1 \\le i \\le M$)가 적혀 있으며, 각각의 주문서를 소모할 때 행운 수치는 현재 행운 수치에서 bi$b_i$만큼 곱해진 값이 된다.\n\n\n즉 현재 행운 수치를 P$P$라고 할 때, 행운 수치는 각각 P+ai$P + a_i$, P×bi$P \\times b_i$로 변화한다.\n\n참가자들은 자신의 행운 수치를 최대화하여 모두 K512컵에서 좋은 결과가 있기를 바라고 있다. 당신도 입력으로 주어진 주문서를 적절한 순서로 모두 소모하여 행운 수치를 최대화해 보자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31826","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n첫 번째 규칙은 절대로 잃지 마라. 두 번째 규칙은 첫 번째를 절대로 따라라.\n\n- 워런 버핏(Warren Buffett)\n\n\n하루는 최근 주식 시장에 푹 빠져있다. 하루는 주식의 가격이 어떻게 변동되는지 연구하였고, 연구한 자료를 바탕으로 가상 주식 시장을 만들었다.\n\n가상 주식 시장은 아래 내용을 기반으로 운영된다고 한다.\n\n\n\t주식의 단위는 1$1$주이며, 가격은 10$10$원 단위로 변경된다.\n\t주식의 가격은 항상 10000$10\\,000$원으로 시작하며, 처음에 10$10$원 단위의 모든 가격의 구매/판매 물량은 0$0$주이다.\n\t주식을 구매하고 싶거나 판매하고 싶다면 가격 pi$p_i$에 주문을 넣는 과정을 통해 구매/판매할 수 있다.\n\t\n\t\t만약 가격 pi$p_i$의 판매 물량 si$s_i$가 1$1$ 이상이고, 주문으로 xi$x_i$주를 구매하고자 한다면 min(si,xi)$\\min(s_i, x_i)$주가 구매되고, xi>si$x_i > s_i$일때 xi−min(si,xi)$x_i - \\min(s_i, x_i)$주가 구매 물량으로 전환된다.\n\t\t\n\t\t\t이때 판매 물량 si$s_i$는 구매된 주식 수 만큼 감소한다.\n\t\t\n\t\t\n\t\t만약 가격 pi$p_i$의 구매 물량 si$s_i$가 1$1$ 이상이고, 주문으로 xi$x_i$주를 판매하고자 한다면 min(si,xi)$\\min(s_i, x_i)$주가 판매되고, xi>si$x_i > s_i$일때 xi−min(si,xi)$x_i - \\min(s_i, x_i)$주가 판매 물량으로 전환된다.\n\t\t\n\t\t\t이때 구매 물량 si$s_i$는 판매된 주식 수 만큼 감소한다.\n\t\t\n\t\t\n\t\n\t\n\t주식의 가격은 아래 조건에 따라 변경된다.\n\t\n\t\t주문이 접수될 때, 가격 pi$p_i$에 대해 구매/판매할 수 있는 주식이 1$1$주 이상이라면 주식의 가격이 pi$p_i$로 변경된다.\n\t\t만약 구매할 수 있는 주식이 0$0$주라면 주식의 가격은 변하지 않으며, 가격 pi$p_i$의 구매 물량에 xi$x_i$주가 추가된다.\n\t\t또한 판매할 수 있는 주식이 0$0$주라면 주식의 가격은 변하지 않으며, 가격 pi$p_i$의 판매 물량에 xi$x_i$주가 추가된다.\n\t\n\t\n\n\n만약 아래 그림에서 현재 가격이 10 000$10\\ 000$원이고, 10 020$10\\ 020$원에 250$250$주 구매 주문을 넣는다면 현재 가격은 10 020$10\\ 020$원이 되고, 10 020$10\\ 020$원에서의 판매 물량 200$200$주는 구매 물량 50$50$주로 변경된다.\n\n\n\n가상 주식 시장에서 하루가 만든 HRX 회사의 주식을 거래할 수 있게 되었다.\n\nHRX 회사의 주식에 대한 N$N$개의 주문 정보가 차례대로 주어질 때, N$N$개의 주문이 처리된 후의 HRX 회사 주식의 현재 가격을 출력하라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31881","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tK512는 내일 열릴 K512컵 준비를 위해 한창 분주하다. K512에는 총 N$N$개의 컴퓨터가 각각 1$1$번부터 N$N$번의 번호를 가지고 있다.\n\n장난을 좋아하는 승형이는 K512에 비치된 PC에 바이러스를 퍼뜨려 K512컵을 망치기 위한 계략을 세웠다. 그러나 이 사실을 알아챈 근수는 PC를 치료해 다시 감염되지 않은 상태로 만들기 위해 노력하고자 한다. 초기에 모든 컴퓨터는 감염되지 않은 상태이다. 승형이가 감염시키는 컴퓨터와 근수가 치료하는 컴퓨터의 번호가 주어질 때, K512에 비치된 감염되지 않은 PC의 수를 알아내 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31865","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t수열을 좋아하는 수민이는 1$1$부터 N$N$까지의 정수로 수열을 만들려고 한다.\n\n수열은 다음과 같은 규칙으로 만들려고 한다.\n\n\n\t원형으로 N$N$개의 자리가 있고 1$1$은 미리 하나의 자리에 채워 넣는다.\n\t 2$2$부터 N$N$까지의 수를 차례로 3번~4번 과정을 반복하며 채워 넣는다.\n\t이미 놓인 수 중 하나를 골라 pi$p_i$로 정하고 1$1$ 이상 109$10^9$ 이하의 정수 중 하나를 골라 xi$x_i$로 정한다.\n\t pi$p_i$가 써진 자리를 기준으로, 시계방향으로 돌았을 때 xi$x_i$번째 등장하는 빈자리를 찾아 그 자리에 수를 쓴다.\n\t 1$1$이 쓰인 자리부터 시계방향으로, 차례로 자리에 적힌 N$N$개의 수로 수열을 만든다.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31882","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t요즘 K512에서는 '근수 게임'이라는 놀이가 엄청난 인기를 끌고 있다. 근수 게임은 주어진 문자열에 대하여 근수 점수를 빨리 계산하여 먼저 외치는 게임이다. 근수 점수는 주어진 문자열에 있는 모든 연속된 부분 문자열에 대해 다음과 같이 점수를 더한 것으로 계산된다.\n\n\n\t부분 문자열 2$2$는 '근수'로 간주하여 등장할 때마다 1$1$점을 더한다.\n\t부분 문자열 22$22$는 '근근수'로 간주하여 등장할 때마다 2$2$점을 더한다.\n\t연속된 k$k$ (k≥3)$(k \\ge 3)$개의 2$2$로 이루어진 부분 문자열 22…2$22 \\ldots 2$는 '근근...근수'로 간주하여 등장할 때마다 k$k$점을 더한다.\n\t그 외 부분 문자열은 0$0$점을 더한다.\n\n\n이때 '근근...근수'끼리는 서로 겹칠 수 있다는 점에 유의해야 한다. 예를 들어 112223223$112223223$이라는 문자열은 '근수' 5$5$개, '근근수' 3$3$개, '근근근수' 1$1$개가 등장해 (1×5)+(2×3)+(3×1)=14$(1\\times5) + (2\\times3) + (3\\times1) = 14$점의 근수 점수를 가진다.\n\n근수는 자신의 이름을 딴 근수 게임의 최강자 자리를 차지하기 위해 문자열을 입력했을 때, 그 문자열의 근수 점수를 빠르게 구해주는 프로그램을 작성하려고 한다. 근수를 도와 프로그램을 작성해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31866","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t손가락 게임은 두 플레이어가 동시에 손가락을 일정 개수 펴서 특정 표식을 만들어 상성을 겨루는 게임이다. 플레이어는 0$0$개의 손가락을 펴서 '바위' 표식(즉, 손가락을 피지 않은 상태), 2$2$개의 손가락을 펴서 '가위' 표식, 5$5$개의 손가락을 펴서 '보' 표식을 만들 수 있다. 이 외의 개수의 손가락을 피면 '무효' 표식을 만든 것으로 간주한다.\n\n두 플레이어 모두 같은 표식을 낼 경우 승패를 가릴 수 없으며, 표식에 따른 상성은 아래와 같다.\n\n\n\t'무효' 외의 다른 표식을 낸 플레이어는 '무효'를 낸 플레이어를 상대로 승리한다.\n\t'바위'를 낸 플레이어는 '가위'를 낸 플레이어를, '가위'를 낸 플레이어는 '보'를 낸 플레이어를, '보'를 낸 플레이어는 '바위'를 낸 플레이어를 상대로 승리한다.\n\n\n준성과 익준은 손가락 게임을 진행하려고 한다. 두 사람이 핀 손가락의 개수를 보고 승패를 판별해 주도록 하자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31846","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t기다란 종이에 알파벳 대문자로만 이루어진 문자열이 한 줄로 쓰여 있다. 예를 들어 아래 그림과 같이 종이에 “ABAACA”가 쓰여 있다고 가정하자. \n\n\n\n이제 이 종이를 한 번만 접을 것이다. 종이는 서로 이웃한 문자 사이에서만 접을 수 있다. 예를 들어 아래 그림과 같이 위 종이를 4$4$번째 문자와 5$5$번째 문자 사이에서 접을 수 있다. \n\n\n\n이때 서로 맞닿은 문자 쌍 중에서, 서로 같은 문자가 맞닿은 쌍의 개수가 이 접기의 점수가 된다. 예를 들어 앞에서의 접기의 점수는 1$ 1 $점이 된다. 하지만 아래 그림과 같이 3$3$번째 문자와 4$4$번째 문자 사이에서 종이를 접으면 점수는 2$ 2 $점이 된다. \n\n\n\n이제 여러분은 알파벳 대문자로만 이루어진 문자열 S$ S $가 주어질 때, 다음과 같은 질문 Q$ Q $개에 답해야 한다. \n\n\n\t l r$ l \\ r $: 문자열 S$ S $의 l$ l $번째 문자, (l+1)$ \\left( l+1 \\right) $번째 문자, ⋯$ \\cdots $, r$ r $번째 문자가 차례대로 종이에 쓰여 있을 때, 종이를 한 번 접어서 얻을 수 있는 최대의 점수는 몇 점인가?\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31883","content":"문제\n\n서강대학교에는 하나의 강의를 \n5\n$5$번 결석하면 F 학점을 주는 FA 제도가 있다. 현재 근수는 알고리즘 설계와 분석 강의에 4회 결석 상태인데 또다시 결석할 위기에 처해있다. 지금 있는 곳에서 강의실까지는 거리만 따지면 그렇게 멀지 않지만, 가는 길에 있는 횡단보도들이 방해된다.\n\n얼마 전 학교에서 횡단보도 때문에 지각하는 억울한 학생들을 줄이기 위해 모든 횡단보도 옆에 육교를 설치해 두었다. 육교를 사용하면 신호등을 기다리지 않고 도로를 건널 수는 있지만 이동하는 거리가 변해서 시간이 더 걸릴 수도 있다. 그래서 근수는 신호를 기다릴지 육교를 건널지 잘 판단해 최대한 빨리 학교에 도달하고자 한다.\n\n근수는 일렬로 이어진 \nN\n$N$개의 횡단보도를 전부 지나가야 학교에 도달할 수 있다. 편의상 \nN\n$N$개의 횡단보도에 의해 나눠지는 \nN+1\n$N+1$개의 구역에 \n0\n$0$부터 \nN\n$N$까지 번호를 붙이기로 한다. 또, \ni−1\n$i-1$번 구역과 \ni\n$i$번 구역 사이의 횡단보도를 \ni\n$i$번째 횡단보도라고 부르기로 한다. 이때 \n0\n$0$번 구역에 근수가 있고, \nN\n$N$번 구역에 강의실이 있다.\n\n근수는 그동안의 경험을 토대로 횡단보도마다 \nAi\n$A_i$, \nBi\n$B_i$, \nCi\n$C_i$, \nDi\n$D_i$의 \n4\n$4$가지 데이터를 정리했다. 각각의 데이터가 의미하는 바는 다음과 같다.\n\n \nAi\n$A_i$: \ni−1\n$i-1$번 구역에서 \ni\n$i$번 구역으로 이동할 때 횡단보도를 이용할 경우 걸리는 시간이다.\n \nBi\n$B_i$: \ni−1\n$i-1$번 구역에서 \ni\n$i$번 구역으로 이동할 때 육교를 이용하는 경우 걸리는 시간이다.\n \nCi\n$C_i$: \ni\n$i$번째 횡단보도의 신호등이 녹색인 시간을 의미한다. \ni\n$i$번째 신호등은 정확히 \nCi\n$C_i$분 동안 녹색을 유지한 후에 항상 적색으로 바뀐다.\n \nDi\n$D_i$: \ni\n$i$번째 횡단보도의 신호등이 적색인 시간을 의미한다. \ni\n$i$번째 신호등은 정확히 \nDi\n$D_i$분 동안 적색을 유지한 후에 항상 녹색으로 바뀐다.\n\n여기서 \nAi\n$A_i$는 \ni\n$i$번째 횡단보도를 건너는 데 걸리는 시간이 아니라 횡단보도를 이용하여 구역을 이동할 때 걸리는 시간임에 주의한다. 실제로 근수가 각각의 횡단보도를 건너는 데는 \n1\n$1$분도 걸리지 않는다. 예를 들어 한 신호등이 \ns\n$s$분부터 \ne\n$e$분까지 녹색이라고 했을 때, 그 횡단보도에 정확히 \ne\n$e$분에 도착했다면 바로 신호가 적색으로 바뀌기 때문에 건너지 않고, \ns\n$s$분부터 \ne−1\n$e-1$분까지는 각 시간에 도착했을 때 바로 건너갈 수 있다.\n\n지금 근수가 첫 번째 횡단보도 앞에 서 있고, 방금 막 모든 신호가 동시에 녹색이 되었다고 가정했을 때, 근수가 강의실에 도달하는 데 걸리는 최소 시간을 구해야 한다."},{"problemId":"31827","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t다음 두 조건을 만족하는 길이가 N$N$인 수열 A1,A2,⋯,AN$A_1, A_2, \\cdots, A_N$을 구하여라.\n\n\n\t수열 A$A$의 모든 원소는 1000000$1\\,000\\,000$ 이하의 서로 다른 소수로 이루어져 있다.\n\t수열 A$A$에서 길이가 K$K$인 임의의 연속된 부분 수열의 합 S=Ai+Ai+1+...+Ai+K−1$S = A_{i}+A_{i+1}+...+A_{i+K-1}$은 K$K$의 배수이다.\n\n\n소수는 1$1$보다 큰 양의 정수 중 1$1$과 자기 자신을 약수로 가지는 수이다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31867","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t민구는 자릿수가 N$N$인 양의 정수 K$K$로 홀짝 놀이를 하려고 한다.\n\n홀짝 놀이의 과정은 다음과 같다.\n\n\n\t각 자릿수에 대해서 해당 숫자가 짝수인지 홀수인지를 확인한다. 숫자 0$0$은 짝수이다.\n\t모든 자릿수에 대해서 홀짝 판별이 완료되면 전체 짝수의 개수와 홀수의 개수를 비교한다.\n\t짝수의 개수가 홀수의 개수보다 더 많으면 주어진 수는 짝짝수이다. 홀수의 개수가 짝수의 개수보다 더 많으면 홀홀수이다.\n\n\n숫자가 너무 길어서 개수를 세는 것에 어려움을 겪는 민구를 위해 홀짝 놀이를 도와주는 프로그램을 작성하자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31847","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t기다란 종이에 알파벳 대문자로만 이루어진 문자열이 한 줄로 쓰여 있다. 예를 들어 아래 그림과 같이 종이에 “ABAACA”가 쓰여 있다고 가정하자. \n\n\n\n이제 이 종이를 한 번만 접을 것이다. 종이는 서로 이웃한 문자 사이에서만 접을 수 있다. 예를 들어 아래 그림과 같이 위 종이를 4$4$번째 문자와 5$5$번째 문자 사이에서 접을 수 있다. \n\n\n\n이때 서로 맞닿은 문자 쌍 중에서, 서로 같은 문자가 맞닿은 쌍의 개수가 이 접기의 점수가 된다. 예를 들어 앞에서의 접기의 점수는 1$ 1 $점이 된다. 하지만 아래 그림과 같이 3$3$번째 문자와 4$4$번째 문자 사이에서 종이를 접으면 점수는 2$ 2 $점이 된다. \n\n\n\n이제 여러분은 알파벳 대문자로만 이루어진 문자열 S$ S $가 주어질 때, 다음과 같은 질문 Q$ Q $개에 답해야 한다. \n\n\n\t l r$ l \\ r $: 문자열 S$ S $의 l$ l $번째 문자, (l+1)$ \\left( l+1 \\right) $번째 문자, ⋯$ \\cdots $, r$ r $번째 문자가 차례대로 종이에 쓰여 있을 때, 종이를 한 번 접어서 얻을 수 있는 최대의 점수는 몇 점인가?\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31884","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t사토리는 가로로 긴 1×4$1 \\times 4$ 블럭과, 세로로 긴 4×1$4 \\times 1$ 블럭을 쌓는 놀이를 하고 있다. 블럭이 떨어질 위치를 고르면 이 블럭은 그대로 수직 방향으로 떨어진다. 떨어지는 도중 블럭의 아래쪽 면의 일부분이 다른 블럭의 윗면 또는 바닥과 닿는다면, 블럭은 떨어지는 것을 멈춘다. 이때 좌우로 인접한 블럭끼리는 스쳐 지나갈 수 있다.\n\n사토리를 위해, 여러분은 다음 쿼리를 처리하는 프로그램을 작성해야 한다.\n\n\n\t 1 i:$1\\ i:$ 가로로 긴 1×4$1 \\times 4$ 블럭의 왼쪽 끝 칸이 x=i$x = i$에 위치하게 블럭을 떨어뜨린다.\n\t 2 i:$2\\ i:$ 세로로 긴 4×1$4 \\times 1$ 블럭이 x=i$x = i$에 위치하게 블럭을 떨어뜨린다.\n\t 3 i:$3\\ i:$ x=i$x = i$에 존재하는 블럭의 y$y$좌표의 최댓값을 출력한다. 해당 x$x$좌표에 블럭이 존재하지 않는다면 0$0$을 출력한다.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31868","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t 1$1$단계 과일은 체리, N$N$단계 과일은 수박이다.\n\n i$i$단계 과일 2$2$개를 소모하여 i+1$i+1$단계 과일 1$1$개를 만들 수 있다. (1≤i≤N−1)$(1 \\leq i \\leq N-1)$ \n\n K$K$개의 체리로 최대 몇 개의 수박을 만들 수 있는지 구해보자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31885","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t회윤이는 잠시 휴식을 취하기 위해 자신의 가상 세계인 유니월드에 들어왔다. 유니월드는 무한한 2차원 격자판이고 회윤이는 현재 (0,0$0, 0$)에 서있다. 회윤이는 자신의 목적지인 (Ex,Ey)$(E_x, E_y)$에 가기 위하여 다음 2가지 종류의 행동을 반복할 수 있다.\n\n\n\t인접한 격자판으로 한 칸 이동한다. 즉 x$x$좌표를 1$1$만큼 변화시키거나 y$y$좌표를 1$1$만큼 변화시킨다. 이 행동은 기력을 1$1$만큼 소모한다.\n\t회윤이가 들고 있는 아이템을 하나 사용한다. 아이템은 (ai,bi)$(a_i, b_i)$ 형태로 주어지며 회윤이의 x$x$좌표를 ai$a_i$만큼, y$y$좌표를 bi$b_i$만큼 증가시킨다. 즉 회윤이의 좌표를 (x,y)$(x, y)$라고 할 때, 아이템을 사용하였을 시의 좌표는 (x+ai,y+bi)$(x+a_i, y+b_i)$가 된다. 이 행동은 아이템을 소모하지 않으며 (즉 하나의 아이템을 여러 번 사용할 수 있다), 기력을 2$2$만큼 소모한다.\n\n\n회윤이의 기력이 0$0$ 미만으로 떨어져 버리면 현실 세계로 돌아오게 되므로 회윤이는 기력을 0$0$ 이상으로 보존하려고 한다. 또한 회윤이는 허약체질이라 초기 기력이 5$5$를 초과하지 않는다. 회윤이가 목적지에 도달할 수 있는지 구해보자. 또 도착할 수 있으면 그때 소비해야 하는 기력의 최솟값을 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31886","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t성준이는 무슨 문제든 척척 풀어내는 훌륭한 로봇이다. 이를 시샘한 근수는 성준이가 자는 동안 그의 회로판을 망가뜨렸다.\n\n다행히도 성준이는 자가 치유 프로토콜을 가지고 있어서 이를 이용해 자신을 고쳐보려고 한다. 성준이의 회로판은 N×N$N \\times N$ 격자판으로 되어있으며 현재 M$M$개의 좌표 (xi,yi)$(x_i, y_i)$에 오류가 있다. 성준이는 자신의 회로판을 고치기 위해 다음 2가지 종류의 행동을 반복할 수 있다.\n\n\n\t오류가 K$K$개 이하인 모든 가로줄에 대해서, 각 가로줄에 있는 오류들을 전부 제거한다. 오류가 K$K$개 초과인 가로줄의 상태는 변하지 않는다.\n\t오류가 K$K$개 이하인 모든 세로줄에 대해서, 각 세로줄에 있는 오류들을 전부 제거한다. 오류가 K$K$개 초과인 세로줄의 상태는 변하지 않는다.\n\n\n성준이는 모든 오류를 제거해 자신을 빠르게 치유하여 자신을 망가뜨린 근수에게 복수하고 싶어 한다. 최소한의 행동으로 성준이의 모든 오류를 제거하는 방법을 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31869","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t24학번 신입생 정민이는 밥을 사준다는 선배들의 약속을 모두 메모장에 기록해 둔다. 메모장의 각 줄에는 선배 이름 S$S$, 약속 주차 W$W$, 요일 D$D$, 밥 약속에 드는 비용 P$P$가 기록돼 있다. 선배 이름은 문자열, 나머지는 정수로 기록한다. 또, 한 선배는 두 번 이상 밥을 사주지 않으며 모든 선배의 이름은 다르다.\n\n정민이는 컴퓨터학부답게 요일을 0$0$과 6$6$ 사이의 정수로 기록한다. 예를 들어 월요일은 0$0$이고 목요일은 3$3$이다.\n\n정민이의 착한 선배들은 밥을 사줄 수 있는 충분한 돈이 있다면 귀여운 후배와의 밥 약속을 무를 수 없다. 정민이의 기록과 선배들이 지닌 돈을 보고 정민이가 최대 며칠 연속으로 밥을 얻어먹을 수 있는지 구해보자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31900","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tRenowned professor of Egyptology Z Mummer is exploring a newly discovered tomb in Luxor where she finds a mysterious construction. On a wall, there is a row of k$k$ pyramid-shaped stone slabs. Each stone features three hieroglyphs: an ankh (top), an eye of Horus (bottom left), and an ibis (bottom right).\n\nNext to the wall there are n$n$ levers. Cautiously experimenting with these, wary of potential traps, the professor realizes that each lever rotates some of the pyramids clockwise or counter-clockwise so that another hieroglyph is pointing upwards on them. Flipping back a lever rotates the same pyramids in the opposite direction back to their original position. The levers operate completely independently of each other, so flipping or unflipping a lever has the same effect regardless of what states the other levers are in. See Figure 1 for an illustration.\n\n\n\nFigure 1: Illustration of a wall with k=3$k=3$ pyramids and n=2$n=2$ levers. The first lever rotates the first pyramid clockwise, the second pyramid counterclockwise, and leaves the third pyramid unchanged. The second lever rotates all three pyramids clockwise. This corresponds to Sample Input 1.\n\nIntrigued, Professor Mummer records the individual effect of each lever. Back at her university after the expedition, she assigns one of her students the laborious task of figuring out all 2n$2^n$ possible pyramid configurations (some of which may be identical) that can be achieved by flipping some subset of the levers, so that these can be studied further.\n\nAfter many nights of careful calculations, the student is finally done and starts gathering his papers. But then disaster strikes: he accidentally spills some ink and completely destroys the professor’s original notes, which contained the only record of the individual effects of each lever.\n\nThe only chance to escape Professor Mummer’s wrath is to reconstruct the original notes from the list of possible pyramid configurations. This cannot be done completely unambiguously (for example, there is no way of distinguishing between different orderings of the same set of levers). But as long as the levers still result in the calculated list of pyramid configurations, this error is unlikely to be noticed (at least not until after the student has graduated).\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31848","content":"문제\n\n엉성한 분류기를 이용하여 도토리를 크기별로 나누고자 한다.\n\n분류기는 \nN\n$N$개의 구멍이 뚫린 기울어진 판자이다. 분류기의 구멍은 높은 쪽부터 차례로 \n1\n$1$번부터 \nN\n$N$번까지 번호가 매겨져 있다. \ni\n$i$번 구멍의 크기는 \nai\n$a_i$이다.\n\n분류기에 도토리를 넣으면 \n1\n$1$번 구멍부터 \nN\n$N$번 구멍까지 굴러간다. 분류기의 표면은 거칠기 때문에 도토리가 하나의 구멍을 지나고 나면 크기가 \n1\n$1$씩 줄어든다. 예를 들어 \n1\n$1$번 구멍을 지날 때 도토리의 크기가 \n10\n$10$이었다면, \n1\n$1$번 구멍을 지나고 나서 \n2\n$2$번 구멍을 지날 때는 크기가 \n1\n$1$ 줄어 \n9\n$9$가 된다. 마찬가지로 도토리가 \n2\n$2$번 구멍을 지났다면 \n3\n$3$번 구멍을 지날 때 크기가 \n1\n$1$ 줄어 \n8\n$8$이 된다.\n\n도토리는 현재 크기보다 크거나 같은 구멍을 지날 때 그 구멍으로 떨어진다.\n\n주어지는 \nQ\n$Q$개의 도토리에 대하여, 각각의 도토리를 분류기에 넣었을 때 굴러떨어져 나오는 구멍 번호를 순서대로 출력하는 프로그램을 작성하라."},{"problemId":"31828","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n국민대학교의 정문에 앉아있는 Mr.Doctor\n\n길이가 4$4$ 이상인 영어 대문자로만 이루어질 수 있는 서로 다른 모든 문자열에 대해, 0$0$개 이상의 문자를 제거하였을 때 문자열 MRDR이 되는 문자열을 MR.DR 문자열이라고 한다.\n\n정수 N$N$이 주어질 때, 길이가 N$N$인 MR.DR 문자열의 개수를 구하는 프로그램을 작성하라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31887","content":"문제\n\n서강 마을은 직선 형태의 마을로 총 \n2N−1\n$2N-1$개의 건물이 일렬로 있고 왼쪽부터 순서대로 \n1\n$1$번부터 \n2N−1\n$2N-1$번까지 번호가 매겨져 있다. 이 마을에는 근수가 \nM\n$M$ 명, 승형이가 한 명 살고 있다. 현재 근수들은 전부 서로 다른 건물에 있으며 승형이는 K512가 있는 \nN\n$N$번 건물에 있다. 근수들과 승형이는 매주 월요일 앳코더 스터디를 진행하는데, 스터디가 진행되기 \n5\n$5$분 전인데도 아직 근수가 한 명도 오지 않았다! 화가 난 승형이는 숨겨두었던 특별한 보법으로 마을 곳곳에 있는 근수들을 데리고 K512로 돌아올 예정이다.\n\n승형이는 다음의 세 가지 보법을 사용할 수 있다.\n\n \n1\n$1$초 만에 이웃한 건물로 이동할 수 있다. 즉, \ni\n$i$번 건물에서 \ni+1\n$i+1$번 건물 혹은 \ni−1\n$i-1$번 건물로 이동할 수 있다. 이때 원래 위치가 \n1\n$1$번 혹은 \n2N−1\n$2N-1$번 건물이라면 각각 \n2\n$2$번과 \n2N−2\n$2N-2$번 건물로만 이동할 수 있다.\n \n1\n$1$초 만에 정확히 \nN\n$N$개의 건물을 건너뛰고 이동할 수 있다. 즉, \ni>N\n$i > N$인 \ni\n$i$에 대해서는 \ni\n$i$번 건물에서 \ni−N\n$i-N$번 건물로 이동할 수 있고, \ni<N\n$i < N$인 \ni\n$i$에 대해서는 \ni\n$i$번 건물에서 \ni+N\n$i+N$번 건물로 이동할 수 있다.\n지금까지 방문한 적 있는 모든 건물로 시간을 지체하지 않고 즉시 이동할 수 있다. 단, 2번 방식의 보법을 사용하는 중에 건너뛴 건물들은 방문한 건물로 생각하지 않는다.\n\n승형이는 근수가 있는 건물에 도착하면 바로 근수를 들고나오기 때문에 근수를 챙기는 데 시간이 추가로 걸리지는 않는다고 한다. 모든 근수를 데리고 돌아오는 데 걸리는 최소 시간을 계산해 보자!"},{"problemId":"31870","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t민구는 원소의 개수가 N$N$개이고 값이 서로 다른 정수 배열 A$A$를 오름차순으로 만들고 싶다.\n\n배열의 i$i$번째 원소와 i+1$i+1$번째 원소끼리 서로 위치를 바꿀 수 있고, 정렬 과정 중 언제든지 최대 딱 한 번 배열 전체의 순서를 뒤집을 수 있다.\n\n원소를 교환하는 것, 배열 전체를 뒤집는 것 모두 1$1$번의 횟수로 계산한다.\n\n주어진 배열 A$A$를 오름차순으로 만드는데 필요한 최소한의 횟수를 구하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31901","content":"문제\n\nThe Institute for Creative Product Combinations (ICPC) tries to find unusual and innovative ways to unite seemingly unrelated products or technologies, opening up new markets and creating new jobs. (For instance, their most recent success was the “hairbachi,” a hair-dryer with a hibachi grill top attachment for preparing on-the-go hot meals.) The company employs \nn\n$n$ teams of size \n2\n$2$ to research individual products, then members of the different teams get together to explore ways of combining products.\n\nDuring the pandemic, the ICPC management organized everyone’s schedule in such a way that there were never more than \nn\n$n$ people in the office at the same time, and things ran so smoothly that they continued the process once things began to return to normal. Here is the scheme they used. Label the teams with integers \n1\n$1$ through \nn\n$n$ and the two people on the \ni\n$i$th team as \n(i,1)\n$(i,1)$ and \n(i,2)\n$(i,2)$ for each \ni\n$i$ from \n1\n$1$ to \nn\n$n$. Each week, exactly one person from each team is allowed in the office, while the other has to stay away. The employees \n(i,1)\n$(i,1)$ and \n(i,2)\n$(i,2)$ know each other well and collaborate productively regardless of being isolated from each other, so members of the same team do not need to meet in person in the office. However, isolation between members from different teams is still a concern.\n\nEach pair of teams \ni\n$i$ and \nj\n$j$ for \ni≠j\n$i \\ne j$ has to collaborate occasionally. For a given number \nw\n$w$ of weeks and for fixed team members \n(i,a)\n$(i,a)$ and \n(j,b)\n$(j,b)$, let \nw1<w2<⋯<wk\n$w_1<w_2< \\dots <w_k$ be the weeks in which these two team members meet in the office. The isolation of those two people is the maximum of\n{w1,w2−w1,w3−w2,…,wk−wk−1,w+1−wk},\n$$\\{w_1,w_2 - w_1, w_3 - w_2, \\dots , w_k - w_{k-1}, w+1 - w_k\\}, $$\nor infinity if those two people never meet. The isolation of the whole company is the maximum isolation across all choices of \ni\n$i$, \nj\n$j$, \na\n$a$, and \nb\n$b$.\n\nYou have been tasked to find a weekly schedule that minimizes the isolation of the whole company over a given number \nw\n$w$ of weeks."},{"problemId":"31888","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t근수와 승형이는 K512에서 Hula's Cardgame을 즐기려고 한다. K512에는 N$N$개의 테이블이 있고 각 테이블은 1$1$부터 N$N$까지의 번호가 차례대로 부여되어 있다. 각 테이블 위에는 3$3$장의 카드가 있고 i$i$번 테이블 위 3$3$장의 카드에는 각각  i$i$ 이상 N$N$ 이하인 정수가 적혀 있다.\n\n현재 근수와 승형이는 1$1$번 테이블에 있다. E$E$번 테이블에는 근수가 좋아하는 도마 우마루 인형이 있어서 근수는 E$E$번 테이블로 이동하고 싶어 한다. 승형이는 이러한 근수가 못마땅한지 E$E$번 테이블로 이동하고 싶어 하지 않는다. 근수와 승형이는 다음과 같은 행동을 게임이 끝나기 전까지 반복한다.\n\n\n\t현재 있는 테이블이 E$E$번 테이블이라면 근수가 게임에서 승리한다.\n\t현재 있는 테이블이 E$E$번 테이블이 아니라면, 승형이가 현재 있는 테이블 위 3$3$장의 카드 중 하나를 제거한다.\n\t근수가 현재 있는 테이블 위에 남아있는 2$2$장의 카드 중 하나를 고른다. 근수와 승형이는 그 카드에 적혀있는 수에 해당되는 번호의 테이블로 이동한다. 만약 근수가 고른 카드에 적힌 수가 현재 있는 테이블의 번호라면 (즉 방문했던 테이블을 재방문하게 되면) 승형이가 게임에서 승리한다.\n\n\n근수와 승형이가 항상 최선의 전략으로 게임을 한다고 가정할 때 근수는 자신이 게임에서 이길 수 있는지 궁금해한다. 이러한 문제 하나를 풀어내는 것은 여기까지 문제를 풀어온 당신한테는 너무 쉬운 문제일 것이다. 모든 E$E$ (1≤E≤N)$(1 \\le E \\le N)$에 대해서 문제를 풀어내 보자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31871","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t영일랜드는 하나의 정문과 N$N$개의 놀이기구로 이루어진 테마파크로 각각 식별 번호가 매겨져 있다. 정문은 0$0$번, 놀이기구는 1$1$번부터 N$N$번까지의 번호로 구분된다. 정문과 놀이기구 혹은 놀이기구와 놀이기구 사이에는 단방향 간선으로 이어진다. 두 장소를 잇는 간선은 여러 개일 수 있으며 출발 장소와 도착 장소가 같을 수도 있다.\n\n영일랜드에 놀러 간 정민이는 영일랜드의 정문에서 출발해 모든 놀이기구를 한 번씩만 탑승하고 정문으로 돌아오는 경로의 최장 시간이 궁금하다. 영일랜드의 놀이기구는 매혹적이어서 안 타고 지나갈 수 없어 각 놀이기구에는 최대 한 번씩만 도달할 수 있다. 또한, 모든 놀이기구를 탑승할 때까지 정문을 경유할 수 없으며 놀이기구 탑승 시간은 무시한다.\n\n호기심이 많은 정민이를 위해 최장 시간을 알려주자. \n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31849","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t왕복 4시간 통학에 지친 현성이는 자취방을 구하려고 한다.\n\n현성이가 방을 고르는 기준은 월세와 편의점까지의 거리뿐이다. 가장 마음에 드는 방을 구하기 위해 현성이는 지도 위의 모든 방에 편세권 점수를 매겨 그 중 편세권 점수가 가장 낮은 집을 고르려고 한다. 편세권 점수의 계산 방식은 다음과 같다.\n\n편세권 점수 = (방에서 가장 가까운 편의점까지의 거리 × 월세)\n\n현성이가 보고 있는 지도는 N×M$N \\times M$ 크기의 격자로 이루어져 있다. 지도의 x$x$행 y$y$열에 있는 칸의 위치를 (x,y)$(x,y)$로 나타내자. 방의 위치가 (a,b)$(a,b)$, 편의점의 위치가 (c,d)$(c,d)$일 때 방에서 편의점까지의 거리는 |a−c|+|b−d|$|a-c|+|b-d|$ 로 계산한다.\n\n현성이는 가장 낮은 편세권 점수를 가진 방을 골랐다. 이 방의 편세권 점수는 몇 점일까?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31902","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou have a very big problem! You love recurrence relations, perhaps a bit too much. In particular, you are a fan of positive linear recurrence relations (PLRR), which can be defined as follows. First, you choose the order k$k$ of the relation. Then you choose coefficients c1,c2,…,ck$c_1,c_2, \\dots ,c_k$, and the first k$k$ elements of a sequence a1,a2,…,ak$a_1,a_2, \\dots ,a_k$. The relation is called “positive” if all of these numbers are positive integers. The rest of the sequence can then be generated indefinitely using the formula\n\n ai+k=c1⋅ai+c2⋅ai+1+⋯+ck⋅ai+k−1$a_{i+k} = c_1 \\cdot a_i + c_2 \\cdot a_{i+1} + \\cdots + c_k \\cdot a_{i+k-1}$ for i≥1$i≥1$.\n\nThe Fibonacci sequence is the most famous recurrence of this form, but there are many others.\n\nIn fact, yesterday, in a fit of mad mathematical inspiration, you wrote down all possible ways of choosing a positive linear recurrence relation, and each associated infinite sequence, on some index cards, one per card. (You have a lot of index cards; you buy in bulk.) It has all been a bit of a blur. But when you woke up today, you realized that you do not have a good way to order or count the PLRRs. You tried just sorting the sequences lexicographically, but there are too many that start with “1$1$” — you will never make it to the later ones.\n\nFortunately, inspiration struck again! You realized that you can instead order the PLRRs lexicographically by the generated part of the sequence only (that is, the part of the sequence starting after the initial k$k$ values). Ties are broken by lexicographic order of the coefficients. For example k=1$k=1$, c1=2$c_1=2$, a1=2$a_1=2$ comes before k=2,$k=2,$ (c1,C2)=(2,1)$(c1,C2)=(2,1)$, (a1,a2)=(1,2)$(a1,a2)=(1,2)$, even though the continuation of the sequence is the same for both. This allows you to properly index your cards, starting from 1$1$, with every card being assigned a number.\n\nGiven the number on a card, describe the sequence on it!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31889","content":"문제\n\n앞에 있는 수많은 문제를 풀어낸 근수는 너무 피곤해서 레모네이드 바에 들어가서 휴식을 취하려 한다.\n\n레모네이드 바에는 \nN\n$N$개의 레모네이드가 각각 \nti\n$t_i$의 시각에 \nxi\n$x_i$의 청량감을 가지고 나온다. 시간이 지날수록 레모네이드 안에 든 탄산이 빠지기 때문에 레모네이드가 나오고 \n1\n$1$만큼의 시간이 지날 때마다 레모네이드의 청량감은 \n1\n$1$씩 떨어진다. 즉 \nT\n$T$ \n(T≥ti)\n$(T \\ge t_i)$의 시각에서 레모네이드의 청량감은 \nxi−(T−ti)\n$x_i - (T - t_i)$가 된다.\n\n근수는 \nK\n$K$만큼의 갈증이 있으므로 최대 \nK\n$K$개만큼의 레모네이드를 마실 수 있다. 목이 마를 때 마시는 레모네이드는 더 많은 행복함을 준다. 근수가 첫 번째로 마시는 레모네이드는 청량감의 \nK\n$K$배의 행복함을 준다. 두 번째로 마시는 레모네이드는 청량감의 \nK−1\n$K-1$배의 행복함을 주고, \ni\n$i$ 번째로 마시는 레모네이드는 청량감의 \nK+1−i\n$K+1-i$배의 행복함을 준다. 즉 \nT\n$T$ \n(T≥ti)\n$(T \\ge t_i)$의 시각에서 \ni\n$i$번째 레모네이드를 \nj\n$j$번째에 마셨을 때 행복함은 \n(xi−(T−ti))×(K+1−j)\n$(x_i - (T - t_i)) \\times (K+1-j)$ 만큼 증가한다.\n\n레모네이드를 마시는 데 걸리는 시간은 무시할 수 있을 정도로 빠르다. 즉 같은 시각에 레모네이드 여러 잔을 임의의 순서로 마실 수 있다.\n\n근수는 현재 \n0\n$0$의 행복함을 가지고 있다. 이제 적절하게 레모네이드를 마셔 근수에게 최대의 행복함을 선물해 주자."},{"problemId":"31872","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t혁준이는 오늘 학교에서 N$N$개의 강의를 들어야 한다. 모든 강의는 x$x$축 위의 서로 다른 좌표에 존재하는 강의실에서 진행된다.\n\n i$i$번째 강의실은 x=Ai$x = A_i$에 있고, 처음에 혁준이는 x=0$x = 0$에 있다. 혁준이가 x$x$축 위에서 왼쪽 또는 오른쪽으로 1$1$만큼 이동할 때마다 1$1$초의 시간이 걸린다.\n\n혁준이는 초급 마법사라서 최대 K$K$번 순간이동을 할 수 있다. 순간이동을 하면 현재 위치에서 원하는 다른 위치로 즉시 이동하고, 시간은 소요되지 않는다.\n\n혁준이가 x=0$x = 0$에서 출발하여 모든 강의실을 한 번씩 들르는 데 걸리는 최소 시간을 구해보자.\n\n강의를 듣는 데 걸리는 시간은 없다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31903","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou found a weird puzzle in a box with old toys in your attic. The puzzle forms a rectangular grid board made of h×w$h \\times w$ square cells. Some cells in that grid have a colored tile placed on them, as shown in Figure 1.\n\n\n\nFigure 1: Color tiles correspond to the starting arrangement in Sample Input 1.\n\nYou are not yet sure what the exact goal of this puzzle is, but you started examining possible ways of rearranging the tiles. Their arrangement can be manipulated by tilting the grid in one of the four cardinal directions: to your left, to your right, towards you, or away from you. Tilting causes all the tiles to slide in the respective direction until they are blocked either by the boundary or by another tile. Given a starting and ending arrangement, determine whether there exists some sequence of tilts that transforms the former into the latter. Figure 2 illustrates tilting of the puzzle shown in Sample Input 1.\n\n\n\nFigure 2: Solution to Sample Input 1.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31829","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t현재 1$1$번 건물에 있는 세우는 막차를 놓쳐버렸다. 그래서 세우네 집인 N$N$번 건물까지 걸어가기로 했다. 그러다 세우는 1$1$번 건물에서 출발할 때, 지금부터 정확히 K$K$분 후부터 버스 첫 차가 운행하기 시작한다는 것을 깨달았다.\n\n세우네 도시에는 양방향으로 서로 다른 두 개의 건물을 연결하는 X$X$개의 인도와 Y$Y$개의 차도가 있다. 첫 차가 운행하기 시작하는 K$K$분 이전에는 인도로만 이동할 수 있고, K$K$분 후부터는 인도로 이동하거나, 버스를 타고 차도로 이동할 수 있다.\n\n세우가 1$1$번 건물에서 출발해 N$N$번 건물까지 도착하는 데 걸리는 최소 시간을 구하는 프로그램을 작성해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31890","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMei’s parents have spent the last year remodeling their house, but their lighting system is quite complex! Each room in the house has an LED light, which can be set to red, green, or blue, as seen in Figure P.1.\n\n\n\nFigure P.1: The initial state of the lights in Sample Input 1. Buttons and wires not shown.\n\nThroughout the house are various buttons which are each connected to one or more lights. When a button is pressed, any red lights connected to that button become green, any green lights connected to that button become blue, and any blue lights connected to that button become red. Each button can be pressed multiple times. Because the house was built prior to the invention of crossbar wiring, each light is controlled by at most two buttons.\n\nMei’s favorite color is red, so she wants to turn all of the lights red. Her parents, fearing the buttons will wear out, have asked her to minimize the total number of button presses.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31873","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t온 우주의 별을 수호하는 임무를 맡은 룰루는 자신의 일을 분담할 N$N$명의 별 수호자를 선발했다. 별 수호자는 전투력이라는 고유한 수치를 가지며 i$i$번 신입 별 수호자의 전투력 Pi$P_i$의 값은 i$i$다.\n\n룰루는 모든 신입 별 수호자가 K$K$명씩 하나의 조를 이루도록 총 NK$\\frac{N}{K}$개의 조를 만들고, 각 조를 하나의 별에 배정하려고 한다. 이때 N$N$은 K$K$로 나누어떨어진다. 다만 조를 별에 배정할 때는 다음과 같은 주의사항이 있다.\n\n\n같은 별에 배정된 별 수호자들의 전투력의 합이 K$K$로 나누어떨어지면 별이 붕괴하기 시작한다!\n\n\n수학에 약한 룰루를 위해 별이 붕괴하지 않도록 별 수호자들을 어떻게 배정해야 하는지 알려주도록 하자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31850","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t왕복 4시간 통학에 지친 현성이는 자취방을 구하려고 한다.\n\n현성이가 방을 고르는 기준은 월세와 편의점까지의 거리뿐이다. 가장 마음에 드는 방을 구하기 위해 현성이는 지도 위의 모든 방에 편세권 점수를 매겨 그 중 편세권 점수가 가장 낮은 집을 고르려고 한다. 편세권 점수의 계산 방식은 다음과 같다.\n\n편세권 점수 = (방에서 가장 가까운 편의점까지의 거리 × 월세)\n\n현성이가 보고 있는 지도는 N×M$N \\times M$ 크기의 격자로 이루어져 있다. 지도의 x$x$행 y$y$열에 있는 칸의 위치를 (x,y)$(x,y)$로 나타내자. 방의 위치가 (a,b)$(a, b)$, 편의점의 위치가 (c,d)$(c, d)$일 때 방에서 편의점까지의 거리는 |a−c|+|b−d|$|a-c|+|b-d|$ 로 계산한다.\n\n현성이는 가장 낮은 편세권 점수를 가진 방을 골랐다. 이 방의 편세권 점수는 몇 점일까?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31851","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t마을 뒤편의 장대한 산에 도깨비가 하나 살고 있다. 도깨비는 가면으로 무서운 얼굴을 가리고 마을 축제에 놀러 가곤 한다. 올해도 신나는 축제를 즐긴 도깨비는 다음 축제를 위해 소중한 가면들을 숨겨두려 한다. 가면은 총 4$4$개로, 산에 있는 N$N$개의 굴 중 서로 다른 네 곳에 숨길 것이다.\n\n굴의 위치는 좌표평면 위 점으로 나타낼 수 있다. 기하학을 좋아하는 도깨비는 가면을 숨긴 4$4$개의 굴을 적절한 순서로 이으면 볼록한 사각형이 만들어지게 할 것이다. 이 문제에서 볼록한 사각형이란 4$4$개의 변이 꼭짓점에서만 만나며 내각의 크기가 모두 180° 미만인 사각형을 말한다.\n\n\n\n호기심이 많은 도깨비는 문득 서로 다른 4$4$개의 굴을 꼭짓점 삼아 만들 수 있는 볼록한 사각형이 몇 개나 되는지 궁금해졌다. 굴 N$N$개의 좌표가 주어지면 이 궁금증을 해결하는 프로그램을 만들어보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31891","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tMajestic cargo ships, each carrying thousands of shipping containers, roam the world’s seas every day. They make modern trade possible by being so efficient that shipping goods halfway around the world costs only pennies.\n\nOnce the ships reach their destination, their standard-size cargo containers are unloaded from the ship onto stacks on land, from which they are moved to trains or trucks that deliver them to their destination. It turns out that moving containers is expensive, so port operators try to minimize the number of moves necessary for delivering cargo.\n\nIn this problem, we consider such a container-unloading scenario. We need to unload n$n$ containers, which are placed into two stacks built from bottom to top. The placement of each container is at random, with equal probability it will be put onto the first or the second stack (independently of other containers). Once all containers are unloaded, they will be picked up by trucks in a given order. When a truck wants to load a specific container, there are two cases. If the container is on top of its stack, then the container can be moved to the truck without moving any other containers. Otherwise, containers have to be moved from one stack to the other until the requested container is at the top of its stack. At that point the container can be moved onto the truck.\n\nAs an example, consider a case of three containers that arrive in order 1, 2, 3. Assume that 1 and 3 are in the first stack, and 2 is in the second. If the containers are moved onto trucks in order 1, 2, 3, then five moves of containers have to take place:\n\n\n\t\n\t\t\n\t\t\tStack 1\n\t\t\tStack 2\n\t\t\tComment\n\t\t\n\t\t\n\t\t\t1 3\n\t\t\t2\n\t\t\tInitial configuration (stacks bottom to top)\n\t\t\n\t\t\n\t\t\t1\n\t\t\t2 3\n\t\t\tMove container 3 from stack 1 to stack 2\n\t\t\n\t\t\n\t\t\t \n\t\t\t2 3\n\t\t\tMove container 1 to truck\n\t\t\n\t\t\n\t\t\t3\n\t\t\t2\n\t\t\tMove container 3 from stack 2 to stack 1\n\t\t\n\t\t\n\t\t\t3\n\t\t\t \n\t\t\tMove container 2 to truck\n\t\t\n\t\t\n\t\t\t \n\t\t\t \n\t\t\tMove container 3 to truck\n\t\t\n\t\n\n\nTable 1: Example moves of containers requested in order 1 2 3.\n\nWe want to know how many moves are necessary to deliver all containers to the customers. Assuming that container placement is random, we ask you to compute the expected number of moves necessary for a given truck-loading order.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31892","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tWhen managing a zoo, you sometimes want to move the animals between enclosures. You might figure out that the zebras will enjoy the spacier enclosure currently occupied by the penguins, while the penguins might want to move to the colder enclosure where the koalas currently live; and koalas will move to an empty enclosure that can be filled up with eucalyptus. So, you would move the koalas first, to free up the colder enclosure, then move the penguins there, and finally move the zebras.\n\nThe way you move animals is by using special tunnels that connect the enclosures — you do not want the animals to move outside, both because of the risk that they will be scared, and because of the risk that they might run away and hurt themselves.\n\nUnfortunately, you have acquired more animals recently, and all the enclosures are now full, which makes moving animals around much harder. Imagine, for instance, that the koalas were to move to the former zebra enclosure — you cannot move any set of animals first. Instead, what you learned to do, is to move the animals at the same time — the zebras, koalas and penguins start moving down different tunnels at the same time, and arrive at their new enclosures at the same time — and thus they never meet. Note that you cannot just swap the animals in two connected enclosures this way (because they would meet in the tunnel and become scared).\n\nSo, now you have a puzzle. You have a list of enclosures, each with an animal type inside; some of those enclosures are connected by tunnels. You can, any number of times, choose some set of animals and move each one to an enclosure adjacent by tunnel, as long as the animal in that enclosure is also moved as the part of the same move, and no tunnel is used more than once as a part of the same move. You also have your vision of the perfect way to position the animals. Is it possible to do so, in a series of moves?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31893","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA group of walkers arrives at a river in the night. They want to cross a bridge, which can hold a limited number of walkers at a time. The walkers have just one torch, which needs to be used when crossing the bridge. Each walker takes a certain time to cross; a group crossing together must walk at the slowest walker’s pace. What is the shortest time it takes for all walkers to cross the bridge?\n\nFor example, Sample Input 1 assumes the bridge can hold 2$2$ walkers at a time and there are 4$4$ walkers with crossing times 1$1$ minute, 2$2$ minutes, 5$5$ minutes and 10$10$ minutes, respectively. The shortest time of 17$17$ minutes can be achieved by the following sequence of crossings. First, the two fastest walkers cross in 2$2$ minutes. Second, the fastest walker crosses back in 1$1$ minute. Third, the two slowest walkers cross in 10$10$ minutes. Fourth, the second-fastest walker crosses back in 2$2$ minutes. Fifth, the two fastest walkers cross in 2$2$ minutes.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31905","content":"문제\n\nThousands of planets outside the Solar System have been discovered in recent years. An important factor for potential life support is the availability of liquid water. Detecting water on faraway planets is not easy. For rotating planets, a brand-new technology using relativistic quantum-polarized spectroscopy can help. It works as follows (this is a simplified description as only three people on this planet understand how it really works).\n\nAssume the telescope shows the planet such that its rotating axis is vertical and its equator is horizontal. Only the vertical line at the center of the image (the line that covers the rotating axis) is analyzed, because it provides the highest resolution of the planet’s surface.\n\nThe analysis proceeds in steps of \nd\n$d$ degrees. In one step, data is aggregated while the planet rotates by \nd\n$d$ degrees, so each step gives information about a slice of \nd\n$d$ degrees of the planet’s surface. The image is split into \nn\n$n$ segments of equal height, which are analyzed separately. So the slice of \nd\n$d$ degrees is partitioned into \nn\n$n$ areas \nA1,…,An\n$A_1,\\dots ,A_n$. For each area \nAi\n$A_i$, image analysis produces a number that gives the percentage of \nAi\n$A_i$ covered by water. The areas \nAi\n$A_i$ for one step are highlighted in the diagram on the right.\n\nYou may assume the planet’s surface is a sphere. This means each area \nA2,…,An−1\n$A_2,\\dots ,A_{n-1}$ is a spherical quadrilateral: it has four vertices, two sides parallel to the equator (that is, in planes parallel to the equator’s plane) and two sides on great circles through the planet’s poles, where the great circles are \nd\n$d$ degrees apart. At either pole, two of the four vertices collapse into the pole, so \nA1\n$A_1$ and \nAn\n$A_n$ are spherical triangles with only one side parallel to the equator. Due to the curvature of the surface, sides that are parallel to the equator are longer if they are closer to the equator, while sides on great circles are longer if they are closer to the poles.\n\nThe above process is repeated for the next \nd\n$d$ degrees of rotation, and so on, a total number of \nm\n$m$ times, until the whole surface of the planet has been covered (that is, \nmd=360\n$md=360$ degrees). Your task is to compute the percentage of the planet’s surface covered by water from the given data."},{"problemId":"31874","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t2명이서 쌍쌍바를 공평하게 나누는 법을 알고 있는가? 그 방법은 다음과 같다.\n\n\n\tA가 쌍쌍바를 나눈다.\n\tB가 나누어진 쌍쌍바 중 하나를 골라서 먹는다.\n\tA는 B가 고르지 않은 나머지 쌍쌍바를 먹는다.\n\n\n좌표 평면과 각각의 가치가 vi$v_i$인 보물 N$N$개의 위치가 표시된 보물 지도를 동시에 발견한 준성과 성우는 위 방법을 변형하여 공평하게 보물을 나누려고 한다.\n\n\n\t준성이 좌표 평면에 직선 ax=by$ax = by$를 긋는다. (0<max(|a|,|b|)≤2×109)$(0 < \\max(|a|, |b|) \\leq 2 \\times 10^9)$ \n\t성우가 나누어진 두 평면 중 하나를 선택하여 평면에 포함된 보물을 모두 갖는다. 직선 위에 있는 보물도 성우가 갖는다.\n\t준성은 성우가 갖지 않은 모든 보물을 갖는다.\n\n\n성우는 항상 두 평면 중 보물의 가치의 합이 적지 않게 포함되는 평면을 선택한다. 가난한 대학생 준성을 도와 준성이 가질 보물의 가치의 합이 최대가 되도록 하려면 어떻게 직선을 그어야 하는지 알려주도록 하자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31875","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t익준이는 한 프로그램에서 함수 호출이 일어난 함수명이 담긴 함수 호출 리스트를 가지고 있다. 이 리스트에서 서로 다른 원소로 이루어진 함수 호출 구간이 연속하여 가장 많이 반복된 구간을 확인하고 싶다.\n\n예를 들어, [A,B,C,A,B,C]$[A, B, C, A, B, C]$와 같은 함수 호출 리스트가 있으면, [A,B,C]$[A, B, C]$ 함수 호출 구간이 총 두 번 반복된 것을 알 수 있다.\n\n그러나 [A,B,C,B,A,B,C,B]$[A, B, C, B, A, B, C, B]$와 같은 함수 호출 리스트의 경우, 구간 [A,B,C,B]$[A, B, C, B]$가 연속하여 반복되지만 함수명 B$B$가 두 번 포함되어 있으므로 조건을 만족하지 않는다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31876","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t지금 한양대학교 ERICA캠퍼스는 에리-카드라는 게임이 선풍적인 유행을 끌고 있다! 에리-카드는 1:1 카드 대결게임으로, 각자 한 장씩 제시한 카드에 적힌 전투력이라는 수치를 비교하여 더 큰 쪽이 승리하는 게임이다.\n\n자존심이 강한 두 천재인 라스와 아욱은 에리-카드를 통해서 서로의 서열을 정리하려고 한다. 다만 라스가 제시한 전투력 A$A$는 u$u$진법 정수, 아욱이 제시한 카드에 적힌 전투력 B$B$는 v$v$진법 정수로 표기되어 있어 게임을 진행하는 데 어려움을 겪고 있다. 각자 카드에 적힌 수의 길이는 같다. 즉, 각 전투력을 이루는 숫자의 개수는 동일하다.\n\n두 사람을 위해 각자가 제시한 카드를 보고 둘 중 누가 승리하였는지 알려주도록 하자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31894","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tCarl the ant is back! After traversing meandering paths (Problem A, 2004 World Finals) and wandering over octahedrons (Problem C, 2009 World Finals) it is time for a little vacation — time to see the sights! And where better to see the sights than at the tips of tall structures like, say, pyramids!! And where better to see tall pyramids but Egypt!!! (This is so exciting!!!!!)\n\nAfter taking in the view from the tip of one pyramid, Carl would like to go to the tip of another. Since ants do not do particularly well in the hot sun, he wants to find the minimum distance to travel between the tips of these two pyramids, assuming he can only walk on the surfaces of the pyramids and the plane which the pyramids sit upon. The pyramids are, geometrically, right square pyramids, meaning the apex of the pyramid lies directly above the center of a square base.\n\n\n\nFigure 1: Illustration of two pyramids corresponding to Sample Input 1. The black line shows the shortest path between their apexes.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31852","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t마을 뒤편의 장대한 산에 도깨비가 하나 살고 있다. 도깨비는 가면으로 무서운 얼굴을 가리고 마을 축제에 놀러 가곤 한다. 올해도 신나는 축제를 즐긴 도깨비는 다음 축제를 위해 소중한 가면들을 숨겨두려 한다. 가면은 총 4$4$개로, 산에 있는 N$N$개의 굴 중 서로 다른 네 곳에 숨길 것이다.\n\n굴의 위치는 좌표평면 위 점으로 나타낼 수 있다. 기하학을 좋아하는 도깨비는 가면을 숨긴 4$4$개의 굴을 적절한 순서로 이으면 볼록한 사각형이 만들어지게 할 것이다. 이 문제에서 볼록한 사각형이란 4$4$개의 변이 꼭짓점에서만 만나며 내각의 크기가 모두 180° 미만인 사각형을 말한다.\n\n\n\n호기심이 많은 도깨비는 문득 서로 다른 4$4$개의 굴을 꼭짓점 삼아 만들 수 있는 볼록한 사각형이 몇 개나 되는지 궁금해졌다. 굴 N$N$개의 좌표가 주어지면 이 궁금증을 해결하는 프로그램을 만들어보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31906","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou play a game with multiple fair six-sided dice. Each die’s face displays a single symbol. The objective of the game is to roll the dice and create a valid word from the symbols on top of each die. If you cannot form a word, you may reroll the dice for another attempt.\n\n\n\nFigure 1: Five dice making a valid word corresponding to Sample Input 1.\n\nSuppose there are five dice: one of them contains letters A, B, C, D, E, and P (abbreviated as ABCDEP), and the other dice contain letters AEHOXU, AISOLR, ABCDEF, and ABCSCC. The first roll yields the following letters on the tops of respective dice: P, X, R, E, and S. As it is impossible to arrange these letters into a valid word, you decide to keep the P, S, and E, and reroll the other dice, in an attempt to make words like PARSE, PAUSE, PHASE, POISE, PROSE, PULSE, or PURSE. The two dice yield E and A, resulting in the following five letters: P, E, A, E, and S. You still cannot think of a valid word, so you decide to keep four letters and reroll only the last die, which has three sides with letter C. By doing so, there is a 50%$50\\%$ chance that it will be possible to make a final valid word: PEACE, as shown in Figure 1.\n\nWhen you roll a die, it lands on any one of its faces with equal probability. What is the expected number of rolls needed to make a valid word, assuming you use an optimal strategy?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31830","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tEasy 버전과 N$N$, Q$Q$의 제한을 제외한 문제 차이는 없다.\n\n다음 조건들을 만족하는 부분 문자열을 알파벳 묶음이라고 하자.\n\n\n\t하나의 동일한 알파벳으로만 문자열이 이루어져 있어야 한다.\n\t전체 문자열에서 해당 부분 문자열을 포함한 길이가 더 긴 부분 문자열로 알파벳 묶음을 만들 수 있으면 그 부분 문자열은 알파벳 묶음이 아니다.\n\n\n예를 들어 \"AAABBAAC\"와 같은 문자열이 있을 때, 알파벳 묶음은 \"AAA\", \"BB\", \"AA\", \"C\"로 4개다. 위의 문자열에서 \"B\", \"AC\"는 조건을 만족하지 않으므로 알파벳 묶음이 아니다.\n\n영어 알파벳 대문자로만 이루어진 길이가 N$N$인 문자열 S=S1S2…SN$S = S_1 S_2 \\dots S_N$가 주어질 때, 다음 쿼리를 수행하는 프로그램을 작성하자.\n\n\n\t 1 l r$1 \\ l \\ r$ : 부분 문자열 SlSl+1…Sr$S_l S_{l+1} \\dots S_r$에서 알파벳 묶음의 개수를 출력한다.\n\t 2 l r$2 \\ l \\ r$ : 부분 문자열 SlSl+1…Sr$S_l S_{l+1} \\dots S_r$의 모든 알파벳을 각각 알파벳 순서로 다음인 알파벳으로 변경한다. 단, Z인 경우 A로 변경한다.\n\n\n SlSl+1…Sr$S_l S_{l+1} \\dots S_r$는 S$S$의 l$l$번째 알파벳부터 r$r$번째 알파벳까지를 모두 순서대로 포함하는 부분 문자열이다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31895","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tEvery little child, and quite a number of adults, are fascinated by toy trains. From a toddler’s choo-choo train to a hobbyist’s elaborate model railroad filling an entire basement, they are a profitable business. The Toy Train Tracks Construction Company (TTTCC) manufactures train tracks for all ages and skill levels. To keep their existing customers busy and maybe attract some new ones, the TTTCC has recently started publishing maps for how to connect their train tracks into elaborate layouts. Usually, this starts with a designer coming up with an interesting track layout, and then publishing both the layout and the required number of different track segments (say, curves and straight parts) needed to construct it. But the TTTCC has recently learned that many customers are looking for the reverse: they already have train track segments lying around (maybe found in grandma’s attic), and would like to use them to create a large train course. How difficult might that be?\n\nTo study the feasibility of automating the layout-creation process, TTTCC is interested in constructing train courses using two different shapes: straight line segments, and 90$90$-degree turns (see Figure 1).\n\n\n\nFigure 1: A straight track segment and a curved track segment.\n\nValid layouts are created by placing these shapes on a square grid, with each track piece taking up exactly one grid cell. Both types of pieces can be rotated in 90$90$-degree increments. A “proper” train track needs to be connected, and should form a single closed loop. Given a set of straight and curved track segments, what is the longest closed loop that one can construct?\n\n\n\nFigure 2: A sample track using four straight track segments and twelve curves. This corresponds to Sample Output 1.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31877","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t민구는 이번 년도에 일이 너무 많아서 N$N$개의 작업이 쌓여있으며, 시간이 흐르면서 최대 M$M$개의 작업이 추가된다.\n\n기존에 있던 작업은 작업에 필요한 시간 ti$t_i$와 마감 시각 di$d_i$가 주어지고, 추가되는 작업은 추가되는 시각 wj$w_j$, 작업에 필요한 시간 tj$t_j$, 마감 시각 dj$d_j$가 주어진다.\n\n민구는 각 작업에 대해서 마감 시각이 가장 가까운 작업부터 시작하는데, 작업 도중 새로 추가된 작업의 마감 시각이 더 이를 경우 새로 추가된 작업을 한다. 기존에 하던 작업은 나중에 다시 이어서 할 수 있도록 작업에 필요한 시간이 작업을 했던 시간만큼 차감된다.\n\n예를 들어, 작업에 필요한 시간이 20분인 작업을 15분 동안 하다가 다른 작업으로 교체했을 경우, 기존에 하던 작업은 추후 5분만 추가적으로 작업을 하면 완료할 수 있다.\n\n마감 시각이 같은 작업들에 대해서는 작업에 필요한 시간이 더 적게 남아있는 작업을 먼저 한다.\n\n위 과정을 통해 총 N+M$N + M$개의 작업에 대해서 민구가 모든 작업을 완료할 수 있는지 알려주자.\n\n민구는 한 가지 일에 집중하는 스타일이기에 한 번에 하나의 작업밖에 못한다. 또한 N+M$N + M$개의 작업을 모두 완료할 때까지 작업을 한다.\n\n현재 시각은 0$0$초이다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31896","content":"문제\n\nSee how they roll! According to a famous story, Warren Buffett once challenged Bill Gates to a simple game of dice. He had three dice; the first player could examine them and choose one of the three. The second player would then choose one of the remaining dice, and both players would roll their dice against each other, aiming for the highest numbers. Warren offered to let Bill go first, but this made Bill suspicious so he opted to go second. It turned out to be a wise choice: these were intransitive dice. The first die had an advantage when rolling against the second, the second had an advantage when rolling against the third, but the first did not have an advantage when rolling against the third!\n\nTo formalize this: define a “die” as any shape with at least one face such that each face shows a positive integer. When a die is rolled, one of its faces is selected uniformly at random. When two dice roll against each other, the die whose selected face shows a higher number earns \n1\n$1$ point; if both numbers are equal, each die earns \n12\n$\\frac{1}{2}$ points. For dice \nD\n$D$ and \nD′\n$D'$ , define \nscore(D,D′)\n$score(D, D' )$ as the expected number of points \nD\n$D$ earns from a single roll against \nD′\n$D'$. If \nscore(D,D′)>12\n$score(D, D') > \\frac{1}{2}$, we say that \nD\n$D$ has an advantage over \nD′\n$D'$; if \nscore(D,D′)=12\n$score(D, D') = \\frac{1}{2}$, the two dice are tied. For example, if \nD\n$D$ is the first die in the sample input and \nD′\n$D'$ is the second, \nscore(D,D′)=49\n$score(D, D') = \\frac{4}{9}$ and \nscore(D′,D)=59\n$score(D' , D) = \\frac{5}{9}$, so \nD′\n$D'$ has an advantage over \nD\n$D$.\n\nGiven two dice \nD1\n$D_1$ and \nD2\n$D_2$ such that \nD1\n$D_1$ has an advantage over \nD2\n$D_2$, you want a third die \nD3\n$D_3$ that forms an intransitive trio with the other two. Among all \nD3\n$D_3$ that have an advantage over or tie with \nD1\n$D_1$, compute the lowest possible \nscore(D3,D2)\n$score(D_3, D_2)$. If this is less than \n12\n$\\frac{1}{2}$, you can make an intransitive trio! Similarly, among all \nD3\n$D_3$ such that \nD2\n$D_2$ has an advantage over or ties with \nD3\n$D_3$, compute the highest possible \nscore(D3,D1)\n$score(D_3, D_1)$."},{"problemId":"31907","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tGIST 학생 홍보대사 지온나래는 GIST를 홍보하기 위해 큰 현수막을 준비하고 있다. 현수막에는 다음과 같은 그림이 들어갈 것이다.\n\nG...\n\n.I.T\n\n..S.\n\n정수 K$K$가 주어지면, 주어진 그림을 K$K$배 확대한 그림을 예제 출력과 같이 출력하시오.\n\n주어진 그림을 K$K$배 확대한다는 것은 그림을 하나의 행렬로 보고 이를 확대한다는 것이다. 자세한 정의는 다음과 같다. 가로 길이가 M$M$이고 세로 길이가 N$N$인 그림은 N×M$N \\times M$ 행렬 X=(xij)$X = \\left(x_{ij}\\right)$로 나타낼 수 있으며, 이 행렬 X$X$를 K$K$배 확대한 행렬 Y$Y$는 KN×KM$KN \\times KM$ 행렬로, 다음과 같이 정의된다.\n\n Y=(yij),yij=x⌊i+K−1K⌋⌊j+K−1K⌋$$Y = \\left(y_{ij}\\right), y_{ij} = x_{\\left\\lfloor\\frac{i + K - 1}{K}\\right\\rfloor\\left\\lfloor\\frac{j + K - 1}{K}\\right\\rfloor} $$ \n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31878","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t평범한 방식의 스도쿠에 질린 룰루는 새로운 방식의 스도쿠를 제안했다.\n\n\n\t N$N$개의 정점으로 이루어진 트리와 N$N$개의 정수로 이루어진 수열 A$A$가 주어진다. 수열 A$A$의 i$i$번째 원소는 Ai$A_i$이며, 수열 A$A$의 원소는 서로 다른 값을 갖는다.\n\t트리의 모든 정점과 수열의 모든 원소를 일대일 대응시킨다. 즉, 트리의 각 정점은 수열의 원소 하나와 대응되며, 대응되는 원소는 서로 다르다.\n\t각 정점은 대응된 원소의 값을 자신의 값으로 정한다. 이때 모든 인접한 두 정점의 값의 합이 서로 달라야 한다. 다시 말해, 트리에서 어떤 인접한 두 정점의 합은 다른 모든 인접한 두 정점의 합과 달라야 한다.\n\n\n룰루는 이와 같은 스도쿠를 트리 스도쿠라고 부르기로 했다. 위 규칙에 맞추어 트리 스도쿠를 진행해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31879","content":"문제\n\n2123년 봄, 드디어 '바이러스 시뮬레이터'가 출시되었다.\n\n바이러스 시뮬레이터는 사람들의 면역력과 바이러스의 생명력 등을 설정하여 직접 시뮬레이션을 진행하는 프로그램으로, 훗날 바이러스가 창궐할 때를 대비하여 만든 프로그램이다.\n\n이 시뮬레이터에는 초기에 \nN\n$N$명의 사람들이 \n1\n$1$번부터 \nN\n$N$번까지 번호 순서대로 배치되어 있고, \ni\n$i$번째 사람의 면역력은 \nAi\n$A_i$이다.\n\n여기에 한 번 이상의 행동을 할 수 있으며, 행동의 종류는 바이러스 침투, 백신 접종, 그룹 면역력 측정 총 3가지가 있다. 각 행동은 입력으로 아래와 같이 주어진다.\n\n \n1\n$1$ \ni\n$i$ \nx\n$x$: 바이러스 침투 - 생명력이 \nx\n$x$인 바이러스가 \ni\n$i$번 사람에게 침투한다. 바이러스는 생명력을 \n1\n$1$만큼 소모하여 감염자의 면역력을 \n1\n$1$ 감소시킨다. 이때 침투한 바이러스가 죽기 전에 감염자의 면역력이 없거나(즉, 면역력이 \n0\n$0$이거나) 없어지게 된다면, 바이러스는 현재 위치한 감염자의 번호보다 큰 번호를 가진 사람 중 가장 면역력이 높은 사람에게 전이되며, 생명력이 \n0\n$0$이 되어 죽거나 더 이상 전이될 사람이 없을 때까지 반복된다. 전이 조건과 일치하는 사람이 여러 명일 경우, 그중 번호가 가장 작은 사람에게 전이된다. \n(1≤i≤N;1≤x≤109)\n$(1 \\le i \\le N;1 \\le x \\le 10^{9})$ \n \n2\n$2$ \ni\n$i$ \nx\n$x$: 백신 접종 - \ni\n$i$번 사람에게 효력이 \nx\n$x$인 백신을 접종하여 면역력이 \nx\n$x$만큼 오른다. \n(1≤i≤N;1≤x≤109)\n$(1 \\le i \\le N;1 \\le x \\le 10^{9})$ \n \n3\n$3$ \nl\n$l$ \nr\n$r$: 그룹 면역력 측정 - \nl\n$l$번부터 \nr\n$r$번까지의 사람들이 그룹을 형성한다. 그룹은 인접한 사람들끼리 구성할 수 있고, 면역력이 없는 사람들은 없는 사람들끼리, 있는 사람들은 있는 사람들끼리 그룹을 만든다. 이때 구성되는 그룹 중, 그룹 구성원의 면역력의 합의 최댓값을 구한다. \n(1≤l≤r≤N)\n$(1 \\le l \\le r \\le N)$ \n\n사람의 수 \nN\n$N$과 \nQ\n$Q$번의 행동 목록이 주어지면, 시뮬레이터를 실행했을 때의 결과를 직접 출력해 보자.\n\n행동은 행동 목록 순서대로 수행되며, 한 번의 행동이 완료될 때까지 그 다음 행동이 수행되지 않는다."},{"problemId":"31897","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tOne of the most remarkable landmarks in Egypt is the Great Sphinx of Giza, a statue depicting a mythical creature with the head of a human, the body of a lion, and the wings of an eagle. Sphinxes were regarded as guardians in Egyptian and Greek mythologies. Probably the most famous sphinx is the one who guarded the Greek city of Thebes. According to myths, when Oedipus tried to enter the city, the sphinx gave him the following riddle: “Which creature has one voice, but has four feet in the morning, two feet in the afternoon, and three feet at night?” As you might have heard, Oedipus correctly answered, “Man — who crawls on all fours as a baby, then walks on two feet as an adult, and then uses a walking stick in old age.”\n\nIn this problem, you meet a different sphinx who gives you a somewhat reversed riddle: “How many legs do an axex, a basilisk, and a centaur have?” While you recognize these as creatures from Egyptian and Greek mythology, you have no clue how many legs each has (except that it is a nonnegative integer). The sphinx sternly instructs you to not touch anything so you are unable to search for the answer on your phone.\n\nHowever, the sphinx allows you to ask her five questions. In each question you can ask the sphinx how many legs some number of these creatures have in total. For instance, you could ask, “How many legs do three basilisks and one axex have in total?” or “How many legs do five centaurs have?” Seems easy enough, you think, but then you remember that sphinxes are tricky creatures: one of the sphinx’s five answers might be an outright lie, and you do not know which one.\n\nWrite a program to talk to the sphinx, ask the five questions, and solve the riddle.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31898","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are watching a group of kids playing a friendly game of Quartets and having fun. At one moment, you started being suspicious that some of the kids may be cheating. It seems the kids themselves are not bothered by that at all. Quite the contrary, this brings them even more fun, especially when someone gets caught cheating. As a programmer, you immediately started to think about ways to detect cheating by just observing their game.\n\nQuartets is a 4$4$-player card game that uses a deck of 32$32$ cards divided into 8$8$ sets of 4$4$ cards each. Actual cards often contain educational images, which helps players to learn not only individual objects but also their classification. For example, the cards may display animals while the sets correspond to various groups of animals (mammals, reptiles, etc.).\n\nAt the beginning of a Quartets game, every player is dealt 8$8$ cards and player 1$1$ starts their turn. In each turn, a player asks another player whether they have one particular card. If the asked player has that card, they must give it to the requester, and the requester continues their turn by asking any of the players for another card. If the asked player does not possess the requested card, the requesting player loses the turn and the asked player starts their turn. An important rule states that the requesting player must already have at least one card from the same set as the card they ask for.\n\nIf, during their turn, a player holds a full set (“quartet”) in their hand, the player may show the quartet to the other players, put it aside and gain one point. The four cards of the quartet are permanently removed from the current game. If at any point a player has no cards left, that player leaves the game. If it was that player’s turn, the turn passes to the next player in sequence (player 1$1$-2$2$-3$3$-4$4$-1$1$-…$\\dots$) who still has any cards. If no players have any cards, the game ends and the player with the most points is declared the winner.\n\nPlayers are not allowed to ask for cards that have been removed from the game, and they cannot ask for a card from a player who has left the game.\n\nCheating in the game of Quartets is conceivable in two situations where a player falsely claims to have (or not have) some card. Specifically, the cheating occurs if\n\n\n\ta player asks for a card although they have no card of the corresponding set, or\n\ta player being asked claims not to have the requested card although they have it.\n\n\nNeedless to say, cheating is often discovered later. Theoretically, a watchful opponent can eventually find out about any cheating, as all cards are finally revealed at some point before the game ends.\n\nNote that asking for a card that the asked player cannot possibly have (for example, because the requester has it in their own hand) is not exactly a smart move but is not considered cheating by itself.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31853","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t원 위에 N$N$개의 점이 있다. 각 점에는 시계방향으로 1$1$번부터 N$N$번까지의 번호가 부여되어 있다. 동현이는 이 중 두 점을 연결하는 서로 다른 선분을 M$M$개 그렸다. 동현이가 그린 그림에서 세 선분으로 만들 수 있는 삼각형의 개수를 구하여라.\n\n동현이가 점을 매우 적절하게 찍었기 때문에, 한 점에서 3$3$개 이상의 선분이 만나지 않는다.\n\n\n\n \n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31908","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t종현이는 학교에 커플이 얼마나 많은지 확인하고자 한다.\n\n커플은 왼손 약지에 남들과 구별되는 반지를 커플링으로 착용하고 있다는 사실을 알게 된 종현이는, 모든 재학생의 왼손 약지를 확인하기로 했다. 특징이 같은 반지를 착용한 사람이 정확히 두 명이라면, 종현이는 두 명을 커플 의심군으로 판단한다.\n\n주어진 입력에 대해 종현이가 커플 의심군으로 판단할 사람들을 구하시오.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31831","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t상원이는 과민성 대장 증후군을 앓고 있다. 과민성 대장 증후군의 원인은 스트레스!\n\n상원이의 N$N$일 동안의 스트레스 변화량 A1,⋯,AN$A_1,\\cdots ,A_N$이 주어진다. Ai≥0$A_i\\ge 0$ 이면 i$i$번째 날에 Ai$A_i$ 만큼 스트레스가 쌓이고, Ai<0$A_i<0$ 이면 i$i$번째 날에 −Ai$-A_i$ 만큼 스트레스가 해소된다. 단, 변화를 관찰하기 시작한 시점의 스트레스 양은 0$0$이며, 누적된 스트레스 양보다 해소하는 스트레스 양이 더 많을 경우 스트레스는 0$0$이 될 때까지만 감소한다.\n\n상원이는 스트레스가 M$M$ 이상 쌓인 날에 복통을 겪게 될 때, 상원이가 며칠 동안 복통에 시달리게 되는지 알아보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31909","content":"문제\n\n한 공장에서 인공지능 로봇이 오작동을 일으켜 폭주하고 있다. 로봇의 작동을 멈추기 위해서는 주어진 \n8\n$8$개의 키 중 어느 것이 로봇을 정지시키는 키인지 찾아야 한다. 그러나 로봇이 그 키마저도 섞기 시작했다. 섞는 속도가 매우 빨라 인간의 시력으로는 키의 움직임을 추적할 수 없다. 다행히 당신은 로봇이 키를 섞는 데 사용하는 알고리즘과 로봇을 정지시키는 키의 처음 위치를 알고 있다.\n\n각 키에는 \n0\n$0$번부터 \n7\n$7$번까지의 번호가 매겨져 있고, 이들은 각각 서로 다른 점 \nP0,P1,⋯,P7\n$P_0, P_1, \\cdots, P_7$ 위에 놓여 있다. 로봇은 미리 주어진 길이 \nN\n$N$의 수열을 하나씩 순서대로 읽으며 키를 섞는다. 이때 \ni\n$i$번 키와 \nj\n$j$번 키\n(i<j)\n$(i < j)$의 위치를 바꾸는 명령은 정수 \n2i+2j\n$2^i + 2^j$로 인코딩된다. \ni\n$i$번 키와 \nj\n$j$번 키의 위치를 바꾼다는 것은, \ni\n$i$번 키가 점 \nPk\n$P_k$에 놓여 있고 \nj\n$j$번 키가 점 \nPl\n$P_l$에 놓여 있을 때 \ni\n$i$번 키를 점 \nPl\n$P_l$ 위치로 옮기고 \nj\n$j$번 키를 점 \nPk\n$P_k$ 위치로 옮긴다는 것이다.\n\n로봇이 읽는 수열 안에는 유효하지 않은 명령도 존재할 수 있다. 유효하지 않은 명령 \nx\n$x$는 어떤 두 정수 \ni,j(0≤i<j≤7)\n$i, j(0 \\leq i < j \\leq 7)$에 대해서도 \nx=2i+2j\n$x = 2^i + 2^j$를 만족시키지 않는 명령이다. 로봇이 유효하지 않은 명령을 인식하면 그 명령을 무시하고 다음 명령으로 넘어간다.\n\n로봇을 정지시키는 키의 번호와 명령들의 수열이 주어지면, 로봇을 정지시키는 키는 \nP0,P1,⋯,P7\n$P_0, P_1, \\cdots, P_7$ 중 몇 번 점에 위치하는지 구하시오."},{"problemId":"31854","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t부등호 퍼즐은 1$1$부터 N2$N^2$까지의 정수를 모두 이용하여 N×N$N \\times N$ 격자판을 채우는 퍼즐이다. 격자 칸 사이에는 부등호가 그려져 있는데, 인접한 두 격자 칸의 정수가 만족해야 하는 대소 관계를 의미한다. 예를 들어, 다음과 같은 3×3$3 \\times 3$ 부등호 퍼즐이 주어졌다고 하자.\n\n\n\n맨 왼쪽 맨 위에 위치한 격자판을 보자. 가로로 인접한 격자판과 세로로 인접한 격자판 사이에는 부등호가 적혀있다. 이때 다음 그림과 같이 주어진 대소 관계를 만족하면서 격자판에 정수를 채워 넣을 수 있다.\n\n\n\n이와 같이 주어진 격자판 간의 대소 관계를 만족하면서 1$1$부터 9$9$까지의 모든 정수를 이용하여 다음과 같이 퍼즐을 완성할 수 있다.\n\n\n\n N×N$N \\times N$ 부등호 퍼즐이 주어질 때 퍼즐의 해답을 출력하는 프로그램을 작성하라. 가능한 답이 여러 가지라면 그중 아무거나 하나를 출력한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31832","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t숭실대학교 컴퓨터학부 문제해결 소모임 SCCC 부원들은 매년 SCON, ICPC와 같은 팀 대회에서 사용할 팀명을 정하기 위해 많은 고민을 한다. 특히 여러 개의 후보 중에서 실제로 사용할 팀명 하나를 정하는 것이 어렵기 때문에, 졸업을 두 학기 남겨둔 정휘는 더 이상 부원들이 고통을 받지 않도록 가이드라인을 만들었다.\n\n정휘의 가이드라인에 따르면 아래 조건 중 만족하는 조건의 개수가 많을수록 좋은 팀명이다.\n\n\n\t알파벳 대문자보다는 소문자가 귀엽다. 따라서 대문자가 소문자보다 더 많이 등장하면 안 된다.\n\t팀명이 너무 복잡하면 사회자가 제대로 읽지 못할 수 있다. 따라서 팀명은 10글자 이하로 지어야 한다.\n\t숫자로만 구성된 팀명은 월드 파이널에 진출하지 못하는 징크스가 있다. 따라서 팀명에는 숫자가 아닌 글자가 하나 이상 포함되어 있어야 한다.\n\n\n N$N$개의 팀명 후보가 주어진다. 가이드라인에서 제시한 세 가지 조건을 모두 만족하는 팀명을 출력하는 프로그램을 작성해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31910","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t각 칸에 0$0$ 또는 1$1$이 적혀 있는 N×N$N \\times N$ 격자가 있다. 인선이는 1$1$행 1$1$열에서 출발해 N$N$행 N$N$열까지 이동하는데, 오른쪽(열 번호가 증가하는 방향) 또는 아래(행 번호가 증가하는 방향)로만 한 칸씩 이동할 수 있다. 인선이는 어떤 칸에 방문할 때마다 그 칸에 적힌 문자를 자신이 갖고 있는 문자열의 뒷부분에 덧붙인다. 예를 들어, 주어진 그림에서 인선이가 1$1$행 1$1$열에서 출발하여 순서대로 오른쪽, 아래, 오른쪽으로 한 칸씩 이동한다면 인선이가 가진 문자열은 1101이다.\n\n\n\n N$N$행 N$N$열에 도착하면 인선이는 자신이 갖고 있는 문자열을 이진수로 해석한 값 M$M$을 계산한다. 예를 들어, 인선이가 가진 문자열이 1101일 경우 M=13$M=13$이다. 인선이가 계산하게 될 M$M$의 최댓값을 구하시오.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31855","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t N×M\\(N \\times M\\) 크기의 격자가 있다. 격자의 한 칸에서 시작해서 모든 칸을 한 번씩 방문한 뒤, 격자 밖으로 나가는 경로를 만들어 보자.\n\n\n\n조금만 생각해 보면 아주 간단하게 풀리는 문제라는 사실을 알 수 있다. 하지만 여러분을 괴롭히고 싶었던 치훈이는 여기에 한 가지 조건을 더하기로 했다.\n\n임의의 한 칸에서의 이동 방향이 정해져 있다면 어떨까? 예를 들어, 위 격자의 3\\(3\\)행 2\\(2\\)열에 있는 칸에서는 무조건 오른쪽으로 이동해야 한다고 생각해 보자.\n\n\n\n이는 다음과 같이 해결할 수 있다. 물론 이것 말고도 다양한 답이 존재한다.\n\n\n\n이제 여러분의 차례이다. x\\(x\\)행 y\\(y\\)열에 있는 칸에서의 이동 방향이 정해져 있을 때, 격자의 한 칸에서 시작해서 모든 칸을 한 번씩 방문한 뒤, 격자 밖으로 나가는 경로를 출력하는 프로그램을 작성해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31920","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tPitmuation is a two player card game, where each player has a deck of N$N$ cards numbered from 1$1$ to N$N$. The two players shuffle their decks and they put the cards on the table one by one. At each step, the player with the higher card wins one point. If the two cards are equal, there are no points awarded. The game ends after N$N$ steps, when all the cards have been used.\n\nFor some indices between 1$1$ and N$N$ you know the cards of the first player, and for the other indices you know the cards of the second player.\n\nGiven the size of the decks N$N$, an integer S$S$ and the known cards for the two players, determine the number of configurations of the unknown cards where the first player is awarded a total of exactly S$S$ points.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31833","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t‘온데간데없을뿐더러’는 어떻게 띄어 써야 할까? 형용사 ‘온데간데없다’와 어미 ‘-을뿐더러’가 결합하였기 때문에 띄어쓰기 없이 ‘온데간데없을뿐더러’라고 쓰는 것이 올바른 표현이다.\n\n각각 N$N$개의 양의 정수로 구성된 두 배열 A$A$, B$B$가 주어진다. A$A$에 있는 수를 모두 순서대로 공백 없이 이어서 썼을 때 얻게 되는 수를 X$X$, B$B$에 있는 수를 같은 방식으로 이어서 썼을 때 얻게 되는 수를 Y$Y$라고 했을 때, X$X$와 Y$Y$ 중 더 작은 값을 구하는 프로그램을 작성하시오.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31911","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tGIST AI대학원에 재학 중인 지원이는 원칙적으로는 집에서 가정용 ChatGPT 정도는 쉽게 만들 수 있어야 한다. 하지만 지원이는 귀찮기 때문에 딥 러닝을 사용한 언어 모델 대신에 기본 NLP 기술인 n-gram 모델을 약간 수정하여 사용할 것이다.\n\n지원이의 언어 모델은 문자 하나가 주어지면 훈련 코퍼스를 참조하여 다음 문자를 예측해 낸다. 훈련 코퍼스는 문자열 여러 개로 이루어져 있다. 어떤 문자 c$c$가 주어지면, 지원이의 언어 모델은 훈련 코퍼스에 있는 모든 문자 c$c$를 검색한 다음, 훈련 코퍼스에서 c$c$ 바로 다음 위치에 가장 많이 나오는 문자 c′$c'$를 찾아서 c$c$ 다음 문자가 c′$c'$일 것이라고 예측한다. c=c′$c=c'$일 수도 있음에 주의하라. 만약 그런 문자가 여러 개 있다면, 아스키 코드가 가장 작은 것을 선택한다. 만약 훈련 코퍼스에 문자 c$c$가 존재하지 않는다면, 언어 모델이 다음 문자를 예측할 수 없어 오류가 발생한다.\n\n훈련 코퍼스는 문장의 시작을 나타내는 문자 [와 문장의 끝을 나타내는 문자 ], 알파벳 소문자 a-z, 그리고 띄어쓰기를 대체하는 문자 -로만 구성되어 있다. 훈련 코퍼스 내의 모든 문장은 [로 시작하고 ]로 끝나며 길이가 3$3$ 이상이다. 문자 [는 반드시 문장의 시작에만 등장하고, 문자 ]는 반드시 문장의 끝에만 등장한다.\n\n언어 모델을 사용하여 문장을 생성하는 방법은 다음과 같다. 먼저 언어 모델에 문장의 시작을 나타내는 문자 [을 입력한다. 그 다음 언어 모델이 다음 문자 c1$c_1$을 예측하면, 생성하고 있는 문장의 끝에 예측한 문자를 추가한다. 그 다음 문자 c1$c_1$을 다시 언어 모델에 입력해 다음 문자 c2$c_2$를 예측한다. 이를 반복한다. 만약 반복 과정에서 문장의 끝을 나타내는 문자 ]가 등장하면 반복을 끝내고 예측을 종료한다. 그렇지 않다면, 다음 문자를 예측하는 과정은 무한히 반복된다. 훈련 코퍼스가 공집합이 아닌 한, 이 과정에서 언어 모델이 다음 문자를 예측할 수 없는 오류가 발생하지 않음을 증명할 수 있다.\n\n훈련 코퍼스가 주어지면, 지원이와 함께 이 모델이 생성하는 문자열의 부분 문자열을 추측해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31856","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n인경호수공원은 위 그림과 같이 인경호를 둘러싼 N$N$개의 갈림길과 N$N$개의 출입구가 있는 호수공원이다.\n\n호수의 각 갈림길과 출입구에는 시계방향으로 0$0$번부터 N−1$N - 1$번까지 번호가 매겨져 있다. 공원의 i$i$번 갈림길은 (i−1) mod N$(i - 1) \\ \\text{mod} \\ N$번 갈림길, (i+1) mod N$(i + 1) \\ \\text{mod} \\ N$번 갈림길, 그리고 i$i$번 출입구와 길로 연결되어 있다. i$i$번 갈림길과 (i+1) mod N$(i + 1) \\ \\text{mod} \\ N$번 갈림길 사이 길의 거리는 ai$a_i$, i$i$번 갈림길과 i$i$번 출입구 사이 길의 거리는 bi$b_i$이다.\n\n이 인경호수공원의 환경이 마음에 든 용모는 다음과 같은 조건을 만족하는 산책 코스를 짜기로 했다.\n\n\n\t산책 코스는 공원에 있는 길만을 포함한다.\n\t산책 코스의 시작과 끝은 공원의 서로 다른 두 출입구이다.\n\t이미 지나갔던 길을 다시 지나지 않는다.\n\n\n용모는 산책을 좋아하기 때문에 조건을 만족하는 가능한 모든 산책 코스 중 거리가 가장 긴 산책 코스를 골라 산책을 하기로 했다. 이때 용모가 고른 산책 코스 거리를 구하는 프로그램을 작성해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31921","content":"문제\n\nGigel has an undirected graph \nG\n$G$ with \nN\n$N$ nodes and \nM\n$M$ edges with positive costs. After the mess Gigel got into at the Romanian National Olympiad in Informatics, Ninel, Gigel's little brother, stole all his edges. Gigel wants to get the edges back, but Ninel is going to make him go through some challenges.\n\nYou are given an array of undirected edges \nS\n$S$ of length \nL\n$L$. Every edge has a regular cost, but it also has a rejection cost \nr\n$r$. Gigel has to accomplish the following mission he got from Ninel: find the minimum cost of going from node \nu\n$u$ to node \nv\n$v$ using a subarray of edges of \nS\n$S$. Gigel is given an interval \n[a,b](a≤b)\n$[a,b](a≤b)$ which determines the indices of the edges in \nS\n$S$ he is allowed to use.\n\nGigel is initially in node \nx\n$x$ and he iterates over the edges \nSa,Sa+1,…,Sb\n$S_a,S_{a+1},\\dots ,S_b$. At each step:\n\nHe chooses to use the current edge \n(x,y)\n$(x,y)$ if he currently is in node \nx\n$x$ to move to node \ny\n$y$ (or the other way around, if he's in node \ny\n$y$ to move to node \nx\n$x$). The travelling cost is increased by the cost of the edge \n(x,y)\n$(x,y)$.\nHe rejects the current edge and doesn't move from his current node. The travelling cost is increased by the rejection cost of the edge.\n\nYou know the number of nodes \nN\n$N$, the array of edges \nS\n$S$ and \nQ\n$Q$ missions Gigel needs to accomplish.\n\nThe array \nS\n$S$ consists of tuples of the form:\n\n \n<x,y,c,r>\n$<x,y,c,r>$, representing an edge \n(x,y)\n$(x,y)$ with cost \nc\n$c$ and rejection cost \nr\n$r$ \n\nThe \nQ\n$Q$ missions are tuples of the form:\n\n \n<u,v,a,b>\n$<u,v,a,b>$: Gigel is initially in node \nu\n$u$ and has to move to node \nv\n$v$, using the edges with indices between \na\n$a$ and \nb\n$b$.\n\nFind the minimum cost for each mission. If Gigel cannot reach node \nv\n$v$ output \n−1\n$-1$."},{"problemId":"31940","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t평소 농지 가꾸기 동아리 활동을 좋아하는 진호는 농사에 필요한 땅을 매입했다. 진호는 자신이 매입한 땅에 있는 N$N$개의 농장에 각각 1$1$번부터 N$N$번까지 번호를 붙였다. 각 농장은 좌표평면 위의 점으로 표현했을 때 x$x$좌표와 y$y$좌표가 모두 정수인 좌표에 있다.\n\n진호는 농지 가꾸기 동아리의 회장과 부회장에게도 땅을 나누어 주려고 한다. 진호는 자신의 땅에서 각 변이 x$x$축 또는 y$y$축에 수직인 직사각형 모양의 땅을 적당히 선택한 후, 그 땅을 두 부분으로 잘라 회장과 부회장에게 하나씩 나누어 주려고 한다. 이러한 과정을 통해서 회장과 부회장이 받는 땅 역시 각 변이 x$x$축 또는 y$y$축에 수직인 직사각형 모양이어야 한다.\n\n N$N$개의 농장은 각 직사각형의 내부 또는 외부에 있어야 한다. 즉, 회장과 부회장이 갖게 될 땅의 경계에는 농장이 있으면 안 된다. 회장과 부회장이 갖게 될 땅의 각 꼭짓점이 정수 좌표일 필요는 없다.\n\n회장과 부회장은 자신이 받게 될 땅에 있는 모든 농장에 작물을 심어야 한다. 자신의 땅에 있지 않은 농장에는 작물을 심어서는 안 된다. 각 농장에는 심을 수 있는 작물이 다르며, i$i$번 농장에서 작물을 심을 때 회장은 ai$a_i$만큼, 부회장은 bi$b_i$만큼의 만족감을 얻는다.\n\n회장과 부회장이 받게 될 땅에 농장이 없을 수도 있다. 작물을 심을 농장이 없는 경우 얻는 만족감의 합은 0$0$이다. 진호는 회장과 부회장이 더 많은 만족감을 얻기를 원한다. 회장과 부회장이 작물을 심어 얻을 수 있는 만족감의 합의 최댓값을 구해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31912","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n너에게서는 멸종된 과일 향기가 난다\n\n투룸 신축 빌라 보증금 이천에 월세 구십, 어떻게 해야 너를 웃길 수 있을까 하는 생각, 두 시간 동안의 폭우, 일주일 동안의 아침, 유리병 속 무한히 터지는 기포\n\n-고선경, [샤워젤과 소다수]\n\n\n세로로 길쭉한 유리병 하나가 있다. 이 속에서 기포가 무한히 터지고 있다.\n\n과학자 정우가 이 현상에 호기심을 느끼고 계속해서 관찰한 결과 다음과 같은 사실을 알아냈다. 먼저, 유리병을 세로로 N$N$등분하여 가장 아래에 위치한 1$1$번째 구역부터 가장 위에 위치한 N$N$번째 구역까지 총 N$N$개의 구역으로 나눌 수 있다. 각 구역마다 최대 M$M$개의 기포가 존재할 수 있다. 처음에는 어느 구역에도 기포가 존재하지 않고, 1$1$초마다 유리병 내에서 다음 두 현상이 순서대로 번갈아 가며 일어난다.\n\n\n\t기포 생성: 유리병 내의 구역 하나에서 기포가 생성된다. i$i$번째 기포 생성이 일어날 때, yi$y_i$번째 구역에서 ki$k_i$개의 기포가 생성된다. 만약 그 구역에서 원래부터 존재하던 기포 수와 새로 생성된 기포 수의 합이 M$M$을 넘으면, M$M$개만 남고 나머지 기포는 모두 사라진다.\n\t기포 이동: 모든 구역에서 기포들이 동시에 위 또는 아래로 이동한다. i$i$번째 구역에 ai$a_i$개의 기포가 존재한다면, ⌊ai5⌋$\\displaystyle{\\left\\lfloor\\frac{a_i}{5}\\right\\rfloor}$개의 기포가 바로 위 구역으로 이동하고, ⌊ai5⌋$\\displaystyle{\\left\\lfloor\\frac{a_i}{5}\\right\\rfloor}$개의 기포가 바로 아래 구역으로 이동하며, ⌊ai5⌋$\\displaystyle{\\left\\lfloor\\frac{a_i}{5}\\right\\rfloor}$개의 기포는 제자리에 남아 있고, 나머지 기포는 사라진다. 만약 1$1$번째 구역의 아래 또는 N$N$번째 구역의 위로 움직이려 하는 기포가 있을 경우 그 기포는 사라진다. 기포 이동 후 각 구역마다 그 구역의 기포 수가 M$M$을 넘으면, M$M$개만 남고 나머지 기포는 모두 사라진다.\n\n\n                      그림 1. (a) 유리병을 N$N$개의 구역으로 나눈 모습. (b) 1$1$번째 구역과 N$N$번째 구역에서 각각 기포 이동이 일어나는 모습.\n\n정우는 유리병 속 기포의 움직임을 모델링하는 프로그램을 만들려 한다. t$t$초가 지난 후, 즉 기포 생성과 기포 이동이 각각 t$t$번 일어난 후 유리병 속에 남은 모든 기포의 수를 S(t)$S(t)$라 하자. 관찰을 진행한 시간 T$T$가 주어질 때, S(1),S(2),⋯,S(T)$S(1), S(2), \\cdots, S(T)$의 값을 구하시오.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31857","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t안즈는 사탕을 정말 좋아한다. 그래서 안즈는 그동안 벌었던 모든 돈을 투자해 사탕 공장을 세웠다.\n\n\n\n사탕 공장의 마지막 공정인 포장 단계에서는 다양한 종류의 사탕을 두 개의 컨베이어 벨트와 하나의 집게를 이용해 조작한다. 컨베이어 벨트는 N\\(N\\)개의 칸으로 이루어져 있으며, 집게는 컨베이어 벨트의 첫 번째 칸부터 임의의 칸까지 모든 사탕을 한 번에 집을 때 쓰인다.\n\n구체적으로 가능한 조작의 종류는 다음과 같다. 초기에 각 컨베이어 벨트의 모든 칸에는 하나의 사탕이 올려져 있다.\n\n\n\t S\\(S\\): 집게를 이용해 두 컨베이어 벨트의 첫 번째 칸부터 R\\(R\\) 번째 칸 사이에 위치한 모든 사탕을 각각 서로 교환한다. R\\(R\\)은 현재 집게의 크기이다.\n\t\n\t\t다시 말하면, 1번 컨베이어 벨트의 첫 번째 칸에 있는 사탕과 2번 컨베이어 벨트의 첫 번째 칸에 있는 사탕을 서로 교환하고, 두 번째 칸에 있는 사탕을 서로 교환하고, ..., 마지막으로 R\\(R\\) 번째 칸에 있는 사탕을 서로 교환한다.\n\t\n\t\n\t L\\(L\\) x\\(x\\): x\\(x\\)번 컨베이어 벨트를 한 칸 왼쪽으로 움직인다.\n\t\n\t\t즉, 첫 번째 칸에 있는 사탕을 제외한 모든 사탕의 위치가 p\\(p\\) 번째 칸에서 (p−1)\\((p−1)\\) 번째 칸으로 바뀐다. 첫 번째 칸에 있는 사탕은 N\\(N\\) 번째 칸으로 이동한다.\n\t\n\t\n\t R\\(R\\) x\\(x\\): x\\(x\\)번 컨베이어 벨트를 한 칸 오른쪽으로 움직인다.\n\t\n\t\t즉, N\\(N\\) 번째 칸에 있는 사탕을 제외한 모든 사탕의 위치가 p\\(p\\) 번째 칸에서 (p+1)\\((p+1)\\) 번째 칸으로 바뀐다. N\\(N\\) 번째 칸에 있는 사탕은 첫 번째 칸으로 이동한다.\n\t\n\t\n\t I\\(I\\): 집게의 크기를 1\\(1\\) 늘린다. 집게의 크기가 N\\(N\\)보다 커지는 입력은 들어오지 않는다.\n\t D\\(D\\): 집게의 크기를 1\\(1\\) 줄인다. 집게의 크기가 1\\(1\\)보다 작아지는 입력은 들어오지 않는다.\n\n\n안즈는 모든 조작이 끝난 후에 사탕이 어떻게 배열되어 있을지 알고 싶어졌다. 하지만 안즈는 이를 직접 하기에는 너무 귀찮았기 때문에, 여러분에게 해결을 부탁했다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31941","content":"문제\n\nSCSC에 갓 들어온 뉴비는 고인물들에게 자신의 실력을 보여주기 위해 게임을 개발했다!\n\n뉴비가 개발한 게임은 간단하다. 캐릭터는 가장 왼쪽 끝의 \n0\n$0$번부터 가장 오른쪽 끝의 \nL\n$L$번까지 정수로 순서대로 번호가 매겨져 있으며 일렬로 놓여 있는 \nL+1\n$L+1$개의 칸 위를 움직인다. 캐릭터는 \n0\n$0$번 칸에서 출발해 매 턴마다 이동하여 \nL\n$L$번 칸에 도달해야 한다. \nK\n$K$개 칸에는 영구 발판이, 나머지 \nL+1−K\n$L+1-K$개 칸에는 임시 발판이 놓여있다. 임시 발판은 특정 턴이 되면 잠시 사라졌다가 다시 생기면서 캐릭터를 떨어뜨려 패배하게 만든다. 이렇게 임시 발판이 사라지는 턴을 위험한 턴이라고 부른다. 시작점인 \n0\n$0$번 칸과 도착점인 \nL\n$L$번 칸에는 영구 발판이 놓여 있다.\n\n각 턴은 다음과 같은 순서대로 진행된다. 턴 번호는 \n0\n$0$부터 시작하고 캐릭터는 \n0\n$0$번 칸에서 출발한다.\n\n캐릭터가 \nL\n$L$번 칸에 있다면 승리하고 게임이 종료된다. 이때의 턴 번호를 승리 시간이라고 한다.\n현재 턴이 위험한 턴이면 모든 임시 발판이 사라졌다가 다시 생겨난다. 이때 캐릭터가 임시 발판이 있었던 칸에 있다면 아래로 떨어져 패배하고 게임이 종료된다.\n캐릭터는 현재 있는 칸에서 왼쪽 또는 오른쪽으로 \n1\n$1$칸 이동하거나 그대로 머무른다. \n0\n$0$번 칸에서 왼쪽으로 이동할 수 없다.\n현재 턴이 종료되고 다음 턴이 시작되며 턴 번호가 \n1\n$1$ 증가한다.\n\n \n0\n$0$번 턴부터 \nT−1\n$T-1$번 턴까지 \nN\n$N$개의 위험한 턴이 있고 턴 번호는 각각 \nt1\n$t_1$, \nt2\n$t_2$, \n⋯\n$\\cdots$, \ntN\n$t_N$번이다. 위험한 턴은 게임이 시작하는 \n0\n$0$번 턴으로부터 \nT\n$T$턴을 주기로 반복된다. 다시 말해 \nt(t≥0)\n$t(t \\geq 0)$를 \nT\n$T$로 나눈 나머지 \nr\n$r$가 \nr∈{t1,t2,⋯,tN}\n$r \\in \\{ t_1, t_2, \\cdots , t_N \\}$를 만족하면 \nt\n$t$번 턴은 위험한 턴이다. 예를 들어 \nT=4\n$T=4$, \nN=2\n$N=2$, \nt1=0\n$t_1 = 0$, \nt2=1\n$t_2 = 1$일 때 \n0\n$0$, \n1\n$1$, \n4\n$4$, \n5\n$5$, \n8\n$8$, \n⋯\n$\\cdots$번 턴이 위험한 턴이다.\n\n이제 뉴비는 게임의 로직을 모두 완성했다. 하지만 우리의 뉴비는 발판과 위험한 턴의 배열이 주어졌을 때 얼마나 빨리 승리할 수 있을지 잘 모른다. 여러분이 뉴비를 도와 얼마나 빨리 승리할 수 있을지 구해주자!"},{"problemId":"31834","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t주원이는 방 탈출을 하던 중 미로에 도착했다. 미로는 일렬로 놓인 N$N$개의 방으로 이루어져 있으며, i$i$번 방과 i+1$i+1$번 방은 서로 인접해 있다(1≤i<N)$(1\\leq i<N)$. 또한, 각 방에 스위치가 하나씩 있어, 주원이는 입구가 있는 S$S$번 방에서 출발하여 모든 스위치를 누르고, 출구가 있는 E$E$번 방으로 이동하여 탈출해야 한다.\n\n주원이는 두 가지 이동 방법을 사용할 수 있다. 첫 번째는 0$0$ 만큼의 비용을 소모해 인접한 방으로 이동하는 것이고, 두 번째는 1$1$ 만큼의 비용을 소모해 1$1$번 또는 N$N$번 방으로 순간 이동하는 것이다. 두 이동 방법 모두 매번 1 만큼의 시간이 소요된다. 스위치를 누르는 건 매번 0 만큼의 시간이 소요된다.\n\n방 탈출에서 탈출하기 위해선 시간을 잘 관리해야 하므로 주원이는 최대한 빠르게 미로를 탈출하는 방법을 찾으려고 한다. 기록을 세우고 싶은 주원이를 위해서 가장 빠르게 미로를 탈출하는 방법 중 최소 비용으로 탈출하는 방법을 찾아주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31913","content":"문제\n\nGIST 하우스 중고장터에서는 돈을 특정 물건으로 바꿔주거나, 특정 물건을 다른 특정 물건으로 바꿔주는 이벤트를 진행하고 있다. 특정 물건을 특정 물건으로 바꿀 때는 추가적인 돈이 오갈 수 있다. GIST 하우스 중고장터는 무한히 많은 돈과 물건을 갖고 있기 때문에, 모든 거래는 재화가 존재하는 한 무한히 많이 할 수 있다. 단, 고객은 한 번에 물건을 최대 하나까지만 들고 있을 수 있다.\n\nGIST 하우스 중고장터 앱 개발팀은 물물교환을 통해 돈 복사가 가능한지 추적하고 있다. 예를 들어 다음과 같은 거래들이 존재한다고 가정하자.\n\n \nt1\n$t_1$: 사용자가 \n1\n$1$번 물건을 \n10\n$10$원에 산다.\n \nt2\n$t_2$: 사용자가 \n1\n$1$번 물건에 \n10\n$10$원을 추가해 \n2\n$2$번 물건과 교환한다.\n \nt3\n$t_3$: 사용자가 \n2\n$2$번 물건을 \n21\n$21$원을 받고 판다.\n \nt4\n$t_4$: 사용자가 \n2\n$2$번 물건을 \n1\n$1$번 물건과 교환하고 \n12\n$12$원을 추가로 받는다.\n \nt5\n$t_5$: 사용자가 \n2\n$2$번 물건을 \n7\n$7$원에 산다.\n\n이들 중 개발팀이 리스트 \nL1={t1,t2,t3}\n$L_1 = \\left\\{t_1, t_2, t_3\\right\\}$에 든 거래만 허용한다고 가정하자. 그렇다면, \nt1,t2,t3\n$t_1, t_2, t_3$를 이 순서대로 선택하면 돈 \n20\n$20$원을 돈 \n21\n$21$원으로 늘릴 수 있다. 그리고 이를 무한히 반복하면 돈을 무한정 늘릴 수 있다. 이렇게 돈이 복사되면 대한민국 경제에 악영향을 끼칠 수 있기 때문에, 개발팀은 그런 상황을 막고 싶다. 따라서 개발팀은 거래들의 리스트가 주어지면 그 리스트가 안전한지 판별하고 싶다.\n\n리스트의 안전도는 다음과 같이 정의된다.\n\n어떤 사람이 \nC\n$C$원의 돈을 초기 자금으로 갖고 거래를 반복하여 돈을 무한정 늘릴 수 있다면, 리스트의 안전도는 \nC\n$C$의 최솟값이다. 그러한 \nC\n$C$가 존재하지 않는다면 리스트의 안전도는 \n∞\n$\\infty$이다. 이때, 돈을 늘리기 위해 모든 물건을 판매할 필요는 없다.\n\n예를 들어, 리스트 \nL1={t1,t2,t3}\n$L_1 = \\left\\{t_1, t_2, t_3\\right\\}$의 안전도는 \n20\n$20$이다. \n20\n$20$원의 돈을 갖고 가장 먼저 \nt1,t2,t3\n$t_1, t_2, t_3$를 선택하기를 반복하면 되기 때문이다. 그러나 \n19\n$19$원의 돈을 갖고 있는 사람은 어떻게 하더라도 돈을 무한정 늘릴 수 없다. 또 리스트 \nL2={t3,t4,t5}\n$L_2 = \\left\\{t_3, t_4, t_5\\right\\}$의 안전도는 \n7\n$7$이다.\n\n한편 리스트 \nL3={t2,t3,t4}\n$L_3 = \\left\\{t_2, t_3, t_4\\right\\}$의 안전도는 \n∞\n$\\infty$이다. \nt2\n$t_2$와 \nt4\n$t_4$를 선택하기를 반복하면 돈을 무한정 늘릴 수 있을 것 같아 보이지만, \n1\n$1$번 물건 또는 \n2\n$2$번 물건을 구할 수 있는 방법이 없어 그러한 거래를 시도할 수 없기 때문이다.\n\n물물교환 거래 리스트가 주어지면 그 리스트의 안전도를 측정하는 프로그램을 작성하시오."},{"problemId":"31858","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t길이 N$N$의 순열 P$P$가 주어진다. 길이 N$N$의 순열이란, 1$1$부터 N$N$까지의 모든 정수를 한 번씩 사용하여 임의로 배열한 것을 말한다. 이때 다음을 만족하는 (i,j)$(i, j)$ 쌍의 개수를 구하라.\n\n\n\t 1≤i<j≤N$1 \\le i < j \\le N$ \n\t min(Pi,Pj)>max(0,Pi+1,Pi+2,⋯,Pj−1)$\\min(P_i, P_j) > \\max(0,P_{i+1}, P_{i+2}, \\cdots, P_{j-1})$ \n\n\n Pi$P_i$는 P$P$의 i$i$번째 원소를 말한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31859","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t연재는 제4회 SMUPC에 출전하는 사람들을 위해 SMUPC NAME을 만들어주려고 한다. SMUPC NAME을 만드는 방법은 아래와 같다.\n\n\n\t출전자의 영어 이름에서 알파벳이 중복되지 않도록 추출한다. 특정 알파벳이 여러 번 등장한다면 처음 등장한 경우를 제외하고 해당 알파벳을 버린다.\n\t1번을 통해 만들어진 문자열 맨 뒤에 1번 과정에서 버려진 문자의 총개수에 4$4$를 더한 값을 붙인다.\n\t2번을 통해 만들어진 문자열 맨 앞에 출전 등록 번호에 1906$1906$을 더한 값을 붙인다.\n\t3번을 통해 만들어진 문자열을 뒤집는다.\n\t4번을 통해 만들어진 문자열 맨 앞에 \"smupc_\"를 붙인다.\n\n\n출전 등록 번호가 2$2$이며 \"yeonjaechoi\" 라는 영어 이름을 가진 사람의 SMUPC NAME을 규칙에 따라 만들면 다음과 같다.\n\n\n\tyeonjachi\n\tyeonjachi6\n\t1908yeonjachi6\n\t6ihcajnoey8091\n\tsmupc_6ihcajnoey8091\n\n\n출전 등록 번호와 영어 이름이 주어지면 그 사람의 SMUPC NAME을 출력하자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31914","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tGIST는 리버럴 아츠 칼리지 모델을 차용하여 학부생들에게 수준 높은 인문학/사회학 교양과목을 제공하고 있다.\n\n2024년, GIST는 교양으로 마법학 과목을 신설했다. GIST 부지 내에는 N$N$개의 마법원이 있고, 각각의 마법원은 좌표평면 위 하나의 점으로 표현된다. 마법원들은 각각 마나의 세기와 색깔을 가진다. 마나의 세기는 양수이고, 색깔은 1$1$과 K$K$ 사이의 정수로 표현할 수 있다. 기초마법학 수업의 일환으로 마법진 그리기를 배우고 있는 해원이는 다음 조건을 만족시키며 마법진을 그려야 한다.\n\n\n\t마법진은 직사각형이고, 각 변은 x$x$축 또는 y$y$축 둘 중 하나에 평행하다.\n\t직사각형의 네 꼭짓점 중 x$x$좌표와 y$y$좌표가 동시에 최소인 점은 (0,0)$(0, 0)$이다.\n\t마법진은 모든 색깔의 마법원을 포함해서는 안 된다. 마법진이 마법원을 포함한다는 것은 마법원이 마법진의 둘레 또는 내부에 있다는 것이다.\n\n\n마법진의 힘은 직사각형의 내부 또는 네 변의 위에 있는 모든 마법원의 마나의 세기의 총합이다. 만약 마법진 내에 하나의 마법원도 포함되어 있지 않다면, 마법진의 힘은 0$0$이다. 마법진의 힘을 최대화하시오.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31922","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n제 마음대로 우승할 수 있는 겁니다.\n\n2024년, 제14회 아주대학교 프로그래밍 경시대회(이하 2024 APC)가 개최된다! 2024 APC는 두 개의 Division으로 나누어 진행된다.\n\n\n\tDivision 1은 누구나 참여할 수 있으며 수상 시 2024 경인지역 6개 대학 연합 프로그래밍 경시대회(이하 2024 shake!)의 진출권을 얻게 된다.\n\tDivision 2는 소프트웨어융합대학이나 정보통신대학 소속이 아닌 모두가 참가할 수 있다. 하지만, 수상을 하더라도 2024 shake!에는 진출할 수 없다.\n\n\n두 개의 Division을 같이 나갈 수 없다. 다시 말해, Division 1의 참가자와 Division 2의 참가자는 중복되지 않는다.\n\n각 대회를 우승하게 되면 상금이 주어진다. 당신은 Division 1을 우승하게 되면 A$A$만원, Division 2를 우승하게 되면 P$P$만원, 2024 shake!를 우승하게 되면 C$C$만원을 받게 된다. 소프트웨어융합대학이나 정보통신대학 소속이 아닌 당신은 어떤 대회라도 나가기만 하면 우승할 수 있다. 당신이 얻을 수 있는 최대 상금을 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31923","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n\n그럼 제가 선배 맘에\n\n<서이브/남동현, 마라탕후루, 2024>\n\n\n아주대의 마스코트인 치토는 요즘 유행한다는 마라탕과 탕후루를 합쳐서 마라탕후루 가게를 오픈했다. 그런데 첫날부터 발주를 실수하는 바람에 딸기와 샤인머스캣이 박스째로 쌓이게 되었다. 과일은 신선도가 중요하기 때문에 오늘은 탕후루를 손님들에게 무료로 제공하기로 했다.\n\n치토는 사전에 탕후루 꼬치 N$N$개를 만들어 두었다. 그런데 바빠서 손에 잡히는 대로 과일을 꽂다 보니 꼬치마다 꽂혀있는 딸기와 샤인머스캣의 개수가 다를 수 있다는 사실을 뒤늦게 깨달았다. 맛의 밸런스를 유지하기 위해서는 꼬치마다 꽂혀있는 딸기와 샤인머스캣의 개수가 동일해야 한다. 단, 서로 다른 꼬치에 꽂혀있는 딸기와 샤인머스캣의 개수가 같을 필요는 없다. 치토는 가게를 운영하느라 매우 바빠서 딸기와 샤인머스캣의 개수를 동일하게 만들어줄 로봇을 고용했다.\n\n현재 i$i$번 꼬치에는 Ai$A_{i}$개의 딸기와 Bi$B_{i}$개의 샤인머스캣이 꽂혀있다. 치토가 고용한 로봇은 한 가지 문제점이 존재하는데, 바로 딸기와 샤인머스캣을 매번 정해진 개수만큼 꽂는다는 것이었다. 로봇은 1$1$분마다 다음의 행동을 한 번 진행한다. \n\n\n\t i$i$번 꼬치를 선택한다. (1≤i≤N)$(1\\leq i \\leq N)$ \n\t i$i$번 꼬치에 딸기를 P$P$개, 샤인머스캣을 Q$Q$개 꽂는다.\n\n\n치토는 곰곰이 생각해 보니 로봇이 꼬치마다 딸기와 샤인머스캣의 개수를 똑같이 만들지 못할 수도 있다는 사실을 깨달았다.\n\n로봇이 꼬치마다 딸기와 샤인머스캣의 개수를 똑같이 만들 수 있는지 없는지 확인해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31942","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t연결 요소의 모든 간선이 서로 다른 색의 정점을 연결하고 있을 때 그 연결 요소를 멋진 연결 요소라고 한다.\n\n그래프 G$G$는 각 정점의 색이 빨간색 또는 파란색이고 간선이 없는 그래프이다. G$G$에 다음 쿼리를 수행하는 프로그램을 작성해 보자.\n\n\n\t 1$1$ u$u$ v$v$: 서로 다른 두 정점 u$u$와 v$v$를 잇는 간선을 추가한다. 가능하다면 해당 간선을 포함하는 연결 요소에 존재하는 정점의 색깔을 0$0$개 이상 변경하여 멋진 연결 요소로 만든다. 가능한 방법이 여러 가지 존재한다면 그중 가장 적은 횟수로 변경하는 방법으로 변경한다.\n\t 2$2$ u$u$: 정점 u$u$를 포함하는 연결 요소의 모든 정점의 색깔을 변경한다.\n\t 3$3$ c$c$: 현재 G$G$에 존재하는 멋진 연결 요소 중 c$c$가 0$0$인 경우 빨간색, c$c$가 1$1$인 경우 파란색 정점이 가장 많은 연결 요소를 선택한다. 선택한 멋진 연결 요소에 포함된 정점들의 번호 중 가장 작은 것을 출력한다.\n\n\n쿼리가 누적해서 수행됨에 유의하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31924","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n올해도 어김없이 현대모비스는 실력 있는 소프트웨어 인재를 양성하고 독려하기 위해 APC의 주최 동아리인 A.N.S.I.를 후원하고 있다. 올해 현대모비스는 2024 APC에 참가한 여러분들을 위해 특별상을 준비하였다.\n\n현대모비스는 N×N$N \\times N$ 크기의 격자판을 준비하였다. 격자판의 각 칸에는 알파벳 대문자가 한 글자씩 적혀있다. 특별상은 이 격자판에서 가장 많은 MOBIS를 찾은 사람에게 주어지는데, MOBIS를 찾는 것은 다음의 규칙을 따른다.\n\n\n\t격자 위의 임의 위치에서 시작하여 상, 하, 좌, 우, 대각선의 8방향 중 한 방향으로 격자에 적힌 글자들을 차례로 5개 이어 붙였을 때, 이어 붙인 글자가 MOBIS여야 한다.\n\n\n현빈이는 어떻게든 특별상의 주인공이 되고 싶다. 현빈이를 도와 주어진 격자판에서 MOBIS를 최대 몇 번 찾을 수 있는지 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31943","content":"문제\n\n음이 아닌 두 정수 \nX\n$X$, \nY\n$Y$에 대하여 다음 조건을 모두 만족하는 정수 \nm\n$m$, \nx0\n$x_0$, \nx1\n$x_1$, \n⋯\n$\\cdots$, \nxm\n$x_m$, \ny0\n$y_0$, \ny1\n$y_1$, \n⋯\n$\\cdots$, \nym\n$y_m$이 존재한다.\n\n \nm≥0\n$m \\ge 0$ \n \n0≤i≤m\n$0 \\le i \\le m$을 만족하는 모든 정수 \ni\n$i$에 대하여 \n0≤xi,yi<3\n$0\\le x_i, y_i \\lt 3$이다.\n \n\n\nX=∑i=0mxi⋅3i\n$\\displaystyle X = \\sum_{i=0}^{m} x_i \\cdot 3^i$ \n \n\n\nY=∑i=0myi⋅3i\n$\\displaystyle Y = \\sum_{i=0}^{m} y_i \\cdot 3^i$ \n\n이때 \n\n\nOR3(X,Y):=∑i=0mmax(xi,yi)⋅3i\n$\\displaystyle {OR}_3 (X,Y) := \\displaystyle \\sum_{i=0}^{m} \\max \\left( x_i , y_i \\right) \\cdot 3^i$의 값은 유일하게 결정된다.\n\n집합 \nS={0}\n$S = \\left\\{ 0 \\right\\}$에 아래와 같은 \nM\n$M$개의 쿼리를 수행하는 프로그램을 작성해 보자.\n\n \n1\n$1$ \nx\n$x$: 집합 \nS\n$S$를 \nS∪{x}\n$S \\cup \\left\\{ x \\right\\}$로 갱신한다.\n \n2\n$2$ \nx\n$x$: \n\nmaxa∈S(OR3(a,x))\n$\\displaystyle \\max_{a\\in S} { \\left( {OR}_3 (a,x) \\right) }$의 값을 출력한다. 즉, 집합 \nS\n$S$의 원소 \na\n$a$에 대하여 \nOR3(a,x)\n${OR}_3 (a,x)$의 최댓값을 출력한다.\n\n쿼리가 누적해서 수행됨에 유의하여라."},{"problemId":"31835","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tT | F | T & F | T & F\n\n위 식과 같이 값은 T와 F, 연산자는 |과 &로만 구성된 수식이 주어진다. | 연산은 양쪽에 있는 두 피연산자 중 하나 이상이 T이면 결괏값이 T이고, 그렇지 않으면 F이다. & 연산은 양쪽에 있는 두 피연산자가 모두 T이면 결괏값이 T이고, 그렇지 않으면 F이다. | 연산과 & 연산의 우선순위는 같고, 왼쪽부터 오른쪽으로 차례로 계산한다고 가정한다.\n\n여러분은 연산자와 값을 적절히 바꾸어 원하는 계산 결과가 나오도록 해야 한다. 이때, 연산자와 값을 바꾸는 횟수를 최소화해야 한다. 식과 원하는 계산 결과가 주어졌을 때, 원하는 계산 결과가 나오도록 연산자와 값을 고치는 최소 횟수를 구하여라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31915","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tGIST에서는 2022년부터 매년 가을 'GIST DevNight' (개발자의 밤, Developers' Night) 행사가 열린다. DevNight 행사를 통해 개발자들끼리 정보를 공유하고 친목을 도모할 수 있다. 행사는 컨퍼런스 룸에서 열리는 컨퍼런스와 커뮤니케이션 룸에서 열리는 친목 활동으로 나누어져 있다.\n\n2024년도 GIST DevNight는 정점 N$N$개와 길이가 있는 양방향 간선 M$M$개로 구성된 건물에서 열린다. 각각의 정점에는 컨퍼런스 룸 또는 커뮤니케이션 룸 둘 중 하나가 자리잡고 있다. 커뮤니케이션 룸의 수는 K$K$개이며, 1$1$번 정점부터 K$K$번 정점까지는 커뮤니케이션 룸이고 K+1$K+1$번 정점부터 N$N$번 정점까지는 컨퍼런스 룸이다.\n\n컨퍼런스 하나가 끝나면 개발자들은 커뮤니케이션 룸으로 이동한다. 이때 자신의 위치에 따라 각 커뮤니케이션 룸에 대한 선호도가 달라진다. 모든 사람은 컨퍼런스 룸의 위치로부터 최단 경로의 길이가 짧은 커뮤니케이션 룸을 더 선호하며, 만약 그런 커뮤니케이션 룸이 2$2$개 이상 있으면 정점의 번호가 작은 커뮤니케이션 룸을 더 선호한다.\n\n2023년도 DevNight 때는 개발자들이 가장 선호도가 높은 커뮤니케이션 룸을 이용했다. 그러나 그러다 보니 방 하나에만 지나치게 사람이 많이 모이는 일이 발생하여, 2024년도 DevNight에서는 모든 사람이 두 번째로 선호도가 높은 커뮤니케이션 룸을 이용하도록 정책이 바뀌었다. DevNight 운영자인 당신은 각각의 컨퍼런스 룸에 대하여 그 방에서 컨퍼런스가 끝나면 개발자들은 커뮤니케이션 룸으로 가기 위해 얼마나 걸어가야 하는지 궁금해졌다. 보성이를 도와주는 프로그램을 만들어 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31960","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are given the squares of the lengths of the sides of four triangles. Determine if it is possible to arrange them (via translation, rotation, and reflection) into a square. No triangles may overlap, and there should be no gaps or holes.\n\n\n\nFigure L.1: A solution to the third test case in the sample input.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31961","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tAshley is training for another programming contest on Brandon's Online Judge. Brandon's Online Judge still has the same feature which allows Ashley's coach, Tom, to load in a list of problems for Ashley to work on.\n\nTom has curated some problems for Ashley to work on. Each problem is parameterized by \"implementation difficulty\" with a range, and \"thinking difficulty\" with a range.\n\nAshley starts out with a given implementation skill and thinking skill level. Ashley will train on Tom's curated list of problems as follows: she will look at the first problem on the list and either solve it or skip it. She will then repeat this for every problem in the list in the order Tom loaded the problems. Once she has skipped a problem, she can never go back to it. Ashley will only solve a problem if her current implementation skill and current thinking skill both land within the range, inclusive, for the given problem. After solving a problem, Ashley will reflect on her experience, which allows her to increase either her implementation skill level by one or her thinking skill level by one. She cannot increase both simultaneously, nor can she skip the reflection.\n\nCompute the maximum number of problems that Ashley can solve if she plans her reflections optimally.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31944","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tSCSC의 트레저 헌터 종환이는 안타깝게도 고물을 주우며 삶을 연명하고 있었다. 그러던 어느 날, 종환이는 우연히 보물이 잔뜩 묻힌 보물섬이 존재한다는 정보를 입수했다. 그곳은 바로 스시스시 아일랜드. 천금 같은 기회를 놓치고 싶지 않았던 종환이는 가지고 있는 장비를 모두 챙겨 모험을 떠났다. 종환이는 우여곡절 끝에 보물이 있는 곳까지 도달했지만 안타깝게도 엄청난 난관에 봉착하고 말았다······. 보물을 지키는 스시스시 아일랜드의 스호자가 종환이에게 시련을 준 것이다.\n\n\"스시스시의 힘이 담긴 특별한 석판이 있다. 석판 위에 한쪽 면에만 표식이 있는 돌을 정사각형 모양으로 나열해 두었다. 석판 위의 돌들을 뒤집어 내가 제시한 모양대로 만든다면 이 섬의 보물은 모두 네 것이다. 단, 이 석판은 매우 특별하기 때문에 몇 가지 제약이 있다.\n\n\n\t돌을 한 번 뒤집을 때마다 S 또는 C 모양으로 뒤집어야 한다. S 또는 C가 회전한 모양으로 돌을 뒤집을 수 있다.\n\tS 또는 C 모양으로 돌을 뒤집는 횟수는 석판 위에 놓인 돌의 개수보다 작거나 같아야 한다.\n\n\n할 수 있겠는가?\"\n\n스시스시 아일랜드의 보물을 가져갈 수 있도록 종환이를 도와주자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31925","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t2024년 아주대학교 프로그래밍 경시대회(이하 2024 APC) Division 1에서 훌륭한 성적을 거둔 참가자에게는 2024년 경인지역 6개 연합 프로그래밍 경시대회(이하 2024 shake!)에 진출할 수 있는 티켓이 주어진다. 2024 shake!의 진출자들은 아래의 규칙으로 선발된다.\n\n\n\t아주대학교 학부 소속의 재학생\n\t역대 국제 대학생 프로그래밍 경시대회(이하 ICPC)의 수상자가 아닌 자\n\t역대 shake! 3$3$위 이내의 수상자가 아닌 자\n\t위 3가지 규칙을 만족하는 참가자 중 2024 APC에서 높은 성적을 가진 최대 10$10$명의 참가자\n\n\n모든 참가자들의 이름과 재학 여부, 역대 ICPC 수상 여부, 역대 shake! 최고 성적, 2024 APC의 성적이 주어질 때, 2024 shake!의 진출자들을 알아내 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31916","content":"문제\n\nIn the CS club there's a new Pokemon, Meow2. Being passionate about trees, Meow2 has a rooted tree with \nN\n$N$ nodes, labeled from \n0\n$0$ to \nN−1\n$N-1$. Node \n0\n$0$ is the root of the tree, and every for every other node \ni\n$i$ its father has a label smaller than \ni\n$i$. Each node has an associated value, an integer between \n1\n$1$ and \nL\n$L$.\n\nMeow2 also has an array \nS=[1,2,…,L]\n$S=[1,2,\\dots ,L]$ of length \nL\n$L$. He wants to know the number of occurrences of \nS\n$S$ in the tree. More exactly, he wants to count the number of sequences \nA1,A2,…,AL\n$A_1,A_2,\\dots ,A_L$​ such that the value associated with node \nAi=i\n$A_i=i$, and for each \n1≤i<L\n$1≤i<L$ node \nAi\n$A_i$ is an ancestor of node \nAi+1\n$A_{i+1}$.\n\nBeing an ever evolving Pokemon, Meow2 keeps changing the initial tree. He has a magical array of changes, \nP\n$P$, of length \nQ\n$Q$. At each step \ni\n$i$, \n0≤i<Q\n$0≤i<Q$, he changes the value of node \ni%N\n$i\\%N$ to \nPi\n$P_i$, \n1≤Pi≤L\n$1≤P_i≤L$.\n\nMeow2 would like to know after each change the number of occurrences of \nS\n$S$ in the tree, as defined above. If we denote by \nansi\n$ans_i$ the number of occurrences of \nS\n$S$ after the \ni\n$i$th change, you should find:\n\n \nO=1×ans0+2×ansi+⋯+Q×ansQ−1\n$O=1 \\times ans_0+2 \\times ans_i+\\dots +Q \\times ans_{Q-1}$ "},{"problemId":"31945","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t 3$3$차원 좌표공간 위의 8$8$개의 점 P0=(0,0,0)$P_0 = (0,0,0)$, P1=(0,0,1)$P_1 = (0,0,1)$, P2=(0,1,0)$P_2 = (0,1,0)$, P3=(0,1,1)$P_3 = (0,1,1)$, P4=(1,0,0)$P_4 = (1,0,0)$, P5=(1,0,1)$P_5 = (1,0,1)$, P6=(1,1,0)$P_6 = (1,1,0)$, P7=(1,1,1)$P_7 = (1,1,1)$을 꼭짓점으로 하는 정육면체 S$S$가 있다.\n\n주어진 네 꼭짓점이 정육면체 S$S$의 한 면 위에 있는지 판정해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31926","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n\n달디달고, 달디달고, 달디단, 밤양갱, 밤양갱\n\n<장기하, 밤양갱, 2024>\n\n\n민우는 비비의 신곡 <밤양갱>에 꽂혀 하루 종일 \"달디달고 달디달고 달디달고... 달디단\"이 머릿속을 맴돌고 있다. \n\n민우의 머릿속에선 daldidalgo가 총 N$N$번 반복된 후, 반복이 완료되었다면 daldidan으로 끝나게 된다. 예를 들어 N=3$N=3$이라면 민우의 머릿속엔 daldidalgodaldidalgodaldidalgodaldidan이 재생된다.\n\n민우는 N$N$이 주어지면 얼마나 빨리 daldidalgodaldidalgo...daldidan을 컴퓨터에 입력할 수 있는지 궁금하다. 매초 민우는 두 개의 작업 중 하나를 선택하여 시행할 수 있다.\n\n\n\t알파벳 소문자 a부터 z 중에서 민우가 원하는 알파벳을 하나 골라서 지금까지 입력한 내용의 맨 뒤에 입력한다.\n\t지금까지 입력한 문자열의 연속된 부분 문자열을 복사 후 입력한 내용의 맨 뒤에 붙여넣는다. 예를 들어 지금까지 작성한 문자열이 ajouapcshake라면, ajouapcshake를 복사할 수도, apc를 복사할 수도 있지만, aashake를 복사하여 붙여넣을 수는 없다.\n\n\n민우는 몇 초 만에 머릿속에 떠오른 가사를 컴퓨터에 입력할 수 있을까?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31968","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou have a successful business where you make money by completing jobs for your clients. Currently, you can choose from N one-time jobs, numbered from 1$1$ to N$N$.\n\nCompleting job i$i$ will make you a profit of xi$x_i$ euros. The profit may also be negative (xi<0$x_i < 0$).\n\nSome jobs depend on another job. That is, there may be a job numbered pi$p_i$ that must be completed before the i$i$-th job can be started. Hence, a job with a large profit may be less attractive than it seems if it depends on a job with a negative profit. If pi=0$p_i = 0$, the i$i$-th job has no dependency.\n\nYou currently have s$s$ euros and can decide which jobs to do and in which order to do them, as long as the dependencies are respected. Moreover, the amount of money you own may not become negative at any point.\n\nCalculate the maximum profit you can make by choosing to complete some (possibly none) of the N$N$ jobs in a selected order.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31917","content":"문제\n\nGiven an integer \nN\n$N$, consider a room of length \n2×N+2\n$2 \\times N+2$ represented as an interval \n[−N−1,N+1]\n$[-N-1,N+1]$. In the center \nC=0\n$C=0$ of the room, there's initially a ballerina called Costelina Salopeta. She's about to perform \nT\n$T$ dancing steps of length \n1\n$1$, the first one being to the right. In the \n2×N\n$2 \\times N$ points of integer coordinates in the room you can place \nK\n$K$ obstacles. When the ballerina reaches an obstacle, she trips and performs a pirouette. This way, she changes moving direction and the obstacle disappears.\n\nYou are not allowed to add an obstacle at coordinates \n−N−1\n$-N-1$, \n0\n$0$ or \nN+1\n$N+1$. The walls of the room at coordinates \n−N−1\n$-N-1$ and \nN+1\n$N+1$ are considered to be permanent obstacles, that are never going to disappear, and the point of coordinate \nC=0\n$C=0$ is the initial position of Costelina.\n\nGiven the values of \nT\n$T$, \nN\n$N$ and \nK\n$K$, compute the number of ways of placing \nK\n$K$ obstacles, such that after \nT\n$T$ steps Costelina will end back in the starting point \nC\n$C$."},{"problemId":"31635","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t이 문제는 적응적 인터랙티브 문제입니다.\n\n마법사 가지는 신기한 미로의 1$1$번 정점에 입장합니다. 미로에는 1$1$번부터 N$N$번까지 번호가 붙은 정점이 있고, 총 N−1$N-1$개의 양방향 간선이 있습니다. 이 미로에서 서로 다른 두 정점을 잇는 경로는 항상 존재하며 유일합니다.\n\n현재 정점에서 연결된 다른 정점으로 이동하려면 다음 둘 중 하나의 주문을 외워 이동할 수 있으며, 이동한 후에 도착한 정점의 번호를 미로가 알려줍니다.\n\n\n\tmaze: 미로의 마법으로 현재 정점과 연결된 정점 중 하나로 이동합니다. 해당 정점은 가지가 아닌 미로가 결정하며 다음 규칙을 따릅니다.\n\n\t\n\t\t현재 정점과 연결되어 있고 방문하지 않은 정점 중 하나로 이동합니다.\n\t\t만약 그러한 정점이 없다면 현재 정점과 연결되어 있고 방문한 정점 중 하나로 이동합니다.\n\t\n\t\n\tgaji m$m$ : 가지의 마법으로 m$m$번 정점으로 이동합니다. m$m$번 정점은 현재 정점과 연결된 정점이어야 합니다.\n\n\n마법사 가지는 신기한 미로의 지도를 만들고자 합니다. 그러나 미로는 4N$4N$번 초과하여 정점을 이동하는 것을 허락하지 않습니다. 지도 제작에 어려움을 겪고 있는 가지는 여러분에게 도움을 요청했습니다. 주어진 마법을 적절히 활용해 이동하고 도착한 정점을 입력받아 미로의 모든 간선을 찾아봅시다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31969","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou think it would be funny to prank your best friend by placing them on cell (0,0)$(0, 0)$ of an infinite grid of coloured cells. The friend then moves around the grid indefinitely, one step at a time, always moving to one of the four adjacent cells.\n\n N$N$ of the cells on the grid contain a portal. Once your friend steps on a portal, they instantly teleport to a random portal (which might be the one they just stepped on, or might be a different one). If there is a portal at the cell (0,0)$(0, 0)$, your friend is also teleported at the start when they get placed on the grid.\n\nAs part of the prank, you want to trick your friend into not noticing that there are portals at all. The only thing your friend sees is the colour of the cell they are currently at, so you should make sure that from your friend's perspective the colours of the tiles never change. In particular, if your friend thinks they have entered a cell more than once (for example by moving left and then immediately right), they should see the same color as the first time they think they entered the cell.\n\nNote: when your friend steps on a portal, they will see both the colour of the cell they step on, and the one they are teleported to. You will therefore need to colour all portal cells the same colour to avoid teleportations being immediately obvious.\n\nA simple solution would be to colour all cells the same colour. But colours are nice! So you would like to use as many colours as you can.\n\nLet's consider an example where the portals are placed at cells (1,1)$(1, 1)$, (1,3)$(1, 3)$ and (3,2)$(3, 2)$, and your friend makes the following sequence of moves: up, right, down, left.\n\n\n\t\n\t\t\n\t\t\tAfter 0$0$ steps\n\t\t\tAfter 1$1$ step\n\t\t\tAfter 2$2$ steps\n\t\t\n\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\t\n\t\t\tInitial position. First time your friend sees colour of cell (0,0)$(0, 0)$ \n\t\t\tGo up to cell (0,1)$(0, 1)$ \n\t\t\tGo right to cell (1,1)$(1, 1)$ and teleport to any of the three portals\n\t\t\n\t\t\n\t\t\tAfter 3$3$ steps\n\t\t\tAfter 4 steps\n\t\t\t \n\t\t\n\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tWhere your friend thinks they are\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tWhere your friend might be\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tCell contains portal\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\t\n\t\t\tGo down\n\t\t\tGo left. Your friend thinks they're back to the start, but they might be at any of the coloured positions.\n\t\t\t \n\t\t\n\t\n\n\nAfter the sequence of moves the friend thinks that they're back at the starting cell (0,0)$(0, 0)$, but in reality they might also end up in (0,2)$(0, 2)$ or (2,1)$(2, 1)$. They already saw the colour of cell (0,0)$(0, 0)$ at the beginning, so if they see a different colour now, they will realise there must be portals. We don't want that to happen, so we must choose the same colour for these 3$3$ cells.\n\nThere is no sequence of moves where your friend would think that they end up on cell (0,0)$(0, 0)$ when they actually end up on (1,0)$(1, 0)$, so these cells can be safely coloured with different colours.\n\nBelow you can see a colouring with 4$4$ colours for the example above. It is not possible to use more than 4$4$ colours for this example.\n\n\n\nLet's consider a different example with portals at cells (0,0)$(0, 0)$, (0,1)$(0, 1)$, (1,0)$(1, 0)$, (0,−1)$(0,-1)$ and (−1,0)$(-1, 0)$. Say your friend tries to reach cell (1,3)$(1, 3)$ by going right once and then up 3$3$ times. One possibility is that they end up at cell (0,0)$(0, 0)$ if they got teleported there at the start and after each step. If your friend now backtracks to what they think is cell (0,0)$(0, 0)$ by going down 3$3$ times and left once, and doesn't get teleported away from their current cell while doing so, they will end up at (−1,−3)$(-1,-3)$. Your friend will think that they are at cell (0,0)$(0, 0)$ for the second time, and will expect to see the same colour. So you need to colour (−1,−3)$(-1,-3)$ and (0,0)$(0, 0)$ with the same colour.\n\nNote that there was nothing special about our initial choice of cell (1,3)$(1, 3)$. You can similarly show that other cells have to share a colour with (0,0)$(0, 0)$.\n\nCalculate the maximum number of colours you can use while making sure that your friend won't notice the existence of portals.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31836","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n피보나치 수열은 다음과 같이 정의되는 수열이다.\n\n\n\t F1=1$F_1=1$ \n\t F2=1$F_2=1$ \n\t Fn=Fn−1+Fn−2$F_n=F_{n-1}+F_{n-2}$ (단, n≥3$n\\ge 3$)\n\n\n정휘는 이집트 룩소르의 한 시장에서 피보나치 수가 적혀 있는 N$N$개의 기념품을 구매했다. x(1≤x≤N)$x(1\\le x\\le N)$번 기념품에는 Fx$F_x$가 적혀 있다.\n\n정휘는 피보나치 수열을 좋아하는 세림이와 성주에게 기념품을 선물하려고 한다. 하지만 한 명에게 너무 많은 기념품을 주면 기념품을 적게 받은 사람이 슬퍼할 수 있기 때문에, 두 명이 받게 될 기념품에 적힌 피보나치 수의 합이 같아지도록 선물을 분배하려고 한다. 구매한 기념품의 개수 N$N$에 따라 N$N$개의 기념품을 전부 나눠주지 못할 수 있는데, 이때는 최대한 많은 개수의 기념품을 나눠주려고 한다.\n\n나눠주는 기념품의 개수를 최대화하면서, 두 명이 받는 기념품에 적힌 수의 합이 같도록 기념품을 나눠주는 방법을 구해보자. 두 사람에게 1개 이상의 기념품을 나눠주는 방법은 항상 존재한다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31927","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n원소의 순서만 바꾸던 기존 정렬 알고리즘을 공부하던 민석이는 모든 게 부질없음을 깨닫고 원소의 값을 바꿔서 정렬해 버리기로 했다.\n\n길이 N$N$의 배열 A$A$가 주어진다. 아래의 연산을 0$0$번 이상 ⌊N2⌋$\\left\\lfloor\\frac{N}{2}\\right\\rfloor$번 이하로 사용하여 배열 A$A$의 모든 원소가 내림차순이 되도록 만들어 보자. 여기서 내림차순이란, 1$1$ 이상 N−1$N-1$ 이하의 모든 정수 i$i$에 대하여 Ai≥Ai+1$A_{i}\\geq A_{i+1}$을 만족하는 상태를 말한다.\n\n\n\t 1≤i,j≤N$1\\leq i,j\\leq N$를 만족하는 서로 다른 두 정수 i$i$와 j$j$에 대하여 0<x≤106$0<x\\leq 10^6$를 만족하는 정수 x$x$를 선택하여 Ai$A_{i}$에 x$x$를 더하고, Aj$A_{j}$에 x$x$를 뺀다.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31918","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tWe all know that popcorn is a culinary delicacy. While you were preparing for this year's selection camp (and the after parties), you ordered N$N$ types of microwave popcorn. For each different type you know 3$3$ values:\n\n\n\t Ai$A_i$ ​= the time (in seconds) when the popcorn of type i$i$ pops\n\t Bi$B_i$ ​= the time (in seconds) then the popcorn of type i$i$ gets burned\n\t Ci$C_i$ ​= the quantity of popcorn of type i$i$ \n\n\nYou also have M$M$ disposable popcorn bags of large capacity (practically, infinite) and a microwave oven. As, of course, no one likes burned or unpopped popcorn, you wish to partition it in the M$M$ bags and then put those in the oven, setting a certain cooking time prepi$prep_i$, such that in the end you'll have as much edible popcorn as possible.\n\nFormally, the popcorn of type i$i$ used in bag j$j$, which was cooked in the oven prepj$prep_j$ seconds, is edible if and only if Ai≤prepj<Bi$A_i≤prep_j<B_i$.\n\nGiven N$N$ types of popcorn and the number of available bags, you have to find a convenient partition and the cooking times for each bag, such that in the end you'll have as much edible popcorn as possible. Output the quantity of edible popcorn. Too simple!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31919","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe kids from 402 heard the bell and quickly went outside to play. Seeing a big pole in the middle of the field they thought of the following game. Initially they split in groups of girls and boys (there are mm girls and 𝑛n boys) and then they position themselves somewhere on the field.\n\nInitially the pole is completely vertical (has tilt 0$0$). Each player has certain force (Bi$B_i$ is the force of the i$i$th boy, Fi$F_i$ is the force of the i$i$th girl). The game goes like this: at each step, either the boy or the girl closest to the pole (with the smallest index) throws a ball to the pole, after which he/she leaves the game. A boy's throw tilts the pole to the right, while a girl's throw tilts the pole to the left. The tilt of the pole changes with a value equal to the player's force.\n\nIn order to make sure the game doesn't end disastrously, the pole is not allowed to be tilted (in either direction) more than S$S$. The kids are wondering if they can find an order of throws such that this condition is respected.\n\nTo make things more interesting, their teacher chooses Q$Q$ moments when she swaps the order of two consecutive boys or girls. All the swaps are persistent.\n\nYou should help the kids decide if there is a valid order of throws after each swap.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31970","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou have arrived in Vilnius and want to visit various cities in Lithuania.\n\nCities in Lithuania are located on a straight line and numbered from 1$1$ to N$N$ sequentially. Vilnius is assigned the number 1$1$.\n\nEach city has a train station with a single train route that operates from that station. You can only get on a train at the start of its route, though you can get off at any of its stops. Trains starting their route at the i$i$-th city make a stop every di$d_i$ cities, and their route consists of xi$x_i$ stops (not including the starting city). If di=0$d_i = 0$, the trains operating from the i$i$-th city are currently out of service, so you cannot get on them.\n\nTo be more precise, if you get on a train in the i$i$-th city, you can get off the train in any city numbered i+t⋅di$i + t \\cdot d_i$, where 1≤t≤xi$1 ≤ t ≤ x_i$. Note that since you only want to visit cities in Lithuania, you won't ride further than the N$N$-th city, even if the train has more stops on its route.\n\nYou are going to visit some cities, using trains to travel between them. As you plan your trip, you start to wonder how many different options you have for your journey that starts at Vilnius. Two journeys are different if they make stops at different sequences of cities.\n\nCalculate this number and print the answer modulo 109+7$10^9 + 7$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31946","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t지훈이는 등굣길에서 보도블록을 지날 때 같은 색의 보도블록만을 밟으면서 이동한다. 왜냐하면 다른 색의 보도블록을 밟으면 사망하기 때문이다.\n\n등굣길은 N×M$N \\times M$ 크기의 행렬로 표현할 수 있으며 행렬의 각 원소는 하나의 보도블록으로 이루어져 있다. 지훈이는 1$1$행 1$1$열에서 출발해 N$N$행 M$M$열에 도착해야 한다.\n\n빨간색 또는 회색으로 이루어진 등굣길을 이동하면서 지훈이는 현재 밟고 있는 보도블록과 같은 색의 보도블록만을 밟고 이동해야 한다. 또한 지훈이의 점프력이 X$X$이기 때문에 맨해튼 거리가 X$X$ 이하인 보도블록으로만 이동할 수 있다. 지훈이가 무사히 등교를 마칠 수 있는지 알려주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31637","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tJOI 中学校のあるクラスには 2N 人の生徒がいる．各生徒の身長は A1, A2, …, A2N である．\n\n今度の体育の授業で，生徒は N 組の 2 人組に分かれてダンスを踊る．\n\nこのクラスでは，2 人組の作り方を工夫して美しいダンスを実現しようとしている．美しいダンスを実現するには，すべての 2 人組の身長の差が D 以下である必要がある．\n\n各生徒の身長が与えられたとき，美しいダンスが実現可能かどうかを判定するプログラムを作成せよ．\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31971","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn the old Baltic religion, it is important to have a holy fire burning. A priest called krivis is responsible for protecting it from extinguishing. He has many trustworthy helpers called vaidilutės, and wants to create a schedule for them to stoke and protect the fire. He has to ensure that the fire is always maintained by some vaidilutė.\n\nKrivis has his own time measurement system, where each day has M$M$ minutes. There are N$N$ vaidilutės in his village. The i$i$-th vaidilutė's possible work time are described by two integers si$s_i$ and ei$e_i$. The number si$s_i$ is her own earliest time in the day when she may start working, and the number ei$e_i$ is the latest time of the day when she needs to finish working. Time is counted in minutes from the start of the day. Note that when si>ei$s_i > e_i$, the vaidilutė is willing to work overnight.\n\nKrivis asked you to choose some vaidilutės and arrange shifts for them. A chosen vaidilutė must start her shift not earlier than time si$s_i$, and end her shift not later than ei$e_i$. A single shift is always shorter than the whole day. The chosen vaidilutės will repeat their shifts everyday.\n\nHanding things over from one vaidilutė to the next increases the risk of the fire extinguishing. Because of this, you want to minimize the number of times this happens during the day and will arrange a schedule where the smallest possible number of vaidilutės is needed.\n\nCalculate the minimum number of vaidilutės that you need to choose, such that the holy fire is maintained at all times.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31928","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t트리를 해싱한다면 두 트리가 동형인지 빠르게 확인할 수 있지 않을까?\n\n루트 정점이 존재하는 트리가 있을 때, 트리의 각 정점 K$K$의 해시값 H(K)$H(K)$는 K$K$의 자식 정점 P1,P2,…,Pr$P_1, P_2, \\ldots , P_r$의 해시값 H(P1),H(P2),…,H(Pr)$H(P_1), H(P_2), \\ldots , H(P_r)$을 사용하여 다음과 같이 계산된다.\n\n\n\t H(K)=2H(P1)H(P2)…H(Pr)$H(K) = 2 ^ {H(P_1)H(P_2) \\dots H(P_r)}$ \n\n\n이때, 리프 정점의 해시값은 2$2$이다.\n\n양의 정수 h$h$가 주어질 때, 루트 정점의 해시값이 h$h$이고 서로 동형이 아닌 두 트리 T1,T2$T_1, T_2$를 출력하라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31947","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tSCSC의 개발자 철수는 사다리 게임을 만드는 프로그램을 개발했다! 컴퓨터는 N$N$개의 세로선으로 구성된 사다리에 다음과 같은 동작을 M$M$번 반복해 사다리를 완성한다.\n\n\n\t N−1$N-1$개의 이웃한 두 세로선 사이 구간 중 하나를 무작위로 골라 무작위의 높이에 새로운 가로선을 추가한다. 각 구간이 선택될 확률은 모두 1N−1$\\displaystyle \\frac{1}{N-1}$로 같다. 가로선이 추가되는 높이도 가로선을 그릴 수 있는 범위에서 균등 분포를 따라 무작위로 선택된다. 이전에 추가한 가로선과 완전히 높이가 같다면 높이를 새로 선택한다.\n\n\n프로그램이 완성되자 지환이를 포함한 SCSC 부원 네 명이 N=4$N=4$, M=3$M=3$을 입력으로 사다리 게임을 진행했다. 예를 들어 아래와 같은 사다리가 생성될 수 있다.\n\n\n\n부원들은 각자 위쪽 지점 A, B, C, D 중 하나를 골라 1등이 돈을 얻는 게임을 계속했다. 지환이는 항상 D를 골랐지만 한 번도 1등이 나오지 않아 돈을 모두 잃었고, D가 1등이 될 확률보다 4등이 될 확률이 훨씬 높은 것 같다며 화를 냈다. 그런데 지환이의 말이 사실이었다!\n\n따라서 개발자 철수는 확률을 보정하여 게임을 다시 만들고자 한다. 그런데 철수는 코딩에는 매우 익숙하지만 수학은 하나도 모르기 때문에 확률을 계산하지 못한다. 철수를 대신해 지환이가 1등이 될 확률을 계산해주자!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31972","content":"문제\n\nSoon after converting to Christianity, it is believed that the first and the only Lithuanian King Mindaugas ordered the construction of the Vilnius Cathedral. The construction is almost completed, except that the floor has to be covered with ceramic ornamented glazed tiles.\n\nThe floor of the Vilnius Cathedral is a polygon in a 2D plane with a Cartesian coordinate system. The polygon has \nN\n$N$ distinct vertices, numbered from \n1\n$1$ to \nN\n$N$. For each \ni\n$i$ such that \n1≤i≤N\n$1 ≤ i ≤ N$, vertex \ni\n$i$ is located at point \n(X[i],Y[i])\n$(X[i],Y[i])$, where \nX[i]\n$X[i]$ and \nY[i]\n$Y[i]$ are nonnegative integers. There is an edge connecting vertex \ni\n$i$ and vertex \ni+1\n$i + 1$ (for each \ni\n$i$ such that \n1≤i≤N−1\n$1 ≤ i ≤ N - 1$), as well as an edge connecting vertex \nN\n$N$ and vertex \n1\n$1$. The vertices are listed in either clockwise or counterclockwise order.\n\nThe cathedral is an axis-aligned polygon, which means that each of the edges is parallel to either the \nx\n$x$-axis or the \ny\n$y$-axis. Moreover, the cathedral is a simple polygon, that is:\n\nexactly two edges meet at each vertex;\nany pair of edges can only meet at a vertex.\n\nThe builders of the cathedral have infinitely many pieces of tiles. Each piece is a square with side length equal to \n2\n$2$. The builders would like to cover a big part of the cathedral with these pieces. Specifically, the builders want to pick some vertical line and cover the part of the cathedral to the left of the line. For any integer \nk\n$k$, let \nLk\n$L_k$ denote the vertical line consisting of points with \nx\n$x$-coordinate equal to \nk\n$k$. A covering of the part of the cathedral to the left of \nLk\n$L_k$ is a placement of some number of pieces in the plane such that:\n\neach point which lies in the interior of the polygon and has \nx\n$x$-coordinate less than \nk\n$k$ is covered by some piece;\nno point which lies outside of the polygon or has \nx\n$x$-coordinate greater than \nk\n$k$ is covered by some piece;\nthe interiors of the pieces do not overlap.\n\nThe minimum \nx\n$x$-coordinate of any vertex in the cathedral is \n0\n$0$. Let \nM\n$M$ denote the maximum \nx\n$x$-coordinate of any vertex in the cathedral.\n\nHelp the builders of the Vilnius Cathedral by determining the largest integer \nk\n$k$, such that \nk≤M\n$k ≤ M$, and there exists a covering of the part of the cathedral to the left of \nLk\n$L_k$. Note that by definition, there exists a covering of the part of the cathedral to the left of \nL0\n$L_0$ (which uses \n0\n$0$ pieces)."},{"problemId":"31837","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t찬솔이는 이번 학기에 22학점을 들을 계획이다. 시간표를 만들기 위해 찬솔이는 다음과 같이 들을 예정인 과목들을 그룹으로 정리했다.\n\n\n\t그룹 A : [전공종합설계1(가), 전공종합설계2(나), 컴퓨터공학특강1]\n\t그룹 B : [네트워크프로그래밍(가), 네트워크프로그래밍(나)]\n\t그룹 C : [멀티미디어응용]\n\t그룹 D : [SW융합세미나1, 정보기술세미나1]\n\t그룹 E : [파일처리(가), 파일처리(나)]\n\t그룹 F : [디지털공학(나), 디지털공학(다)]\n\t그룹 G : [문제해결]\n\t그룹 H : [프로그래밍언어(가)]\n\n\n그룹마다 그룹에 속한 강의 중 최대 하나의 강의를 선택해서 시간표를 구성한다. 각 강의에는 강의가 진행되는 요일, 강의 시작 시각, 강의 종료 시각이 있고, 선택한 강의끼리 진행 시간이 겹치면 안 된다. 요일이 다르거나 강의가 끝나는 동시에 다른 강의가 시작하는 것은 시간이 겹치는 것이 아니다.\n\n꼭 모든 그룹에서 강의를 하나씩 선택해야 하는 것이 아니며, 하나의 그룹에 학점이 다른 강의가 있을 수도 있음에 유의하라. 또한, 모든 강의는 일주일에 한 번만 진행된다. 즉, 입력으로 주어지는 강의는 모두 서로 다른 강의이다.\n\n찬솔이는 들을 예정인 과목들을 위와 같이 그룹으로 정리했을 때, 선택한 강의의 학점 합이 정확히 22가 되도록 시간표를 만들 수 있는 경우의 수가 궁금해졌다.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31948","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t준범이와 명섭이가 문자열 지우기 게임을 하고 있다.\n\n문자열 지우기 게임은 0, 1, ? 만으로 이루어진 문자열을 사용하는 게임이다. 문자열에 ?는 최대 하나 존재한다. 두 명이 다음 중 한 가지 행동을 번갈아 진행한다.\n\n\n\t문자열 가장 앞의 연속된 같은 숫자 중 1$1$개 이상을 지운다.\n\t문자열 가장 뒤의 연속된 같은 숫자 중 1$1$개 이상을 지운다.\n\t문자열에 존재하는 ? 하나를 0 또는 1로 바꾼다.\n\n\n준범이부터 문자열 지우기 게임을 시작한다. 더 이상 할 수 있는 행동이 없는 경우 패배한다. 준범이와 명섭이 모두 이기기 위해 최선을 다할 때 둘 중 누가 이기게 되는지 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31973","content":"문제\n\nIt's the 14th century and construction of the Trakai Island Castle is to begin soon. The first task on the chief architect's list is to plan the construction of the main castle wall.\n\nBuilding a wall that can protect the castle from any possible attack is quite tricky. To ensure the safety of the castle garrison, the chief architect has already narrowed the design space somewhat.\n\nSince attacks from the middle of the lake aren't as likely as attacks from the nearby shore, the wall does not need to form a closed loop. Instead, it will be in the shape of a straight line, and consist of \nN\n$N$ segments arranged from one end to the other and numbered \n1\n$1$ to \nN\n$N$. What still remains is picking the height of each segment.\n\nThe chief architect has already picked two possible heights for each segment. He decided that the height of the \ni\n$i$-th segment will be either \nai\n$a_i$ or \nbi\n$b_i$. Thus, \n2N\n$2^N$ possibilities remain.\n\nHaving the castle on a small island in a lake has its difficulties. During stormy weather, the castle can get flooded. In such cases, water collects above wall segments if there are higher segments to each side of them, preventing the water from draining.\n\nFor a particular choice of the segments’ heights, we are interested in the amount of water that will collect on the wall after a heavy storm. This is illustrated in the following figure, where the segments’ heights from left to right are \n4\n$4$, \n2\n$2$, \n1\n$1$, \n8\n$8$, \n6\n$6$, \n2\n$2$, \n7\n$7$, \n1\n$1$, \n2\n$2$, \n3\n$3$ and the level of water at each position is \n4\n$4$, \n4\n$4$, \n4\n$4$, \n8\n$8$, \n7\n$7$, \n7\n$7$, \n7\n$7$, \n3\n$3$, \n3\n$3$, \n3\n$3$.\n\nFormally, for every \ni=1,2,…,N\n$i = 1, 2, \\dots , N$, the level of water at position \ni\n$i$ is at least \nh\n$h$ if and only if there exist integers \nl\n$l$ and \nr\n$r$ such that \nl≤i\n$l ≤ i$ and \ni≤r\n$i ≤ r$ and the segment heights at positions \nl\n$l$ and \nr\n$r$ are at least \nh\n$h$. In particular, the level of water at positions \n1\n$1$ and \nN\n$N$ is always equal to the heights of the corresponding segments, and the level of water at any position is always at least as large as the height of the corresponding segment. The amount of water that collects at position \ni\n$i$ is equal to the difference between the level of water and the height of the segment. The total amount of water collected is just the sum of collected water at positions \n1,2,…,N\n$1, 2, \\dots , N$.\n\nYour task is to compute the sum, over all \n2N\n$2^N$ possible walls, of the total amount of collected water. You should output the answer modulo \n109+7\n$10^9 + 7$."},{"problemId":"31929","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t리그 오브 레전드(이하 롤)를 즐기는 민우는 자기보다 롤을 못하는 민석이를 도발했다.\n\n\n너? 재능 있어. 열심히 해.\n\n\n민석이는 너무 분하여 어떻게 하면 점수를 효율적으로 올릴 수 있는지 연구하기 시작했다. 철저한 자기 객관화가 가능한 민석이는 앞으로의 게임에서 N$N$번의 승리와 M$M$번의 패배를 하게 될 것이란 사실을 알고 있다. 민석이는 i$i$번째 승리를 하게 된다면 Wi$W_{i}$만큼의 점수를 얻게 되고, j$j$번째 패배를 하게 된다면 Lj$L_{j}$만큼의 점수를 잃게 된다. 민석이의 점수는 0$0$점에서 시작하고, 점수는 음수가 될 수 있다.\n\n롤에는 민석이와 같은 하수들이 한 번에 너무 큰 점수를 잃지 않도록 매 K$K$점마다 점수 보호권이 존재한다.  정수 a$a$와 0<b<K$0< b < K$를 만족하는 정수 b$b$에 대하여, 민석이의 현재 점수가 a×K+b$a\\times K+b$라고 하자. 만약 민석이가 이 상태에서 j$j$번째 패배를 당했다면, 현재 점수에서 b$b$점을 초과하여 잃지 않는다. 다시 말해, 민석이는 min(Lj,b)$\\min(L_{j},b)$만큼의 점수를 잃게 된다. 만약 현재 점수가 a×K$a\\times K$라면, Lj$L_{j}$만큼의 점수를 잃게 됨에 유의하자.\n\n당연하게도 민석이는 N+M$N+M$번의 게임 후 가장 높은 점수를 얻고 싶다. 민석이를 도와주자. \n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31638","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tJOI 国では，今年プログラミングの世界大会が開かれることとなった．大会には N 人の選手が参加予定であり，選手には 1 から N までの番号が付けられている．\n\n各選手の出身国は 1 以上 109 以下の整数の番号で表され，選手 i (1 ≦ i ≦ N) の出身国は国 Ci である．N 人の選手の出身国がすべて同じであることはない． また，各選手の座席は直線状に並んでおり，選手 i (1 ≦ i ≦ N) の座席は位置 Xi にある．選手 i (1 ≦ i ≦ N) と選手 j (1 ≦ j ≦ N) の座席の距離は |Xi - Xj| である．ただし，|x| は x の絶対値を表す．\n\n各選手は大会中他の選手と交流をするにあたって，自分とは出身国の異なる選手のうち，自分と座席が最も近い選手までの座席の距離を知りたい．\n\n各選手の出身国と座席の位置の情報が与えられたとき，各選手 i (1 ≦ i ≦ N) について，選手 i とは出身国の異なる選手のうち，選手 i との座席の距離が最も小さい選手までの座席の距離を出力するプログラムを作成せよ．\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31974","content":"문제\n\nThe astronomer has a passion for stargazing. In particular, he gets immense pleasure out of gazing at \nk\n$k$ stars simultaneously through his telescope. Building a telescope with radius \nr\n$r$ costs \nt⋅r\n$t\\cdot r$ kroner. A newly built telescope will point exactly at the origin \n(0,0)\n$(0,0)$. Moving it to point somewhere else also takes effort; shifting the telescope a distance of \nd\n$d$ units incurs a cost of \ns⋅d\n$s\\cdot d$ kroner. The astronomer can observe all stars at distance at most \nr\n$r$ from where the telescope points.\n\nHow much does it cost to build and move a telescope that allows \nk\n$k$ stars to be observed at once?\n\nAll coordinates and distances are given in the Euclidean plane.\n\nHere is an example with \nn=3\n$n=3$ stars at positions \n(0,0)\n$(0,0)$, \n(2,0)\n$(2,0)$, and \n(3,1)\n$(3,1)$. The shaded area shows a telescope of radius \n1\n$1$ pointing at \n(1,0)\n$(1,0)$ covering two stars; this costs \ns+t\n$s + t$ kroner and is an optimal solution to sample input \n3\n$3$. The image also shows optimal solutions to sample inputs \n1\n$1$, \n2\n$2$, and \n4\n$4$."},{"problemId":"31639","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tJOI 高校の葵さんは，N 行 N 列のマス目の各マスに整数を十進数表記で書くことにした．具体的には上から i 行目 (1 ≦ i ≦ N)，左から j 列目 (1 ≦ j ≦ N) のマスには Ai + Bj を十進数表記で書く．\n\n葵さんは数字を何文字書くことになるかを知りたい．つまり，葵さんが書く N2 個の整数の桁数の合計を求めたい．\n\nAi (1 ≦ i ≦ N) と Bj (1 ≦ j ≦ N) が与えられたとき，葵さんが書く N2 個の整数の桁数の合計を求めるプログラムを作成せよ．\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31838","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t좌우로 무한히 긴 수직선 위에 N$N$개의 아이템이 떨어져 있다. i$i$번째 아이템의 위치는 i$i$이며, Ai$A_i$의 가치를 가지고 있다.\n\n주원이에겐 길이가 K$K$인 집게가 있는데, 이 집게를 이용하면 주원이가 지정한 정수 좌표 x(−109≤x≤109)$x(-10^9\\le x\\le 10^9)$를 기준으로 x$x$부터 x+K−1$x+K-1$까지의 범위에 있는 아이템을 모두 줍는다. 주운 아이템은 그 자리에서 사라지며 주운 아이템은 다시 내려놓을 수 없다. 주원이는 집게를 원하는 만큼 사용해 주운 아이템의 가치의 합이 최대가 되도록 만들고 싶다.\n\n주원이가 주운 아이템 가치의 합으로 가능한 값 중 최댓값을 찾아보자. 집게를 한 번도 사용하지 않을 수도 있으며, 이때 주운 아이템의 총 가치는 0임에 유의하라.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31839","content":"문제\n\n봄 축제 때 정보과학관에서는 아무 행사도 진행되지 않는다는 것에 화가 난 찬솔이는 정보과학관 입구 앞에서 직접 불꽃놀이 행사를 진행하려고 한다.\n\n정보과학관 입구 앞에 폭죽 또는 스위치를 설치할 수 있는 \nN\n$N$개의 공간과, 서로 다른 두 공간을 연결하는 도화선 \nN−1\n$N-1$개가 준비되어 있다. \nN\n$N$개의 공간은 도화선을 통해 모두 서로 연결되어 있다. 찬솔이는 \nN\n$N$개의 공간 중 한 곳에 스위치를 설치하고, 나머지 \nN−1\n$N-1$개의 공간에는 폭죽을 설치한다. 만약 \ni\n$i$번째 공간에 스위치가 설치되지 않았다면, \ni\n$i$번째 공간에는 \nWi\n$W_i$개의 폭죽이 설치된다.\n\n스위치를 설치한 공간의 번호를 \na\n$a$라고 하자. 공간 \nx\n$x$와 \ny\n$y$ 사이의 거리 \nD(x,y)\n$D(x,y)$는 \nx\n$x$에서 \ny\n$y$까지 이동하는 데 거쳐 가는 도화선의 최소 개수로 정의된다. 폭죽이 설치된 각 공간 \nb\n$b$에서 터지는 폭죽의 아름다움은 \nWb×D(a,b)\n$W_b\\times D(a,b)$이다.\n\n불꽃놀이의 아름다움은 스위치가 설치된 공간 \na\n$a$를 제외하고, 폭죽이 설치된 모든 공간 \nb\n$b$에서 터지는 폭죽의 아름다움의 합으로 정의된다. 스위치를 설치할 공간을 잘 정해서 얻을 수 있는 불꽃놀이의 아름다움의 최댓값을 구해보자."},{"problemId":"31949","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou are now in charge of two programming interns, and you must develop a large system. There are a number of tasks that need to be completed by the end of the summer. You know how long each intern will take to complete each task, in minutes.\n\nCompute the minimum number of minutes it will take to complete all tasks for development of the system, assuming that the two interns are the only developers, that they work independently and concurrently, that they do not share tasks, and that the amount of time it takes an intern to complete all their tasks is the sum of the number of minutes it takes to do each task one after the other.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31975","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tA staring contest is a classical battle of imperturbability in which two people stare into each other's eyes while maintaining a facial expression of assured serenity. The goal is to maintain eye contact for longer than your opponent. The contest ends when one participant breaks composure, typically by looking away, smiling, speaking, or giggling.\n\nAs a coach of the national staring contest you need to determine the imperturbability of each of your team's n$n$ members for the upcoming world finals. The i$i$th athlete can maintain eye contact for exactly ai$a_i$ seconds, but these values are unknown to you in the beginning. For instance, you could have a team of n=3$n=3$ members:\n\n\n\t\n\t\t\n\t\t\t i$i$ \n\t\t\tName\n\t\t\t ai$a_i$ \n\t\t\n\t\t\n\t\t\t1\n\t\t\tAnna\n\t\t\t431\n\t\t\n\t\t\n\t\t\t2\n\t\t\tEsther\n\t\t\t623\n\t\t\n\t\t\n\t\t\t3\n\t\t\tTony\n\t\t\t121\n\t\t\n\t\n\n\nWhen athletes i$i$ and j$j$ compete, the confrontation lasts exactly min(ai,aj)$\\min(a_i, a_j)$ seconds, at which moment the weaker contestant breaks composure and both contestants start smiling and giggling within a fraction of a second. For instance, if Anna competes against Esther, the contest lasts for 431$431$ seconds. Importantly, to an outside observer the actual winner of the confrontation (in this case, Esther) is impossible to determine, only the duration of the contest is measurable.\n\nYour goal is to estimate the values a1,…,an$a_1,\\ldots, a_n$ using as few staring contests as possible. Clearly, the strength of the strongest athlete can never be determined, so you are allowed to underestimate one of the ai$a_i$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31930","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n이 문제는 인터랙티브 문제입니다.\n\n밤마다 총성이 울리는 동네에 일렬로 배치된 N$N$개의 구역이 있다. 이 중 서로 다른 두 구역에 보물이 숨겨져 있으며, 나머지 구역에는 폭탄이 설치되어 있다. 엄마를 요양원 보내기 위한 비용이 필요한 이삭이는 두 보물을 모두 훔치기로 마음먹었다. 폭탄이 설치된 구역에 접근하면 폭탄이 폭발하므로, 이삭이는 보물이 위치한 두 구역을 정확히 파악하려고 한다.\n\n보물은 악소리에 반응하며 외할머니는 일렬로 연속한 구간에 소리가 닿도록 악소리를 낼 수 있다. 이때, 소리가 닿은 구간 내 구역에 보물이 정확히 하나 존재할 때만 보물의 반응을 느낄 수 있다. 보물이 존재하지 않는다면 보물이 반응하지 않으므로 반응을 느낄 수 없고, 두 보물이 모두 존재한다면 두 보물의 반응이 중첩되어 반응을 느낄 수 없다.\n\n외할머니는 악소리를 47$47$번 이내로 낼 수 있다. 외할머니를 도와 이삭이가 두 보물을 모두 훔칠 수 있도록 하자.\n\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31950","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tThe Champernowne string is an infinite string formed by concatenating the base-10 representations of the positive integers in order.\n\nIt begins 1234567891011121314...\n\nIt can be proven that any finite string of digits will appear as a substring in the Champernowne string at least once.\n\nGiven a string of digits and question marks, compute the smallest possible index that this string could appear as a substring in the Champernowne string by replacing each question mark with a single digit from 0$0$ to 9$9$. Each question mark can map to a different digit. Since this index can be large, print it modulo 998244353$998\\,244\\,353$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31976","content":"문제\n\nThe planetary exploration vehicle Tycho VIII needs to get back to the home base after collecting mineral samples. Tycho travels in a straight line from position \n0\n$0$ to the home base at position \nb\n$b$. While moving, it advances at a slow but steady pace of \n1\n$1$ unit per second. Every second, Tycho takes \n1\n$1$ unit of environmental damage from the harsh planetary conditions.\n\nThe situation is made even worse by radiation from a nearby pulsar, which adds \nd\n$d$ additional units of damage every \np\n$p$ seconds. However, the radiation damage can be avoided by seeking shelter in one of \nn\n$n$ different hiding spots---caves, vegetation, large rocks, carcasses of the planet's megafauna---along the way. Tycho can choose to stand still at any point for any integer number of seconds.\n\nThe starting position \n0\n$0$ and the home base at \nb\n$b$ are both sheltered, so Tycho takes no radiation damage there.\n\nWhat is the minumum damage Tycho will take on its journey back to the home base?\n\nConsider the situation where the home base is at position \n18\n$18$ and there are shelters at positions \n8\n$8$ and \n15\n$15$.\n\nAssume that the pulsar's period is \n4\n$4$, so unsheltered Tycho would take damage at times \n4\n$4$, \n8\n$8$, \n12\n$12$, etc. If Tycho leaves from the starting position (where it's sheltered) at time \n0\n$0$, it can reach the first shelter after \n8\n$8$ seconds, incurring radiation damage \nd\n$d$ at time \n4\n$4$ (but none at time \n8\n$8$ because it's sheltered then). Continuing without stopping, it reaches the home base at time \n18\n$18$, incurring \nd+d\n$d+d$ more units of radiation damage (at times \n12\n$12$ and \n16\n$16$, respectively). This way it incurs \nd+d+d=3d\n$d+d+d=3d$ units of radiation damage and \n18\n$18$ units of environmental damage. If instead Tycho waits at the \n2\n$2$nd shelter (at position \n15\n$15$) for \n1\n$1$ second, the pulse at time \n16\n$16$ causes it no damage, and it reaches the home base at time \n19\n$19$ with a total of \n2d+19\n$2d + 19$ units of damage. This is better for most values of \nd\n$d$. The two situations are shown here:\n\nIf the pulsar's period is \n10\n$10$, Tycho can wait at the starting position for \n2\n$2$ seconds and then just go home without stopping at any shelter. Thus it passes the \n1\n$1$st shelter (at position \n8\n$8$) at just the right moment when the pulsar flares and arrives at the home base at time \n20\n$20$, for a total of \n20\n$20$ environmental damage and no radiation damage at all."},{"problemId":"31931","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n나루토와 사스케는 서로를 죽이기 위한 혈투를 시작했다. 혈투가 시작되기 전, 나루토는 X$X$, 사스케는 Y$Y$의 체력을 가지고 있다. 혈투는 나루토와 사스케의 차례가 번갈아 가면서 진행된다. 차례는 나루토부터 시작되며, 각자 자신의 차례일 때 공격 또는 회복 중 하나를 선택하여 시행한다.\n\n\n\t공격을 선택하면 상대방의 체력이 자신의 공격력만큼 감소한다.\n\t회복을 선택하면 자신의 체력이 자신의 회복력만큼 증가한다.\n\n\n회복을 선택한 경우, 최대 체력의 상한선은 존재하지 않는다. 즉, 초기의 체력을 넘어갈 수도 있다.\n\n혈투가 진행되는 도중 나루토와 사스케 중 한 명의 체력이 0$0$ 이하가 되면, 그 순간 혈투가 종료되고 체력이 0$0$ 이하가 된 사람이 패배한다. 만약 10100$10^{100}$번의 차례가 진행된 이후에도 두 명의 체력이 모두 0$0$보다 크다면, 무승부로 혈투가 종료된다. \n\n나루토와 사스케는 혈투에서 이길 수 있다면 이기는 전략을 취하고, 이길 수 없다면 비기기 위해 최선을 다한다. 혈투의 정보가 주어질 때, 결과를 알아내 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31977","content":"문제\n\nThe fully autonomous microbreweries installed in the abandoned Dwarven mines of Moravia are truly a testament to the ingenuinity and craftsmanship of Dwarven engineering! Alas, sometimes earthquakes rattle the mines, leading to misaligned pipes and funnels spilling precious liquid on the floor. As the Exalted Warden of Brewery Safety it is your responsibility to turn off the machines in every hall in case of an earthquake.\n\nWalking through tunnels takes time, so you will inevitably arrive late at many of the machines. This cannot be avoided, but you want to minimise the total amount of spilled liquid.\n\nThe Dwarven mines consist of \nn\n$n$ halls connected by \nn−1\n$n-1$ tunnels. The entire system is connected, so it is possible to get from any hall to any of the others. It takes \n1\n$1$ unit of time to traverse a tunnel. Switching off a machines and traversing a hall takes no time. In each hall, turning off the machines at time \nt\n$t$ after the earthquake spills \nt\n$t$ liters of liquid. There is exactly one earthquake, the earthquake affects all halls at the same time, and you may not switch off any machines before the earthquake. You can start in any of the halls.\n\nIn sample input \n1\n$1$, the mines look like this:\n\nIf you start in hall \n2\n$2$ and visit the rest of the halls in the order \n2\n$2$, \n1\n$1$, \n2\n$2$, \n3\n$3$, then you can switch off their machines at time \n0\n$0$ (in hall \n2\n$2$), time \n1\n$1$ (in hall \n1\n$1$), and time \n3\n$3$ (in hall \n3\n$3$). This wastes \n0+1+3=4\n$0+1+3=4$ liters of liquid in total. If instead you start in hall \n1\n$1$ and visit the halls in the order \n1\n$1$, \n2\n$2$, \n3\n$3$, the total amount of liquid wasted is \n0+1+2=3\n$0+1+2=3$ liters, which is better."},{"problemId":"31978","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou handle signal processing for an extra-terrestrial mining company, and your vessel is currently approaching an asteroid. Preliminary scans show the presence of k$k$ mineral deposits on the asteroid, but their precise locations are unknown.\n\nThe surface of the asteroid can be seen as a grid of integer coordinates. Each of the mineral deposits is located at unknown integer coordinates such that the i$i$th deposit has coordinates (xi,yi)$(x_i, y_i)$ with −b≤xi≤b$-b \\le x_i \\le b$ and −b≤yi≤b$-b\\le y_i \\le b$ for some integer b$b$ corresponding to the size of your initial scan.\n\nTo determine the precise locations of the mineral deposits, you may send probes to the surface of the asteroid. The probes are sent out in waves of several probes at once.\n\nSay you sent a wave of d$d$ probes to the surface at coordinates (sj,tj)$(s_j,t_j)$ for 1≤j≤d$1\\leq j\\leq d$. When a probe arrives at its coordinates, it determines the Manhattan distances to each of the k$k$ mineral deposits and sends the distances back to the ship. All data packets arrive at the same time, and it is not possible to determine which probes returned which distances. Thus the wave returns the k⋅d$k\\cdot d$ integer distances |xi−sj|+|yi−tj|for all i∈{1,…,k} and j∈{1,…,d}.\\[|x_i-s_j| + |y_i - t_j| \\qquad\\text{for all } i \\in \\{1,\\ldots,k\\} \\text{ and } j \\in\\{ 1,\\ldots,d\\}\\,.\\] \n\nYou need to minimise the number of waves of probes that is sent to the surface.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31979","content":"문제\n\nA sequence of positive integers \n(x1,…,xm)\n$(x_1,\\ldots,x_m)$ is good if \nx1=1\n$x_1 = 1$ and for each \n1<j≤m\n$1 < j \\leq m$ we have either \nxj=xj−1+1\n$x_j=x_{j-1}+1$ or \nxj=xk⋅xl\n$x_j=x_k\\cdot x_l$ for some \nk\n$k$ and \nl\n$l$ with \n0<k≤l<j\n$0< k\\leq l< j$. For instance, the sequences \n(1,1)\n$(1,1)$ and \n(1,2)\n$(1,2)$ are both good, but the sequence \n(1,3)\n$(1,3)$ is not good. For \nn\n$n$ given integers \nw1,…,wn\n$w_1,\\ldots,w_n$ define the weight of an integer sequence \n(x1,…,xm)\n$(x_1,\\ldots,x_m)$ satisfying \n1≤xj≤n\n$1\\leq x_j \\leq n$ for each \n1≤j≤m\n$1\\leq j\\leq m$ as\nwx1+⋯+wxm.\n\\[ w_{x_1} +\\cdots +w_{x_m}\\,.\\]\nFor instance, given the weights \nw1=10,w2=42,w3=1\n$w_1=10, w_2=42,w_3= 1$, the weight of the sequence \n(1,1)\n$(1,1)$ is \n20\n$20$ and the weight of the sequence \n(1,3)\n$(1,3)$ is \n11\n$11$. For \n1≤v≤n\n$1\\leq v\\leq n$, define \nsv\n$s_v$ as the smallest possible weight of a good sequence containing the value \nv\n$v$.\n\nYour task is to determine the values \ns1,…,sn\n$s_1,\\ldots ,s_n$."},{"problemId":"31951","content":"문제\n\nMany programming languages let you define custom comparators to sort user-defined objects.\n\nIFFY is a programming language where the only programs are functions intended to be comparators. These functions operate on bitstrings, hereafter called \"words\". Words are 1-indexed starting with the leftmost character.\n\nTo write a function on two words in IFFY, the programmer writes a series of if-statements. Each if statement chooses a bit from the first word, a bit from the second word, and evaluates some expression on those two bits. If the expression evaluates to \n1\n$1$ on those chosen bits, then the function returns immediately with a specified return value. Otherwise, execution falls through to the next if statement, not returning anything.\n\nThe syntax of each if statement is \na\n$a$ \nb\n$b$ expr \nr\n$r$, where the integer \na\n$a$ specifies a bit from the first word, integer \nb\n$b$ specifies a bit from the second word, and expr is a boolean expression using variables \nx\n$x$ and/or \ny\n$y$, and \nr\n$r$ is the value (\n0\n$0$ or \n1\n$1$) returned from the function if the expression evaluates to \n1\n$1$. The variable \nx\n$x$ refers to the specified bit in the first word, and the variable \ny\n$y$ refers to the specified bit in the second word. For example, consider the if statement '2 3 x|y 0'. This expression means: if the second bit of the first word or the third bit of the second word is set, then return \n0\n$0$, otherwise continue with the next statement.\n\nThe grammar for valid expressions is as follows:\n\n$x \n,\n$, $ y$, 0, and 1 are valid expressions.\nIf E is a valid expression, then (E) is a valid expression.\nIf E is a valid expression, then !E is a valid expression.\nIf E1 and E2 are valid expressions, then all strings of the form E1 BIN_OP E2 are valid expressions, where BIN_OP is one of = (equals), & (and), | (or), or ^ (xor).\n\nParentheses take highest precedence, followed by the unary !, followed by the binary =, &, |, and ^, in that order. All binary operators are left-associative.\n\nHere are the truth tables for each operator:\n\nFigure C.1: The truth table for the sole unary operator.\n\nFigure C.2: Truth tables for the binary operators.\n\nIn order for a function \nf(x,y)\n$f(x,y)$ to operate properly as a comparator, it must satisfy certain properties. Informally, for \nf(x,y)\n$f(x,y)$ to be a comparator, it should impose some ordering \n<\n$<$, where \nf(x,y)\n$f(x,y)$ returns \n1\n$1$ if and only if \nx<y\n$x < y$. For example, sample \n1\n$1$ is a valid comparator to sort bitstrings of length \n2\n$2$. More formally, three of the properties that comparators must satisfy are the reflexive, symmetric, and transitive properties, as follows:\n\nReflexive: For all \nx\n$x$, \nf(x,x)\n$f(x, x)$ should return 0.\nSymmetric: For all \nx,y\n$x,y$, if \nf(x,y)\n$f(x, y)$ returns 1, then \nf(y,x)\n$f(y, x)$ must return 0.\nTransitive: For all \nx,y,z\n$x,y,z$, if both \nf(x,y)\n$f(x, y)$ and \nf(y,z)\n$f(y, z)$ return 1, then so must \nf(x,z)\n$f(x, z)$.\n\nGiven a function in the IFFY language, determine how well it satisfies these three properties by counting how often they are violated. First, among all words of a given length, count the number of words for which the reflexive property fails. Next, count the number of pairs of words for which the symmetric property fails. Finally, count the number of triples of words for which the transitive property fails."},{"problemId":"31932","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n북극은 총 N$N$개의 빙하와 서로 다른 두 빙하를 잇는 M$M$개의 얼음 다리로 이루어져 있다. 각 얼음 다리는 양방향으로 자유롭게 왕복할 수 있으며, i$i$번 얼음 다리의 길이는 di$d_{i}$이다. 초기에 서로 다른 두 빙하 사이를 왕복할 수 있는 경로가 반드시 존재한다.\n\n북극곰의 사냥터는 1$1$번 빙하이고, 북극곰의 집은 N$N$번 빙하이다. 북극곰은 현재 1$1$번 빙하에서 신나게 연어를 잡아먹고 있다. 그러나 북극곰은 이내 지구 온난화로 인해 얼음 다리가 무너지고 있어 서둘러 N$N$번 빙하에 있는 자신의 집으로 돌아가야 한다는 사실을 깨닫게 되었다. 북극곰은 매초 1$1$마리의 연어를 먹을 수 있고, 매초 길이 1$1$만큼 움직일 수 있다. 북극곰은 1번 빙하에서만 연어를 먹을 수 있다.\n\n북극곰은 이미 무너졌거나 건너는 와중 무너질 얼음 다리를 건널 수 없다. 북극곰은 꽤 민첩하므로 얼음 다리가 무너지는 시점과 얼음 다리를 건너는 걸 완료하는 시점이 일치하는 경우, 얼음 다리를 건널 수 있다. 다시 말해, 현재 k$k$초가 지났고 북극곰이 건너고자 하는 얼음 다리의 길이가 d$d$, 얼음 다리가 t$t$초에 무너질 예정이라면 k+d≤t$k+d\\leq t$를 만족해야만 북극곰이 해당 얼음 다리를 건널 수 있다.\n\n연어가 너무 맛있는 나머지, 북극곰은 최대한 늦게까지 사냥터에 남아 연어를 잡아먹고 싶다. 얼음 다리에 대한 정보가 주어질 때, 배고픈 북극곰을 위해 북극곰이 잡아먹을 수 있는 최대 연어의 수를 구해주자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31952","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn mathematics, the dihedral group Dn$D_n$ is the group of symmetries of a regular n$n$-gon. Rotations and reflections are elements of Dn$D_n$, and in fact all elements of the dihedral group can be expressed as a series of rotations and reflections. Elements of Dn$D_n$ act on the n$n$-gon by permuting its vertices. For example, consider a regular pentagon with vertices initially labeled 1$1$, 3$3$, 5$5$, 4$4$, 2$2$ (clockwise, starting from the top):\n\n\n\nApplying the above three dihedral actions to the pentagon (a rotation, reflection, and then another rotation) produces the following relabelings of the pentagon's vertices:\n\n 1,3,5,4,2→2,1,3,5,4→2,4,5,3,1→1,2,4,5,3.$1, 3, 5, 4, 2 \\rightarrow 2, 1, 3, 5, 4 \\rightarrow 2, 4, 5, 3, 1 \\rightarrow 1, 2, 4, 5, 3.$ \n\nYou are given an arbitrary clockwise labeling of the vertices of a regular n$n$-gon using the integers 1$1$ through n$n$, and a second sequence to test. Determine whether it's possible to apply some series of dihedral actions to the n$n$-gon so that the test sequence appears as a contiguous clockwise sequence of vertex labels on the transformed polygon.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31933","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n태초에 연어들은 N$N$번 마을에서 태어났다. 오늘날 K$K$마리의 연어들은 모두 1$1$번 마을에 모여 살고 있고, 이들은 산란기를 맞아 다시 N$N$번 마을로의 모험을 떠나고자 한다. 연어들이 사는 마을은 총 N$N$개이고, 마을들을 잇는 강은 총 M$M$개가 있다. 산란기의 연어들은 강을 거슬러 올라갈 힘도 충분하기에 강은 어느 방향으로든 자유롭게 다닐 수 있으며, 서로 다른 두 마을을 잇는 강은 최대 1$1$개 존재한다.\n\n i$i$번째 강의 최소 폭은 li$l_{i}$이고 최대 폭은 ri$r_{i}$이다. 만약 강의 최대 폭보다 연어의 크기가 크다면 이 강을 통과할 수 없고, 강의 최소 폭보다 작다면 강의 물살을 이기지 못할 것이다. 다시 말해, i$i$번 강을 통과하는 연어는 li$l_{i}$보다 크거나 같고 ri$r_{i}$보다 작거나 같은 크기를 가지고 있어야 한다.\n\n 1$1$번 마을에서 출발하여 N$N$번 마을에 도착할 수 있는 연어들의 수를 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31953","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIn the land of Circleland, there is a circle that has equally spaced points around its circumference. The distance between any two adjacent points is 1$1$.\n\nThere are people and houses on the circle's points. Each point contains a person, an empty house, or nothing at all. Each person would like to walk to a different house. Each house can contain at most one person. People can only walk along the circumference of the circle; they cannot cut across.\n\nCurrently, there are more houses than people, so you'd like to destroy some of the houses. Suppose you destroy a set of houses S$S$. Let f(S)$f(S)$ be the minimum total amount of walking needed to get each person to a different non-destroyed house.\n\nCompute the minimum value of f(S)$f(S)$, compute how many sets of houses S$S$ achieve this minimum value. Since the number of sets S$S$ can be large, output it modulo 998244353$998\\,244\\,353$.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31934","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t크기가 N$N$ x M$M$인 2차원 배열이 주어진다. 배열의 원소의 값은 알파벳 소문자이다.\n\n배열에서 문자열을 뽑으려 하는데, 방식은 다음과 같다. 먼저 M$M$개의 열 중 K$K$개의 열을 가린 뒤, 배열에 보이는 원소들을 좌측 상단부터 우측 하단까지 알파벳을 이어 붙인다. 이때 먼저 열이 증가하고 그 다음 행이 증가하는 순서대로 붙인다.\n\n예를 들어, 아래에 다음과 같은 2차원 배열이 존재하고 K=1$K=1$일 때, 뽑을 수 있는 문자열은 cbudqr, abzdpr, aczupq로 총 3$3$가지 이다.\n\n\n\t\n\t\t\n\t\t\ta\n\t\t\tc\n\t\t\tb\n\t\t\n\t\t\n\t\t\tz\n\t\t\tu\n\t\t\td\n\t\t\n\t\t\n\t\t\tp\n\t\t\tq\n\t\t\tr\n\t\t\n\t\n\n\n K$K$개의 열을 모두 가려야 하며 어떤 열을 가릴지에 따라 다양한 문자열이 나올 수 있다. 이때, 사전 순으로 가장 앞서는 문자열을 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31954","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t \n\nA \"Magic Bean\" is a combination fidget toy and puzzle, with 30 colored beads moving in three circular tracks. In its solved state, the upper circle contains ten indistinguishable orange beads, the lower left circle contains ten indistinguishable grey beads, and the lower right circle contains ten indistinguishable red beads. The beads can be rotated in each circle. In addition, there is a fourth circle in the middle that can be rotated, and in doing so exchanges consecutive triples of beads among the circles.\n\nYour brother just borrowed your Magic Bean and arbitrarily rotated those circles, scrambling the beads. Your job is to solve the puzzle, by finding a sequence of valid rotations of the four circles that leads back to the solved state. You need not find the shortest such solution, but your solution should use no more than 240$240$ moves. The provided input will be the state of the puzzle after applying some sequence of at most 240$240$ moves.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31955","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIt's a grid system! You begin at the top left corner and want to walk to the bottom right corner. Every location is at integer coordinates, and has an arrow pointing down or right and a timer that, every few seconds, flips the arrow from down to right, or from right to down. When you begin your walk, every arrow is pointing down or right with equal probability, and every timer has a real value chosen uniformly in the range from zero to its maximum wait time.\n\nAt any moment in time, if you are at a given location, you can:\n\n\n\tMove down one location if the new location is on the grid and the arrow is pointing down.\n\tMove right one location if the new location is on the grid and the arrow is pointing right.\n\tWait for the timer to finish its countdown so that the arrow flips from down to right, or from right to down.\n\n\nWhen you arrive at a new location, you are able to see the timer and can therefore take that into account when deciding which action to take. However, you are not able to look ahead---you can only see the timer and arrow for the exact grid point you occupy. You hate waiting, and want to minimize the total amount of time you're waiting for an arrow to flip.\n\nWhat is the expected amount of time you have to wait if you make decisions optimally?\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31935","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t길이 N$N$의 수열 A=[A1,A2,…,AN]$A=[A_{1}, A_{2},\\dots, A_{N}]$이 있다. 1≤i<j≤N$1\\leq i < j \\leq N$을 만족하는 임의의 두 정수 i$i$와 j$j$에 대하여 Ai≠Aj$A_{i}\\neq A_{j}$를 만족한다. 1≤l≤r≤N$1\\leq l \\leq r \\leq N$을 만족하는 두 정수 l$l$과 r$r$에 대하여 함수 f(l,r)$f(l,r)$을 다음과 같이 정의하자.\n\n f(l,r)=Al,Al+1,…,Ar$f(l,r)=A_{l},A_{l+1},\\dots,A_{r}$의 값 중에서 K$K$번째로 작은 값\n\n만약 구간의 길이를 나타내는 값 r−l+1$r-l+1$이 K$K$보다 작다면, f(l,r)=0$f(l,r)=0$으로 정의한다.\n\n ∑l=1N∑r=lNf(l,r)$\\sum_{l=1}^{N}\\sum_{r=l}^{N}f(l,r)$의 값을 구해보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31936","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n\n그럼 제가 선배 맘에\n\n<서이브/남동현, 마라탕후루, 2024>\n\n\n아주대의 마스코트인 치토는 요즘 유행한다는 마라탕과 탕후루를 합쳐서 마라탕후루 가게를 오픈했다. 그런데 첫날부터 발주를 실수하는 바람에 딸기와 샤인머스캣이 박스째로 쌓이게 되었다. 과일은 신선도가 중요하기 때문에 오늘은 탕후루를 손님들에게 무료로 제공하기로 했다.\n\n치토는 사전에 탕후루 꼬치 N$N$개를 만들어 두었다. 그런데 바빠서 손에 잡히는 대로 과일을 꽂다 보니 꼬치마다 꽂혀있는 딸기와 샤인머스캣의 개수가 다를 수 있다는 사실을 뒤늦게 깨달았다. 맛의 밸런스를 유지하기 위해서는 꼬치마다 꽂혀있는 딸기와 샤인머스캣의 개수가 동일해야 한다. 단, 서로 다른 꼬치에 꽂혀있는 딸기와 샤인머스캣의 개수가 같을 필요는 없다. 치토는 가게를 운영하느라 매우 바빠서 딸기와 샤인머스캣의 개수를 동일하게 만들어줄 로봇을 고용했다.\n\n현재 i$i$번 꼬치에는 Ai$A_{i}$개의 딸기와 Bi$B_{i}$개의 샤인머스캣이 꽂혀있다. 치토가 고용한 로봇은 한 가지 문제점이 존재하는데, 바로 딸기와 샤인머스캣을 매번 정해진 개수만큼 꽂는다는 것이었다. 로봇은 1$1$분마다 다음의 행동을 한 번 진행한다. \n\n\n\t i$i$번 꼬치와 j$j$번 꼬치를 선택한다. 이때, i$i$와 j$j$는 같을 수 있다. (1≤i,j≤N)$(1\\leq i, j \\leq N)$ \n\t i$i$번 꼬치에 딸기 P$P$개, j$j$번 꼬치에 샤인머스캣 Q$Q$개를 동시에 꽂는다.\n\n\n치토는 곰곰이 생각해 보니 로봇이 꼬치마다 딸기와 샤인머스캣의 개수를 똑같이 만들지 못할 수도 있다는 사실을 깨달았다.\n\n로봇이 꼬치마다 딸기와 샤인머스캣의 개수를 똑같이 만들 수 있는지 없는지 확인해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31956","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIt's a glorious day in the video game meta-world of MountainCraft! True to its name, MountainCraft boasts an expansive open world full of mountains to explore. Your avatar in the game wakes up on a remote island, and stares at the mountains on the horizon.\n\nThe view of the horizon can be modeled as a Cartesian plane, with the x$x$-axis (y=0$y = 0$) separating land from sea. Each mountain peak is represented by a point (x,y)$(x, y)$, and the mountain's sides have slope +1$+1$ and −1$-1$, forming a triangle with that peak at the top.\n\nYour avatar can only see the parts of the mountains which are in a viewport. The visible edges of the mountains, where they do not overlap other mountains, are rendered in bold. If mountains overlap, the overlapping parts are not rendered in bold. Edges do not have to intersect for mountains to overlap.\n\n\n\nFigure H.1: The first sample input after all mountains appear.\n\nUnfortunately, due to graphical glitches, mountains can appear and disappear. After each change, you want to know the total length of all the bold lines currently visible in the viewport.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31957","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tSick of solving geometry problems, you decide to solve the following constructive problem: find a string of length n$n$ that contains exactly k$k$ not necessarily contiguous subsequences of NAC.\n\nThis problem seems too familiar though. Here's the twist - your friend has given you part of the string, so you must fill in the remaining characters!\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31958","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou just got your new passport, fresh with pages ready to be stamped by immigration officers. Sadly, because your passport has so many pages, immigration officers are too lazy to try to use your pages efficiently, so you may need to get a new passport sooner than you think...\n\nYou have some trips prepared. For each trip, when you go through passport control, the immigration officer will look for  some contiguous pages, none of which are stamped, and then stamp all of them. Because the officer is lazy, there is no guarantee which contiguous pages get stamped.\n\nYou will start making these trips in order until your passport no longer has enough contiguous empty pages to satisfy the next trip, at which point you will apply for a new passport. Your plans are fixed - you will not skip a trip in the middle even if it means you could make more future trips.\n\nIf the immigration officers conspire against you, find the first trip where it is possible you cannot travel because your passport does not have enough consecutive blank pages (or if you can always make all trips without running out of blank pages).\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31959","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tYou have a point light source at the origin in the 2D plane. To the right there is an infinitely tall wall. There are some opaque vertical line segments between the light source and the wall. As a result, each line segment casts a shadow onto the wall. All of these shadows overlap to form one or more intervals on the wall.\n\n\n\nNow imagine moving the light source along the x$x$-axis in the negative direction, effectively pulling the light further away from all the objects in a straight line. As the light source moves, the shadows move as well, potentially changing the number of shaded intervals on the wall. Your job is to compute the sum of the lengths of the intervals along the x$x$-axis for which the light source creates a single shaded interval on the wall.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31937","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n로그프레소 마에스트로 플레이북 예시\n\n\n로그프레소 마에스트로는 자체 원천 기술 기반으로 통합보안관제, 내부정보유출탐지, 보안운영자동화, 침해사고대응의 모든 영역을 포괄하는 가장 완전한 보안운영 플랫폼입니다. 많은 비용을 들여 여러 개의 독립적인 솔루션들을 도입하고 연동할 필요 없이, 단 하나의 완전한 플랫폼으로 AI기술과 위협 인텔리전스까지 포괄하는 현대적인 보안운영센터를 구축할 수 있습니다.\n\n\nSCSC에는 1$1$번부터 N$N$번까지 서로 다른 번호가 부여된 N$N$개의 컴퓨터가 있다. 컴퓨터는 서로 파일을 전송할 수 있으며, 바이러스에 감염된 컴퓨터가 다른 컴퓨터에 파일을 전송하면 파일을 받은 컴퓨터 또한 바이러스에 감염된다.\n\n어느 날 로그프레소 마에스트로 시스템이 SCSC의 컴퓨터 중 K$K$대의 컴퓨터가 바이러스에 감염된 것을 확인하고 격리를 진행했다. 시스템은 처음 바이러스에 감염된 1$1$대의 컴퓨터가 다른 모든 컴퓨터를 감염시켰다고 진단했다. 시스템은 처음 바이러스에 감염된 컴퓨터가 바이러스에 감염된 시점으로부터 격리된 시점까지의 아래와 같은 M$M$번의 파일 전송 로그를 토대로 처음 감염된 컴퓨터를 알아냈다.\n\n\n\t t$t$ a$a$ b$b$: 시각 t$t$에 a$a$번 컴퓨터에서 b$b$번 컴퓨터로 파일을 전송했다.\n\n\n시스템이 성능이 너무 뛰어나 본인이 설 자리를 위협할 수 있겠다고 생각한 SCSC의 서버 관리자 민호는 저 정도 분석은 자신도 할 수 있다고 주장하려고 한다. 민호를 도와 파일 전송 로그를 분석하여 처음 바이러스에 감염된 컴퓨터를 알아내 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31938","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n\n현대모비스는 앞으로 미래 모빌리티 산업에서 소프트웨어와 하드웨어를 결합한 차별화된 모빌리티 솔루션을 제공하는 선도기업으로 도약하기 위해 노력하고 있으며, 이러한 연구개발과 생산능력 등 핵심역량을 바탕으로 스마트 모빌리티, UAM, 로보틱스 사업분야로 비즈니스를 확대해 나가고 있습니다.\n\n\n트럭 군집주행은 여러 대의 트럭이 줄지어 함께 이동하는 자율주행 운송 기술이다. 내륙 운송의 효율을 높이고 뒤따르는 트럭에 공기 저항이 최소화되면서 연료 효율 개선과 배출가스 저감 효과도 기대할 수 있다.\n\n 1$1$번부터 N$N$번까지 번호가 부여된 N$N$개의 도시, 서로 다른 두 도시를 잇는 M$M$개의 양방향 도로, 1$1$번 도시에서 출발하여 나머지 N−1$N-1$개의 도시로 화물을 운송하는 N−1$N-1$개의 트럭이 있다.\n\n각 트럭은 목적지까지 최단 거리로 이동한다. 같은 도로를 따라 여러 트럭이 함께 이동하는 경우 트럭 군집주행을 통해 운송비를 절감할 수 있다. 기본 운송비는 거리와 같지만, 한 트럭이 다른 트럭을 뒤따라가는 경우 해당 도로의 운송비가 10%$10\\%$ 절감되는 효과가 있다.\n\n예를 들어 3$3$대의 트럭이 거리가 10$10$인 도로를 줄지어 함께 이동하는 경우, 가장 앞선 트럭은 10$10$, 뒤따라오는 두 트럭은 각각 9$9$의 운송비가 필요하므로 총 28$28$의 운송비가 필요하다. 모든 트럭이 화물을 운송하는 데 필요한 운송비의 최솟값을 구해 보자.\n\n\t\t\t\t\n\t\t\t\t"},{"problemId":"31939","content":"\n\t\t\t\t\n\t\t\t\t문제\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t우리가 사는 우주의 물리법칙에 따르면 중력의 크기는 |F→|=|∑Gm1m2r2r^|$\\lvert \\vec{F} \\rvert = \\lvert \\sum {{Gm_1m_2 \\over r^2} \\hat{r}} \\rvert$와 같이 작용한다. 멀티버스 여행을 하던 성재는 중력의 크기가 |F→|=∏|r2Gm1m2|$\\lvert \\vec{F} \\rvert = \\prod \\lvert {r^2 \\over Gm_1m_2} \\rvert$과 같이 작용하는 우주를 찾았다.\n\n계산의 편의를 위해 상수 G$G$와 모든 천체의 질량과 성재의 질량을 1$1$이라고 가정하자.\n\n예를 들어 성재 주위에 3$3$개의 천체가 있고 각각 성재로부터 거리가 2$2$, 3$3$, 5$5$만큼 떨어져 있다면 중력의 크기는 22×32×52=900$2^2 \\times 3^2 \\times 5^2=900$ 이 된다.\n\n2차원 좌표평면 위에 천체 N$N$개가 있고 성재는 원점에서부터 거리 R$R$ 이내의 균등한 확률로 결정된 무작위 위치로 순간이동한다. 이때 성재가 받게 될 중력의 크기의 기댓값을 구해 보자.\n\n\t\t\t\t\n\t\t\t\t"}]